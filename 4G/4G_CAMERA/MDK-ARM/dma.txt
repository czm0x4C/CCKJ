; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\dma.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\dma.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\dma.crf ../Core/Src/dma.c]
                          THUMB

                          AREA ||i.DCMI_DMA_Init||, CODE, READONLY, ALIGN=2

                  DCMI_DMA_Init PROC
;;;56     /* USER CODE BEGIN 2 */
;;;57     void DCMI_DMA_Init(unsigned int memaddr,unsigned short memsize,unsigned int memblen,unsigned int meminc)
000000  b5f8              PUSH     {r3-r7,lr}
;;;58     { 
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;59         __HAL_RCC_DMA2_CLK_ENABLE();                                    //使能DMA2时钟
00000a  bf00              NOP      
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  481f              LDR      r0,|L1.144|
000012  6800              LDR      r0,[r0,#0]
000014  f4400080          ORR      r0,r0,#0x400000
000018  491d              LDR      r1,|L1.144|
00001a  6008              STR      r0,[r1,#0]
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]
000020  f4000080          AND      r0,r0,#0x400000
000024  9000              STR      r0,[sp,#0]
000026  bf00              NOP      
000028  bf00              NOP      
;;;60         __HAL_LINKDMA(&hdcmi,DMA_Handle,hdma_dcmi);        //将DMA与DCMI联系起来
00002a  bf00              NOP      
00002c  4819              LDR      r0,|L1.148|
00002e  491a              LDR      r1,|L1.152|
000030  6388              STR      r0,[r1,#0x38]  ; hdcmi
000032  4608              MOV      r0,r1
000034  4917              LDR      r1,|L1.148|
000036  6388              STR      r0,[r1,#0x38]  ; hdma_dcmi
000038  bf00              NOP      
;;;61     	
;;;62         hdma_dcmi.Instance=DMA2_Stream1;                          //DMA2数据流1                     
00003a  4818              LDR      r0,|L1.156|
00003c  6008              STR      r0,[r1,#0]  ; hdma_dcmi
;;;63         hdma_dcmi.Init.Channel=DMA_CHANNEL_1;                     //通道1
00003e  f04f7000          MOV      r0,#0x2000000
000042  6048              STR      r0,[r1,#4]  ; hdma_dcmi
;;;64         hdma_dcmi.Init.Direction=DMA_PERIPH_TO_MEMORY;            //外设到存储器
000044  2100              MOVS     r1,#0
000046  4813              LDR      r0,|L1.148|
000048  6081              STR      r1,[r0,#8]
;;;65         hdma_dcmi.Init.PeriphInc=DMA_PINC_DISABLE;                //外设非增量模式
00004a  60c1              STR      r1,[r0,#0xc]
;;;66         hdma_dcmi.Init.MemInc=meminc;                             //存储器增量模式
00004c  6107              STR      r7,[r0,#0x10]
;;;67         hdma_dcmi.Init.PeriphDataAlignment=DMA_PDATAALIGN_WORD;   //外设数据长度:32位
00004e  f44f5180          MOV      r1,#0x1000
000052  6141              STR      r1,[r0,#0x14]
;;;68         hdma_dcmi.Init.MemDataAlignment=memblen;                  //存储器数据长度:8/16/32位
000054  6186              STR      r6,[r0,#0x18]
;;;69         hdma_dcmi.Init.Mode=DMA_CIRCULAR;                         //使用循环模式 
000056  1109              ASRS     r1,r1,#4
000058  61c1              STR      r1,[r0,#0x1c]
;;;70         hdma_dcmi.Init.Priority=DMA_PRIORITY_HIGH;                //高优先级
00005a  0249              LSLS     r1,r1,#9
00005c  6201              STR      r1,[r0,#0x20]
;;;71         hdma_dcmi.Init.FIFOMode=DMA_FIFOMODE_ENABLE;              //使能FIFO
00005e  2104              MOVS     r1,#4
000060  6241              STR      r1,[r0,#0x24]
;;;72         hdma_dcmi.Init.FIFOThreshold=DMA_FIFO_THRESHOLD_HALFFULL; //使用1/2的FIFO 
000062  2101              MOVS     r1,#1
000064  6281              STR      r1,[r0,#0x28]
;;;73         hdma_dcmi.Init.MemBurst=DMA_MBURST_SINGLE;                //存储器突发传输
000066  2100              MOVS     r1,#0
000068  62c1              STR      r1,[r0,#0x2c]
;;;74         hdma_dcmi.Init.PeriphBurst=DMA_PBURST_SINGLE;             //外设突发单次传输 
00006a  6301              STR      r1,[r0,#0x30]
;;;75         HAL_DMA_DeInit(&hdma_dcmi);                               //先清除以前的设置
00006c  f7fffffe          BL       HAL_DMA_DeInit
;;;76         HAL_DMA_Init(&hdma_dcmi);	                                //初始化DMA
000070  4808              LDR      r0,|L1.148|
000072  f7fffffe          BL       HAL_DMA_Init
;;;77         
;;;78         //在开启DMA之前先使用__HAL_UNLOCK()解锁一次DMA,因为HAL_DMA_Statrt()HAL_DMAEx_MultiBufferStart()
;;;79         //这两个函数一开始要先使用__HAL_LOCK()锁定DMA,而函数__HAL_LOCK()会判断当前的DMA状态是否为锁定状态，如果是
;;;80         //锁定状态的话就直接返回HAL_BUSY，这样会导致函数HAL_DMA_Statrt()和HAL_DMAEx_MultiBufferStart()后续的DMA配置
;;;81         //程序直接被跳过！DMA也就不能正常工作，为了避免这种现象，所以在启动DMA之前先调用__HAL_UNLOC()先解锁一次DMA。
;;;82         __HAL_UNLOCK(&hdma_dcmi);
000076  bf00              NOP      
000078  2000              MOVS     r0,#0
00007a  4906              LDR      r1,|L1.148|
00007c  f8810034          STRB     r0,[r1,#0x34]
000080  bf00              NOP      
;;;83     
;;;84     	HAL_DMA_Start(&hdma_dcmi,(unsigned int)&DCMI->DR,memaddr,memsize);
000082  462b              MOV      r3,r5
000084  4622              MOV      r2,r4
000086  4906              LDR      r1,|L1.160|
000088  4802              LDR      r0,|L1.148|
00008a  f7fffffe          BL       HAL_DMA_Start
;;;85     }
00008e  bdf8              POP      {r3-r7,pc}
;;;86     /* USER CODE END 2 */
                          ENDP

                  |L1.144|
                          DCD      0x40023830
                  |L1.148|
                          DCD      hdma_dcmi
                  |L1.152|
                          DCD      hdcmi
                  |L1.156|
                          DCD      0x40026428
                  |L1.160|
                          DCD      0x50050028

                          AREA ||i.MX_DMA_Init||, CODE, READONLY, ALIGN=2

                  MX_DMA_Init PROC
;;;38       */
;;;39     void MX_DMA_Init(void)
000000  b508              PUSH     {r3,lr}
;;;40     {
;;;41     
;;;42       /* DMA controller clock enable */
;;;43       __HAL_RCC_DMA2_CLK_ENABLE();
000002  bf00              NOP      
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  4816              LDR      r0,|L2.100|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4400080          ORR      r0,r0,#0x400000
000010  4914              LDR      r1,|L2.100|
000012  6008              STR      r0,[r1,#0]
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]
000018  f4000080          AND      r0,r0,#0x400000
00001c  9000              STR      r0,[sp,#0]
00001e  bf00              NOP      
000020  bf00              NOP      
;;;44       __HAL_RCC_DMA1_CLK_ENABLE();
000022  bf00              NOP      
000024  2000              MOVS     r0,#0
000026  9000              STR      r0,[sp,#0]
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  f4401000          ORR      r0,r0,#0x200000
000030  6008              STR      r0,[r1,#0]
000032  4608              MOV      r0,r1
000034  6800              LDR      r0,[r0,#0]
000036  f4001000          AND      r0,r0,#0x200000
00003a  9000              STR      r0,[sp,#0]
00003c  bf00              NOP      
00003e  bf00              NOP      
;;;45     
;;;46       /* DMA interrupt init */
;;;47       /* DMA1_Stream0_IRQn interrupt configuration */
;;;48       HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
000040  2200              MOVS     r2,#0
000042  2105              MOVS     r1,#5
000044  200b              MOVS     r0,#0xb
000046  f7fffffe          BL       HAL_NVIC_SetPriority
;;;49       HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
00004a  200b              MOVS     r0,#0xb
00004c  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;50       /* DMA2_Stream1_IRQn interrupt configuration */
;;;51       HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
000050  2200              MOVS     r2,#0
000052  2105              MOVS     r1,#5
000054  2039              MOVS     r0,#0x39
000056  f7fffffe          BL       HAL_NVIC_SetPriority
;;;52       HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
00005a  2039              MOVS     r0,#0x39
00005c  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;53     
;;;54     }
000060  bd08              POP      {r3,pc}
;;;55     
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      0x40023830

;*** Start embedded assembler ***

#line 1 "../Core/Src/dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_dma_c_c03d6034____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___5_dma_c_c03d6034____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_dma_c_c03d6034____REVSH|
#line 478
|__asm___5_dma_c_c03d6034____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_dma_c_c03d6034____RRX|
#line 665
|__asm___5_dma_c_c03d6034____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
