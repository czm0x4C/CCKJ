; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_tim.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_tim.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_tim.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c]
                          THUMB

                          AREA ||i.HAL_TIM_Base_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_DeInit PROC
;;;324      */
;;;325    HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;326    {
000002  4604              MOV      r4,r0
;;;327      /* Check the parameters */
;;;328      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;329    
;;;330      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  f884003d          STRB     r0,[r4,#0x3d]
;;;331    
;;;332      /* Disable the TIM Peripheral Clock */
;;;333      __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f2411111          MOV      r1,#0x1111
000014  4008              ANDS     r0,r0,r1
000016  b950              CBNZ     r0,|L1.46|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  b928              CBNZ     r0,|L1.46|
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
                  |L1.46|
00002e  bf00              NOP      
;;;334    
;;;335    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;336      if (htim->Base_MspDeInitCallback == NULL)
;;;337      {
;;;338        htim->Base_MspDeInitCallback = HAL_TIM_Base_MspDeInit;
;;;339      }
;;;340      /* DeInit the low level hardware */
;;;341      htim->Base_MspDeInitCallback(htim);
;;;342    #else
;;;343      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;344      HAL_TIM_Base_MspDeInit(htim);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_TIM_Base_MspDeInit
;;;345    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;346    
;;;347      /* Change the DMA burst operation state */
;;;348      htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
000036  2000              MOVS     r0,#0
000038  f8840046          STRB     r0,[r4,#0x46]
;;;349    
;;;350      /* Change the TIM channels state */
;;;351      TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
00003c  bf00              NOP      
00003e  f884003e          STRB     r0,[r4,#0x3e]
000042  2100              MOVS     r1,#0
000044  203f              MOVS     r0,#0x3f
000046  5501              STRB     r1,[r0,r4]
000048  2040              MOVS     r0,#0x40
00004a  5501              STRB     r1,[r0,r4]
00004c  2041              MOVS     r0,#0x41
00004e  5501              STRB     r1,[r0,r4]
000050  bf00              NOP      
;;;352      TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
000052  bf00              NOP      
000054  2000              MOVS     r0,#0
000056  f8840042          STRB     r0,[r4,#0x42]
00005a  2043              MOVS     r0,#0x43
00005c  5501              STRB     r1,[r0,r4]
00005e  2044              MOVS     r0,#0x44
000060  5501              STRB     r1,[r0,r4]
000062  2045              MOVS     r0,#0x45
000064  5501              STRB     r1,[r0,r4]
000066  bf00              NOP      
;;;353    
;;;354      /* Change TIM state */
;;;355      htim->State = HAL_TIM_STATE_RESET;
000068  2000              MOVS     r0,#0
00006a  f884003d          STRB     r0,[r4,#0x3d]
;;;356    
;;;357      /* Release Lock */
;;;358      __HAL_UNLOCK(htim);
00006e  bf00              NOP      
000070  f884003c          STRB     r0,[r4,#0x3c]
000074  bf00              NOP      
;;;359    
;;;360      return HAL_OK;
;;;361    }
000076  bd10              POP      {r4,pc}
;;;362    
                          ENDP


                          AREA ||i.HAL_TIM_Base_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_GetState PROC
;;;6337     */
;;;6338   HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;6339   {
;;;6340     return htim->State;
000002  f891003d          LDRB     r0,[r1,#0x3d]
;;;6341   }
000006  4770              BX       lr
;;;6342   
                          ENDP


                          AREA ||i.HAL_TIM_Base_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Init PROC
;;;265      */
;;;266    HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;267    {
000002  4604              MOV      r4,r0
;;;268      /* Check the TIM handle allocation */
;;;269      if (htim == NULL)
000004  b90c              CBNZ     r4,|L3.10|
;;;270      {
;;;271        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L3.8|
;;;272      }
;;;273    
;;;274      /* Check the parameters */
;;;275      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;276      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;277      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;278      assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;279    
;;;280      if (htim->State == HAL_TIM_STATE_RESET)
;;;281      {
;;;282        /* Allocate lock resource and initialize it */
;;;283        htim->Lock = HAL_UNLOCKED;
;;;284    
;;;285    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;286        /* Reset interrupt callbacks to legacy weak callbacks */
;;;287        TIM_ResetCallback(htim);
;;;288    
;;;289        if (htim->Base_MspInitCallback == NULL)
;;;290        {
;;;291          htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
;;;292        }
;;;293        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;294        htim->Base_MspInitCallback(htim);
;;;295    #else
;;;296        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;297        HAL_TIM_Base_MspInit(htim);
;;;298    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;299      }
;;;300    
;;;301      /* Set the TIM state */
;;;302      htim->State = HAL_TIM_STATE_BUSY;
;;;303    
;;;304      /* Set the Time Base configuration */
;;;305      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;306    
;;;307      /* Initialize the DMA burst operation state */
;;;308      htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
;;;309    
;;;310      /* Initialize the TIM channels state */
;;;311      TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
;;;312      TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
;;;313    
;;;314      /* Initialize the TIM state*/
;;;315      htim->State = HAL_TIM_STATE_READY;
;;;316    
;;;317      return HAL_OK;
;;;318    }
000008  bd10              POP      {r4,pc}
                  |L3.10|
00000a  f894003d          LDRB     r0,[r4,#0x3d]         ;280
00000e  b928              CBNZ     r0,|L3.28|
000010  2000              MOVS     r0,#0                 ;283
000012  f884003c          STRB     r0,[r4,#0x3c]         ;283
000016  4620              MOV      r0,r4                 ;297
000018  f7fffffe          BL       HAL_TIM_Base_MspInit
                  |L3.28|
00001c  2002              MOVS     r0,#2                 ;302
00001e  f884003d          STRB     r0,[r4,#0x3d]         ;302
000022  1d21              ADDS     r1,r4,#4              ;305
000024  6820              LDR      r0,[r4,#0]            ;305
000026  f7fffffe          BL       TIM_Base_SetConfig
00002a  2001              MOVS     r0,#1                 ;308
00002c  f8840046          STRB     r0,[r4,#0x46]         ;308
000030  bf00              NOP                            ;311
000032  f884003e          STRB     r0,[r4,#0x3e]         ;311
000036  2101              MOVS     r1,#1                 ;311
000038  203f              MOVS     r0,#0x3f              ;311
00003a  5501              STRB     r1,[r0,r4]            ;311
00003c  2040              MOVS     r0,#0x40              ;311
00003e  5501              STRB     r1,[r0,r4]            ;311
000040  2041              MOVS     r0,#0x41              ;311
000042  5501              STRB     r1,[r0,r4]            ;311
000044  bf00              NOP                            ;311
000046  bf00              NOP                            ;312
000048  2001              MOVS     r0,#1                 ;312
00004a  f8840042          STRB     r0,[r4,#0x42]         ;312
00004e  2043              MOVS     r0,#0x43              ;312
000050  5501              STRB     r1,[r0,r4]            ;312
000052  2044              MOVS     r0,#0x44              ;312
000054  5501              STRB     r1,[r0,r4]            ;312
000056  2045              MOVS     r0,#0x45              ;312
000058  5501              STRB     r1,[r0,r4]            ;312
00005a  bf00              NOP                            ;312
00005c  2001              MOVS     r0,#1                 ;315
00005e  f884003d          STRB     r0,[r4,#0x3d]         ;315
000062  2000              MOVS     r0,#0                 ;317
000064  e7d0              B        |L3.8|
;;;319    
                          ENDP


                          AREA ||i.HAL_TIM_Base_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_MspDeInit PROC
;;;382      */
;;;383    __weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;384    {
;;;385      /* Prevent unused argument(s) compilation warning */
;;;386      UNUSED(htim);
;;;387    
;;;388      /* NOTE : This function should not be modified, when the callback is needed,
;;;389                the HAL_TIM_Base_MspDeInit could be implemented in the user file
;;;390       */
;;;391    }
;;;392    
                          ENDP


                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_MspInit PROC
;;;367      */
;;;368    __weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;369    {
;;;370      /* Prevent unused argument(s) compilation warning */
;;;371      UNUSED(htim);
;;;372    
;;;373      /* NOTE : This function should not be modified, when the callback is needed,
;;;374                the HAL_TIM_Base_MspInit could be implemented in the user file
;;;375       */
;;;376    }
;;;377    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Start||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_Start PROC
;;;398      */
;;;399    HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;400    {
;;;401      uint32_t tmpsmcr;
;;;402    
;;;403      /* Check the parameters */
;;;404      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;405    
;;;406      /* Check the TIM state */
;;;407      if (htim->State != HAL_TIM_STATE_READY)
000002  f891003d          LDRB     r0,[r1,#0x3d]
000006  2801              CMP      r0,#1
000008  d001              BEQ      |L6.14|
;;;408      {
;;;409        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L6.12|
;;;410      }
;;;411    
;;;412      /* Set the TIM state */
;;;413      htim->State = HAL_TIM_STATE_BUSY;
;;;414    
;;;415      /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;416      if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;417      {
;;;418        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;419        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;420        {
;;;421          __HAL_TIM_ENABLE(htim);
;;;422        }
;;;423      }
;;;424      else
;;;425      {
;;;426        __HAL_TIM_ENABLE(htim);
;;;427      }
;;;428    
;;;429      /* Return function status */
;;;430      return HAL_OK;
;;;431    }
00000c  4770              BX       lr
                  |L6.14|
00000e  2002              MOVS     r0,#2                 ;413
000010  f881003d          STRB     r0,[r1,#0x3d]         ;413
000014  4b1a              LDR      r3,|L6.128|
000016  6808              LDR      r0,[r1,#0]            ;416
000018  4298              CMP      r0,r3                 ;416
00001a  d01b              BEQ      |L6.84|
00001c  6808              LDR      r0,[r1,#0]            ;416
00001e  f1b04f80          CMP      r0,#0x40000000        ;416
000022  d017              BEQ      |L6.84|
000024  4b17              LDR      r3,|L6.132|
000026  6808              LDR      r0,[r1,#0]            ;416
000028  4298              CMP      r0,r3                 ;416
00002a  d013              BEQ      |L6.84|
00002c  4b16              LDR      r3,|L6.136|
00002e  6808              LDR      r0,[r1,#0]            ;416
000030  4298              CMP      r0,r3                 ;416
000032  d00f              BEQ      |L6.84|
000034  4b15              LDR      r3,|L6.140|
000036  6808              LDR      r0,[r1,#0]            ;416
000038  4298              CMP      r0,r3                 ;416
00003a  d00b              BEQ      |L6.84|
00003c  4b14              LDR      r3,|L6.144|
00003e  6808              LDR      r0,[r1,#0]            ;416
000040  4298              CMP      r0,r3                 ;416
000042  d007              BEQ      |L6.84|
000044  4b13              LDR      r3,|L6.148|
000046  6808              LDR      r0,[r1,#0]            ;416
000048  4298              CMP      r0,r3                 ;416
00004a  d003              BEQ      |L6.84|
00004c  4b12              LDR      r3,|L6.152|
00004e  6808              LDR      r0,[r1,#0]            ;416
000050  4298              CMP      r0,r3                 ;416
000052  d10c              BNE      |L6.110|
                  |L6.84|
000054  6808              LDR      r0,[r1,#0]            ;418
000056  6880              LDR      r0,[r0,#8]            ;418
000058  f0000207          AND      r2,r0,#7              ;418
00005c  2a06              CMP      r2,#6                 ;419
00005e  d00c              BEQ      |L6.122|
000060  6808              LDR      r0,[r1,#0]            ;421
000062  6800              LDR      r0,[r0,#0]            ;421
000064  f0400001          ORR      r0,r0,#1              ;421
000068  680b              LDR      r3,[r1,#0]            ;421
00006a  6018              STR      r0,[r3,#0]            ;421
00006c  e005              B        |L6.122|
                  |L6.110|
00006e  6808              LDR      r0,[r1,#0]            ;426
000070  6800              LDR      r0,[r0,#0]            ;426
000072  f0400001          ORR      r0,r0,#1              ;426
000076  680b              LDR      r3,[r1,#0]            ;426
000078  6018              STR      r0,[r3,#0]            ;426
                  |L6.122|
00007a  2000              MOVS     r0,#0                 ;430
00007c  e7c6              B        |L6.12|
;;;432    
                          ENDP

00007e  0000              DCW      0x0000
                  |L6.128|
                          DCD      0x40010000
                  |L6.132|
                          DCD      0x40000400
                  |L6.136|
                          DCD      0x40000800
                  |L6.140|
                          DCD      0x40000c00
                  |L6.144|
                          DCD      0x40010400
                  |L6.148|
                          DCD      0x40014000
                  |L6.152|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_Base_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_Start_DMA PROC
;;;524      */
;;;525    HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;526    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;527      uint32_t tmpsmcr;
;;;528    
;;;529      /* Check the parameters */
;;;530      assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
;;;531    
;;;532      /* Set the TIM state */
;;;533      if (htim->State == HAL_TIM_STATE_BUSY)
00000a  f894003d          LDRB     r0,[r4,#0x3d]
00000e  2802              CMP      r0,#2
000010  d101              BNE      |L7.22|
                  |L7.18|
;;;534      {
;;;535        return HAL_BUSY;
;;;536      }
;;;537      else if (htim->State == HAL_TIM_STATE_READY)
;;;538      {
;;;539        if ((pData == NULL) && (Length > 0U))
;;;540        {
;;;541          return HAL_ERROR;
;;;542        }
;;;543        else
;;;544        {
;;;545          htim->State = HAL_TIM_STATE_BUSY;
;;;546        }
;;;547      }
;;;548      else
;;;549      {
;;;550        return HAL_ERROR;
;;;551      }
;;;552    
;;;553      /* Set the DMA Period elapsed callbacks */
;;;554      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;555      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
;;;556    
;;;557      /* Set the DMA error callback */
;;;558      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
;;;559    
;;;560      /* Enable the DMA stream */
;;;561      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR,
;;;562                           Length) != HAL_OK)
;;;563      {
;;;564        /* Return error status */
;;;565        return HAL_ERROR;
;;;566      }
;;;567    
;;;568      /* Enable the TIM Update DMA request */
;;;569      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
;;;570    
;;;571      /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;572      if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;573      {
;;;574        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;575        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;576        {
;;;577          __HAL_TIM_ENABLE(htim);
;;;578        }
;;;579      }
;;;580      else
;;;581      {
;;;582        __HAL_TIM_ENABLE(htim);
;;;583      }
;;;584    
;;;585      /* Return function status */
;;;586      return HAL_OK;
;;;587    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L7.22|
000016  f894003d          LDRB     r0,[r4,#0x3d]         ;537
00001a  2801              CMP      r0,#1                 ;537
00001c  d106              BNE      |L7.44|
00001e  b90e              CBNZ     r6,|L7.36|
000020  b105              CBZ      r5,|L7.36|
000022  e7f6              B        |L7.18|
                  |L7.36|
000024  2002              MOVS     r0,#2                 ;545
000026  f884003d          STRB     r0,[r4,#0x3d]         ;545
00002a  e001              B        |L7.48|
                  |L7.44|
00002c  2001              MOVS     r0,#1                 ;550
00002e  e7f0              B        |L7.18|
                  |L7.48|
000030  4827              LDR      r0,|L7.208|
000032  6a21              LDR      r1,[r4,#0x20]         ;554
000034  63c8              STR      r0,[r1,#0x3c]         ;554
000036  4827              LDR      r0,|L7.212|
000038  6a21              LDR      r1,[r4,#0x20]         ;555
00003a  6408              STR      r0,[r1,#0x40]         ;555
00003c  4826              LDR      r0,|L7.216|
00003e  6a21              LDR      r1,[r4,#0x20]         ;558
000040  64c8              STR      r0,[r1,#0x4c]         ;558
000042  6821              LDR      r1,[r4,#0]            ;561
000044  f101022c          ADD      r2,r1,#0x2c           ;561
000048  462b              MOV      r3,r5                 ;561
00004a  4631              MOV      r1,r6                 ;561
00004c  6a20              LDR      r0,[r4,#0x20]         ;561
00004e  f7fffffe          BL       HAL_DMA_Start_IT
000052  b108              CBZ      r0,|L7.88|
000054  2001              MOVS     r0,#1                 ;565
000056  e7dc              B        |L7.18|
                  |L7.88|
000058  6820              LDR      r0,[r4,#0]            ;569
00005a  68c0              LDR      r0,[r0,#0xc]          ;569
00005c  f4407080          ORR      r0,r0,#0x100          ;569
000060  6821              LDR      r1,[r4,#0]            ;569
000062  60c8              STR      r0,[r1,#0xc]          ;569
000064  491d              LDR      r1,|L7.220|
000066  6820              LDR      r0,[r4,#0]            ;572
000068  4288              CMP      r0,r1                 ;572
00006a  d01b              BEQ      |L7.164|
00006c  6820              LDR      r0,[r4,#0]            ;572
00006e  f1b04f80          CMP      r0,#0x40000000        ;572
000072  d017              BEQ      |L7.164|
000074  491a              LDR      r1,|L7.224|
000076  6820              LDR      r0,[r4,#0]            ;572
000078  4288              CMP      r0,r1                 ;572
00007a  d013              BEQ      |L7.164|
00007c  4919              LDR      r1,|L7.228|
00007e  6820              LDR      r0,[r4,#0]            ;572
000080  4288              CMP      r0,r1                 ;572
000082  d00f              BEQ      |L7.164|
000084  4918              LDR      r1,|L7.232|
000086  6820              LDR      r0,[r4,#0]            ;572
000088  4288              CMP      r0,r1                 ;572
00008a  d00b              BEQ      |L7.164|
00008c  4917              LDR      r1,|L7.236|
00008e  6820              LDR      r0,[r4,#0]            ;572
000090  4288              CMP      r0,r1                 ;572
000092  d007              BEQ      |L7.164|
000094  4916              LDR      r1,|L7.240|
000096  6820              LDR      r0,[r4,#0]            ;572
000098  4288              CMP      r0,r1                 ;572
00009a  d003              BEQ      |L7.164|
00009c  4915              LDR      r1,|L7.244|
00009e  6820              LDR      r0,[r4,#0]            ;572
0000a0  4288              CMP      r0,r1                 ;572
0000a2  d10c              BNE      |L7.190|
                  |L7.164|
0000a4  6820              LDR      r0,[r4,#0]            ;574
0000a6  6880              LDR      r0,[r0,#8]            ;574
0000a8  f0000707          AND      r7,r0,#7              ;574
0000ac  2f06              CMP      r7,#6                 ;575
0000ae  d00c              BEQ      |L7.202|
0000b0  6820              LDR      r0,[r4,#0]            ;577
0000b2  6800              LDR      r0,[r0,#0]            ;577
0000b4  f0400001          ORR      r0,r0,#1              ;577
0000b8  6821              LDR      r1,[r4,#0]            ;577
0000ba  6008              STR      r0,[r1,#0]            ;577
0000bc  e005              B        |L7.202|
                  |L7.190|
0000be  6820              LDR      r0,[r4,#0]            ;582
0000c0  6800              LDR      r0,[r0,#0]            ;582
0000c2  f0400001          ORR      r0,r0,#1              ;582
0000c6  6821              LDR      r1,[r4,#0]            ;582
0000c8  6008              STR      r0,[r1,#0]            ;582
                  |L7.202|
0000ca  2000              MOVS     r0,#0                 ;586
0000cc  e7a1              B        |L7.18|
;;;588    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L7.208|
                          DCD      TIM_DMAPeriodElapsedCplt
                  |L7.212|
                          DCD      TIM_DMAPeriodElapsedHalfCplt
                  |L7.216|
                          DCD      TIM_DMAError
                  |L7.220|
                          DCD      0x40010000
                  |L7.224|
                          DCD      0x40000400
                  |L7.228|
                          DCD      0x40000800
                  |L7.232|
                          DCD      0x40000c00
                  |L7.236|
                          DCD      0x40010400
                  |L7.240|
                          DCD      0x40014000
                  |L7.244|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_Base_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_Start_IT PROC
;;;457      */
;;;458    HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;459    {
;;;460      uint32_t tmpsmcr;
;;;461    
;;;462      /* Check the parameters */
;;;463      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;464    
;;;465      /* Check the TIM state */
;;;466      if (htim->State != HAL_TIM_STATE_READY)
000002  f891003d          LDRB     r0,[r1,#0x3d]
000006  2801              CMP      r0,#1
000008  d001              BEQ      |L8.14|
;;;467      {
;;;468        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;469      }
;;;470    
;;;471      /* Set the TIM state */
;;;472      htim->State = HAL_TIM_STATE_BUSY;
;;;473    
;;;474      /* Enable the TIM Update interrupt */
;;;475      __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
;;;476    
;;;477      /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;478      if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;479      {
;;;480        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;481        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;482        {
;;;483          __HAL_TIM_ENABLE(htim);
;;;484        }
;;;485      }
;;;486      else
;;;487      {
;;;488        __HAL_TIM_ENABLE(htim);
;;;489      }
;;;490    
;;;491      /* Return function status */
;;;492      return HAL_OK;
;;;493    }
00000c  4770              BX       lr
                  |L8.14|
00000e  2002              MOVS     r0,#2                 ;472
000010  f881003d          STRB     r0,[r1,#0x3d]         ;472
000014  6808              LDR      r0,[r1,#0]            ;475
000016  68c0              LDR      r0,[r0,#0xc]          ;475
000018  f0400001          ORR      r0,r0,#1              ;475
00001c  680b              LDR      r3,[r1,#0]            ;475
00001e  60d8              STR      r0,[r3,#0xc]          ;475
000020  4b1a              LDR      r3,|L8.140|
000022  6808              LDR      r0,[r1,#0]            ;478
000024  4298              CMP      r0,r3                 ;478
000026  d01b              BEQ      |L8.96|
000028  6808              LDR      r0,[r1,#0]            ;478
00002a  f1b04f80          CMP      r0,#0x40000000        ;478
00002e  d017              BEQ      |L8.96|
000030  4b17              LDR      r3,|L8.144|
000032  6808              LDR      r0,[r1,#0]            ;478
000034  4298              CMP      r0,r3                 ;478
000036  d013              BEQ      |L8.96|
000038  4b16              LDR      r3,|L8.148|
00003a  6808              LDR      r0,[r1,#0]            ;478
00003c  4298              CMP      r0,r3                 ;478
00003e  d00f              BEQ      |L8.96|
000040  4b15              LDR      r3,|L8.152|
000042  6808              LDR      r0,[r1,#0]            ;478
000044  4298              CMP      r0,r3                 ;478
000046  d00b              BEQ      |L8.96|
000048  4b14              LDR      r3,|L8.156|
00004a  6808              LDR      r0,[r1,#0]            ;478
00004c  4298              CMP      r0,r3                 ;478
00004e  d007              BEQ      |L8.96|
000050  4b13              LDR      r3,|L8.160|
000052  6808              LDR      r0,[r1,#0]            ;478
000054  4298              CMP      r0,r3                 ;478
000056  d003              BEQ      |L8.96|
000058  4b12              LDR      r3,|L8.164|
00005a  6808              LDR      r0,[r1,#0]            ;478
00005c  4298              CMP      r0,r3                 ;478
00005e  d10c              BNE      |L8.122|
                  |L8.96|
000060  6808              LDR      r0,[r1,#0]            ;480
000062  6880              LDR      r0,[r0,#8]            ;480
000064  f0000207          AND      r2,r0,#7              ;480
000068  2a06              CMP      r2,#6                 ;481
00006a  d00c              BEQ      |L8.134|
00006c  6808              LDR      r0,[r1,#0]            ;483
00006e  6800              LDR      r0,[r0,#0]            ;483
000070  f0400001          ORR      r0,r0,#1              ;483
000074  680b              LDR      r3,[r1,#0]            ;483
000076  6018              STR      r0,[r3,#0]            ;483
000078  e005              B        |L8.134|
                  |L8.122|
00007a  6808              LDR      r0,[r1,#0]            ;488
00007c  6800              LDR      r0,[r0,#0]            ;488
00007e  f0400001          ORR      r0,r0,#1              ;488
000082  680b              LDR      r3,[r1,#0]            ;488
000084  6018              STR      r0,[r3,#0]            ;488
                  |L8.134|
000086  2000              MOVS     r0,#0                 ;492
000088  e7c0              B        |L8.12|
;;;494    
                          ENDP

00008a  0000              DCW      0x0000
                  |L8.140|
                          DCD      0x40010000
                  |L8.144|
                          DCD      0x40000400
                  |L8.148|
                          DCD      0x40000800
                  |L8.152|
                          DCD      0x40000c00
                  |L8.156|
                          DCD      0x40010400
                  |L8.160|
                          DCD      0x40014000
                  |L8.164|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_Base_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Stop PROC
;;;437      */
;;;438    HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;439    {
;;;440      /* Check the parameters */
;;;441      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;442    
;;;443      /* Disable the Peripheral */
;;;444      __HAL_TIM_DISABLE(htim);
000002  bf00              NOP      
000004  6808              LDR      r0,[r1,#0]
000006  6a00              LDR      r0,[r0,#0x20]
000008  f2411211          MOV      r2,#0x1111
00000c  4010              ANDS     r0,r0,r2
00000e  b950              CBNZ     r0,|L9.38|
000010  6808              LDR      r0,[r1,#0]
000012  6a00              LDR      r0,[r0,#0x20]
000014  1092              ASRS     r2,r2,#2
000016  4010              ANDS     r0,r0,r2
000018  b928              CBNZ     r0,|L9.38|
00001a  6808              LDR      r0,[r1,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  f0200001          BIC      r0,r0,#1
000022  680a              LDR      r2,[r1,#0]
000024  6010              STR      r0,[r2,#0]
                  |L9.38|
000026  bf00              NOP      
;;;445    
;;;446      /* Set the TIM state */
;;;447      htim->State = HAL_TIM_STATE_READY;
000028  2001              MOVS     r0,#1
00002a  f881003d          STRB     r0,[r1,#0x3d]
;;;448    
;;;449      /* Return function status */
;;;450      return HAL_OK;
00002e  2000              MOVS     r0,#0
;;;451    }
000030  4770              BX       lr
;;;452    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Stop_DMA PROC
;;;593      */
;;;594    HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;595    {
000002  4604              MOV      r4,r0
;;;596      /* Check the parameters */
;;;597      assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));
;;;598    
;;;599      /* Disable the TIM Update DMA request */
;;;600      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
000004  6820              LDR      r0,[r4,#0]
000006  68c0              LDR      r0,[r0,#0xc]
000008  f4207080          BIC      r0,r0,#0x100
00000c  6821              LDR      r1,[r4,#0]
00000e  60c8              STR      r0,[r1,#0xc]
;;;601    
;;;602      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
000010  6a20              LDR      r0,[r4,#0x20]
000012  f7fffffe          BL       HAL_DMA_Abort_IT
;;;603    
;;;604      /* Disable the Peripheral */
;;;605      __HAL_TIM_DISABLE(htim);
000016  bf00              NOP      
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  f2411111          MOV      r1,#0x1111
000020  4008              ANDS     r0,r0,r1
000022  b950              CBNZ     r0,|L10.58|
000024  6820              LDR      r0,[r4,#0]
000026  6a00              LDR      r0,[r0,#0x20]
000028  1089              ASRS     r1,r1,#2
00002a  4008              ANDS     r0,r0,r1
00002c  b928              CBNZ     r0,|L10.58|
00002e  6820              LDR      r0,[r4,#0]
000030  6800              LDR      r0,[r0,#0]
000032  f0200001          BIC      r0,r0,#1
000036  6821              LDR      r1,[r4,#0]
000038  6008              STR      r0,[r1,#0]
                  |L10.58|
00003a  bf00              NOP      
;;;606    
;;;607      /* Set the TIM state */
;;;608      htim->State = HAL_TIM_STATE_READY;
00003c  2001              MOVS     r0,#1
00003e  f884003d          STRB     r0,[r4,#0x3d]
;;;609    
;;;610      /* Return function status */
;;;611      return HAL_OK;
000042  2000              MOVS     r0,#0
;;;612    }
000044  bd10              POP      {r4,pc}
;;;613    
                          ENDP


                          AREA ||i.HAL_TIM_Base_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Base_Stop_IT PROC
;;;499      */
;;;500    HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;501    {
;;;502      /* Check the parameters */
;;;503      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;504    
;;;505      /* Disable the TIM Update interrupt */
;;;506      __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
000002  6808              LDR      r0,[r1,#0]
000004  68c0              LDR      r0,[r0,#0xc]
000006  f0200001          BIC      r0,r0,#1
00000a  680a              LDR      r2,[r1,#0]
00000c  60d0              STR      r0,[r2,#0xc]
;;;507    
;;;508      /* Disable the Peripheral */
;;;509      __HAL_TIM_DISABLE(htim);
00000e  bf00              NOP      
000010  6808              LDR      r0,[r1,#0]
000012  6a00              LDR      r0,[r0,#0x20]
000014  f2411211          MOV      r2,#0x1111
000018  4010              ANDS     r0,r0,r2
00001a  b950              CBNZ     r0,|L11.50|
00001c  6808              LDR      r0,[r1,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  1092              ASRS     r2,r2,#2
000022  4010              ANDS     r0,r0,r2
000024  b928              CBNZ     r0,|L11.50|
000026  6808              LDR      r0,[r1,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  f0200001          BIC      r0,r0,#1
00002e  680a              LDR      r2,[r1,#0]
000030  6010              STR      r0,[r2,#0]
                  |L11.50|
000032  bf00              NOP      
;;;510    
;;;511      /* Set the TIM state */
;;;512      htim->State = HAL_TIM_STATE_READY;
000034  2001              MOVS     r0,#1
000036  f881003d          STRB     r0,[r1,#0x3d]
;;;513    
;;;514      /* Return function status */
;;;515      return HAL_OK;
00003a  2000              MOVS     r0,#0
;;;516    }
00003c  4770              BX       lr
;;;517    
                          ENDP


                          AREA ||i.HAL_TIM_ConfigClockSource||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigClockSource PROC
;;;5291     */
;;;5292   HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;5293   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;5294     HAL_StatusTypeDef status = HAL_OK;
000008  2700              MOVS     r7,#0
;;;5295     uint32_t tmpsmcr;
;;;5296   
;;;5297     /* Process Locked */
;;;5298     __HAL_LOCK(htim);
00000a  bf00              NOP      
00000c  f894003c          LDRB     r0,[r4,#0x3c]
000010  2801              CMP      r0,#1
000012  d102              BNE      |L12.26|
000014  2002              MOVS     r0,#2
                  |L12.22|
;;;5299   
;;;5300     htim->State = HAL_TIM_STATE_BUSY;
;;;5301   
;;;5302     /* Check the parameters */
;;;5303     assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
;;;5304   
;;;5305     /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
;;;5306     tmpsmcr = htim->Instance->SMCR;
;;;5307     tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
;;;5308     tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
;;;5309     htim->Instance->SMCR = tmpsmcr;
;;;5310   
;;;5311     switch (sClockSourceConfig->ClockSource)
;;;5312     {
;;;5313       case TIM_CLOCKSOURCE_INTERNAL:
;;;5314       {
;;;5315         assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;5316         break;
;;;5317       }
;;;5318   
;;;5319       case TIM_CLOCKSOURCE_ETRMODE1:
;;;5320       {
;;;5321         /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
;;;5322         assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
;;;5323   
;;;5324         /* Check ETR input conditioning related parameters */
;;;5325         assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
;;;5326         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;5327         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;5328   
;;;5329         /* Configure the ETR Clock source */
;;;5330         TIM_ETR_SetConfig(htim->Instance,
;;;5331                           sClockSourceConfig->ClockPrescaler,
;;;5332                           sClockSourceConfig->ClockPolarity,
;;;5333                           sClockSourceConfig->ClockFilter);
;;;5334   
;;;5335         /* Select the External clock mode1 and the ETRF trigger */
;;;5336         tmpsmcr = htim->Instance->SMCR;
;;;5337         tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
;;;5338         /* Write to TIMx SMCR */
;;;5339         htim->Instance->SMCR = tmpsmcr;
;;;5340         break;
;;;5341       }
;;;5342   
;;;5343       case TIM_CLOCKSOURCE_ETRMODE2:
;;;5344       {
;;;5345         /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
;;;5346         assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
;;;5347   
;;;5348         /* Check ETR input conditioning related parameters */
;;;5349         assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
;;;5350         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;5351         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;5352   
;;;5353         /* Configure the ETR Clock source */
;;;5354         TIM_ETR_SetConfig(htim->Instance,
;;;5355                           sClockSourceConfig->ClockPrescaler,
;;;5356                           sClockSourceConfig->ClockPolarity,
;;;5357                           sClockSourceConfig->ClockFilter);
;;;5358         /* Enable the External clock mode2 */
;;;5359         htim->Instance->SMCR |= TIM_SMCR_ECE;
;;;5360         break;
;;;5361       }
;;;5362   
;;;5363       case TIM_CLOCKSOURCE_TI1:
;;;5364       {
;;;5365         /* Check whether or not the timer instance supports external clock mode 1 */
;;;5366         assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
;;;5367   
;;;5368         /* Check TI1 input conditioning related parameters */
;;;5369         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;5370         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;5371   
;;;5372         TIM_TI1_ConfigInputStage(htim->Instance,
;;;5373                                  sClockSourceConfig->ClockPolarity,
;;;5374                                  sClockSourceConfig->ClockFilter);
;;;5375         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
;;;5376         break;
;;;5377       }
;;;5378   
;;;5379       case TIM_CLOCKSOURCE_TI2:
;;;5380       {
;;;5381         /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
;;;5382         assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
;;;5383   
;;;5384         /* Check TI2 input conditioning related parameters */
;;;5385         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;5386         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;5387   
;;;5388         TIM_TI2_ConfigInputStage(htim->Instance,
;;;5389                                  sClockSourceConfig->ClockPolarity,
;;;5390                                  sClockSourceConfig->ClockFilter);
;;;5391         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
;;;5392         break;
;;;5393       }
;;;5394   
;;;5395       case TIM_CLOCKSOURCE_TI1ED:
;;;5396       {
;;;5397         /* Check whether or not the timer instance supports external clock mode 1 */
;;;5398         assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
;;;5399   
;;;5400         /* Check TI1 input conditioning related parameters */
;;;5401         assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
;;;5402         assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
;;;5403   
;;;5404         TIM_TI1_ConfigInputStage(htim->Instance,
;;;5405                                  sClockSourceConfig->ClockPolarity,
;;;5406                                  sClockSourceConfig->ClockFilter);
;;;5407         TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
;;;5408         break;
;;;5409       }
;;;5410   
;;;5411       case TIM_CLOCKSOURCE_ITR0:
;;;5412       case TIM_CLOCKSOURCE_ITR1:
;;;5413       case TIM_CLOCKSOURCE_ITR2:
;;;5414       case TIM_CLOCKSOURCE_ITR3:
;;;5415       {
;;;5416         /* Check whether or not the timer instance supports internal trigger input */
;;;5417         assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
;;;5418   
;;;5419         TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
;;;5420         break;
;;;5421       }
;;;5422   
;;;5423       default:
;;;5424         status = HAL_ERROR;
;;;5425         break;
;;;5426     }
;;;5427     htim->State = HAL_TIM_STATE_READY;
;;;5428   
;;;5429     __HAL_UNLOCK(htim);
;;;5430   
;;;5431     return status;
;;;5432   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L12.26|
00001a  2001              MOVS     r0,#1                 ;5298
00001c  f884003c          STRB     r0,[r4,#0x3c]         ;5298
000020  bf00              NOP                            ;5298
000022  2002              MOVS     r0,#2                 ;5300
000024  f884003d          STRB     r0,[r4,#0x3d]         ;5300
000028  6820              LDR      r0,[r4,#0]            ;5306
00002a  6886              LDR      r6,[r0,#8]            ;5306
00002c  f0260677          BIC      r6,r6,#0x77           ;5307
000030  f426467f          BIC      r6,r6,#0xff00         ;5308
000034  6820              LDR      r0,[r4,#0]            ;5309
000036  6086              STR      r6,[r0,#8]            ;5309
000038  6828              LDR      r0,[r5,#0]            ;5311
00003a  2850              CMP      r0,#0x50              ;5311
00003c  d033              BEQ      |L12.166|
00003e  dc0c              BGT      |L12.90|
000040  2820              CMP      r0,#0x20              ;5311
000042  d050              BEQ      |L12.230|
000044  dc04              BGT      |L12.80|
000046  2800              CMP      r0,#0                 ;5311
000048  d04b              BEQ      |L12.226|
00004a  2810              CMP      r0,#0x10              ;5311
00004c  d151              BNE      |L12.242|
00004e  e049              B        |L12.228|
                  |L12.80|
000050  2830              CMP      r0,#0x30              ;5311
000052  d049              BEQ      |L12.232|
000054  2840              CMP      r0,#0x40              ;5311
000056  d14c              BNE      |L12.242|
000058  e039              B        |L12.206|
                  |L12.90|
00005a  2860              CMP      r0,#0x60              ;5311
00005c  d02d              BEQ      |L12.186|
00005e  2870              CMP      r0,#0x70              ;5311
000060  d007              BEQ      |L12.114|
000062  f5b05f80          CMP      r0,#0x1000            ;5311
000066  d003              BEQ      |L12.112|
000068  f5b05f00          CMP      r0,#0x2000            ;5311
00006c  d141              BNE      |L12.242|
00006e  e00d              B        |L12.140|
                  |L12.112|
000070  e041              B        |L12.246|
                  |L12.114|
000072  e9d51302          LDRD     r1,r3,[r5,#8]         ;5330
000076  686a              LDR      r2,[r5,#4]            ;5330
000078  6820              LDR      r0,[r4,#0]            ;5330
00007a  f7fffffe          BL       TIM_ETR_SetConfig
00007e  6820              LDR      r0,[r4,#0]            ;5336
000080  6886              LDR      r6,[r0,#8]            ;5336
000082  f0460677          ORR      r6,r6,#0x77           ;5337
000086  6820              LDR      r0,[r4,#0]            ;5339
000088  6086              STR      r6,[r0,#8]            ;5339
00008a  e034              B        |L12.246|
                  |L12.140|
00008c  e9d51302          LDRD     r1,r3,[r5,#8]         ;5354
000090  686a              LDR      r2,[r5,#4]            ;5354
000092  6820              LDR      r0,[r4,#0]            ;5354
000094  f7fffffe          BL       TIM_ETR_SetConfig
000098  6820              LDR      r0,[r4,#0]            ;5359
00009a  6880              LDR      r0,[r0,#8]            ;5359
00009c  f4404080          ORR      r0,r0,#0x4000         ;5359
0000a0  6821              LDR      r1,[r4,#0]            ;5359
0000a2  6088              STR      r0,[r1,#8]            ;5359
0000a4  e027              B        |L12.246|
                  |L12.166|
0000a6  68ea              LDR      r2,[r5,#0xc]          ;5372
0000a8  6869              LDR      r1,[r5,#4]            ;5372
0000aa  6820              LDR      r0,[r4,#0]            ;5372
0000ac  f7fffffe          BL       TIM_TI1_ConfigInputStage
0000b0  2150              MOVS     r1,#0x50              ;5375
0000b2  6820              LDR      r0,[r4,#0]            ;5375
0000b4  f7fffffe          BL       TIM_ITRx_SetConfig
0000b8  e01d              B        |L12.246|
                  |L12.186|
0000ba  68ea              LDR      r2,[r5,#0xc]          ;5388
0000bc  6869              LDR      r1,[r5,#4]            ;5388
0000be  6820              LDR      r0,[r4,#0]            ;5388
0000c0  f7fffffe          BL       TIM_TI2_ConfigInputStage
0000c4  2160              MOVS     r1,#0x60              ;5391
0000c6  6820              LDR      r0,[r4,#0]            ;5391
0000c8  f7fffffe          BL       TIM_ITRx_SetConfig
0000cc  e013              B        |L12.246|
                  |L12.206|
0000ce  68ea              LDR      r2,[r5,#0xc]          ;5404
0000d0  6869              LDR      r1,[r5,#4]            ;5404
0000d2  6820              LDR      r0,[r4,#0]            ;5404
0000d4  f7fffffe          BL       TIM_TI1_ConfigInputStage
0000d8  2140              MOVS     r1,#0x40              ;5407
0000da  6820              LDR      r0,[r4,#0]            ;5407
0000dc  f7fffffe          BL       TIM_ITRx_SetConfig
0000e0  e009              B        |L12.246|
                  |L12.226|
0000e2  bf00              NOP                            ;5412
                  |L12.228|
0000e4  bf00              NOP                            ;5413
                  |L12.230|
0000e6  bf00              NOP                            ;5414
                  |L12.232|
0000e8  6829              LDR      r1,[r5,#0]            ;5419
0000ea  6820              LDR      r0,[r4,#0]            ;5419
0000ec  f7fffffe          BL       TIM_ITRx_SetConfig
0000f0  e001              B        |L12.246|
                  |L12.242|
0000f2  2701              MOVS     r7,#1                 ;5424
0000f4  bf00              NOP                            ;5425
                  |L12.246|
0000f6  bf00              NOP                            ;5316
0000f8  2001              MOVS     r0,#1                 ;5427
0000fa  f884003d          STRB     r0,[r4,#0x3d]         ;5427
0000fe  bf00              NOP                            ;5429
000100  2000              MOVS     r0,#0                 ;5429
000102  f884003c          STRB     r0,[r4,#0x3c]         ;5429
000106  bf00              NOP                            ;5429
000108  4638              MOV      r0,r7                 ;5431
00010a  e784              B        |L12.22|
;;;5433   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigOCrefClear||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigOCrefClear PROC
;;;5161     */
;;;5162   HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
000000  b5f0              PUSH     {r4-r7,lr}
;;;5163                                              TIM_ClearInputConfigTypeDef *sClearInputConfig,
;;;5164                                              uint32_t Channel)
;;;5165   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;5166     HAL_StatusTypeDef status = HAL_OK;
000008  2700              MOVS     r7,#0
;;;5167   
;;;5168     /* Check the parameters */
;;;5169     assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
;;;5170     assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));
;;;5171   
;;;5172     /* Process Locked */
;;;5173     __HAL_LOCK(htim);
00000a  bf00              NOP      
00000c  f894003c          LDRB     r0,[r4,#0x3c]
000010  2801              CMP      r0,#1
000012  d101              BNE      |L13.24|
000014  2002              MOVS     r0,#2
                  |L13.22|
;;;5174   
;;;5175     htim->State = HAL_TIM_STATE_BUSY;
;;;5176   
;;;5177     switch (sClearInputConfig->ClearInputSource)
;;;5178     {
;;;5179       case TIM_CLEARINPUTSOURCE_NONE:
;;;5180       {
;;;5181         /* Clear the OCREF clear selection bit and the the ETR Bits */
;;;5182         CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
;;;5183         break;
;;;5184       }
;;;5185   
;;;5186       case TIM_CLEARINPUTSOURCE_ETR:
;;;5187       {
;;;5188         /* Check the parameters */
;;;5189         assert_param(IS_TIM_CLEARINPUT_POLARITY(sClearInputConfig->ClearInputPolarity));
;;;5190         assert_param(IS_TIM_CLEARINPUT_PRESCALER(sClearInputConfig->ClearInputPrescaler));
;;;5191         assert_param(IS_TIM_CLEARINPUT_FILTER(sClearInputConfig->ClearInputFilter));
;;;5192   
;;;5193         /* When OCRef clear feature is used with ETR source, ETR prescaler must be off */
;;;5194         if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
;;;5195         {
;;;5196           htim->State = HAL_TIM_STATE_READY;
;;;5197           __HAL_UNLOCK(htim);
;;;5198           return HAL_ERROR;
;;;5199         }
;;;5200   
;;;5201         TIM_ETR_SetConfig(htim->Instance,
;;;5202                           sClearInputConfig->ClearInputPrescaler,
;;;5203                           sClearInputConfig->ClearInputPolarity,
;;;5204                           sClearInputConfig->ClearInputFilter);
;;;5205         break;
;;;5206       }
;;;5207   
;;;5208       default:
;;;5209         status = HAL_ERROR;
;;;5210         break;
;;;5211     }
;;;5212   
;;;5213     if (status == HAL_OK)
;;;5214     {
;;;5215       switch (Channel)
;;;5216       {
;;;5217         case TIM_CHANNEL_1:
;;;5218         {
;;;5219           if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
;;;5220           {
;;;5221             /* Enable the OCREF clear feature for Channel 1 */
;;;5222             SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
;;;5223           }
;;;5224           else
;;;5225           {
;;;5226             /* Disable the OCREF clear feature for Channel 1 */
;;;5227             CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
;;;5228           }
;;;5229           break;
;;;5230         }
;;;5231         case TIM_CHANNEL_2:
;;;5232         {
;;;5233           if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
;;;5234           {
;;;5235             /* Enable the OCREF clear feature for Channel 2 */
;;;5236             SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
;;;5237           }
;;;5238           else
;;;5239           {
;;;5240             /* Disable the OCREF clear feature for Channel 2 */
;;;5241             CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
;;;5242           }
;;;5243           break;
;;;5244         }
;;;5245         case TIM_CHANNEL_3:
;;;5246         {
;;;5247           if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
;;;5248           {
;;;5249             /* Enable the OCREF clear feature for Channel 3 */
;;;5250             SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
;;;5251           }
;;;5252           else
;;;5253           {
;;;5254             /* Disable the OCREF clear feature for Channel 3 */
;;;5255             CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
;;;5256           }
;;;5257           break;
;;;5258         }
;;;5259         case TIM_CHANNEL_4:
;;;5260         {
;;;5261           if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
;;;5262           {
;;;5263             /* Enable the OCREF clear feature for Channel 4 */
;;;5264             SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
;;;5265           }
;;;5266           else
;;;5267           {
;;;5268             /* Disable the OCREF clear feature for Channel 4 */
;;;5269             CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
;;;5270           }
;;;5271           break;
;;;5272         }
;;;5273         default:
;;;5274           break;
;;;5275       }
;;;5276     }
;;;5277   
;;;5278     htim->State = HAL_TIM_STATE_READY;
;;;5279   
;;;5280     __HAL_UNLOCK(htim);
;;;5281   
;;;5282     return status;
;;;5283   }
000016  bdf0              POP      {r4-r7,pc}
                  |L13.24|
000018  2001              MOVS     r0,#1                 ;5173
00001a  f884003c          STRB     r0,[r4,#0x3c]         ;5173
00001e  bf00              NOP                            ;5173
000020  2002              MOVS     r0,#2                 ;5175
000022  f884003d          STRB     r0,[r4,#0x3d]         ;5175
000026  6868              LDR      r0,[r5,#4]            ;5177
000028  b110              CBZ      r0,|L13.48|
00002a  2801              CMP      r0,#1                 ;5177
00002c  d11a              BNE      |L13.100|
00002e  e006              B        |L13.62|
                  |L13.48|
000030  6820              LDR      r0,[r4,#0]            ;5182
000032  6880              LDR      r0,[r0,#8]            ;5182
000034  f420407f          BIC      r0,r0,#0xff00         ;5182
000038  6821              LDR      r1,[r4,#0]            ;5182
00003a  6088              STR      r0,[r1,#8]            ;5182
00003c  e014              B        |L13.104|
                  |L13.62|
00003e  68e8              LDR      r0,[r5,#0xc]          ;5194
000040  b148              CBZ      r0,|L13.86|
000042  2001              MOVS     r0,#1                 ;5196
000044  f884003d          STRB     r0,[r4,#0x3d]         ;5196
000048  bf00              NOP                            ;5197
00004a  2000              MOVS     r0,#0                 ;5197
00004c  f884003c          STRB     r0,[r4,#0x3c]         ;5197
000050  bf00              NOP                            ;5197
000052  2001              MOVS     r0,#1                 ;5198
000054  e7df              B        |L13.22|
                  |L13.86|
000056  e9d51303          LDRD     r1,r3,[r5,#0xc]       ;5201
00005a  68aa              LDR      r2,[r5,#8]            ;5201
00005c  6820              LDR      r0,[r4,#0]            ;5201
00005e  f7fffffe          BL       TIM_ETR_SetConfig
000062  e001              B        |L13.104|
                  |L13.100|
000064  2701              MOVS     r7,#1                 ;5209
000066  bf00              NOP                            ;5210
                  |L13.104|
000068  bf00              NOP                            ;5183
00006a  2f00              CMP      r7,#0                 ;5213
00006c  d149              BNE      |L13.258|
00006e  b136              CBZ      r6,|L13.126|
000070  2e04              CMP      r6,#4                 ;5215
000072  d014              BEQ      |L13.158|
000074  2e08              CMP      r6,#8                 ;5215
000076  d022              BEQ      |L13.190|
000078  2e0c              CMP      r6,#0xc               ;5215
00007a  d140              BNE      |L13.254|
00007c  e02f              B        |L13.222|
                  |L13.126|
00007e  6828              LDR      r0,[r5,#0]            ;5219
000080  b130              CBZ      r0,|L13.144|
000082  6820              LDR      r0,[r4,#0]            ;5222
000084  6980              LDR      r0,[r0,#0x18]         ;5222
000086  f0400080          ORR      r0,r0,#0x80           ;5222
00008a  6821              LDR      r1,[r4,#0]            ;5222
00008c  6188              STR      r0,[r1,#0x18]         ;5222
00008e  e005              B        |L13.156|
                  |L13.144|
000090  6820              LDR      r0,[r4,#0]            ;5227
000092  6980              LDR      r0,[r0,#0x18]         ;5227
000094  f0200080          BIC      r0,r0,#0x80           ;5227
000098  6821              LDR      r1,[r4,#0]            ;5227
00009a  6188              STR      r0,[r1,#0x18]         ;5227
                  |L13.156|
00009c  e030              B        |L13.256|
                  |L13.158|
00009e  6828              LDR      r0,[r5,#0]            ;5233
0000a0  b130              CBZ      r0,|L13.176|
0000a2  6820              LDR      r0,[r4,#0]            ;5236
0000a4  6980              LDR      r0,[r0,#0x18]         ;5236
0000a6  f4404000          ORR      r0,r0,#0x8000         ;5236
0000aa  6821              LDR      r1,[r4,#0]            ;5236
0000ac  6188              STR      r0,[r1,#0x18]         ;5236
0000ae  e005              B        |L13.188|
                  |L13.176|
0000b0  6820              LDR      r0,[r4,#0]            ;5241
0000b2  6980              LDR      r0,[r0,#0x18]         ;5241
0000b4  f4204000          BIC      r0,r0,#0x8000         ;5241
0000b8  6821              LDR      r1,[r4,#0]            ;5241
0000ba  6188              STR      r0,[r1,#0x18]         ;5241
                  |L13.188|
0000bc  e020              B        |L13.256|
                  |L13.190|
0000be  6828              LDR      r0,[r5,#0]            ;5247
0000c0  b130              CBZ      r0,|L13.208|
0000c2  6820              LDR      r0,[r4,#0]            ;5250
0000c4  69c0              LDR      r0,[r0,#0x1c]         ;5250
0000c6  f0400080          ORR      r0,r0,#0x80           ;5250
0000ca  6821              LDR      r1,[r4,#0]            ;5250
0000cc  61c8              STR      r0,[r1,#0x1c]         ;5250
0000ce  e005              B        |L13.220|
                  |L13.208|
0000d0  6820              LDR      r0,[r4,#0]            ;5255
0000d2  69c0              LDR      r0,[r0,#0x1c]         ;5255
0000d4  f0200080          BIC      r0,r0,#0x80           ;5255
0000d8  6821              LDR      r1,[r4,#0]            ;5255
0000da  61c8              STR      r0,[r1,#0x1c]         ;5255
                  |L13.220|
0000dc  e010              B        |L13.256|
                  |L13.222|
0000de  6828              LDR      r0,[r5,#0]            ;5261
0000e0  b130              CBZ      r0,|L13.240|
0000e2  6820              LDR      r0,[r4,#0]            ;5264
0000e4  69c0              LDR      r0,[r0,#0x1c]         ;5264
0000e6  f4404000          ORR      r0,r0,#0x8000         ;5264
0000ea  6821              LDR      r1,[r4,#0]            ;5264
0000ec  61c8              STR      r0,[r1,#0x1c]         ;5264
0000ee  e005              B        |L13.252|
                  |L13.240|
0000f0  6820              LDR      r0,[r4,#0]            ;5269
0000f2  69c0              LDR      r0,[r0,#0x1c]         ;5269
0000f4  f4204000          BIC      r0,r0,#0x8000         ;5269
0000f8  6821              LDR      r1,[r4,#0]            ;5269
0000fa  61c8              STR      r0,[r1,#0x1c]         ;5269
                  |L13.252|
0000fc  e000              B        |L13.256|
                  |L13.254|
0000fe  bf00              NOP                            ;5274
                  |L13.256|
000100  bf00              NOP                            ;5229
                  |L13.258|
000102  2001              MOVS     r0,#1                 ;5278
000104  f884003d          STRB     r0,[r4,#0x3d]         ;5278
000108  bf00              NOP                            ;5280
00010a  2000              MOVS     r0,#0                 ;5280
00010c  f884003c          STRB     r0,[r4,#0x3c]         ;5280
000110  bf00              NOP                            ;5280
000112  4638              MOV      r0,r7                 ;5282
000114  e77f              B        |L13.22|
;;;5284   
                          ENDP


                          AREA ||i.HAL_TIM_ConfigTI1Input||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ConfigTI1Input PROC
;;;5445     */
;;;5446   HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
000000  4602              MOV      r2,r0
;;;5447   {
000002  460b              MOV      r3,r1
;;;5448     uint32_t tmpcr2;
;;;5449   
;;;5450     /* Check the parameters */
;;;5451     assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
;;;5452     assert_param(IS_TIM_TI1SELECTION(TI1_Selection));
;;;5453   
;;;5454     /* Get the TIMx CR2 register value */
;;;5455     tmpcr2 = htim->Instance->CR2;
000004  6810              LDR      r0,[r2,#0]
000006  6841              LDR      r1,[r0,#4]
;;;5456   
;;;5457     /* Reset the TI1 selection */
;;;5458     tmpcr2 &= ~TIM_CR2_TI1S;
000008  f0210180          BIC      r1,r1,#0x80
;;;5459   
;;;5460     /* Set the TI1 selection */
;;;5461     tmpcr2 |= TI1_Selection;
00000c  4319              ORRS     r1,r1,r3
;;;5462   
;;;5463     /* Write to TIMxCR2 */
;;;5464     htim->Instance->CR2 = tmpcr2;
00000e  6810              LDR      r0,[r2,#0]
000010  6041              STR      r1,[r0,#4]
;;;5465   
;;;5466     return HAL_OK;
000012  2000              MOVS     r0,#0
;;;5467   }
000014  4770              BX       lr
;;;5468   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurstState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurstState PROC
;;;6432     */
;;;6433   HAL_TIM_DMABurstStateTypeDef HAL_TIM_DMABurstState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;6434   {
;;;6435     /* Check the parameters */
;;;6436     assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
;;;6437   
;;;6438     return htim->DMABurstState;
000002  f8910046          LDRB     r0,[r1,#0x46]
;;;6439   }
000006  4770              BX       lr
;;;6440   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurst_MultiReadStart||, CODE, READONLY, ALIGN=2

                  HAL_TIM_DMABurst_MultiReadStart PROC
;;;4857     */
;;;4858   HAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4859                                                     uint32_t BurstRequestSrc, uint32_t  *BurstBuffer,
;;;4860                                                     uint32_t  BurstLength, uint32_t  DataLength)
;;;4861   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  e9dd8a08          LDRD     r8,r10,[sp,#0x20]
;;;4862     HAL_StatusTypeDef status = HAL_OK;
000010  f04f0900          MOV      r9,#0
;;;4863   
;;;4864     /* Check the parameters */
;;;4865     assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
;;;4866     assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
;;;4867     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;4868     assert_param(IS_TIM_DMA_LENGTH(BurstLength));
;;;4869     assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));
;;;4870   
;;;4871     if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
000014  f8940046          LDRB     r0,[r4,#0x46]
000018  2802              CMP      r0,#2
00001a  d101              BNE      |L16.32|
                  |L16.28|
;;;4872     {
;;;4873       return HAL_BUSY;
;;;4874     }
;;;4875     else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
;;;4876     {
;;;4877       if ((BurstBuffer == NULL) && (BurstLength > 0U))
;;;4878       {
;;;4879         return HAL_ERROR;
;;;4880       }
;;;4881       else
;;;4882       {
;;;4883         htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
;;;4884       }
;;;4885     }
;;;4886     else
;;;4887     {
;;;4888       /* nothing to do */
;;;4889     }
;;;4890     switch (BurstRequestSrc)
;;;4891     {
;;;4892       case TIM_DMA_UPDATE:
;;;4893       {
;;;4894         /* Set the DMA Period elapsed callbacks */
;;;4895         htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;4896         htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
;;;4897   
;;;4898         /* Set the DMA error callback */
;;;4899         htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
;;;4900   
;;;4901         /* Enable the DMA stream */
;;;4902         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
;;;4903                              DataLength) != HAL_OK)
;;;4904         {
;;;4905           /* Return error status */
;;;4906           return HAL_ERROR;
;;;4907         }
;;;4908         break;
;;;4909       }
;;;4910       case TIM_DMA_CC1:
;;;4911       {
;;;4912         /* Set the DMA capture callbacks */
;;;4913         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;4914         htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;4915   
;;;4916         /* Set the DMA error callback */
;;;4917         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;4918   
;;;4919         /* Enable the DMA stream */
;;;4920         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
;;;4921                              DataLength) != HAL_OK)
;;;4922         {
;;;4923           /* Return error status */
;;;4924           return HAL_ERROR;
;;;4925         }
;;;4926         break;
;;;4927       }
;;;4928       case TIM_DMA_CC2:
;;;4929       {
;;;4930         /* Set the DMA capture callbacks */
;;;4931         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
;;;4932         htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;4933   
;;;4934         /* Set the DMA error callback */
;;;4935         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;4936   
;;;4937         /* Enable the DMA stream */
;;;4938         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
;;;4939                              DataLength) != HAL_OK)
;;;4940         {
;;;4941           /* Return error status */
;;;4942           return HAL_ERROR;
;;;4943         }
;;;4944         break;
;;;4945       }
;;;4946       case TIM_DMA_CC3:
;;;4947       {
;;;4948         /* Set the DMA capture callbacks */
;;;4949         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
;;;4950         htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;4951   
;;;4952         /* Set the DMA error callback */
;;;4953         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;4954   
;;;4955         /* Enable the DMA stream */
;;;4956         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
;;;4957                              DataLength) != HAL_OK)
;;;4958         {
;;;4959           /* Return error status */
;;;4960           return HAL_ERROR;
;;;4961         }
;;;4962         break;
;;;4963       }
;;;4964       case TIM_DMA_CC4:
;;;4965       {
;;;4966         /* Set the DMA capture callbacks */
;;;4967         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
;;;4968         htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;4969   
;;;4970         /* Set the DMA error callback */
;;;4971         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;4972   
;;;4973         /* Enable the DMA stream */
;;;4974         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
;;;4975                              DataLength) != HAL_OK)
;;;4976         {
;;;4977           /* Return error status */
;;;4978           return HAL_ERROR;
;;;4979         }
;;;4980         break;
;;;4981       }
;;;4982       case TIM_DMA_COM:
;;;4983       {
;;;4984         /* Set the DMA commutation callbacks */
;;;4985         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
;;;4986         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
;;;4987   
;;;4988         /* Set the DMA error callback */
;;;4989         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
;;;4990   
;;;4991         /* Enable the DMA stream */
;;;4992         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
;;;4993                              DataLength) != HAL_OK)
;;;4994         {
;;;4995           /* Return error status */
;;;4996           return HAL_ERROR;
;;;4997         }
;;;4998         break;
;;;4999       }
;;;5000       case TIM_DMA_TRIGGER:
;;;5001       {
;;;5002         /* Set the DMA trigger callbacks */
;;;5003         htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
;;;5004         htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
;;;5005   
;;;5006         /* Set the DMA error callback */
;;;5007         htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
;;;5008   
;;;5009         /* Enable the DMA stream */
;;;5010         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
;;;5011                              DataLength) != HAL_OK)
;;;5012         {
;;;5013           /* Return error status */
;;;5014           return HAL_ERROR;
;;;5015         }
;;;5016         break;
;;;5017       }
;;;5018       default:
;;;5019         status = HAL_ERROR;
;;;5020         break;
;;;5021     }
;;;5022   
;;;5023     if (status == HAL_OK)
;;;5024     {
;;;5025       /* Configure the DMA Burst Mode */
;;;5026       htim->Instance->DCR = (BurstBaseAddress | BurstLength);
;;;5027   
;;;5028       /* Enable the TIM DMA Request */
;;;5029       __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
;;;5030     }
;;;5031   
;;;5032     /* Return function status */
;;;5033     return status;
;;;5034   }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L16.32|
000020  f8940046          LDRB     r0,[r4,#0x46]         ;4875
000024  2801              CMP      r0,#1                 ;4875
000026  d107              BNE      |L16.56|
000028  b91e              CBNZ     r6,|L16.50|
00002a  f1b80f00          CMP      r8,#0                 ;4877
00002e  d000              BEQ      |L16.50|
000030  e7f4              B        |L16.28|
                  |L16.50|
000032  2002              MOVS     r0,#2                 ;4883
000034  f8840046          STRB     r0,[r4,#0x46]         ;4883
                  |L16.56|
000038  f5b56f00          CMP      r5,#0x800             ;4890
00003c  d053              BEQ      |L16.230|
00003e  dc09              BGT      |L16.84|
000040  f5b57f80          CMP      r5,#0x100             ;4890
000044  d010              BEQ      |L16.104|
000046  f5b57f00          CMP      r5,#0x200             ;4890
00004a  d022              BEQ      |L16.146|
00004c  f5b56f80          CMP      r5,#0x400             ;4890
                  |L16.80|
000050  d172              BNE      |L16.312|
000052  e033              B        |L16.188|
                  |L16.84|
000054  f5b55f80          CMP      r5,#0x1000            ;4890
000058  d05a              BEQ      |L16.272|
00005a  f5b55f00          CMP      r5,#0x2000            ;4890
00005e  d06e              BEQ      |L16.318|
000060  f5b54f80          CMP      r5,#0x4000            ;4890
000064  d1f4              BNE      |L16.80|
000066  e07f              B        |L16.360|
                  |L16.104|
000068  4853              LDR      r0,|L16.440|
00006a  6a21              LDR      r1,[r4,#0x20]         ;4895
00006c  63c8              STR      r0,[r1,#0x3c]         ;4895
00006e  4853              LDR      r0,|L16.444|
000070  6a21              LDR      r1,[r4,#0x20]         ;4896
000072  6408              STR      r0,[r1,#0x40]         ;4896
000074  4852              LDR      r0,|L16.448|
000076  6a21              LDR      r1,[r4,#0x20]         ;4899
000078  64c8              STR      r0,[r1,#0x4c]         ;4899
00007a  6822              LDR      r2,[r4,#0]            ;4902
00007c  f102014c          ADD      r1,r2,#0x4c           ;4902
000080  4653              MOV      r3,r10                ;4902
000082  4632              MOV      r2,r6                 ;4902
000084  6a20              LDR      r0,[r4,#0x20]         ;4902
000086  f7fffffe          BL       HAL_DMA_Start_IT
00008a  b108              CBZ      r0,|L16.144|
00008c  2001              MOVS     r0,#1                 ;4906
00008e  e7c5              B        |L16.28|
                  |L16.144|
000090  e082              B        |L16.408|
                  |L16.146|
000092  494c              LDR      r1,|L16.452|
000094  6a60              LDR      r0,[r4,#0x24]         ;4913
000096  63c1              STR      r1,[r0,#0x3c]         ;4913
000098  494b              LDR      r1,|L16.456|
00009a  6a60              LDR      r0,[r4,#0x24]         ;4914
00009c  6401              STR      r1,[r0,#0x40]         ;4914
00009e  4948              LDR      r1,|L16.448|
0000a0  6a60              LDR      r0,[r4,#0x24]         ;4917
0000a2  64c1              STR      r1,[r0,#0x4c]         ;4917
0000a4  6822              LDR      r2,[r4,#0]            ;4920
0000a6  f102014c          ADD      r1,r2,#0x4c           ;4920
0000aa  4653              MOV      r3,r10                ;4920
0000ac  4632              MOV      r2,r6                 ;4920
0000ae  6a60              LDR      r0,[r4,#0x24]         ;4920
0000b0  f7fffffe          BL       HAL_DMA_Start_IT
0000b4  b108              CBZ      r0,|L16.186|
0000b6  2001              MOVS     r0,#1                 ;4924
0000b8  e7b0              B        |L16.28|
                  |L16.186|
0000ba  e06d              B        |L16.408|
                  |L16.188|
0000bc  4941              LDR      r1,|L16.452|
0000be  6aa0              LDR      r0,[r4,#0x28]         ;4931
0000c0  63c1              STR      r1,[r0,#0x3c]         ;4931
0000c2  4941              LDR      r1,|L16.456|
0000c4  6aa0              LDR      r0,[r4,#0x28]         ;4932
0000c6  6401              STR      r1,[r0,#0x40]         ;4932
0000c8  493d              LDR      r1,|L16.448|
0000ca  6aa0              LDR      r0,[r4,#0x28]         ;4935
0000cc  64c1              STR      r1,[r0,#0x4c]         ;4935
0000ce  6822              LDR      r2,[r4,#0]            ;4938
0000d0  f102014c          ADD      r1,r2,#0x4c           ;4938
0000d4  4653              MOV      r3,r10                ;4938
0000d6  4632              MOV      r2,r6                 ;4938
0000d8  6aa0              LDR      r0,[r4,#0x28]         ;4938
0000da  f7fffffe          BL       HAL_DMA_Start_IT
0000de  b108              CBZ      r0,|L16.228|
0000e0  2001              MOVS     r0,#1                 ;4942
0000e2  e79b              B        |L16.28|
                  |L16.228|
0000e4  e058              B        |L16.408|
                  |L16.230|
0000e6  4937              LDR      r1,|L16.452|
0000e8  6ae0              LDR      r0,[r4,#0x2c]         ;4949
0000ea  63c1              STR      r1,[r0,#0x3c]         ;4949
0000ec  4936              LDR      r1,|L16.456|
0000ee  6ae0              LDR      r0,[r4,#0x2c]         ;4950
0000f0  6401              STR      r1,[r0,#0x40]         ;4950
0000f2  4933              LDR      r1,|L16.448|
0000f4  6ae0              LDR      r0,[r4,#0x2c]         ;4953
0000f6  64c1              STR      r1,[r0,#0x4c]         ;4953
0000f8  6822              LDR      r2,[r4,#0]            ;4956
0000fa  f102014c          ADD      r1,r2,#0x4c           ;4956
0000fe  4653              MOV      r3,r10                ;4956
000100  4632              MOV      r2,r6                 ;4956
000102  6ae0              LDR      r0,[r4,#0x2c]         ;4956
000104  f7fffffe          BL       HAL_DMA_Start_IT
000108  b108              CBZ      r0,|L16.270|
00010a  2001              MOVS     r0,#1                 ;4960
00010c  e786              B        |L16.28|
                  |L16.270|
00010e  e043              B        |L16.408|
                  |L16.272|
000110  492c              LDR      r1,|L16.452|
000112  6b20              LDR      r0,[r4,#0x30]         ;4967
000114  63c1              STR      r1,[r0,#0x3c]         ;4967
000116  492c              LDR      r1,|L16.456|
000118  6b20              LDR      r0,[r4,#0x30]         ;4968
00011a  6401              STR      r1,[r0,#0x40]         ;4968
00011c  4928              LDR      r1,|L16.448|
00011e  6b20              LDR      r0,[r4,#0x30]         ;4971
000120  64c1              STR      r1,[r0,#0x4c]         ;4971
000122  6822              LDR      r2,[r4,#0]            ;4974
000124  f102014c          ADD      r1,r2,#0x4c           ;4974
000128  4653              MOV      r3,r10                ;4974
00012a  4632              MOV      r2,r6                 ;4974
00012c  6b20              LDR      r0,[r4,#0x30]         ;4974
00012e  f7fffffe          BL       HAL_DMA_Start_IT
000132  b118              CBZ      r0,|L16.316|
000134  2001              MOVS     r0,#1                 ;4978
000136  e771              B        |L16.28|
                  |L16.312|
000138  e02b              B        |L16.402|
00013a  e000              B        |L16.318|
                  |L16.316|
00013c  e02c              B        |L16.408|
                  |L16.318|
00013e  4923              LDR      r1,|L16.460|
000140  6b60              LDR      r0,[r4,#0x34]         ;4985
000142  63c1              STR      r1,[r0,#0x3c]         ;4985
000144  4922              LDR      r1,|L16.464|
000146  6b60              LDR      r0,[r4,#0x34]         ;4986
000148  6401              STR      r1,[r0,#0x40]         ;4986
00014a  491d              LDR      r1,|L16.448|
00014c  6b60              LDR      r0,[r4,#0x34]         ;4989
00014e  64c1              STR      r1,[r0,#0x4c]         ;4989
000150  6822              LDR      r2,[r4,#0]            ;4992
000152  f102014c          ADD      r1,r2,#0x4c           ;4992
000156  4653              MOV      r3,r10                ;4992
000158  4632              MOV      r2,r6                 ;4992
00015a  6b60              LDR      r0,[r4,#0x34]         ;4992
00015c  f7fffffe          BL       HAL_DMA_Start_IT
000160  b108              CBZ      r0,|L16.358|
000162  2001              MOVS     r0,#1                 ;4996
000164  e75a              B        |L16.28|
                  |L16.358|
000166  e017              B        |L16.408|
                  |L16.360|
000168  491a              LDR      r1,|L16.468|
00016a  6ba0              LDR      r0,[r4,#0x38]         ;5003
00016c  63c1              STR      r1,[r0,#0x3c]         ;5003
00016e  491a              LDR      r1,|L16.472|
000170  6ba0              LDR      r0,[r4,#0x38]         ;5004
000172  6401              STR      r1,[r0,#0x40]         ;5004
000174  4912              LDR      r1,|L16.448|
000176  6ba0              LDR      r0,[r4,#0x38]         ;5007
000178  64c1              STR      r1,[r0,#0x4c]         ;5007
00017a  6822              LDR      r2,[r4,#0]            ;5010
00017c  f102014c          ADD      r1,r2,#0x4c           ;5010
000180  4653              MOV      r3,r10                ;5010
000182  4632              MOV      r2,r6                 ;5010
000184  6ba0              LDR      r0,[r4,#0x38]         ;5010
000186  f7fffffe          BL       HAL_DMA_Start_IT
00018a  b108              CBZ      r0,|L16.400|
00018c  2001              MOVS     r0,#1                 ;5014
00018e  e745              B        |L16.28|
                  |L16.400|
000190  e002              B        |L16.408|
                  |L16.402|
000192  f04f0901          MOV      r9,#1                 ;5019
000196  bf00              NOP                            ;5020
                  |L16.408|
000198  bf00              NOP                            ;4908
00019a  f1b90f00          CMP      r9,#0                 ;5023
00019e  d108              BNE      |L16.434|
0001a0  ea470008          ORR      r0,r7,r8              ;5026
0001a4  6821              LDR      r1,[r4,#0]            ;5026
0001a6  6488              STR      r0,[r1,#0x48]         ;5026
0001a8  6820              LDR      r0,[r4,#0]            ;5029
0001aa  68c0              LDR      r0,[r0,#0xc]          ;5029
0001ac  4328              ORRS     r0,r0,r5              ;5029
0001ae  6821              LDR      r1,[r4,#0]            ;5029
0001b0  60c8              STR      r0,[r1,#0xc]          ;5029
                  |L16.434|
0001b2  4648              MOV      r0,r9                 ;5033
0001b4  e732              B        |L16.28|
;;;5035   
                          ENDP

0001b6  0000              DCW      0x0000
                  |L16.440|
                          DCD      TIM_DMAPeriodElapsedCplt
                  |L16.444|
                          DCD      TIM_DMAPeriodElapsedHalfCplt
                  |L16.448|
                          DCD      TIM_DMAError
                  |L16.452|
                          DCD      TIM_DMACaptureCplt
                  |L16.456|
                          DCD      TIM_DMACaptureHalfCplt
                  |L16.460|
                          DCD      TIMEx_DMACommutationCplt
                  |L16.464|
                          DCD      TIMEx_DMACommutationHalfCplt
                  |L16.468|
                          DCD      TIM_DMATriggerCplt
                  |L16.472|
                          DCD      TIM_DMATriggerHalfCplt

                          AREA ||i.HAL_TIM_DMABurst_MultiWriteStart||, CODE, READONLY, ALIGN=2

                  HAL_TIM_DMABurst_MultiWriteStart PROC
;;;4521     */
;;;4522   HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4523                                                      uint32_t BurstRequestSrc, uint32_t *BurstBuffer,
;;;4524                                                      uint32_t  BurstLength,  uint32_t  DataLength)
;;;4525   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  e9dd8a08          LDRD     r8,r10,[sp,#0x20]
;;;4526     HAL_StatusTypeDef status = HAL_OK;
000010  f04f0900          MOV      r9,#0
;;;4527   
;;;4528     /* Check the parameters */
;;;4529     assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));
;;;4530     assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
;;;4531     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;4532     assert_param(IS_TIM_DMA_LENGTH(BurstLength));
;;;4533     assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));
;;;4534   
;;;4535     if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
000014  f8940046          LDRB     r0,[r4,#0x46]
000018  2802              CMP      r0,#2
00001a  d101              BNE      |L17.32|
                  |L17.28|
;;;4536     {
;;;4537       return HAL_BUSY;
;;;4538     }
;;;4539     else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
;;;4540     {
;;;4541       if ((BurstBuffer == NULL) && (BurstLength > 0U))
;;;4542       {
;;;4543         return HAL_ERROR;
;;;4544       }
;;;4545       else
;;;4546       {
;;;4547         htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
;;;4548       }
;;;4549     }
;;;4550     else
;;;4551     {
;;;4552       /* nothing to do */
;;;4553     }
;;;4554   
;;;4555     switch (BurstRequestSrc)
;;;4556     {
;;;4557       case TIM_DMA_UPDATE:
;;;4558       {
;;;4559         /* Set the DMA Period elapsed callbacks */
;;;4560         htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
;;;4561         htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
;;;4562   
;;;4563         /* Set the DMA error callback */
;;;4564         htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
;;;4565   
;;;4566         /* Enable the DMA stream */
;;;4567         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
;;;4568                              (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
;;;4569         {
;;;4570           /* Return error status */
;;;4571           return HAL_ERROR;
;;;4572         }
;;;4573         break;
;;;4574       }
;;;4575       case TIM_DMA_CC1:
;;;4576       {
;;;4577         /* Set the DMA compare callbacks */
;;;4578         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;4579         htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;4580   
;;;4581         /* Set the DMA error callback */
;;;4582         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;4583   
;;;4584         /* Enable the DMA stream */
;;;4585         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
;;;4586                              (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
;;;4587         {
;;;4588           /* Return error status */
;;;4589           return HAL_ERROR;
;;;4590         }
;;;4591         break;
;;;4592       }
;;;4593       case TIM_DMA_CC2:
;;;4594       {
;;;4595         /* Set the DMA compare callbacks */
;;;4596         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;4597         htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;4598   
;;;4599         /* Set the DMA error callback */
;;;4600         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;4601   
;;;4602         /* Enable the DMA stream */
;;;4603         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
;;;4604                              (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
;;;4605         {
;;;4606           /* Return error status */
;;;4607           return HAL_ERROR;
;;;4608         }
;;;4609         break;
;;;4610       }
;;;4611       case TIM_DMA_CC3:
;;;4612       {
;;;4613         /* Set the DMA compare callbacks */
;;;4614         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;4615         htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;4616   
;;;4617         /* Set the DMA error callback */
;;;4618         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;4619   
;;;4620         /* Enable the DMA stream */
;;;4621         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
;;;4622                              (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
;;;4623         {
;;;4624           /* Return error status */
;;;4625           return HAL_ERROR;
;;;4626         }
;;;4627         break;
;;;4628       }
;;;4629       case TIM_DMA_CC4:
;;;4630       {
;;;4631         /* Set the DMA compare callbacks */
;;;4632         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;4633         htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;4634   
;;;4635         /* Set the DMA error callback */
;;;4636         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;4637   
;;;4638         /* Enable the DMA stream */
;;;4639         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
;;;4640                              (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
;;;4641         {
;;;4642           /* Return error status */
;;;4643           return HAL_ERROR;
;;;4644         }
;;;4645         break;
;;;4646       }
;;;4647       case TIM_DMA_COM:
;;;4648       {
;;;4649         /* Set the DMA commutation callbacks */
;;;4650         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
;;;4651         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
;;;4652   
;;;4653         /* Set the DMA error callback */
;;;4654         htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
;;;4655   
;;;4656         /* Enable the DMA stream */
;;;4657         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
;;;4658                              (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
;;;4659         {
;;;4660           /* Return error status */
;;;4661           return HAL_ERROR;
;;;4662         }
;;;4663         break;
;;;4664       }
;;;4665       case TIM_DMA_TRIGGER:
;;;4666       {
;;;4667         /* Set the DMA trigger callbacks */
;;;4668         htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
;;;4669         htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
;;;4670   
;;;4671         /* Set the DMA error callback */
;;;4672         htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
;;;4673   
;;;4674         /* Enable the DMA stream */
;;;4675         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
;;;4676                              (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
;;;4677         {
;;;4678           /* Return error status */
;;;4679           return HAL_ERROR;
;;;4680         }
;;;4681         break;
;;;4682       }
;;;4683       default:
;;;4684         status = HAL_ERROR;
;;;4685         break;
;;;4686     }
;;;4687   
;;;4688     if (status == HAL_OK)
;;;4689     {
;;;4690       /* Configure the DMA Burst Mode */
;;;4691       htim->Instance->DCR = (BurstBaseAddress | BurstLength);
;;;4692       /* Enable the TIM DMA Request */
;;;4693       __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
;;;4694     }
;;;4695   
;;;4696     /* Return function status */
;;;4697     return status;
;;;4698   }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L17.32|
000020  f8940046          LDRB     r0,[r4,#0x46]         ;4539
000024  2801              CMP      r0,#1                 ;4539
000026  d107              BNE      |L17.56|
000028  b91e              CBNZ     r6,|L17.50|
00002a  f1b80f00          CMP      r8,#0                 ;4541
00002e  d000              BEQ      |L17.50|
000030  e7f4              B        |L17.28|
                  |L17.50|
000032  2002              MOVS     r0,#2                 ;4547
000034  f8840046          STRB     r0,[r4,#0x46]         ;4547
                  |L17.56|
000038  f5b56f00          CMP      r5,#0x800             ;4555
00003c  d053              BEQ      |L17.230|
00003e  dc09              BGT      |L17.84|
000040  f5b57f80          CMP      r5,#0x100             ;4555
000044  d010              BEQ      |L17.104|
000046  f5b57f00          CMP      r5,#0x200             ;4555
00004a  d022              BEQ      |L17.146|
00004c  f5b56f80          CMP      r5,#0x400             ;4555
                  |L17.80|
000050  d172              BNE      |L17.312|
000052  e033              B        |L17.188|
                  |L17.84|
000054  f5b55f80          CMP      r5,#0x1000            ;4555
000058  d05a              BEQ      |L17.272|
00005a  f5b55f00          CMP      r5,#0x2000            ;4555
00005e  d06e              BEQ      |L17.318|
000060  f5b54f80          CMP      r5,#0x4000            ;4555
000064  d1f4              BNE      |L17.80|
000066  e07f              B        |L17.360|
                  |L17.104|
000068  4853              LDR      r0,|L17.440|
00006a  6a21              LDR      r1,[r4,#0x20]         ;4560
00006c  63c8              STR      r0,[r1,#0x3c]         ;4560
00006e  4853              LDR      r0,|L17.444|
000070  6a21              LDR      r1,[r4,#0x20]         ;4561
000072  6408              STR      r0,[r1,#0x40]         ;4561
000074  4852              LDR      r0,|L17.448|
000076  6a21              LDR      r1,[r4,#0x20]         ;4564
000078  64c8              STR      r0,[r1,#0x4c]         ;4564
00007a  6821              LDR      r1,[r4,#0]            ;4567
00007c  f101024c          ADD      r2,r1,#0x4c           ;4567
000080  4653              MOV      r3,r10                ;4567
000082  4631              MOV      r1,r6                 ;4567
000084  6a20              LDR      r0,[r4,#0x20]         ;4567
000086  f7fffffe          BL       HAL_DMA_Start_IT
00008a  b108              CBZ      r0,|L17.144|
00008c  2001              MOVS     r0,#1                 ;4571
00008e  e7c5              B        |L17.28|
                  |L17.144|
000090  e082              B        |L17.408|
                  |L17.146|
000092  494c              LDR      r1,|L17.452|
000094  6a60              LDR      r0,[r4,#0x24]         ;4578
000096  63c1              STR      r1,[r0,#0x3c]         ;4578
000098  494b              LDR      r1,|L17.456|
00009a  6a60              LDR      r0,[r4,#0x24]         ;4579
00009c  6401              STR      r1,[r0,#0x40]         ;4579
00009e  4948              LDR      r1,|L17.448|
0000a0  6a60              LDR      r0,[r4,#0x24]         ;4582
0000a2  64c1              STR      r1,[r0,#0x4c]         ;4582
0000a4  6821              LDR      r1,[r4,#0]            ;4585
0000a6  f101024c          ADD      r2,r1,#0x4c           ;4585
0000aa  4653              MOV      r3,r10                ;4585
0000ac  4631              MOV      r1,r6                 ;4585
0000ae  6a60              LDR      r0,[r4,#0x24]         ;4585
0000b0  f7fffffe          BL       HAL_DMA_Start_IT
0000b4  b108              CBZ      r0,|L17.186|
0000b6  2001              MOVS     r0,#1                 ;4589
0000b8  e7b0              B        |L17.28|
                  |L17.186|
0000ba  e06d              B        |L17.408|
                  |L17.188|
0000bc  4941              LDR      r1,|L17.452|
0000be  6aa0              LDR      r0,[r4,#0x28]         ;4596
0000c0  63c1              STR      r1,[r0,#0x3c]         ;4596
0000c2  4941              LDR      r1,|L17.456|
0000c4  6aa0              LDR      r0,[r4,#0x28]         ;4597
0000c6  6401              STR      r1,[r0,#0x40]         ;4597
0000c8  493d              LDR      r1,|L17.448|
0000ca  6aa0              LDR      r0,[r4,#0x28]         ;4600
0000cc  64c1              STR      r1,[r0,#0x4c]         ;4600
0000ce  6821              LDR      r1,[r4,#0]            ;4603
0000d0  f101024c          ADD      r2,r1,#0x4c           ;4603
0000d4  4653              MOV      r3,r10                ;4603
0000d6  4631              MOV      r1,r6                 ;4603
0000d8  6aa0              LDR      r0,[r4,#0x28]         ;4603
0000da  f7fffffe          BL       HAL_DMA_Start_IT
0000de  b108              CBZ      r0,|L17.228|
0000e0  2001              MOVS     r0,#1                 ;4607
0000e2  e79b              B        |L17.28|
                  |L17.228|
0000e4  e058              B        |L17.408|
                  |L17.230|
0000e6  4937              LDR      r1,|L17.452|
0000e8  6ae0              LDR      r0,[r4,#0x2c]         ;4614
0000ea  63c1              STR      r1,[r0,#0x3c]         ;4614
0000ec  4936              LDR      r1,|L17.456|
0000ee  6ae0              LDR      r0,[r4,#0x2c]         ;4615
0000f0  6401              STR      r1,[r0,#0x40]         ;4615
0000f2  4933              LDR      r1,|L17.448|
0000f4  6ae0              LDR      r0,[r4,#0x2c]         ;4618
0000f6  64c1              STR      r1,[r0,#0x4c]         ;4618
0000f8  6821              LDR      r1,[r4,#0]            ;4621
0000fa  f101024c          ADD      r2,r1,#0x4c           ;4621
0000fe  4653              MOV      r3,r10                ;4621
000100  4631              MOV      r1,r6                 ;4621
000102  6ae0              LDR      r0,[r4,#0x2c]         ;4621
000104  f7fffffe          BL       HAL_DMA_Start_IT
000108  b108              CBZ      r0,|L17.270|
00010a  2001              MOVS     r0,#1                 ;4625
00010c  e786              B        |L17.28|
                  |L17.270|
00010e  e043              B        |L17.408|
                  |L17.272|
000110  492c              LDR      r1,|L17.452|
000112  6b20              LDR      r0,[r4,#0x30]         ;4632
000114  63c1              STR      r1,[r0,#0x3c]         ;4632
000116  492c              LDR      r1,|L17.456|
000118  6b20              LDR      r0,[r4,#0x30]         ;4633
00011a  6401              STR      r1,[r0,#0x40]         ;4633
00011c  4928              LDR      r1,|L17.448|
00011e  6b20              LDR      r0,[r4,#0x30]         ;4636
000120  64c1              STR      r1,[r0,#0x4c]         ;4636
000122  6821              LDR      r1,[r4,#0]            ;4639
000124  f101024c          ADD      r2,r1,#0x4c           ;4639
000128  4653              MOV      r3,r10                ;4639
00012a  4631              MOV      r1,r6                 ;4639
00012c  6b20              LDR      r0,[r4,#0x30]         ;4639
00012e  f7fffffe          BL       HAL_DMA_Start_IT
000132  b118              CBZ      r0,|L17.316|
000134  2001              MOVS     r0,#1                 ;4643
000136  e771              B        |L17.28|
                  |L17.312|
000138  e02b              B        |L17.402|
00013a  e000              B        |L17.318|
                  |L17.316|
00013c  e02c              B        |L17.408|
                  |L17.318|
00013e  4923              LDR      r1,|L17.460|
000140  6b60              LDR      r0,[r4,#0x34]         ;4650
000142  63c1              STR      r1,[r0,#0x3c]         ;4650
000144  4922              LDR      r1,|L17.464|
000146  6b60              LDR      r0,[r4,#0x34]         ;4651
000148  6401              STR      r1,[r0,#0x40]         ;4651
00014a  491d              LDR      r1,|L17.448|
00014c  6b60              LDR      r0,[r4,#0x34]         ;4654
00014e  64c1              STR      r1,[r0,#0x4c]         ;4654
000150  6821              LDR      r1,[r4,#0]            ;4657
000152  f101024c          ADD      r2,r1,#0x4c           ;4657
000156  4653              MOV      r3,r10                ;4657
000158  4631              MOV      r1,r6                 ;4657
00015a  6b60              LDR      r0,[r4,#0x34]         ;4657
00015c  f7fffffe          BL       HAL_DMA_Start_IT
000160  b108              CBZ      r0,|L17.358|
000162  2001              MOVS     r0,#1                 ;4661
000164  e75a              B        |L17.28|
                  |L17.358|
000166  e017              B        |L17.408|
                  |L17.360|
000168  491a              LDR      r1,|L17.468|
00016a  6ba0              LDR      r0,[r4,#0x38]         ;4668
00016c  63c1              STR      r1,[r0,#0x3c]         ;4668
00016e  491a              LDR      r1,|L17.472|
000170  6ba0              LDR      r0,[r4,#0x38]         ;4669
000172  6401              STR      r1,[r0,#0x40]         ;4669
000174  4912              LDR      r1,|L17.448|
000176  6ba0              LDR      r0,[r4,#0x38]         ;4672
000178  64c1              STR      r1,[r0,#0x4c]         ;4672
00017a  6821              LDR      r1,[r4,#0]            ;4675
00017c  f101024c          ADD      r2,r1,#0x4c           ;4675
000180  4653              MOV      r3,r10                ;4675
000182  4631              MOV      r1,r6                 ;4675
000184  6ba0              LDR      r0,[r4,#0x38]         ;4675
000186  f7fffffe          BL       HAL_DMA_Start_IT
00018a  b108              CBZ      r0,|L17.400|
00018c  2001              MOVS     r0,#1                 ;4679
00018e  e745              B        |L17.28|
                  |L17.400|
000190  e002              B        |L17.408|
                  |L17.402|
000192  f04f0901          MOV      r9,#1                 ;4684
000196  bf00              NOP                            ;4685
                  |L17.408|
000198  bf00              NOP                            ;4573
00019a  f1b90f00          CMP      r9,#0                 ;4688
00019e  d108              BNE      |L17.434|
0001a0  ea470008          ORR      r0,r7,r8              ;4691
0001a4  6821              LDR      r1,[r4,#0]            ;4691
0001a6  6488              STR      r0,[r1,#0x48]         ;4691
0001a8  6820              LDR      r0,[r4,#0]            ;4693
0001aa  68c0              LDR      r0,[r0,#0xc]          ;4693
0001ac  4328              ORRS     r0,r0,r5              ;4693
0001ae  6821              LDR      r1,[r4,#0]            ;4693
0001b0  60c8              STR      r0,[r1,#0xc]          ;4693
                  |L17.434|
0001b2  4648              MOV      r0,r9                 ;4697
0001b4  e732              B        |L17.28|
;;;4699   
                          ENDP

0001b6  0000              DCW      0x0000
                  |L17.440|
                          DCD      TIM_DMAPeriodElapsedCplt
                  |L17.444|
                          DCD      TIM_DMAPeriodElapsedHalfCplt
                  |L17.448|
                          DCD      TIM_DMAError
                  |L17.452|
                          DCD      TIM_DMADelayPulseCplt
                  |L17.456|
                          DCD      TIM_DMADelayPulseHalfCplt
                  |L17.460|
                          DCD      TIMEx_DMACommutationCplt
                  |L17.464|
                          DCD      TIMEx_DMACommutationHalfCplt
                  |L17.468|
                          DCD      TIM_DMATriggerCplt
                  |L17.472|
                          DCD      TIM_DMATriggerHalfCplt

                          AREA ||i.HAL_TIM_DMABurst_ReadStart||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurst_ReadStart PROC
;;;4806     */
;;;4807   HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;4808                                                uint32_t BurstRequestSrc, uint32_t  *BurstBuffer, uint32_t  BurstLength)
;;;4809   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c0a              LDR      r4,[sp,#0x28]
;;;4810     HAL_StatusTypeDef status;
;;;4811   
;;;4812     status = HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
00000e  0a20              LSRS     r0,r4,#8
000010  1c40              ADDS     r0,r0,#1
000012  4643              MOV      r3,r8
000014  463a              MOV      r2,r7
000016  4631              MOV      r1,r6
000018  e9cd4000          STRD     r4,r0,[sp,#0]
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       HAL_TIM_DMABurst_MultiReadStart
000022  4681              MOV      r9,r0
;;;4813                                              ((BurstLength) >> 8U) + 1U);
;;;4814   
;;;4815   
;;;4816     return status;
000024  4648              MOV      r0,r9
;;;4817   }
000026  e8bd87fc          POP      {r2-r10,pc}
;;;4818   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurst_ReadStop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurst_ReadStop PROC
;;;5041     */
;;;5042   HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
000000  b570              PUSH     {r4-r6,lr}
;;;5043   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;5044     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;5045   
;;;5046     /* Check the parameters */
;;;5047     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;5048   
;;;5049     /* Abort the DMA transfer (at least disable the DMA stream) */
;;;5050     switch (BurstRequestSrc)
000008  f5b56f00          CMP      r5,#0x800
00000c  d020              BEQ      |L19.80|
00000e  dc09              BGT      |L19.36|
000010  f5b57f80          CMP      r5,#0x100
000014  d010              BEQ      |L19.56|
000016  f5b57f00          CMP      r5,#0x200
00001a  d011              BEQ      |L19.64|
00001c  f5b56f80          CMP      r5,#0x400
000020  d126              BNE      |L19.112|
000022  e011              B        |L19.72|
                  |L19.36|
000024  f5b55f80          CMP      r5,#0x1000
000028  d016              BEQ      |L19.88|
00002a  f5b55f00          CMP      r5,#0x2000
00002e  d017              BEQ      |L19.96|
000030  f5b54f80          CMP      r5,#0x4000
000034  d11c              BNE      |L19.112|
000036  e017              B        |L19.104|
                  |L19.56|
;;;5051     {
;;;5052       case TIM_DMA_UPDATE:
;;;5053       {
;;;5054         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
000038  6a20              LDR      r0,[r4,#0x20]
00003a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;5055         break;
00003e  e019              B        |L19.116|
                  |L19.64|
;;;5056       }
;;;5057       case TIM_DMA_CC1:
;;;5058       {
;;;5059         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
000040  6a60              LDR      r0,[r4,#0x24]
000042  f7fffffe          BL       HAL_DMA_Abort_IT
;;;5060         break;
000046  e015              B        |L19.116|
                  |L19.72|
;;;5061       }
;;;5062       case TIM_DMA_CC2:
;;;5063       {
;;;5064         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
000048  6aa0              LDR      r0,[r4,#0x28]
00004a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;5065         break;
00004e  e011              B        |L19.116|
                  |L19.80|
;;;5066       }
;;;5067       case TIM_DMA_CC3:
;;;5068       {
;;;5069         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
000050  6ae0              LDR      r0,[r4,#0x2c]
000052  f7fffffe          BL       HAL_DMA_Abort_IT
;;;5070         break;
000056  e00d              B        |L19.116|
                  |L19.88|
;;;5071       }
;;;5072       case TIM_DMA_CC4:
;;;5073       {
;;;5074         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
000058  6b20              LDR      r0,[r4,#0x30]
00005a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;5075         break;
00005e  e009              B        |L19.116|
                  |L19.96|
;;;5076       }
;;;5077       case TIM_DMA_COM:
;;;5078       {
;;;5079         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
000060  6b60              LDR      r0,[r4,#0x34]
000062  f7fffffe          BL       HAL_DMA_Abort_IT
;;;5080         break;
000066  e005              B        |L19.116|
                  |L19.104|
;;;5081       }
;;;5082       case TIM_DMA_TRIGGER:
;;;5083       {
;;;5084         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
000068  6ba0              LDR      r0,[r4,#0x38]
00006a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;5085         break;
00006e  e001              B        |L19.116|
                  |L19.112|
;;;5086       }
;;;5087       default:
;;;5088         status = HAL_ERROR;
000070  2601              MOVS     r6,#1
;;;5089         break;
000072  bf00              NOP      
                  |L19.116|
000074  bf00              NOP                            ;5055
;;;5090     }
;;;5091   
;;;5092     if (status == HAL_OK)
000076  b93e              CBNZ     r6,|L19.136|
;;;5093     {
;;;5094       /* Disable the TIM Update DMA request */
;;;5095       __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
000078  6820              LDR      r0,[r4,#0]
00007a  68c0              LDR      r0,[r0,#0xc]
00007c  43a8              BICS     r0,r0,r5
00007e  6821              LDR      r1,[r4,#0]
000080  60c8              STR      r0,[r1,#0xc]
;;;5096   
;;;5097       /* Change the DMA burst operation state */
;;;5098       htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
000082  2001              MOVS     r0,#1
000084  f8840046          STRB     r0,[r4,#0x46]
                  |L19.136|
;;;5099     }
;;;5100   
;;;5101     /* Return function status */
;;;5102     return status;
000088  4630              MOV      r0,r6
;;;5103   }
00008a  bd70              POP      {r4-r6,pc}
;;;5104   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurst_WriteStart||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurst_WriteStart PROC
;;;4469     */
;;;4470   HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;4471                                                 uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t  BurstLength)
;;;4472   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c0a              LDR      r4,[sp,#0x28]
;;;4473     HAL_StatusTypeDef status;
;;;4474   
;;;4475     status = HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
00000e  0a20              LSRS     r0,r4,#8
000010  1c40              ADDS     r0,r0,#1
000012  4643              MOV      r3,r8
000014  463a              MOV      r2,r7
000016  4631              MOV      r1,r6
000018  e9cd4000          STRD     r4,r0,[sp,#0]
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       HAL_TIM_DMABurst_MultiWriteStart
000022  4681              MOV      r9,r0
;;;4476                                               ((BurstLength) >> 8U) + 1U);
;;;4477   
;;;4478   
;;;4479   
;;;4480     return status;
000024  4648              MOV      r0,r9
;;;4481   }
000026  e8bd87fc          POP      {r2-r10,pc}
;;;4482   
                          ENDP


                          AREA ||i.HAL_TIM_DMABurst_WriteStop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_DMABurst_WriteStop PROC
;;;4705     */
;;;4706   HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
000000  b570              PUSH     {r4-r6,lr}
;;;4707   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;4708     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;4709   
;;;4710     /* Check the parameters */
;;;4711     assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
;;;4712   
;;;4713     /* Abort the DMA transfer (at least disable the DMA stream) */
;;;4714     switch (BurstRequestSrc)
000008  f5b56f00          CMP      r5,#0x800
00000c  d020              BEQ      |L21.80|
00000e  dc09              BGT      |L21.36|
000010  f5b57f80          CMP      r5,#0x100
000014  d010              BEQ      |L21.56|
000016  f5b57f00          CMP      r5,#0x200
00001a  d011              BEQ      |L21.64|
00001c  f5b56f80          CMP      r5,#0x400
000020  d126              BNE      |L21.112|
000022  e011              B        |L21.72|
                  |L21.36|
000024  f5b55f80          CMP      r5,#0x1000
000028  d016              BEQ      |L21.88|
00002a  f5b55f00          CMP      r5,#0x2000
00002e  d017              BEQ      |L21.96|
000030  f5b54f80          CMP      r5,#0x4000
000034  d11c              BNE      |L21.112|
000036  e017              B        |L21.104|
                  |L21.56|
;;;4715     {
;;;4716       case TIM_DMA_UPDATE:
;;;4717       {
;;;4718         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
000038  6a20              LDR      r0,[r4,#0x20]
00003a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;4719         break;
00003e  e019              B        |L21.116|
                  |L21.64|
;;;4720       }
;;;4721       case TIM_DMA_CC1:
;;;4722       {
;;;4723         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
000040  6a60              LDR      r0,[r4,#0x24]
000042  f7fffffe          BL       HAL_DMA_Abort_IT
;;;4724         break;
000046  e015              B        |L21.116|
                  |L21.72|
;;;4725       }
;;;4726       case TIM_DMA_CC2:
;;;4727       {
;;;4728         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
000048  6aa0              LDR      r0,[r4,#0x28]
00004a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;4729         break;
00004e  e011              B        |L21.116|
                  |L21.80|
;;;4730       }
;;;4731       case TIM_DMA_CC3:
;;;4732       {
;;;4733         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
000050  6ae0              LDR      r0,[r4,#0x2c]
000052  f7fffffe          BL       HAL_DMA_Abort_IT
;;;4734         break;
000056  e00d              B        |L21.116|
                  |L21.88|
;;;4735       }
;;;4736       case TIM_DMA_CC4:
;;;4737       {
;;;4738         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
000058  6b20              LDR      r0,[r4,#0x30]
00005a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;4739         break;
00005e  e009              B        |L21.116|
                  |L21.96|
;;;4740       }
;;;4741       case TIM_DMA_COM:
;;;4742       {
;;;4743         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
000060  6b60              LDR      r0,[r4,#0x34]
000062  f7fffffe          BL       HAL_DMA_Abort_IT
;;;4744         break;
000066  e005              B        |L21.116|
                  |L21.104|
;;;4745       }
;;;4746       case TIM_DMA_TRIGGER:
;;;4747       {
;;;4748         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
000068  6ba0              LDR      r0,[r4,#0x38]
00006a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;4749         break;
00006e  e001              B        |L21.116|
                  |L21.112|
;;;4750       }
;;;4751       default:
;;;4752         status = HAL_ERROR;
000070  2601              MOVS     r6,#1
;;;4753         break;
000072  bf00              NOP      
                  |L21.116|
000074  bf00              NOP                            ;4719
;;;4754     }
;;;4755   
;;;4756     if (status == HAL_OK)
000076  b93e              CBNZ     r6,|L21.136|
;;;4757     {
;;;4758       /* Disable the TIM Update DMA request */
;;;4759       __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
000078  6820              LDR      r0,[r4,#0]
00007a  68c0              LDR      r0,[r0,#0xc]
00007c  43a8              BICS     r0,r0,r5
00007e  6821              LDR      r1,[r4,#0]
000080  60c8              STR      r0,[r1,#0xc]
;;;4760   
;;;4761       /* Change the DMA burst operation state */
;;;4762       htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
000082  2001              MOVS     r0,#1
000084  f8840046          STRB     r0,[r4,#0x46]
                  |L21.136|
;;;4763     }
;;;4764   
;;;4765     /* Return function status */
;;;4766     return status;
000088  4630              MOV      r0,r6
;;;4767   }
00008a  bd70              POP      {r4-r6,pc}
;;;4768   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_DeInit PROC
;;;3125     */
;;;3126   HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;3127   {
000002  4604              MOV      r4,r0
;;;3128     /* Check the parameters */
;;;3129     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;3130   
;;;3131     htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  f884003d          STRB     r0,[r4,#0x3d]
;;;3132   
;;;3133     /* Disable the TIM Peripheral Clock */
;;;3134     __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f2411111          MOV      r1,#0x1111
000014  4008              ANDS     r0,r0,r1
000016  b950              CBNZ     r0,|L22.46|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  b928              CBNZ     r0,|L22.46|
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
                  |L22.46|
00002e  bf00              NOP      
;;;3135   
;;;3136   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3137     if (htim->Encoder_MspDeInitCallback == NULL)
;;;3138     {
;;;3139       htim->Encoder_MspDeInitCallback = HAL_TIM_Encoder_MspDeInit;
;;;3140     }
;;;3141     /* DeInit the low level hardware */
;;;3142     htim->Encoder_MspDeInitCallback(htim);
;;;3143   #else
;;;3144     /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;3145     HAL_TIM_Encoder_MspDeInit(htim);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_TIM_Encoder_MspDeInit
;;;3146   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3147   
;;;3148     /* Change the DMA burst operation state */
;;;3149     htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
000036  2000              MOVS     r0,#0
000038  f8840046          STRB     r0,[r4,#0x46]
;;;3150   
;;;3151     /* Set the TIM channels state */
;;;3152     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
00003c  f884003e          STRB     r0,[r4,#0x3e]
;;;3153     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
000040  2100              MOVS     r1,#0
000042  203f              MOVS     r0,#0x3f
000044  5501              STRB     r1,[r0,r4]
;;;3154     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
000046  2000              MOVS     r0,#0
000048  f8840042          STRB     r0,[r4,#0x42]
;;;3155     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
00004c  2043              MOVS     r0,#0x43
00004e  5501              STRB     r1,[r0,r4]
;;;3156   
;;;3157     /* Change TIM state */
;;;3158     htim->State = HAL_TIM_STATE_RESET;
000050  2000              MOVS     r0,#0
000052  f884003d          STRB     r0,[r4,#0x3d]
;;;3159   
;;;3160     /* Release Lock */
;;;3161     __HAL_UNLOCK(htim);
000056  bf00              NOP      
000058  f884003c          STRB     r0,[r4,#0x3c]
00005c  bf00              NOP      
;;;3162   
;;;3163     return HAL_OK;
;;;3164   }
00005e  bd10              POP      {r4,pc}
;;;3165   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_GetState PROC
;;;6387     */
;;;6388   HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;6389   {
;;;6390     return htim->State;
000002  f891003d          LDRB     r0,[r1,#0x3d]
;;;6391   }
000006  4770              BX       lr
;;;6392   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Init PROC
;;;3011     */
;;;3012   HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3013   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;3014     uint32_t tmpsmcr;
;;;3015     uint32_t tmpccmr1;
;;;3016     uint32_t tmpccer;
;;;3017   
;;;3018     /* Check the TIM handle allocation */
;;;3019     if (htim == NULL)
000008  b914              CBNZ     r4,|L24.16|
;;;3020     {
;;;3021       return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L24.12|
;;;3022     }
;;;3023   
;;;3024     /* Check the parameters */
;;;3025     assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
;;;3026     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;3027     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;3028     assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;3029     assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
;;;3030     assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
;;;3031     assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
;;;3032     assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
;;;3033     assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
;;;3034     assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;3035     assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
;;;3036     assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;3037     assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
;;;3038   
;;;3039     if (htim->State == HAL_TIM_STATE_RESET)
;;;3040     {
;;;3041       /* Allocate lock resource and initialize it */
;;;3042       htim->Lock = HAL_UNLOCKED;
;;;3043   
;;;3044   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3045       /* Reset interrupt callbacks to legacy weak callbacks */
;;;3046       TIM_ResetCallback(htim);
;;;3047   
;;;3048       if (htim->Encoder_MspInitCallback == NULL)
;;;3049       {
;;;3050         htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
;;;3051       }
;;;3052       /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;3053       htim->Encoder_MspInitCallback(htim);
;;;3054   #else
;;;3055       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;3056       HAL_TIM_Encoder_MspInit(htim);
;;;3057   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3058     }
;;;3059   
;;;3060     /* Set the TIM state */
;;;3061     htim->State = HAL_TIM_STATE_BUSY;
;;;3062   
;;;3063     /* Reset the SMS and ECE bits */
;;;3064     htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
;;;3065   
;;;3066     /* Configure the Time base in the Encoder Mode */
;;;3067     TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;3068   
;;;3069     /* Get the TIMx SMCR register value */
;;;3070     tmpsmcr = htim->Instance->SMCR;
;;;3071   
;;;3072     /* Get the TIMx CCMR1 register value */
;;;3073     tmpccmr1 = htim->Instance->CCMR1;
;;;3074   
;;;3075     /* Get the TIMx CCER register value */
;;;3076     tmpccer = htim->Instance->CCER;
;;;3077   
;;;3078     /* Set the encoder Mode */
;;;3079     tmpsmcr |= sConfig->EncoderMode;
;;;3080   
;;;3081     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;3082     tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
;;;3083     tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
;;;3084   
;;;3085     /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
;;;3086     tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
;;;3087     tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
;;;3088     tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
;;;3089     tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
;;;3090   
;;;3091     /* Set the TI1 and the TI2 Polarities */
;;;3092     tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
;;;3093     tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
;;;3094     tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
;;;3095   
;;;3096     /* Write to TIMx SMCR */
;;;3097     htim->Instance->SMCR = tmpsmcr;
;;;3098   
;;;3099     /* Write to TIMx CCMR1 */
;;;3100     htim->Instance->CCMR1 = tmpccmr1;
;;;3101   
;;;3102     /* Write to TIMx CCER */
;;;3103     htim->Instance->CCER = tmpccer;
;;;3104   
;;;3105     /* Initialize the DMA burst operation state */
;;;3106     htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
;;;3107   
;;;3108     /* Set the TIM channels state */
;;;3109     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
;;;3110     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
;;;3111     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
;;;3112     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
;;;3113   
;;;3114     /* Initialize the TIM state*/
;;;3115     htim->State = HAL_TIM_STATE_READY;
;;;3116   
;;;3117     return HAL_OK;
;;;3118   }
00000c  e8bd81f0          POP      {r4-r8,pc}
                  |L24.16|
000010  f894003d          LDRB     r0,[r4,#0x3d]         ;3039
000014  b928              CBNZ     r0,|L24.34|
000016  2000              MOVS     r0,#0                 ;3042
000018  f884003c          STRB     r0,[r4,#0x3c]         ;3042
00001c  4620              MOV      r0,r4                 ;3056
00001e  f7fffffe          BL       HAL_TIM_Encoder_MspInit
                  |L24.34|
000022  2002              MOVS     r0,#2                 ;3061
000024  f884003d          STRB     r0,[r4,#0x3d]         ;3061
000028  6820              LDR      r0,[r4,#0]            ;3064
00002a  6880              LDR      r0,[r0,#8]            ;3064
00002c  f2440107          MOV      r1,#0x4007            ;3064
000030  4388              BICS     r0,r0,r1              ;3064
000032  6821              LDR      r1,[r4,#0]            ;3064
000034  6088              STR      r0,[r1,#8]            ;3064
000036  1d21              ADDS     r1,r4,#4              ;3067
000038  6820              LDR      r0,[r4,#0]            ;3067
00003a  f7fffffe          BL       TIM_Base_SetConfig
00003e  6820              LDR      r0,[r4,#0]            ;3070
000040  f8d08008          LDR      r8,[r0,#8]            ;3070
000044  6820              LDR      r0,[r4,#0]            ;3073
000046  6986              LDR      r6,[r0,#0x18]         ;3073
000048  6820              LDR      r0,[r4,#0]            ;3076
00004a  6a07              LDR      r7,[r0,#0x20]         ;3076
00004c  6828              LDR      r0,[r5,#0]            ;3079
00004e  ea400808          ORR      r8,r0,r8              ;3079
000052  f2403003          MOV      r0,#0x303             ;3082
000056  4386              BICS     r6,r6,r0              ;3082
000058  69a9              LDR      r1,[r5,#0x18]         ;3083
00005a  68a8              LDR      r0,[r5,#8]            ;3083
00005c  ea402001          ORR      r0,r0,r1,LSL #8       ;3083
000060  4306              ORRS     r6,r6,r0              ;3083
000062  f640400c          MOV      r0,#0xc0c             ;3086
000066  4386              BICS     r6,r6,r0              ;3086
000068  f24f00f0          MOV      r0,#0xf0f0            ;3087
00006c  4386              BICS     r6,r6,r0              ;3087
00006e  69e9              LDR      r1,[r5,#0x1c]         ;3088
000070  68e8              LDR      r0,[r5,#0xc]          ;3088
000072  ea402001          ORR      r0,r0,r1,LSL #8       ;3088
000076  4306              ORRS     r6,r6,r0              ;3088
000078  6928              LDR      r0,[r5,#0x10]         ;3089
00007a  0100              LSLS     r0,r0,#4              ;3089
00007c  6a29              LDR      r1,[r5,#0x20]         ;3089
00007e  ea403001          ORR      r0,r0,r1,LSL #12      ;3089
000082  4306              ORRS     r6,r6,r0              ;3089
000084  f0270722          BIC      r7,r7,#0x22           ;3092
000088  f0270788          BIC      r7,r7,#0x88           ;3093
00008c  6969              LDR      r1,[r5,#0x14]         ;3094
00008e  6868              LDR      r0,[r5,#4]            ;3094
000090  ea401001          ORR      r0,r0,r1,LSL #4       ;3094
000094  4307              ORRS     r7,r7,r0              ;3094
000096  6820              LDR      r0,[r4,#0]            ;3097
000098  f8c08008          STR      r8,[r0,#8]            ;3097
00009c  6820              LDR      r0,[r4,#0]            ;3100
00009e  6186              STR      r6,[r0,#0x18]         ;3100
0000a0  6820              LDR      r0,[r4,#0]            ;3103
0000a2  6207              STR      r7,[r0,#0x20]         ;3103
0000a4  2001              MOVS     r0,#1                 ;3106
0000a6  f8840046          STRB     r0,[r4,#0x46]         ;3106
0000aa  f884003e          STRB     r0,[r4,#0x3e]         ;3109
0000ae  2101              MOVS     r1,#1                 ;3110
0000b0  203f              MOVS     r0,#0x3f              ;3110
0000b2  5501              STRB     r1,[r0,r4]            ;3110
0000b4  2001              MOVS     r0,#1                 ;3111
0000b6  f8840042          STRB     r0,[r4,#0x42]         ;3111
0000ba  2043              MOVS     r0,#0x43              ;3112
0000bc  5501              STRB     r1,[r0,r4]            ;3112
0000be  2001              MOVS     r0,#1                 ;3115
0000c0  f884003d          STRB     r0,[r4,#0x3d]         ;3115
0000c4  2000              MOVS     r0,#0                 ;3117
0000c6  e7a1              B        |L24.12|
;;;3119   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_MspDeInit PROC
;;;3185     */
;;;3186   __weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;3187   {
;;;3188     /* Prevent unused argument(s) compilation warning */
;;;3189     UNUSED(htim);
;;;3190   
;;;3191     /* NOTE : This function should not be modified, when the callback is needed,
;;;3192               the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
;;;3193      */
;;;3194   }
;;;3195   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_MspInit PROC
;;;3170     */
;;;3171   __weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;3172   {
;;;3173     /* Prevent unused argument(s) compilation warning */
;;;3174     UNUSED(htim);
;;;3175   
;;;3176     /* NOTE : This function should not be modified, when the callback is needed,
;;;3177               the HAL_TIM_Encoder_MspInit could be implemented in the user file
;;;3178      */
;;;3179   }
;;;3180   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Start PROC
;;;3205     */
;;;3206   HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;3207   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;3208     HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
000008  f894603e          LDRB     r6,[r4,#0x3e]
;;;3209     HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
00000c  203f              MOVS     r0,#0x3f
00000e  5d07              LDRB     r7,[r0,r4]
;;;3210     HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
000010  f8948042          LDRB     r8,[r4,#0x42]
;;;3211     HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
000014  2043              MOVS     r0,#0x43
000016  f8109004          LDRB     r9,[r0,r4]
;;;3212   
;;;3213     /* Check the parameters */
;;;3214     assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
;;;3215   
;;;3216     /* Set the TIM channel(s) state */
;;;3217     if (Channel == TIM_CHANNEL_1)
00001a  b96d              CBNZ     r5,|L27.56|
;;;3218     {
;;;3219       if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
00001c  2e01              CMP      r6,#1
00001e  d102              BNE      |L27.38|
;;;3220           || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
000020  f1b80f01          CMP      r8,#1
000024  d002              BEQ      |L27.44|
                  |L27.38|
;;;3221       {
;;;3222         return HAL_ERROR;
000026  2001              MOVS     r0,#1
                  |L27.40|
;;;3223       }
;;;3224       else
;;;3225       {
;;;3226         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3227         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3228       }
;;;3229     }
;;;3230     else if (Channel == TIM_CHANNEL_2)
;;;3231     {
;;;3232       if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
;;;3233           || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
;;;3234       {
;;;3235         return HAL_ERROR;
;;;3236       }
;;;3237       else
;;;3238       {
;;;3239         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3240         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3241       }
;;;3242     }
;;;3243     else
;;;3244     {
;;;3245       if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
;;;3246           || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
;;;3247           || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
;;;3248           || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
;;;3249       {
;;;3250         return HAL_ERROR;
;;;3251       }
;;;3252       else
;;;3253       {
;;;3254         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3255         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3256         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3257         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3258       }
;;;3259     }
;;;3260   
;;;3261     /* Enable the encoder interface channels */
;;;3262     switch (Channel)
;;;3263     {
;;;3264       case TIM_CHANNEL_1:
;;;3265       {
;;;3266         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;3267         break;
;;;3268       }
;;;3269   
;;;3270       case TIM_CHANNEL_2:
;;;3271       {
;;;3272         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;3273         break;
;;;3274       }
;;;3275   
;;;3276       default :
;;;3277       {
;;;3278         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;3279         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;3280         break;
;;;3281       }
;;;3282     }
;;;3283     /* Enable the Peripheral */
;;;3284     __HAL_TIM_ENABLE(htim);
;;;3285   
;;;3286     /* Return function status */
;;;3287     return HAL_OK;
;;;3288   }
000028  e8bd83f0          POP      {r4-r9,pc}
                  |L27.44|
00002c  2002              MOVS     r0,#2                 ;3226
00002e  f884003e          STRB     r0,[r4,#0x3e]         ;3226
000032  f8840042          STRB     r0,[r4,#0x42]         ;3227
000036  e025              B        |L27.132|
                  |L27.56|
000038  2d04              CMP      r5,#4                 ;3230
00003a  d10c              BNE      |L27.86|
00003c  2f01              CMP      r7,#1                 ;3232
00003e  d102              BNE      |L27.70|
000040  f1b90f01          CMP      r9,#1                 ;3233
000044  d001              BEQ      |L27.74|
                  |L27.70|
000046  2001              MOVS     r0,#1                 ;3235
000048  e7ee              B        |L27.40|
                  |L27.74|
00004a  2102              MOVS     r1,#2                 ;3239
00004c  203f              MOVS     r0,#0x3f              ;3239
00004e  5501              STRB     r1,[r0,r4]            ;3239
000050  2043              MOVS     r0,#0x43              ;3240
000052  5501              STRB     r1,[r0,r4]            ;3240
000054  e016              B        |L27.132|
                  |L27.86|
000056  2e01              CMP      r6,#1                 ;3245
000058  d107              BNE      |L27.106|
00005a  2f01              CMP      r7,#1                 ;3246
00005c  d105              BNE      |L27.106|
00005e  f1b80f01          CMP      r8,#1                 ;3247
000062  d102              BNE      |L27.106|
000064  f1b90f01          CMP      r9,#1                 ;3248
000068  d001              BEQ      |L27.110|
                  |L27.106|
00006a  2001              MOVS     r0,#1                 ;3250
00006c  e7dc              B        |L27.40|
                  |L27.110|
00006e  2002              MOVS     r0,#2                 ;3254
000070  f884003e          STRB     r0,[r4,#0x3e]         ;3254
000074  2102              MOVS     r1,#2                 ;3255
000076  203f              MOVS     r0,#0x3f              ;3255
000078  5501              STRB     r1,[r0,r4]            ;3255
00007a  2002              MOVS     r0,#2                 ;3256
00007c  f8840042          STRB     r0,[r4,#0x42]         ;3256
000080  2043              MOVS     r0,#0x43              ;3257
000082  5501              STRB     r1,[r0,r4]            ;3257
                  |L27.132|
000084  b115              CBZ      r5,|L27.140|
000086  2d04              CMP      r5,#4                 ;3262
000088  d10c              BNE      |L27.164|
00008a  e005              B        |L27.152|
                  |L27.140|
00008c  2201              MOVS     r2,#1                 ;3266
00008e  2100              MOVS     r1,#0                 ;3266
000090  6820              LDR      r0,[r4,#0]            ;3266
000092  f7fffffe          BL       TIM_CCxChannelCmd
000096  e010              B        |L27.186|
                  |L27.152|
000098  2201              MOVS     r2,#1                 ;3272
00009a  2104              MOVS     r1,#4                 ;3272
00009c  6820              LDR      r0,[r4,#0]            ;3272
00009e  f7fffffe          BL       TIM_CCxChannelCmd
0000a2  e00a              B        |L27.186|
                  |L27.164|
0000a4  2201              MOVS     r2,#1                 ;3278
0000a6  2100              MOVS     r1,#0                 ;3278
0000a8  6820              LDR      r0,[r4,#0]            ;3278
0000aa  f7fffffe          BL       TIM_CCxChannelCmd
0000ae  2201              MOVS     r2,#1                 ;3279
0000b0  2104              MOVS     r1,#4                 ;3279
0000b2  6820              LDR      r0,[r4,#0]            ;3279
0000b4  f7fffffe          BL       TIM_CCxChannelCmd
0000b8  bf00              NOP                            ;3280
                  |L27.186|
0000ba  bf00              NOP                            ;3267
0000bc  6820              LDR      r0,[r4,#0]            ;3284
0000be  6800              LDR      r0,[r0,#0]            ;3284
0000c0  f0400001          ORR      r0,r0,#1              ;3284
0000c4  6821              LDR      r1,[r4,#0]            ;3284
0000c6  6008              STR      r0,[r1,#0]            ;3284
0000c8  2000              MOVS     r0,#0                 ;3287
0000ca  e7ad              B        |L27.40|
;;;3289   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Encoder_Start_DMA PROC
;;;3524     */
;;;3525   HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;3526                                               uint32_t *pData2, uint16_t Length)
;;;3527   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  461e              MOV      r6,r3
00000a  9f0e              LDR      r7,[sp,#0x38]
;;;3528     HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
00000c  f894803e          LDRB     r8,[r4,#0x3e]
;;;3529     HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
000010  203f              MOVS     r0,#0x3f
000012  f8109004          LDRB     r9,[r0,r4]
;;;3530     HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
000016  f894a042          LDRB     r10,[r4,#0x42]
;;;3531     HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
00001a  2043              MOVS     r0,#0x43
00001c  f810b004          LDRB     r11,[r0,r4]
;;;3532   
;;;3533     /* Check the parameters */
;;;3534     assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
;;;3535   
;;;3536     /* Set the TIM channel(s) state */
;;;3537     if (Channel == TIM_CHANNEL_1)
000020  b9e5              CBNZ     r5,|L28.92|
;;;3538     {
;;;3539       if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
000022  f1b80f02          CMP      r8,#2
000026  d002              BEQ      |L28.46|
;;;3540           || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
000028  f1ba0f02          CMP      r10,#2
00002c  d103              BNE      |L28.54|
                  |L28.46|
;;;3541       {
;;;3542         return HAL_BUSY;
00002e  2002              MOVS     r0,#2
                  |L28.48|
;;;3543       }
;;;3544       else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
;;;3545                && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
;;;3546       {
;;;3547         if ((pData1 == NULL) && (Length > 0U))
;;;3548         {
;;;3549           return HAL_ERROR;
;;;3550         }
;;;3551         else
;;;3552         {
;;;3553           TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3554           TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3555         }
;;;3556       }
;;;3557       else
;;;3558       {
;;;3559         return HAL_ERROR;
;;;3560       }
;;;3561     }
;;;3562     else if (Channel == TIM_CHANNEL_2)
;;;3563     {
;;;3564       if ((channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
;;;3565           || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
;;;3566       {
;;;3567         return HAL_BUSY;
;;;3568       }
;;;3569       else if ((channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
;;;3570                && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
;;;3571       {
;;;3572         if ((pData2 == NULL) && (Length > 0U))
;;;3573         {
;;;3574           return HAL_ERROR;
;;;3575         }
;;;3576         else
;;;3577         {
;;;3578           TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3579           TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3580         }
;;;3581       }
;;;3582       else
;;;3583       {
;;;3584         return HAL_ERROR;
;;;3585       }
;;;3586     }
;;;3587     else
;;;3588     {
;;;3589       if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
;;;3590           || (channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
;;;3591           || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
;;;3592           || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
;;;3593       {
;;;3594         return HAL_BUSY;
;;;3595       }
;;;3596       else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
;;;3597                && (channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
;;;3598                && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
;;;3599                && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
;;;3600       {
;;;3601         if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
;;;3602         {
;;;3603           return HAL_ERROR;
;;;3604         }
;;;3605         else
;;;3606         {
;;;3607           TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3608           TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3609           TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3610           TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3611         }
;;;3612       }
;;;3613       else
;;;3614       {
;;;3615         return HAL_ERROR;
;;;3616       }
;;;3617     }
;;;3618   
;;;3619     switch (Channel)
;;;3620     {
;;;3621       case TIM_CHANNEL_1:
;;;3622       {
;;;3623         /* Set the DMA capture callbacks */
;;;3624         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;3625         htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;3626   
;;;3627         /* Set the DMA error callback */
;;;3628         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;3629   
;;;3630         /* Enable the DMA stream */
;;;3631         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
;;;3632                              Length) != HAL_OK)
;;;3633         {
;;;3634           /* Return error status */
;;;3635           return HAL_ERROR;
;;;3636         }
;;;3637         /* Enable the TIM Input Capture DMA request */
;;;3638         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;3639   
;;;3640         /* Enable the Capture compare channel */
;;;3641         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;3642   
;;;3643         /* Enable the Peripheral */
;;;3644         __HAL_TIM_ENABLE(htim);
;;;3645   
;;;3646         break;
;;;3647       }
;;;3648   
;;;3649       case TIM_CHANNEL_2:
;;;3650       {
;;;3651         /* Set the DMA capture callbacks */
;;;3652         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
;;;3653         htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;3654   
;;;3655         /* Set the DMA error callback */
;;;3656         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
;;;3657         /* Enable the DMA stream */
;;;3658         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
;;;3659                              Length) != HAL_OK)
;;;3660         {
;;;3661           /* Return error status */
;;;3662           return HAL_ERROR;
;;;3663         }
;;;3664         /* Enable the TIM Input Capture  DMA request */
;;;3665         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;3666   
;;;3667         /* Enable the Capture compare channel */
;;;3668         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;3669   
;;;3670         /* Enable the Peripheral */
;;;3671         __HAL_TIM_ENABLE(htim);
;;;3672   
;;;3673         break;
;;;3674       }
;;;3675   
;;;3676       default:
;;;3677       {
;;;3678         /* Set the DMA capture callbacks */
;;;3679         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;3680         htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;3681   
;;;3682         /* Set the DMA error callback */
;;;3683         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;3684   
;;;3685         /* Enable the DMA stream */
;;;3686         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1,
;;;3687                              Length) != HAL_OK)
;;;3688         {
;;;3689           /* Return error status */
;;;3690           return HAL_ERROR;
;;;3691         }
;;;3692   
;;;3693         /* Set the DMA capture callbacks */
;;;3694         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
;;;3695         htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;3696   
;;;3697         /* Set the DMA error callback */
;;;3698         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;3699   
;;;3700         /* Enable the DMA stream */
;;;3701         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2,
;;;3702                              Length) != HAL_OK)
;;;3703         {
;;;3704           /* Return error status */
;;;3705           return HAL_ERROR;
;;;3706         }
;;;3707   
;;;3708         /* Enable the TIM Input Capture  DMA request */
;;;3709         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;3710         /* Enable the TIM Input Capture  DMA request */
;;;3711         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;3712   
;;;3713         /* Enable the Capture compare channel */
;;;3714         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;3715         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;3716   
;;;3717         /* Enable the Peripheral */
;;;3718         __HAL_TIM_ENABLE(htim);
;;;3719   
;;;3720         break;
;;;3721       }
;;;3722     }
;;;3723   
;;;3724     /* Return function status */
;;;3725     return HAL_OK;
;;;3726   }
000030  b004              ADD      sp,sp,#0x10
000032  e8bd9ff0          POP      {r4-r12,pc}
                  |L28.54|
000036  f1b80f01          CMP      r8,#1                 ;3544
00003a  d10d              BNE      |L28.88|
00003c  f1ba0f01          CMP      r10,#1                ;3545
000040  d10a              BNE      |L28.88|
000042  9802              LDR      r0,[sp,#8]            ;3547
000044  b910              CBNZ     r0,|L28.76|
000046  b10f              CBZ      r7,|L28.76|
000048  2001              MOVS     r0,#1                 ;3549
00004a  e7f1              B        |L28.48|
                  |L28.76|
00004c  2002              MOVS     r0,#2                 ;3553
00004e  f884003e          STRB     r0,[r4,#0x3e]         ;3553
000052  f8840042          STRB     r0,[r4,#0x42]         ;3554
000056  e04b              B        |L28.240|
                  |L28.88|
000058  2001              MOVS     r0,#1                 ;3559
00005a  e7e9              B        |L28.48|
                  |L28.92|
00005c  2d04              CMP      r5,#4                 ;3562
00005e  d119              BNE      |L28.148|
000060  f1b90f02          CMP      r9,#2                 ;3564
000064  d002              BEQ      |L28.108|
000066  f1bb0f02          CMP      r11,#2                ;3565
00006a  d101              BNE      |L28.112|
                  |L28.108|
00006c  2002              MOVS     r0,#2                 ;3567
00006e  e7df              B        |L28.48|
                  |L28.112|
000070  f1b90f01          CMP      r9,#1                 ;3569
000074  d10c              BNE      |L28.144|
000076  f1bb0f01          CMP      r11,#1                ;3570
00007a  d109              BNE      |L28.144|
00007c  b916              CBNZ     r6,|L28.132|
00007e  b10f              CBZ      r7,|L28.132|
000080  2001              MOVS     r0,#1                 ;3574
000082  e7d5              B        |L28.48|
                  |L28.132|
000084  2102              MOVS     r1,#2                 ;3578
000086  203f              MOVS     r0,#0x3f              ;3578
000088  5501              STRB     r1,[r0,r4]            ;3578
00008a  2043              MOVS     r0,#0x43              ;3579
00008c  5501              STRB     r1,[r0,r4]            ;3579
00008e  e02f              B        |L28.240|
                  |L28.144|
000090  2001              MOVS     r0,#1                 ;3584
000092  e7cd              B        |L28.48|
                  |L28.148|
000094  f1b80f02          CMP      r8,#2                 ;3589
000098  d008              BEQ      |L28.172|
00009a  f1b90f02          CMP      r9,#2                 ;3590
00009e  d005              BEQ      |L28.172|
0000a0  f1ba0f02          CMP      r10,#2                ;3591
0000a4  d002              BEQ      |L28.172|
0000a6  f1bb0f02          CMP      r11,#2                ;3592
0000aa  d101              BNE      |L28.176|
                  |L28.172|
0000ac  2002              MOVS     r0,#2                 ;3594
0000ae  e7bf              B        |L28.48|
                  |L28.176|
0000b0  f1b80f01          CMP      r8,#1                 ;3596
0000b4  d11a              BNE      |L28.236|
0000b6  f1b90f01          CMP      r9,#1                 ;3597
0000ba  d117              BNE      |L28.236|
0000bc  f1ba0f01          CMP      r10,#1                ;3598
0000c0  d114              BNE      |L28.236|
0000c2  f1bb0f01          CMP      r11,#1                ;3599
0000c6  d111              BNE      |L28.236|
0000c8  9802              LDR      r0,[sp,#8]            ;3601
0000ca  b100              CBZ      r0,|L28.206|
0000cc  b916              CBNZ     r6,|L28.212|
                  |L28.206|
0000ce  b10f              CBZ      r7,|L28.212|
0000d0  2001              MOVS     r0,#1                 ;3603
0000d2  e7ad              B        |L28.48|
                  |L28.212|
0000d4  2002              MOVS     r0,#2                 ;3607
0000d6  f884003e          STRB     r0,[r4,#0x3e]         ;3607
0000da  2102              MOVS     r1,#2                 ;3608
0000dc  203f              MOVS     r0,#0x3f              ;3608
0000de  5501              STRB     r1,[r0,r4]            ;3608
0000e0  2002              MOVS     r0,#2                 ;3609
0000e2  f8840042          STRB     r0,[r4,#0x42]         ;3609
0000e6  2043              MOVS     r0,#0x43              ;3610
0000e8  5501              STRB     r1,[r0,r4]            ;3610
0000ea  e001              B        |L28.240|
                  |L28.236|
0000ec  2001              MOVS     r0,#1                 ;3615
0000ee  e79f              B        |L28.48|
                  |L28.240|
0000f0  b115              CBZ      r5,|L28.248|
0000f2  2d04              CMP      r5,#4                 ;3619
0000f4  d14c              BNE      |L28.400|
0000f6  e025              B        |L28.324|
                  |L28.248|
0000f8  4949              LDR      r1,|L28.544|
0000fa  6a60              LDR      r0,[r4,#0x24]         ;3624
0000fc  63c1              STR      r1,[r0,#0x3c]         ;3624
0000fe  4949              LDR      r1,|L28.548|
000100  6a60              LDR      r0,[r4,#0x24]         ;3625
000102  6401              STR      r1,[r0,#0x40]         ;3625
000104  4948              LDR      r1,|L28.552|
000106  6a60              LDR      r0,[r4,#0x24]         ;3628
000108  64c1              STR      r1,[r0,#0x4c]         ;3628
00010a  6822              LDR      r2,[r4,#0]            ;3631
00010c  f1020134          ADD      r1,r2,#0x34           ;3631
000110  463b              MOV      r3,r7                 ;3631
000112  6a60              LDR      r0,[r4,#0x24]         ;3631
000114  9a02              LDR      r2,[sp,#8]            ;3631
000116  f7fffffe          BL       HAL_DMA_Start_IT
00011a  b108              CBZ      r0,|L28.288|
00011c  2001              MOVS     r0,#1                 ;3635
00011e  e787              B        |L28.48|
                  |L28.288|
000120  6820              LDR      r0,[r4,#0]            ;3638
000122  68c0              LDR      r0,[r0,#0xc]          ;3638
000124  f4407000          ORR      r0,r0,#0x200          ;3638
000128  6821              LDR      r1,[r4,#0]            ;3638
00012a  60c8              STR      r0,[r1,#0xc]          ;3638
00012c  2201              MOVS     r2,#1                 ;3641
00012e  2100              MOVS     r1,#0                 ;3641
000130  6820              LDR      r0,[r4,#0]            ;3641
000132  f7fffffe          BL       TIM_CCxChannelCmd
000136  6820              LDR      r0,[r4,#0]            ;3644
000138  6800              LDR      r0,[r0,#0]            ;3644
00013a  f0400001          ORR      r0,r0,#1              ;3644
00013e  6821              LDR      r1,[r4,#0]            ;3644
000140  6008              STR      r0,[r1,#0]            ;3644
000142  e06a              B        |L28.538|
                  |L28.324|
000144  4936              LDR      r1,|L28.544|
000146  6aa0              LDR      r0,[r4,#0x28]         ;3652
000148  63c1              STR      r1,[r0,#0x3c]         ;3652
00014a  4936              LDR      r1,|L28.548|
00014c  6aa0              LDR      r0,[r4,#0x28]         ;3653
00014e  6401              STR      r1,[r0,#0x40]         ;3653
000150  4935              LDR      r1,|L28.552|
000152  6aa0              LDR      r0,[r4,#0x28]         ;3656
000154  64c1              STR      r1,[r0,#0x4c]         ;3656
000156  6822              LDR      r2,[r4,#0]            ;3658
000158  f1020138          ADD      r1,r2,#0x38           ;3658
00015c  463b              MOV      r3,r7                 ;3658
00015e  4632              MOV      r2,r6                 ;3658
000160  6aa0              LDR      r0,[r4,#0x28]         ;3658
000162  f7fffffe          BL       HAL_DMA_Start_IT
000166  b108              CBZ      r0,|L28.364|
000168  2001              MOVS     r0,#1                 ;3662
00016a  e761              B        |L28.48|
                  |L28.364|
00016c  6820              LDR      r0,[r4,#0]            ;3665
00016e  68c0              LDR      r0,[r0,#0xc]          ;3665
000170  f4406080          ORR      r0,r0,#0x400          ;3665
000174  6821              LDR      r1,[r4,#0]            ;3665
000176  60c8              STR      r0,[r1,#0xc]          ;3665
000178  2201              MOVS     r2,#1                 ;3668
00017a  2104              MOVS     r1,#4                 ;3668
00017c  6820              LDR      r0,[r4,#0]            ;3668
00017e  f7fffffe          BL       TIM_CCxChannelCmd
000182  6820              LDR      r0,[r4,#0]            ;3671
000184  6800              LDR      r0,[r0,#0]            ;3671
000186  f0400001          ORR      r0,r0,#1              ;3671
00018a  6821              LDR      r1,[r4,#0]            ;3671
00018c  6008              STR      r0,[r1,#0]            ;3671
00018e  e044              B        |L28.538|
                  |L28.400|
000190  4923              LDR      r1,|L28.544|
000192  6a60              LDR      r0,[r4,#0x24]         ;3679
000194  63c1              STR      r1,[r0,#0x3c]         ;3679
000196  4923              LDR      r1,|L28.548|
000198  6a60              LDR      r0,[r4,#0x24]         ;3680
00019a  6401              STR      r1,[r0,#0x40]         ;3680
00019c  4922              LDR      r1,|L28.552|
00019e  6a60              LDR      r0,[r4,#0x24]         ;3683
0001a0  64c1              STR      r1,[r0,#0x4c]         ;3683
0001a2  6822              LDR      r2,[r4,#0]            ;3686
0001a4  f1020134          ADD      r1,r2,#0x34           ;3686
0001a8  463b              MOV      r3,r7                 ;3686
0001aa  6a60              LDR      r0,[r4,#0x24]         ;3686
0001ac  9a02              LDR      r2,[sp,#8]            ;3686
0001ae  f7fffffe          BL       HAL_DMA_Start_IT
0001b2  b108              CBZ      r0,|L28.440|
0001b4  2001              MOVS     r0,#1                 ;3690
0001b6  e73b              B        |L28.48|
                  |L28.440|
0001b8  4919              LDR      r1,|L28.544|
0001ba  6aa0              LDR      r0,[r4,#0x28]         ;3694
0001bc  63c1              STR      r1,[r0,#0x3c]         ;3694
0001be  4919              LDR      r1,|L28.548|
0001c0  6aa0              LDR      r0,[r4,#0x28]         ;3695
0001c2  6401              STR      r1,[r0,#0x40]         ;3695
0001c4  4918              LDR      r1,|L28.552|
0001c6  6aa0              LDR      r0,[r4,#0x28]         ;3698
0001c8  64c1              STR      r1,[r0,#0x4c]         ;3698
0001ca  6822              LDR      r2,[r4,#0]            ;3701
0001cc  f1020138          ADD      r1,r2,#0x38           ;3701
0001d0  463b              MOV      r3,r7                 ;3701
0001d2  4632              MOV      r2,r6                 ;3701
0001d4  6aa0              LDR      r0,[r4,#0x28]         ;3701
0001d6  f7fffffe          BL       HAL_DMA_Start_IT
0001da  b108              CBZ      r0,|L28.480|
0001dc  2001              MOVS     r0,#1                 ;3705
0001de  e727              B        |L28.48|
                  |L28.480|
0001e0  6820              LDR      r0,[r4,#0]            ;3709
0001e2  68c0              LDR      r0,[r0,#0xc]          ;3709
0001e4  f4407000          ORR      r0,r0,#0x200          ;3709
0001e8  6821              LDR      r1,[r4,#0]            ;3709
0001ea  60c8              STR      r0,[r1,#0xc]          ;3709
0001ec  6820              LDR      r0,[r4,#0]            ;3711
0001ee  68c0              LDR      r0,[r0,#0xc]          ;3711
0001f0  f4406080          ORR      r0,r0,#0x400          ;3711
0001f4  6821              LDR      r1,[r4,#0]            ;3711
0001f6  60c8              STR      r0,[r1,#0xc]          ;3711
0001f8  2201              MOVS     r2,#1                 ;3714
0001fa  2100              MOVS     r1,#0                 ;3714
0001fc  6820              LDR      r0,[r4,#0]            ;3714
0001fe  f7fffffe          BL       TIM_CCxChannelCmd
000202  2201              MOVS     r2,#1                 ;3715
000204  2104              MOVS     r1,#4                 ;3715
000206  6820              LDR      r0,[r4,#0]            ;3715
000208  f7fffffe          BL       TIM_CCxChannelCmd
00020c  6820              LDR      r0,[r4,#0]            ;3718
00020e  6800              LDR      r0,[r0,#0]            ;3718
000210  f0400001          ORR      r0,r0,#1              ;3718
000214  6821              LDR      r1,[r4,#0]            ;3718
000216  6008              STR      r0,[r1,#0]            ;3718
000218  bf00              NOP                            ;3720
                  |L28.538|
00021a  bf00              NOP                            ;3646
00021c  2000              MOVS     r0,#0                 ;3725
00021e  e707              B        |L28.48|
;;;3727   
                          ENDP

                  |L28.544|
                          DCD      TIM_DMACaptureCplt
                  |L28.548|
                          DCD      TIM_DMACaptureHalfCplt
                  |L28.552|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIM_Encoder_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Start_IT PROC
;;;3359     */
;;;3360   HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;3361   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;3362     HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
000008  f894603e          LDRB     r6,[r4,#0x3e]
;;;3363     HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
00000c  203f              MOVS     r0,#0x3f
00000e  5d07              LDRB     r7,[r0,r4]
;;;3364     HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
000010  f8948042          LDRB     r8,[r4,#0x42]
;;;3365     HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
000014  2043              MOVS     r0,#0x43
000016  f8109004          LDRB     r9,[r0,r4]
;;;3366   
;;;3367     /* Check the parameters */
;;;3368     assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
;;;3369   
;;;3370     /* Set the TIM channel(s) state */
;;;3371     if (Channel == TIM_CHANNEL_1)
00001a  b96d              CBNZ     r5,|L29.56|
;;;3372     {
;;;3373       if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
00001c  2e01              CMP      r6,#1
00001e  d102              BNE      |L29.38|
;;;3374           || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
000020  f1b80f01          CMP      r8,#1
000024  d002              BEQ      |L29.44|
                  |L29.38|
;;;3375       {
;;;3376         return HAL_ERROR;
000026  2001              MOVS     r0,#1
                  |L29.40|
;;;3377       }
;;;3378       else
;;;3379       {
;;;3380         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3381         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3382       }
;;;3383     }
;;;3384     else if (Channel == TIM_CHANNEL_2)
;;;3385     {
;;;3386       if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
;;;3387           || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
;;;3388       {
;;;3389         return HAL_ERROR;
;;;3390       }
;;;3391       else
;;;3392       {
;;;3393         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3394         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3395       }
;;;3396     }
;;;3397     else
;;;3398     {
;;;3399       if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
;;;3400           || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
;;;3401           || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
;;;3402           || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
;;;3403       {
;;;3404         return HAL_ERROR;
;;;3405       }
;;;3406       else
;;;3407       {
;;;3408         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3409         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3410         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3411         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;3412       }
;;;3413     }
;;;3414   
;;;3415     /* Enable the encoder interface channels */
;;;3416     /* Enable the capture compare Interrupts 1 and/or 2 */
;;;3417     switch (Channel)
;;;3418     {
;;;3419       case TIM_CHANNEL_1:
;;;3420       {
;;;3421         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;3422         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;3423         break;
;;;3424       }
;;;3425   
;;;3426       case TIM_CHANNEL_2:
;;;3427       {
;;;3428         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;3429         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;3430         break;
;;;3431       }
;;;3432   
;;;3433       default :
;;;3434       {
;;;3435         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;3436         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;3437         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;3438         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;3439         break;
;;;3440       }
;;;3441     }
;;;3442   
;;;3443     /* Enable the Peripheral */
;;;3444     __HAL_TIM_ENABLE(htim);
;;;3445   
;;;3446     /* Return function status */
;;;3447     return HAL_OK;
;;;3448   }
000028  e8bd83f0          POP      {r4-r9,pc}
                  |L29.44|
00002c  2002              MOVS     r0,#2                 ;3380
00002e  f884003e          STRB     r0,[r4,#0x3e]         ;3380
000032  f8840042          STRB     r0,[r4,#0x42]         ;3381
000036  e025              B        |L29.132|
                  |L29.56|
000038  2d04              CMP      r5,#4                 ;3384
00003a  d10c              BNE      |L29.86|
00003c  2f01              CMP      r7,#1                 ;3386
00003e  d102              BNE      |L29.70|
000040  f1b90f01          CMP      r9,#1                 ;3387
000044  d001              BEQ      |L29.74|
                  |L29.70|
000046  2001              MOVS     r0,#1                 ;3389
000048  e7ee              B        |L29.40|
                  |L29.74|
00004a  2102              MOVS     r1,#2                 ;3393
00004c  203f              MOVS     r0,#0x3f              ;3393
00004e  5501              STRB     r1,[r0,r4]            ;3393
000050  2043              MOVS     r0,#0x43              ;3394
000052  5501              STRB     r1,[r0,r4]            ;3394
000054  e016              B        |L29.132|
                  |L29.86|
000056  2e01              CMP      r6,#1                 ;3399
000058  d107              BNE      |L29.106|
00005a  2f01              CMP      r7,#1                 ;3400
00005c  d105              BNE      |L29.106|
00005e  f1b80f01          CMP      r8,#1                 ;3401
000062  d102              BNE      |L29.106|
000064  f1b90f01          CMP      r9,#1                 ;3402
000068  d001              BEQ      |L29.110|
                  |L29.106|
00006a  2001              MOVS     r0,#1                 ;3404
00006c  e7dc              B        |L29.40|
                  |L29.110|
00006e  2002              MOVS     r0,#2                 ;3408
000070  f884003e          STRB     r0,[r4,#0x3e]         ;3408
000074  2102              MOVS     r1,#2                 ;3409
000076  203f              MOVS     r0,#0x3f              ;3409
000078  5501              STRB     r1,[r0,r4]            ;3409
00007a  2002              MOVS     r0,#2                 ;3410
00007c  f8840042          STRB     r0,[r4,#0x42]         ;3410
000080  2043              MOVS     r0,#0x43              ;3411
000082  5501              STRB     r1,[r0,r4]            ;3411
                  |L29.132|
000084  b115              CBZ      r5,|L29.140|
000086  2d04              CMP      r5,#4                 ;3417
000088  d118              BNE      |L29.188|
00008a  e00b              B        |L29.164|
                  |L29.140|
00008c  2201              MOVS     r2,#1                 ;3421
00008e  2100              MOVS     r1,#0                 ;3421
000090  6820              LDR      r0,[r4,#0]            ;3421
000092  f7fffffe          BL       TIM_CCxChannelCmd
000096  6820              LDR      r0,[r4,#0]            ;3422
000098  68c0              LDR      r0,[r0,#0xc]          ;3422
00009a  f0400002          ORR      r0,r0,#2              ;3422
00009e  6821              LDR      r1,[r4,#0]            ;3422
0000a0  60c8              STR      r0,[r1,#0xc]          ;3422
0000a2  e022              B        |L29.234|
                  |L29.164|
0000a4  2201              MOVS     r2,#1                 ;3428
0000a6  2104              MOVS     r1,#4                 ;3428
0000a8  6820              LDR      r0,[r4,#0]            ;3428
0000aa  f7fffffe          BL       TIM_CCxChannelCmd
0000ae  6820              LDR      r0,[r4,#0]            ;3429
0000b0  68c0              LDR      r0,[r0,#0xc]          ;3429
0000b2  f0400004          ORR      r0,r0,#4              ;3429
0000b6  6821              LDR      r1,[r4,#0]            ;3429
0000b8  60c8              STR      r0,[r1,#0xc]          ;3429
0000ba  e016              B        |L29.234|
                  |L29.188|
0000bc  2201              MOVS     r2,#1                 ;3435
0000be  2100              MOVS     r1,#0                 ;3435
0000c0  6820              LDR      r0,[r4,#0]            ;3435
0000c2  f7fffffe          BL       TIM_CCxChannelCmd
0000c6  2201              MOVS     r2,#1                 ;3436
0000c8  2104              MOVS     r1,#4                 ;3436
0000ca  6820              LDR      r0,[r4,#0]            ;3436
0000cc  f7fffffe          BL       TIM_CCxChannelCmd
0000d0  6820              LDR      r0,[r4,#0]            ;3437
0000d2  68c0              LDR      r0,[r0,#0xc]          ;3437
0000d4  f0400002          ORR      r0,r0,#2              ;3437
0000d8  6821              LDR      r1,[r4,#0]            ;3437
0000da  60c8              STR      r0,[r1,#0xc]          ;3437
0000dc  6820              LDR      r0,[r4,#0]            ;3438
0000de  68c0              LDR      r0,[r0,#0xc]          ;3438
0000e0  f0400004          ORR      r0,r0,#4              ;3438
0000e4  6821              LDR      r1,[r4,#0]            ;3438
0000e6  60c8              STR      r0,[r1,#0xc]          ;3438
0000e8  bf00              NOP                            ;3439
                  |L29.234|
0000ea  bf00              NOP                            ;3423
0000ec  6820              LDR      r0,[r4,#0]            ;3444
0000ee  6800              LDR      r0,[r0,#0]            ;3444
0000f0  f0400001          ORR      r0,r0,#1              ;3444
0000f4  6821              LDR      r1,[r4,#0]            ;3444
0000f6  6008              STR      r0,[r1,#0]            ;3444
0000f8  2000              MOVS     r0,#0                 ;3447
0000fa  e795              B        |L29.40|
;;;3449   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Stop PROC
;;;3299     */
;;;3300   HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3301   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3302     /* Check the parameters */
;;;3303     assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
;;;3304   
;;;3305     /* Disable the Input Capture channels 1 and 2
;;;3306       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
;;;3307     switch (Channel)
000006  b115              CBZ      r5,|L30.14|
000008  2d04              CMP      r5,#4
00000a  d10c              BNE      |L30.38|
00000c  e005              B        |L30.26|
                  |L30.14|
;;;3308     {
;;;3309       case TIM_CHANNEL_1:
;;;3310       {
;;;3311         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
00000e  2200              MOVS     r2,#0
000010  4611              MOV      r1,r2
000012  6820              LDR      r0,[r4,#0]
000014  f7fffffe          BL       TIM_CCxChannelCmd
;;;3312         break;
000018  e010              B        |L30.60|
                  |L30.26|
;;;3313       }
;;;3314   
;;;3315       case TIM_CHANNEL_2:
;;;3316       {
;;;3317         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
00001a  2200              MOVS     r2,#0
00001c  2104              MOVS     r1,#4
00001e  6820              LDR      r0,[r4,#0]
000020  f7fffffe          BL       TIM_CCxChannelCmd
;;;3318         break;
000024  e00a              B        |L30.60|
                  |L30.38|
;;;3319       }
;;;3320   
;;;3321       default :
;;;3322       {
;;;3323         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000026  2200              MOVS     r2,#0
000028  4611              MOV      r1,r2
00002a  6820              LDR      r0,[r4,#0]
00002c  f7fffffe          BL       TIM_CCxChannelCmd
;;;3324         TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
000030  2200              MOVS     r2,#0
000032  2104              MOVS     r1,#4
000034  6820              LDR      r0,[r4,#0]
000036  f7fffffe          BL       TIM_CCxChannelCmd
;;;3325         break;
00003a  bf00              NOP      
                  |L30.60|
00003c  bf00              NOP                            ;3312
;;;3326       }
;;;3327     }
;;;3328   
;;;3329     /* Disable the Peripheral */
;;;3330     __HAL_TIM_DISABLE(htim);
00003e  bf00              NOP      
000040  6820              LDR      r0,[r4,#0]
000042  6a00              LDR      r0,[r0,#0x20]
000044  f2411111          MOV      r1,#0x1111
000048  4008              ANDS     r0,r0,r1
00004a  b950              CBNZ     r0,|L30.98|
00004c  6820              LDR      r0,[r4,#0]
00004e  6a00              LDR      r0,[r0,#0x20]
000050  1089              ASRS     r1,r1,#2
000052  4008              ANDS     r0,r0,r1
000054  b928              CBNZ     r0,|L30.98|
000056  6820              LDR      r0,[r4,#0]
000058  6800              LDR      r0,[r0,#0]
00005a  f0200001          BIC      r0,r0,#1
00005e  6821              LDR      r1,[r4,#0]
000060  6008              STR      r0,[r1,#0]
                  |L30.98|
000062  bf00              NOP      
;;;3331   
;;;3332     /* Set the TIM channel(s) state */
;;;3333     if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
000064  b10d              CBZ      r5,|L30.106|
000066  2d04              CMP      r5,#4
000068  d128              BNE      |L30.188|
                  |L30.106|
;;;3334     {
;;;3335       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
00006a  b91d              CBNZ     r5,|L30.116|
00006c  2001              MOVS     r0,#1
00006e  f884003e          STRB     r0,[r4,#0x3e]
000072  e00e              B        |L30.146|
                  |L30.116|
000074  2d04              CMP      r5,#4
000076  d103              BNE      |L30.128|
000078  2101              MOVS     r1,#1
00007a  203f              MOVS     r0,#0x3f
00007c  5501              STRB     r1,[r0,r4]
00007e  e008              B        |L30.146|
                  |L30.128|
000080  2d08              CMP      r5,#8
000082  d103              BNE      |L30.140|
000084  2101              MOVS     r1,#1
000086  2040              MOVS     r0,#0x40
000088  5501              STRB     r1,[r0,r4]
00008a  e002              B        |L30.146|
                  |L30.140|
00008c  2101              MOVS     r1,#1
00008e  2041              MOVS     r0,#0x41
000090  5501              STRB     r1,[r0,r4]
                  |L30.146|
;;;3336       TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
000092  b91d              CBNZ     r5,|L30.156|
000094  2001              MOVS     r0,#1
000096  f8840042          STRB     r0,[r4,#0x42]
00009a  e01a              B        |L30.210|
                  |L30.156|
00009c  2d04              CMP      r5,#4
00009e  d103              BNE      |L30.168|
0000a0  2101              MOVS     r1,#1
0000a2  2043              MOVS     r0,#0x43
0000a4  5501              STRB     r1,[r0,r4]
0000a6  e014              B        |L30.210|
                  |L30.168|
0000a8  2d08              CMP      r5,#8
0000aa  d103              BNE      |L30.180|
0000ac  2101              MOVS     r1,#1
0000ae  2044              MOVS     r0,#0x44
0000b0  5501              STRB     r1,[r0,r4]
0000b2  e00e              B        |L30.210|
                  |L30.180|
0000b4  2101              MOVS     r1,#1
0000b6  2045              MOVS     r0,#0x45
0000b8  5501              STRB     r1,[r0,r4]
0000ba  e00a              B        |L30.210|
                  |L30.188|
;;;3337     }
;;;3338     else
;;;3339     {
;;;3340       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
0000bc  2001              MOVS     r0,#1
0000be  f884003e          STRB     r0,[r4,#0x3e]
;;;3341       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
0000c2  2101              MOVS     r1,#1
0000c4  203f              MOVS     r0,#0x3f
0000c6  5501              STRB     r1,[r0,r4]
;;;3342       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
0000c8  2001              MOVS     r0,#1
0000ca  f8840042          STRB     r0,[r4,#0x42]
;;;3343       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
0000ce  2043              MOVS     r0,#0x43
0000d0  5501              STRB     r1,[r0,r4]
                  |L30.210|
;;;3344     }
;;;3345   
;;;3346     /* Return function status */
;;;3347     return HAL_OK;
0000d2  2000              MOVS     r0,#0
;;;3348   }
0000d4  bd30              POP      {r4,r5,pc}
;;;3349   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Stop_DMA PROC
;;;3737     */
;;;3738   HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;3739   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3740     /* Check the parameters */
;;;3741     assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
;;;3742   
;;;3743     /* Disable the Input Capture channels 1 and 2
;;;3744       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
;;;3745     if (Channel == TIM_CHANNEL_1)
000006  b975              CBNZ     r5,|L31.38|
;;;3746     {
;;;3747       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000008  2200              MOVS     r2,#0
00000a  4611              MOV      r1,r2
00000c  6820              LDR      r0,[r4,#0]
00000e  f7fffffe          BL       TIM_CCxChannelCmd
;;;3748   
;;;3749       /* Disable the capture compare DMA Request 1 */
;;;3750       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f4207000          BIC      r0,r0,#0x200
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;3751       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
00001e  6a60              LDR      r0,[r4,#0x24]
000020  f7fffffe          BL       HAL_DMA_Abort_IT
000024  e02c              B        |L31.128|
                  |L31.38|
;;;3752     }
;;;3753     else if (Channel == TIM_CHANNEL_2)
000026  2d04              CMP      r5,#4
000028  d10e              BNE      |L31.72|
;;;3754     {
;;;3755       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
00002a  2200              MOVS     r2,#0
00002c  2104              MOVS     r1,#4
00002e  6820              LDR      r0,[r4,#0]
000030  f7fffffe          BL       TIM_CCxChannelCmd
;;;3756   
;;;3757       /* Disable the capture compare DMA Request 2 */
;;;3758       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f4206080          BIC      r0,r0,#0x400
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;3759       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
000040  6aa0              LDR      r0,[r4,#0x28]
000042  f7fffffe          BL       HAL_DMA_Abort_IT
000046  e01b              B        |L31.128|
                  |L31.72|
;;;3760     }
;;;3761     else
;;;3762     {
;;;3763       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000048  2200              MOVS     r2,#0
00004a  4611              MOV      r1,r2
00004c  6820              LDR      r0,[r4,#0]
00004e  f7fffffe          BL       TIM_CCxChannelCmd
;;;3764       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
000052  2200              MOVS     r2,#0
000054  2104              MOVS     r1,#4
000056  6820              LDR      r0,[r4,#0]
000058  f7fffffe          BL       TIM_CCxChannelCmd
;;;3765   
;;;3766       /* Disable the capture compare DMA Request 1 and 2 */
;;;3767       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00005c  6820              LDR      r0,[r4,#0]
00005e  68c0              LDR      r0,[r0,#0xc]
000060  f4207000          BIC      r0,r0,#0x200
000064  6821              LDR      r1,[r4,#0]
000066  60c8              STR      r0,[r1,#0xc]
;;;3768       __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000068  6820              LDR      r0,[r4,#0]
00006a  68c0              LDR      r0,[r0,#0xc]
00006c  f4206080          BIC      r0,r0,#0x400
000070  6821              LDR      r1,[r4,#0]
000072  60c8              STR      r0,[r1,#0xc]
;;;3769       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
000074  6a60              LDR      r0,[r4,#0x24]
000076  f7fffffe          BL       HAL_DMA_Abort_IT
;;;3770       (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
00007a  6aa0              LDR      r0,[r4,#0x28]
00007c  f7fffffe          BL       HAL_DMA_Abort_IT
                  |L31.128|
;;;3771     }
;;;3772   
;;;3773     /* Disable the Peripheral */
;;;3774     __HAL_TIM_DISABLE(htim);
000080  bf00              NOP      
000082  6820              LDR      r0,[r4,#0]
000084  6a00              LDR      r0,[r0,#0x20]
000086  f2411111          MOV      r1,#0x1111
00008a  4008              ANDS     r0,r0,r1
00008c  b950              CBNZ     r0,|L31.164|
00008e  6820              LDR      r0,[r4,#0]
000090  6a00              LDR      r0,[r0,#0x20]
000092  1089              ASRS     r1,r1,#2
000094  4008              ANDS     r0,r0,r1
000096  b928              CBNZ     r0,|L31.164|
000098  6820              LDR      r0,[r4,#0]
00009a  6800              LDR      r0,[r0,#0]
00009c  f0200001          BIC      r0,r0,#1
0000a0  6821              LDR      r1,[r4,#0]
0000a2  6008              STR      r0,[r1,#0]
                  |L31.164|
0000a4  bf00              NOP      
;;;3775   
;;;3776     /* Set the TIM channel(s) state */
;;;3777     if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
0000a6  b10d              CBZ      r5,|L31.172|
0000a8  2d04              CMP      r5,#4
0000aa  d128              BNE      |L31.254|
                  |L31.172|
;;;3778     {
;;;3779       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000ac  b91d              CBNZ     r5,|L31.182|
0000ae  2001              MOVS     r0,#1
0000b0  f884003e          STRB     r0,[r4,#0x3e]
0000b4  e00e              B        |L31.212|
                  |L31.182|
0000b6  2d04              CMP      r5,#4
0000b8  d103              BNE      |L31.194|
0000ba  2101              MOVS     r1,#1
0000bc  203f              MOVS     r0,#0x3f
0000be  5501              STRB     r1,[r0,r4]
0000c0  e008              B        |L31.212|
                  |L31.194|
0000c2  2d08              CMP      r5,#8
0000c4  d103              BNE      |L31.206|
0000c6  2101              MOVS     r1,#1
0000c8  2040              MOVS     r0,#0x40
0000ca  5501              STRB     r1,[r0,r4]
0000cc  e002              B        |L31.212|
                  |L31.206|
0000ce  2101              MOVS     r1,#1
0000d0  2041              MOVS     r0,#0x41
0000d2  5501              STRB     r1,[r0,r4]
                  |L31.212|
;;;3780       TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000d4  b91d              CBNZ     r5,|L31.222|
0000d6  2001              MOVS     r0,#1
0000d8  f8840042          STRB     r0,[r4,#0x42]
0000dc  e01a              B        |L31.276|
                  |L31.222|
0000de  2d04              CMP      r5,#4
0000e0  d103              BNE      |L31.234|
0000e2  2101              MOVS     r1,#1
0000e4  2043              MOVS     r0,#0x43
0000e6  5501              STRB     r1,[r0,r4]
0000e8  e014              B        |L31.276|
                  |L31.234|
0000ea  2d08              CMP      r5,#8
0000ec  d103              BNE      |L31.246|
0000ee  2101              MOVS     r1,#1
0000f0  2044              MOVS     r0,#0x44
0000f2  5501              STRB     r1,[r0,r4]
0000f4  e00e              B        |L31.276|
                  |L31.246|
0000f6  2101              MOVS     r1,#1
0000f8  2045              MOVS     r0,#0x45
0000fa  5501              STRB     r1,[r0,r4]
0000fc  e00a              B        |L31.276|
                  |L31.254|
;;;3781     }
;;;3782     else
;;;3783     {
;;;3784       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
0000fe  2001              MOVS     r0,#1
000100  f884003e          STRB     r0,[r4,#0x3e]
;;;3785       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000104  2101              MOVS     r1,#1
000106  203f              MOVS     r0,#0x3f
000108  5501              STRB     r1,[r0,r4]
;;;3786       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
00010a  2001              MOVS     r0,#1
00010c  f8840042          STRB     r0,[r4,#0x42]
;;;3787       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000110  2043              MOVS     r0,#0x43
000112  5501              STRB     r1,[r0,r4]
                  |L31.276|
;;;3788     }
;;;3789   
;;;3790     /* Return function status */
;;;3791     return HAL_OK;
000114  2000              MOVS     r0,#0
;;;3792   }
000116  bd70              POP      {r4-r6,pc}
;;;3793   
                          ENDP


                          AREA ||i.HAL_TIM_Encoder_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_Encoder_Stop_IT PROC
;;;3459     */
;;;3460   HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;3461   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3462     /* Check the parameters */
;;;3463     assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
;;;3464   
;;;3465     /* Disable the Input Capture channels 1 and 2
;;;3466       (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
;;;3467     if (Channel == TIM_CHANNEL_1)
000006  b95d              CBNZ     r5,|L32.32|
;;;3468     {
;;;3469       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000008  2200              MOVS     r2,#0
00000a  4611              MOV      r1,r2
00000c  6820              LDR      r0,[r4,#0]
00000e  f7fffffe          BL       TIM_CCxChannelCmd
;;;3470   
;;;3471       /* Disable the capture compare Interrupts 1 */
;;;3472       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f0200002          BIC      r0,r0,#2
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
00001e  e023              B        |L32.104|
                  |L32.32|
;;;3473     }
;;;3474     else if (Channel == TIM_CHANNEL_2)
000020  2d04              CMP      r5,#4
000022  d10b              BNE      |L32.60|
;;;3475     {
;;;3476       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
000024  2200              MOVS     r2,#0
000026  2104              MOVS     r1,#4
000028  6820              LDR      r0,[r4,#0]
00002a  f7fffffe          BL       TIM_CCxChannelCmd
;;;3477   
;;;3478       /* Disable the capture compare Interrupts 2 */
;;;3479       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00002e  6820              LDR      r0,[r4,#0]
000030  68c0              LDR      r0,[r0,#0xc]
000032  f0200004          BIC      r0,r0,#4
000036  6821              LDR      r1,[r4,#0]
000038  60c8              STR      r0,[r1,#0xc]
00003a  e015              B        |L32.104|
                  |L32.60|
;;;3480     }
;;;3481     else
;;;3482     {
;;;3483       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
00003c  2200              MOVS     r2,#0
00003e  4611              MOV      r1,r2
000040  6820              LDR      r0,[r4,#0]
000042  f7fffffe          BL       TIM_CCxChannelCmd
;;;3484       TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
000046  2200              MOVS     r2,#0
000048  2104              MOVS     r1,#4
00004a  6820              LDR      r0,[r4,#0]
00004c  f7fffffe          BL       TIM_CCxChannelCmd
;;;3485   
;;;3486       /* Disable the capture compare Interrupts 1 and 2 */
;;;3487       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000050  6820              LDR      r0,[r4,#0]
000052  68c0              LDR      r0,[r0,#0xc]
000054  f0200002          BIC      r0,r0,#2
000058  6821              LDR      r1,[r4,#0]
00005a  60c8              STR      r0,[r1,#0xc]
;;;3488       __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00005c  6820              LDR      r0,[r4,#0]
00005e  68c0              LDR      r0,[r0,#0xc]
000060  f0200004          BIC      r0,r0,#4
000064  6821              LDR      r1,[r4,#0]
000066  60c8              STR      r0,[r1,#0xc]
                  |L32.104|
;;;3489     }
;;;3490   
;;;3491     /* Disable the Peripheral */
;;;3492     __HAL_TIM_DISABLE(htim);
000068  bf00              NOP      
00006a  6820              LDR      r0,[r4,#0]
00006c  6a00              LDR      r0,[r0,#0x20]
00006e  f2411111          MOV      r1,#0x1111
000072  4008              ANDS     r0,r0,r1
000074  b950              CBNZ     r0,|L32.140|
000076  6820              LDR      r0,[r4,#0]
000078  6a00              LDR      r0,[r0,#0x20]
00007a  1089              ASRS     r1,r1,#2
00007c  4008              ANDS     r0,r0,r1
00007e  b928              CBNZ     r0,|L32.140|
000080  6820              LDR      r0,[r4,#0]
000082  6800              LDR      r0,[r0,#0]
000084  f0200001          BIC      r0,r0,#1
000088  6821              LDR      r1,[r4,#0]
00008a  6008              STR      r0,[r1,#0]
                  |L32.140|
00008c  bf00              NOP      
;;;3493   
;;;3494     /* Set the TIM channel(s) state */
;;;3495     if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
00008e  b10d              CBZ      r5,|L32.148|
000090  2d04              CMP      r5,#4
000092  d128              BNE      |L32.230|
                  |L32.148|
;;;3496     {
;;;3497       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
000094  b91d              CBNZ     r5,|L32.158|
000096  2001              MOVS     r0,#1
000098  f884003e          STRB     r0,[r4,#0x3e]
00009c  e00e              B        |L32.188|
                  |L32.158|
00009e  2d04              CMP      r5,#4
0000a0  d103              BNE      |L32.170|
0000a2  2101              MOVS     r1,#1
0000a4  203f              MOVS     r0,#0x3f
0000a6  5501              STRB     r1,[r0,r4]
0000a8  e008              B        |L32.188|
                  |L32.170|
0000aa  2d08              CMP      r5,#8
0000ac  d103              BNE      |L32.182|
0000ae  2101              MOVS     r1,#1
0000b0  2040              MOVS     r0,#0x40
0000b2  5501              STRB     r1,[r0,r4]
0000b4  e002              B        |L32.188|
                  |L32.182|
0000b6  2101              MOVS     r1,#1
0000b8  2041              MOVS     r0,#0x41
0000ba  5501              STRB     r1,[r0,r4]
                  |L32.188|
;;;3498       TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000bc  b91d              CBNZ     r5,|L32.198|
0000be  2001              MOVS     r0,#1
0000c0  f8840042          STRB     r0,[r4,#0x42]
0000c4  e01a              B        |L32.252|
                  |L32.198|
0000c6  2d04              CMP      r5,#4
0000c8  d103              BNE      |L32.210|
0000ca  2101              MOVS     r1,#1
0000cc  2043              MOVS     r0,#0x43
0000ce  5501              STRB     r1,[r0,r4]
0000d0  e014              B        |L32.252|
                  |L32.210|
0000d2  2d08              CMP      r5,#8
0000d4  d103              BNE      |L32.222|
0000d6  2101              MOVS     r1,#1
0000d8  2044              MOVS     r0,#0x44
0000da  5501              STRB     r1,[r0,r4]
0000dc  e00e              B        |L32.252|
                  |L32.222|
0000de  2101              MOVS     r1,#1
0000e0  2045              MOVS     r0,#0x45
0000e2  5501              STRB     r1,[r0,r4]
0000e4  e00a              B        |L32.252|
                  |L32.230|
;;;3499     }
;;;3500     else
;;;3501     {
;;;3502       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
0000e6  2001              MOVS     r0,#1
0000e8  f884003e          STRB     r0,[r4,#0x3e]
;;;3503       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
0000ec  2101              MOVS     r1,#1
0000ee  203f              MOVS     r0,#0x3f
0000f0  5501              STRB     r1,[r0,r4]
;;;3504       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
0000f2  2001              MOVS     r0,#1
0000f4  f8840042          STRB     r0,[r4,#0x42]
;;;3505       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
0000f8  2043              MOVS     r0,#0x43
0000fa  5501              STRB     r1,[r0,r4]
                  |L32.252|
;;;3506     }
;;;3507   
;;;3508     /* Return function status */
;;;3509     return HAL_OK;
0000fc  2000              MOVS     r0,#0
;;;3510   }
0000fe  bd30              POP      {r4,r5,pc}
;;;3511   
                          ENDP


                          AREA ||i.HAL_TIM_ErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ErrorCallback PROC
;;;5779     */
;;;5780   __weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5781   {
;;;5782     /* Prevent unused argument(s) compilation warning */
;;;5783     UNUSED(htim);
;;;5784   
;;;5785     /* NOTE : This function should not be modified, when the callback is needed,
;;;5786               the HAL_TIM_ErrorCallback could be implemented in the user file
;;;5787      */
;;;5788   }
;;;5789   
                          ENDP


                          AREA ||i.HAL_TIM_GenerateEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIM_GenerateEvent PROC
;;;5124   
;;;5125   HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
000000  4602              MOV      r2,r0
;;;5126   {
;;;5127     /* Check the parameters */
;;;5128     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;5129     assert_param(IS_TIM_EVENT_SOURCE(EventSource));
;;;5130   
;;;5131     /* Process Locked */
;;;5132     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  f892003c          LDRB     r0,[r2,#0x3c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L34.16|
00000c  2002              MOVS     r0,#2
                  |L34.14|
;;;5133   
;;;5134     /* Change the TIM state */
;;;5135     htim->State = HAL_TIM_STATE_BUSY;
;;;5136   
;;;5137     /* Set the event sources */
;;;5138     htim->Instance->EGR = EventSource;
;;;5139   
;;;5140     /* Change the TIM state */
;;;5141     htim->State = HAL_TIM_STATE_READY;
;;;5142   
;;;5143     __HAL_UNLOCK(htim);
;;;5144   
;;;5145     /* Return function status */
;;;5146     return HAL_OK;
;;;5147   }
00000e  4770              BX       lr
                  |L34.16|
000010  2001              MOVS     r0,#1                 ;5132
000012  f882003c          STRB     r0,[r2,#0x3c]         ;5132
000016  bf00              NOP                            ;5132
000018  2002              MOVS     r0,#2                 ;5135
00001a  f882003d          STRB     r0,[r2,#0x3d]         ;5135
00001e  6810              LDR      r0,[r2,#0]            ;5138
000020  6141              STR      r1,[r0,#0x14]         ;5138
000022  2001              MOVS     r0,#1                 ;5141
000024  f882003d          STRB     r0,[r2,#0x3d]         ;5141
000028  bf00              NOP                            ;5143
00002a  2000              MOVS     r0,#0                 ;5143
00002c  f882003c          STRB     r0,[r2,#0x3c]         ;5143
000030  bf00              NOP                            ;5143
000032  bf00              NOP                            ;5146
000034  e7eb              B        |L34.14|
;;;5148   
                          ENDP


                          AREA ||i.HAL_TIM_GetActiveChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_GetActiveChannel PROC
;;;6397     */
;;;6398   HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;6399   {
;;;6400     return htim->Channel;
000002  7f08              LDRB     r0,[r1,#0x1c]
;;;6401   }
000004  4770              BX       lr
;;;6402   
                          ENDP


                          AREA ||i.HAL_TIM_GetChannelState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_GetChannelState PROC
;;;6415     */
;;;6416   HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(TIM_HandleTypeDef *htim,  uint32_t Channel)
000000  4602              MOV      r2,r0
;;;6417   {
;;;6418     HAL_TIM_ChannelStateTypeDef channel_state;
;;;6419   
;;;6420     /* Check the parameters */
;;;6421     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;6422   
;;;6423     channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
000002  b911              CBNZ     r1,|L36.10|
000004  f892303e          LDRB     r3,[r2,#0x3e]
000008  e00b              B        |L36.34|
                  |L36.10|
00000a  2904              CMP      r1,#4
00000c  d102              BNE      |L36.20|
00000e  233f              MOVS     r3,#0x3f
000010  5c9b              LDRB     r3,[r3,r2]
000012  e006              B        |L36.34|
                  |L36.20|
000014  2908              CMP      r1,#8
000016  d102              BNE      |L36.30|
000018  2340              MOVS     r3,#0x40
00001a  5c9b              LDRB     r3,[r3,r2]
00001c  e001              B        |L36.34|
                  |L36.30|
00001e  2341              MOVS     r3,#0x41
000020  5c9b              LDRB     r3,[r3,r2]
                  |L36.34|
000022  4618              MOV      r0,r3
;;;6424   
;;;6425     return channel_state;
;;;6426   }
000024  4770              BX       lr
;;;6427   
                          ENDP


                          AREA ||i.HAL_TIM_IC_CaptureCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_CaptureCallback PROC
;;;5689     */
;;;5690   __weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5691   {
;;;5692     /* Prevent unused argument(s) compilation warning */
;;;5693     UNUSED(htim);
;;;5694   
;;;5695     /* NOTE : This function should not be modified, when the callback is needed,
;;;5696               the HAL_TIM_IC_CaptureCallback could be implemented in the user file
;;;5697      */
;;;5698   }
;;;5699   
                          ENDP


                          AREA ||i.HAL_TIM_IC_CaptureHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_CaptureHalfCpltCallback PROC
;;;5704     */
;;;5705   __weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5706   {
;;;5707     /* Prevent unused argument(s) compilation warning */
;;;5708     UNUSED(htim);
;;;5709   
;;;5710     /* NOTE : This function should not be modified, when the callback is needed,
;;;5711               the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
;;;5712      */
;;;5713   }
;;;5714   
                          ENDP


                          AREA ||i.HAL_TIM_IC_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_ConfigChannel PROC
;;;4108     */
;;;4109   HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4110   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;4111     HAL_StatusTypeDef status = HAL_OK;
00000a  2700              MOVS     r7,#0
;;;4112   
;;;4113     /* Check the parameters */
;;;4114     assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4115     assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
;;;4116     assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
;;;4117     assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
;;;4118     assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
;;;4119   
;;;4120     /* Process Locked */
;;;4121     __HAL_LOCK(htim);
00000c  bf00              NOP      
00000e  f894003c          LDRB     r0,[r4,#0x3c]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L39.28|
000016  2002              MOVS     r0,#2
                  |L39.24|
;;;4122   
;;;4123     if (Channel == TIM_CHANNEL_1)
;;;4124     {
;;;4125       /* TI1 Configuration */
;;;4126       TIM_TI1_SetConfig(htim->Instance,
;;;4127                         sConfig->ICPolarity,
;;;4128                         sConfig->ICSelection,
;;;4129                         sConfig->ICFilter);
;;;4130   
;;;4131       /* Reset the IC1PSC Bits */
;;;4132       htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;4133   
;;;4134       /* Set the IC1PSC value */
;;;4135       htim->Instance->CCMR1 |= sConfig->ICPrescaler;
;;;4136     }
;;;4137     else if (Channel == TIM_CHANNEL_2)
;;;4138     {
;;;4139       /* TI2 Configuration */
;;;4140       assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4141   
;;;4142       TIM_TI2_SetConfig(htim->Instance,
;;;4143                         sConfig->ICPolarity,
;;;4144                         sConfig->ICSelection,
;;;4145                         sConfig->ICFilter);
;;;4146   
;;;4147       /* Reset the IC2PSC Bits */
;;;4148       htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
;;;4149   
;;;4150       /* Set the IC2PSC value */
;;;4151       htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
;;;4152     }
;;;4153     else if (Channel == TIM_CHANNEL_3)
;;;4154     {
;;;4155       /* TI3 Configuration */
;;;4156       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;4157   
;;;4158       TIM_TI3_SetConfig(htim->Instance,
;;;4159                         sConfig->ICPolarity,
;;;4160                         sConfig->ICSelection,
;;;4161                         sConfig->ICFilter);
;;;4162   
;;;4163       /* Reset the IC3PSC Bits */
;;;4164       htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
;;;4165   
;;;4166       /* Set the IC3PSC value */
;;;4167       htim->Instance->CCMR2 |= sConfig->ICPrescaler;
;;;4168     }
;;;4169     else if (Channel == TIM_CHANNEL_4)
;;;4170     {
;;;4171       /* TI4 Configuration */
;;;4172       assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;4173   
;;;4174       TIM_TI4_SetConfig(htim->Instance,
;;;4175                         sConfig->ICPolarity,
;;;4176                         sConfig->ICSelection,
;;;4177                         sConfig->ICFilter);
;;;4178   
;;;4179       /* Reset the IC4PSC Bits */
;;;4180       htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
;;;4181   
;;;4182       /* Set the IC4PSC value */
;;;4183       htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
;;;4184     }
;;;4185     else
;;;4186     {
;;;4187       status = HAL_ERROR;
;;;4188     }
;;;4189   
;;;4190     __HAL_UNLOCK(htim);
;;;4191   
;;;4192     return status;
;;;4193   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L39.28|
00001c  2001              MOVS     r0,#1                 ;4121
00001e  f884003c          STRB     r0,[r4,#0x3c]         ;4121
000022  bf00              NOP                            ;4121
000024  b996              CBNZ     r6,|L39.76|
000026  68eb              LDR      r3,[r5,#0xc]          ;4126
000028  e9d51200          LDRD     r1,r2,[r5,#0]         ;4126
00002c  6820              LDR      r0,[r4,#0]            ;4126
00002e  f7fffffe          BL       TIM_TI1_SetConfig
000032  6820              LDR      r0,[r4,#0]            ;4132
000034  6980              LDR      r0,[r0,#0x18]         ;4132
000036  f020000c          BIC      r0,r0,#0xc            ;4132
00003a  6821              LDR      r1,[r4,#0]            ;4132
00003c  6188              STR      r0,[r1,#0x18]         ;4132
00003e  6820              LDR      r0,[r4,#0]            ;4135
000040  6980              LDR      r0,[r0,#0x18]         ;4135
000042  68a9              LDR      r1,[r5,#8]            ;4135
000044  4308              ORRS     r0,r0,r1              ;4135
000046  6821              LDR      r1,[r4,#0]            ;4135
000048  6188              STR      r0,[r1,#0x18]         ;4135
00004a  e041              B        |L39.208|
                  |L39.76|
00004c  2e04              CMP      r6,#4                 ;4137
00004e  d113              BNE      |L39.120|
000050  68eb              LDR      r3,[r5,#0xc]          ;4142
000052  e9d51200          LDRD     r1,r2,[r5,#0]         ;4142
000056  6820              LDR      r0,[r4,#0]            ;4142
000058  f7fffffe          BL       TIM_TI2_SetConfig
00005c  6820              LDR      r0,[r4,#0]            ;4148
00005e  6980              LDR      r0,[r0,#0x18]         ;4148
000060  f4206040          BIC      r0,r0,#0xc00          ;4148
000064  6821              LDR      r1,[r4,#0]            ;4148
000066  6188              STR      r0,[r1,#0x18]         ;4148
000068  6820              LDR      r0,[r4,#0]            ;4151
00006a  6980              LDR      r0,[r0,#0x18]         ;4151
00006c  68a9              LDR      r1,[r5,#8]            ;4151
00006e  ea402001          ORR      r0,r0,r1,LSL #8       ;4151
000072  6821              LDR      r1,[r4,#0]            ;4151
000074  6188              STR      r0,[r1,#0x18]         ;4151
000076  e02b              B        |L39.208|
                  |L39.120|
000078  2e08              CMP      r6,#8                 ;4153
00007a  d112              BNE      |L39.162|
00007c  68eb              LDR      r3,[r5,#0xc]          ;4158
00007e  e9d51200          LDRD     r1,r2,[r5,#0]         ;4158
000082  6820              LDR      r0,[r4,#0]            ;4158
000084  f7fffffe          BL       TIM_TI3_SetConfig
000088  6820              LDR      r0,[r4,#0]            ;4164
00008a  69c0              LDR      r0,[r0,#0x1c]         ;4164
00008c  f020000c          BIC      r0,r0,#0xc            ;4164
000090  6821              LDR      r1,[r4,#0]            ;4164
000092  61c8              STR      r0,[r1,#0x1c]         ;4164
000094  6820              LDR      r0,[r4,#0]            ;4167
000096  69c0              LDR      r0,[r0,#0x1c]         ;4167
000098  68a9              LDR      r1,[r5,#8]            ;4167
00009a  4308              ORRS     r0,r0,r1              ;4167
00009c  6821              LDR      r1,[r4,#0]            ;4167
00009e  61c8              STR      r0,[r1,#0x1c]         ;4167
0000a0  e016              B        |L39.208|
                  |L39.162|
0000a2  2e0c              CMP      r6,#0xc               ;4169
0000a4  d113              BNE      |L39.206|
0000a6  68eb              LDR      r3,[r5,#0xc]          ;4174
0000a8  e9d51200          LDRD     r1,r2,[r5,#0]         ;4174
0000ac  6820              LDR      r0,[r4,#0]            ;4174
0000ae  f7fffffe          BL       TIM_TI4_SetConfig
0000b2  6820              LDR      r0,[r4,#0]            ;4180
0000b4  69c0              LDR      r0,[r0,#0x1c]         ;4180
0000b6  f4206040          BIC      r0,r0,#0xc00          ;4180
0000ba  6821              LDR      r1,[r4,#0]            ;4180
0000bc  61c8              STR      r0,[r1,#0x1c]         ;4180
0000be  6820              LDR      r0,[r4,#0]            ;4183
0000c0  69c0              LDR      r0,[r0,#0x1c]         ;4183
0000c2  68a9              LDR      r1,[r5,#8]            ;4183
0000c4  ea402001          ORR      r0,r0,r1,LSL #8       ;4183
0000c8  6821              LDR      r1,[r4,#0]            ;4183
0000ca  61c8              STR      r0,[r1,#0x1c]         ;4183
0000cc  e000              B        |L39.208|
                  |L39.206|
0000ce  2701              MOVS     r7,#1                 ;4187
                  |L39.208|
0000d0  bf00              NOP                            ;4190
0000d2  2000              MOVS     r0,#0                 ;4190
0000d4  f884003c          STRB     r0,[r4,#0x3c]         ;4190
0000d8  bf00              NOP                            ;4190
0000da  4638              MOV      r0,r7                 ;4192
0000dc  e79c              B        |L39.24|
;;;4194   
                          ENDP


                          AREA ||i.HAL_TIM_IC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_DeInit PROC
;;;2032     */
;;;2033   HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;2034   {
000002  4604              MOV      r4,r0
;;;2035     /* Check the parameters */
;;;2036     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;2037   
;;;2038     htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  f884003d          STRB     r0,[r4,#0x3d]
;;;2039   
;;;2040     /* Disable the TIM Peripheral Clock */
;;;2041     __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f2411111          MOV      r1,#0x1111
000014  4008              ANDS     r0,r0,r1
000016  b950              CBNZ     r0,|L40.46|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  b928              CBNZ     r0,|L40.46|
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
                  |L40.46|
00002e  bf00              NOP      
;;;2042   
;;;2043   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2044     if (htim->IC_MspDeInitCallback == NULL)
;;;2045     {
;;;2046       htim->IC_MspDeInitCallback = HAL_TIM_IC_MspDeInit;
;;;2047     }
;;;2048     /* DeInit the low level hardware */
;;;2049     htim->IC_MspDeInitCallback(htim);
;;;2050   #else
;;;2051     /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;2052     HAL_TIM_IC_MspDeInit(htim);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_TIM_IC_MspDeInit
;;;2053   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2054   
;;;2055     /* Change the DMA burst operation state */
;;;2056     htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
000036  2000              MOVS     r0,#0
000038  f8840046          STRB     r0,[r4,#0x46]
;;;2057   
;;;2058     /* Change the TIM channels state */
;;;2059     TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
00003c  bf00              NOP      
00003e  f884003e          STRB     r0,[r4,#0x3e]
000042  2100              MOVS     r1,#0
000044  203f              MOVS     r0,#0x3f
000046  5501              STRB     r1,[r0,r4]
000048  2040              MOVS     r0,#0x40
00004a  5501              STRB     r1,[r0,r4]
00004c  2041              MOVS     r0,#0x41
00004e  5501              STRB     r1,[r0,r4]
000050  bf00              NOP      
;;;2060     TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
000052  bf00              NOP      
000054  2000              MOVS     r0,#0
000056  f8840042          STRB     r0,[r4,#0x42]
00005a  2043              MOVS     r0,#0x43
00005c  5501              STRB     r1,[r0,r4]
00005e  2044              MOVS     r0,#0x44
000060  5501              STRB     r1,[r0,r4]
000062  2045              MOVS     r0,#0x45
000064  5501              STRB     r1,[r0,r4]
000066  bf00              NOP      
;;;2061   
;;;2062     /* Change TIM state */
;;;2063     htim->State = HAL_TIM_STATE_RESET;
000068  2000              MOVS     r0,#0
00006a  f884003d          STRB     r0,[r4,#0x3d]
;;;2064   
;;;2065     /* Release Lock */
;;;2066     __HAL_UNLOCK(htim);
00006e  bf00              NOP      
000070  f884003c          STRB     r0,[r4,#0x3c]
000074  bf00              NOP      
;;;2067   
;;;2068     return HAL_OK;
;;;2069   }
000076  bd10              POP      {r4,pc}
;;;2070   
                          ENDP


                          AREA ||i.HAL_TIM_IC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_GetState PROC
;;;6367     */
;;;6368   HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;6369   {
;;;6370     return htim->State;
000002  f891003d          LDRB     r0,[r1,#0x3d]
;;;6371   }
000006  4770              BX       lr
;;;6372   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Init PROC
;;;1973     */
;;;1974   HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;1975   {
000002  4604              MOV      r4,r0
;;;1976     /* Check the TIM handle allocation */
;;;1977     if (htim == NULL)
000004  b90c              CBNZ     r4,|L42.10|
;;;1978     {
;;;1979       return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L42.8|
;;;1980     }
;;;1981   
;;;1982     /* Check the parameters */
;;;1983     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1984     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;1985     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;1986     assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;1987   
;;;1988     if (htim->State == HAL_TIM_STATE_RESET)
;;;1989     {
;;;1990       /* Allocate lock resource and initialize it */
;;;1991       htim->Lock = HAL_UNLOCKED;
;;;1992   
;;;1993   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;1994       /* Reset interrupt callbacks to legacy weak callbacks */
;;;1995       TIM_ResetCallback(htim);
;;;1996   
;;;1997       if (htim->IC_MspInitCallback == NULL)
;;;1998       {
;;;1999         htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
;;;2000       }
;;;2001       /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;2002       htim->IC_MspInitCallback(htim);
;;;2003   #else
;;;2004       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;2005       HAL_TIM_IC_MspInit(htim);
;;;2006   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2007     }
;;;2008   
;;;2009     /* Set the TIM state */
;;;2010     htim->State = HAL_TIM_STATE_BUSY;
;;;2011   
;;;2012     /* Init the base time for the input capture */
;;;2013     TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;2014   
;;;2015     /* Initialize the DMA burst operation state */
;;;2016     htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
;;;2017   
;;;2018     /* Initialize the TIM channels state */
;;;2019     TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
;;;2020     TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
;;;2021   
;;;2022     /* Initialize the TIM state*/
;;;2023     htim->State = HAL_TIM_STATE_READY;
;;;2024   
;;;2025     return HAL_OK;
;;;2026   }
000008  bd10              POP      {r4,pc}
                  |L42.10|
00000a  f894003d          LDRB     r0,[r4,#0x3d]         ;1988
00000e  b928              CBNZ     r0,|L42.28|
000010  2000              MOVS     r0,#0                 ;1991
000012  f884003c          STRB     r0,[r4,#0x3c]         ;1991
000016  4620              MOV      r0,r4                 ;2005
000018  f7fffffe          BL       HAL_TIM_IC_MspInit
                  |L42.28|
00001c  2002              MOVS     r0,#2                 ;2010
00001e  f884003d          STRB     r0,[r4,#0x3d]         ;2010
000022  1d21              ADDS     r1,r4,#4              ;2013
000024  6820              LDR      r0,[r4,#0]            ;2013
000026  f7fffffe          BL       TIM_Base_SetConfig
00002a  2001              MOVS     r0,#1                 ;2016
00002c  f8840046          STRB     r0,[r4,#0x46]         ;2016
000030  bf00              NOP                            ;2019
000032  f884003e          STRB     r0,[r4,#0x3e]         ;2019
000036  2101              MOVS     r1,#1                 ;2019
000038  203f              MOVS     r0,#0x3f              ;2019
00003a  5501              STRB     r1,[r0,r4]            ;2019
00003c  2040              MOVS     r0,#0x40              ;2019
00003e  5501              STRB     r1,[r0,r4]            ;2019
000040  2041              MOVS     r0,#0x41              ;2019
000042  5501              STRB     r1,[r0,r4]            ;2019
000044  bf00              NOP                            ;2019
000046  bf00              NOP                            ;2020
000048  2001              MOVS     r0,#1                 ;2020
00004a  f8840042          STRB     r0,[r4,#0x42]         ;2020
00004e  2043              MOVS     r0,#0x43              ;2020
000050  5501              STRB     r1,[r0,r4]            ;2020
000052  2044              MOVS     r0,#0x44              ;2020
000054  5501              STRB     r1,[r0,r4]            ;2020
000056  2045              MOVS     r0,#0x45              ;2020
000058  5501              STRB     r1,[r0,r4]            ;2020
00005a  bf00              NOP                            ;2020
00005c  2001              MOVS     r0,#1                 ;2023
00005e  f884003d          STRB     r0,[r4,#0x3d]         ;2023
000062  2000              MOVS     r0,#0                 ;2025
000064  e7d0              B        |L42.8|
;;;2027   
                          ENDP


                          AREA ||i.HAL_TIM_IC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_MspDeInit PROC
;;;2090     */
;;;2091   __weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2092   {
;;;2093     /* Prevent unused argument(s) compilation warning */
;;;2094     UNUSED(htim);
;;;2095   
;;;2096     /* NOTE : This function should not be modified, when the callback is needed,
;;;2097               the HAL_TIM_IC_MspDeInit could be implemented in the user file
;;;2098      */
;;;2099   }
;;;2100   
                          ENDP


                          AREA ||i.HAL_TIM_IC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_MspInit PROC
;;;2075     */
;;;2076   __weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2077   {
;;;2078     /* Prevent unused argument(s) compilation warning */
;;;2079     UNUSED(htim);
;;;2080   
;;;2081     /* NOTE : This function should not be modified, when the callback is needed,
;;;2082               the HAL_TIM_IC_MspInit could be implemented in the user file
;;;2083      */
;;;2084   }
;;;2085   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Start||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_Start PROC
;;;2111     */
;;;2112   HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2113   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;2114     uint32_t tmpsmcr;
;;;2115     HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
000008  b915              CBNZ     r5,|L45.16|
00000a  f894003e          LDRB     r0,[r4,#0x3e]
00000e  e00b              B        |L45.40|
                  |L45.16|
000010  2d04              CMP      r5,#4
000012  d102              BNE      |L45.26|
000014  203f              MOVS     r0,#0x3f
000016  5d00              LDRB     r0,[r0,r4]
000018  e006              B        |L45.40|
                  |L45.26|
00001a  2d08              CMP      r5,#8
00001c  d102              BNE      |L45.36|
00001e  2040              MOVS     r0,#0x40
000020  5d00              LDRB     r0,[r0,r4]
000022  e001              B        |L45.40|
                  |L45.36|
000024  2041              MOVS     r0,#0x41
000026  5d00              LDRB     r0,[r0,r4]
                  |L45.40|
000028  4607              MOV      r7,r0
;;;2116     HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
00002a  b915              CBNZ     r5,|L45.50|
00002c  f8940042          LDRB     r0,[r4,#0x42]
000030  e00b              B        |L45.74|
                  |L45.50|
000032  2d04              CMP      r5,#4
000034  d102              BNE      |L45.60|
000036  2043              MOVS     r0,#0x43
000038  5d00              LDRB     r0,[r0,r4]
00003a  e006              B        |L45.74|
                  |L45.60|
00003c  2d08              CMP      r5,#8
00003e  d102              BNE      |L45.70|
000040  2044              MOVS     r0,#0x44
000042  5d00              LDRB     r0,[r0,r4]
000044  e001              B        |L45.74|
                  |L45.70|
000046  2045              MOVS     r0,#0x45
000048  5d00              LDRB     r0,[r0,r4]
                  |L45.74|
00004a  4680              MOV      r8,r0
;;;2117   
;;;2118     /* Check the parameters */
;;;2119     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;2120   
;;;2121     /* Check the TIM channel state */
;;;2122     if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
00004c  2f01              CMP      r7,#1
00004e  d102              BNE      |L45.86|
;;;2123         || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
000050  f1b80f01          CMP      r8,#1
000054  d002              BEQ      |L45.92|
                  |L45.86|
;;;2124     {
;;;2125       return HAL_ERROR;
000056  2001              MOVS     r0,#1
                  |L45.88|
;;;2126     }
;;;2127   
;;;2128     /* Set the TIM channel state */
;;;2129     TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2130     TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2131   
;;;2132     /* Enable the Input Capture channel */
;;;2133     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;2134   
;;;2135     /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;2136     if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;2137     {
;;;2138       tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;2139       if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;2140       {
;;;2141         __HAL_TIM_ENABLE(htim);
;;;2142       }
;;;2143     }
;;;2144     else
;;;2145     {
;;;2146       __HAL_TIM_ENABLE(htim);
;;;2147     }
;;;2148   
;;;2149     /* Return function status */
;;;2150     return HAL_OK;
;;;2151   }
000058  e8bd81f0          POP      {r4-r8,pc}
                  |L45.92|
00005c  b91d              CBNZ     r5,|L45.102|
00005e  2002              MOVS     r0,#2                 ;2129
000060  f884003e          STRB     r0,[r4,#0x3e]         ;2129
000064  e00e              B        |L45.132|
                  |L45.102|
000066  2d04              CMP      r5,#4                 ;2129
000068  d103              BNE      |L45.114|
00006a  2102              MOVS     r1,#2                 ;2129
00006c  203f              MOVS     r0,#0x3f              ;2129
00006e  5501              STRB     r1,[r0,r4]            ;2129
000070  e008              B        |L45.132|
                  |L45.114|
000072  2d08              CMP      r5,#8                 ;2129
000074  d103              BNE      |L45.126|
000076  2102              MOVS     r1,#2                 ;2129
000078  2040              MOVS     r0,#0x40              ;2129
00007a  5501              STRB     r1,[r0,r4]            ;2129
00007c  e002              B        |L45.132|
                  |L45.126|
00007e  2102              MOVS     r1,#2                 ;2129
000080  2041              MOVS     r0,#0x41              ;2129
000082  5501              STRB     r1,[r0,r4]            ;2129
                  |L45.132|
000084  b91d              CBNZ     r5,|L45.142|
000086  2002              MOVS     r0,#2                 ;2130
000088  f8840042          STRB     r0,[r4,#0x42]         ;2130
00008c  e00e              B        |L45.172|
                  |L45.142|
00008e  2d04              CMP      r5,#4                 ;2130
000090  d103              BNE      |L45.154|
000092  2102              MOVS     r1,#2                 ;2130
000094  2043              MOVS     r0,#0x43              ;2130
000096  5501              STRB     r1,[r0,r4]            ;2130
000098  e008              B        |L45.172|
                  |L45.154|
00009a  2d08              CMP      r5,#8                 ;2130
00009c  d103              BNE      |L45.166|
00009e  2102              MOVS     r1,#2                 ;2130
0000a0  2044              MOVS     r0,#0x44              ;2130
0000a2  5501              STRB     r1,[r0,r4]            ;2130
0000a4  e002              B        |L45.172|
                  |L45.166|
0000a6  2102              MOVS     r1,#2                 ;2130
0000a8  2045              MOVS     r0,#0x45              ;2130
0000aa  5501              STRB     r1,[r0,r4]            ;2130
                  |L45.172|
0000ac  2201              MOVS     r2,#1                 ;2133
0000ae  4629              MOV      r1,r5                 ;2133
0000b0  6820              LDR      r0,[r4,#0]            ;2133
0000b2  f7fffffe          BL       TIM_CCxChannelCmd
0000b6  491a              LDR      r1,|L45.288|
0000b8  6820              LDR      r0,[r4,#0]            ;2136
0000ba  4288              CMP      r0,r1                 ;2136
0000bc  d01b              BEQ      |L45.246|
0000be  6820              LDR      r0,[r4,#0]            ;2136
0000c0  f1b04f80          CMP      r0,#0x40000000        ;2136
0000c4  d017              BEQ      |L45.246|
0000c6  4917              LDR      r1,|L45.292|
0000c8  6820              LDR      r0,[r4,#0]            ;2136
0000ca  4288              CMP      r0,r1                 ;2136
0000cc  d013              BEQ      |L45.246|
0000ce  4916              LDR      r1,|L45.296|
0000d0  6820              LDR      r0,[r4,#0]            ;2136
0000d2  4288              CMP      r0,r1                 ;2136
0000d4  d00f              BEQ      |L45.246|
0000d6  4915              LDR      r1,|L45.300|
0000d8  6820              LDR      r0,[r4,#0]            ;2136
0000da  4288              CMP      r0,r1                 ;2136
0000dc  d00b              BEQ      |L45.246|
0000de  4914              LDR      r1,|L45.304|
0000e0  6820              LDR      r0,[r4,#0]            ;2136
0000e2  4288              CMP      r0,r1                 ;2136
0000e4  d007              BEQ      |L45.246|
0000e6  4913              LDR      r1,|L45.308|
0000e8  6820              LDR      r0,[r4,#0]            ;2136
0000ea  4288              CMP      r0,r1                 ;2136
0000ec  d003              BEQ      |L45.246|
0000ee  4912              LDR      r1,|L45.312|
0000f0  6820              LDR      r0,[r4,#0]            ;2136
0000f2  4288              CMP      r0,r1                 ;2136
0000f4  d10c              BNE      |L45.272|
                  |L45.246|
0000f6  6820              LDR      r0,[r4,#0]            ;2138
0000f8  6880              LDR      r0,[r0,#8]            ;2138
0000fa  f0000607          AND      r6,r0,#7              ;2138
0000fe  2e06              CMP      r6,#6                 ;2139
000100  d00c              BEQ      |L45.284|
000102  6820              LDR      r0,[r4,#0]            ;2141
000104  6800              LDR      r0,[r0,#0]            ;2141
000106  f0400001          ORR      r0,r0,#1              ;2141
00010a  6821              LDR      r1,[r4,#0]            ;2141
00010c  6008              STR      r0,[r1,#0]            ;2141
00010e  e005              B        |L45.284|
                  |L45.272|
000110  6820              LDR      r0,[r4,#0]            ;2146
000112  6800              LDR      r0,[r0,#0]            ;2146
000114  f0400001          ORR      r0,r0,#1              ;2146
000118  6821              LDR      r1,[r4,#0]            ;2146
00011a  6008              STR      r0,[r1,#0]            ;2146
                  |L45.284|
00011c  2000              MOVS     r0,#0                 ;2150
00011e  e79b              B        |L45.88|
;;;2152   
                          ENDP

                  |L45.288|
                          DCD      0x40010000
                  |L45.292|
                          DCD      0x40000400
                  |L45.296|
                          DCD      0x40000800
                  |L45.300|
                          DCD      0x40000c00
                  |L45.304|
                          DCD      0x40010400
                  |L45.308|
                          DCD      0x40014000
                  |L45.312|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_IC_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_Start_DMA PROC
;;;2357     */
;;;2358   HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;2359   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;2360     HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0b00          MOV      r11,#0
;;;2361     uint32_t tmpsmcr;
;;;2362   
;;;2363     HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
000010  b915              CBNZ     r5,|L46.24|
000012  f894003e          LDRB     r0,[r4,#0x3e]
000016  e00b              B        |L46.48|
                  |L46.24|
000018  2d04              CMP      r5,#4
00001a  d102              BNE      |L46.34|
00001c  203f              MOVS     r0,#0x3f
00001e  5d00              LDRB     r0,[r0,r4]
000020  e006              B        |L46.48|
                  |L46.34|
000022  2d08              CMP      r5,#8
000024  d102              BNE      |L46.44|
000026  2040              MOVS     r0,#0x40
000028  5d00              LDRB     r0,[r0,r4]
00002a  e001              B        |L46.48|
                  |L46.44|
00002c  2041              MOVS     r0,#0x41
00002e  5d00              LDRB     r0,[r0,r4]
                  |L46.48|
000030  4681              MOV      r9,r0
;;;2364     HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
000032  b915              CBNZ     r5,|L46.58|
000034  f8940042          LDRB     r0,[r4,#0x42]
000038  e00b              B        |L46.82|
                  |L46.58|
00003a  2d04              CMP      r5,#4
00003c  d102              BNE      |L46.68|
00003e  2043              MOVS     r0,#0x43
000040  5d00              LDRB     r0,[r0,r4]
000042  e006              B        |L46.82|
                  |L46.68|
000044  2d08              CMP      r5,#8
000046  d102              BNE      |L46.78|
000048  2044              MOVS     r0,#0x44
00004a  5d00              LDRB     r0,[r0,r4]
00004c  e001              B        |L46.82|
                  |L46.78|
00004e  2045              MOVS     r0,#0x45
000050  5d00              LDRB     r0,[r0,r4]
                  |L46.82|
000052  4682              MOV      r10,r0
;;;2365   
;;;2366     /* Check the parameters */
;;;2367     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;2368     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;2369   
;;;2370     /* Set the TIM channel state */
;;;2371     if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
000054  f1b90f02          CMP      r9,#2
000058  d002              BEQ      |L46.96|
;;;2372         || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
00005a  f1ba0f02          CMP      r10,#2
00005e  d102              BNE      |L46.102|
                  |L46.96|
;;;2373     {
;;;2374       return HAL_BUSY;
000060  2002              MOVS     r0,#2
                  |L46.98|
;;;2375     }
;;;2376     else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
;;;2377              && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
;;;2378     {
;;;2379       if ((pData == NULL) && (Length > 0U))
;;;2380       {
;;;2381         return HAL_ERROR;
;;;2382       }
;;;2383       else
;;;2384       {
;;;2385         TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2386         TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2387       }
;;;2388     }
;;;2389     else
;;;2390     {
;;;2391       return HAL_ERROR;
;;;2392     }
;;;2393   
;;;2394     /* Enable the Input Capture channel */
;;;2395     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;2396   
;;;2397     switch (Channel)
;;;2398     {
;;;2399       case TIM_CHANNEL_1:
;;;2400       {
;;;2401         /* Set the DMA capture callbacks */
;;;2402         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;2403         htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;2404   
;;;2405         /* Set the DMA error callback */
;;;2406         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;2407   
;;;2408         /* Enable the DMA stream */
;;;2409         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
;;;2410                              Length) != HAL_OK)
;;;2411         {
;;;2412           /* Return error status */
;;;2413           return HAL_ERROR;
;;;2414         }
;;;2415         /* Enable the TIM Capture/Compare 1 DMA request */
;;;2416         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;2417         break;
;;;2418       }
;;;2419   
;;;2420       case TIM_CHANNEL_2:
;;;2421       {
;;;2422         /* Set the DMA capture callbacks */
;;;2423         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
;;;2424         htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;2425   
;;;2426         /* Set the DMA error callback */
;;;2427         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;2428   
;;;2429         /* Enable the DMA stream */
;;;2430         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
;;;2431                              Length) != HAL_OK)
;;;2432         {
;;;2433           /* Return error status */
;;;2434           return HAL_ERROR;
;;;2435         }
;;;2436         /* Enable the TIM Capture/Compare 2  DMA request */
;;;2437         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;2438         break;
;;;2439       }
;;;2440   
;;;2441       case TIM_CHANNEL_3:
;;;2442       {
;;;2443         /* Set the DMA capture callbacks */
;;;2444         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
;;;2445         htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;2446   
;;;2447         /* Set the DMA error callback */
;;;2448         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;2449   
;;;2450         /* Enable the DMA stream */
;;;2451         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
;;;2452                              Length) != HAL_OK)
;;;2453         {
;;;2454           /* Return error status */
;;;2455           return HAL_ERROR;
;;;2456         }
;;;2457         /* Enable the TIM Capture/Compare 3  DMA request */
;;;2458         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;2459         break;
;;;2460       }
;;;2461   
;;;2462       case TIM_CHANNEL_4:
;;;2463       {
;;;2464         /* Set the DMA capture callbacks */
;;;2465         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
;;;2466         htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;2467   
;;;2468         /* Set the DMA error callback */
;;;2469         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;2470   
;;;2471         /* Enable the DMA stream */
;;;2472         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
;;;2473                              Length) != HAL_OK)
;;;2474         {
;;;2475           /* Return error status */
;;;2476           return HAL_ERROR;
;;;2477         }
;;;2478         /* Enable the TIM Capture/Compare 4  DMA request */
;;;2479         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;2480         break;
;;;2481       }
;;;2482   
;;;2483       default:
;;;2484         status = HAL_ERROR;
;;;2485         break;
;;;2486     }
;;;2487   
;;;2488     /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;2489     if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;2490     {
;;;2491       tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;2492       if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;2493       {
;;;2494         __HAL_TIM_ENABLE(htim);
;;;2495       }
;;;2496     }
;;;2497     else
;;;2498     {
;;;2499       __HAL_TIM_ENABLE(htim);
;;;2500     }
;;;2501   
;;;2502     /* Return function status */
;;;2503     return status;
;;;2504   }
000062  e8bd9ff0          POP      {r4-r12,pc}
                  |L46.102|
000066  f1b90f01          CMP      r9,#1                 ;2376
00006a  d12f              BNE      |L46.204|
00006c  f1ba0f01          CMP      r10,#1                ;2377
000070  d12c              BNE      |L46.204|
000072  b916              CBNZ     r6,|L46.122|
000074  b10f              CBZ      r7,|L46.122|
000076  2001              MOVS     r0,#1                 ;2381
000078  e7f3              B        |L46.98|
                  |L46.122|
00007a  b91d              CBNZ     r5,|L46.132|
00007c  2002              MOVS     r0,#2                 ;2385
00007e  f884003e          STRB     r0,[r4,#0x3e]         ;2385
000082  e00e              B        |L46.162|
                  |L46.132|
000084  2d04              CMP      r5,#4                 ;2385
000086  d103              BNE      |L46.144|
000088  2102              MOVS     r1,#2                 ;2385
00008a  203f              MOVS     r0,#0x3f              ;2385
00008c  5501              STRB     r1,[r0,r4]            ;2385
00008e  e008              B        |L46.162|
                  |L46.144|
000090  2d08              CMP      r5,#8                 ;2385
000092  d103              BNE      |L46.156|
000094  2102              MOVS     r1,#2                 ;2385
000096  2040              MOVS     r0,#0x40              ;2385
000098  5501              STRB     r1,[r0,r4]            ;2385
00009a  e002              B        |L46.162|
                  |L46.156|
00009c  2102              MOVS     r1,#2                 ;2385
00009e  2041              MOVS     r0,#0x41              ;2385
0000a0  5501              STRB     r1,[r0,r4]            ;2385
                  |L46.162|
0000a2  b91d              CBNZ     r5,|L46.172|
0000a4  2002              MOVS     r0,#2                 ;2386
0000a6  f8840042          STRB     r0,[r4,#0x42]         ;2386
0000aa  e011              B        |L46.208|
                  |L46.172|
0000ac  2d04              CMP      r5,#4                 ;2386
0000ae  d103              BNE      |L46.184|
0000b0  2102              MOVS     r1,#2                 ;2386
0000b2  2043              MOVS     r0,#0x43              ;2386
0000b4  5501              STRB     r1,[r0,r4]            ;2386
0000b6  e00b              B        |L46.208|
                  |L46.184|
0000b8  2d08              CMP      r5,#8                 ;2386
0000ba  d103              BNE      |L46.196|
0000bc  2102              MOVS     r1,#2                 ;2386
0000be  2044              MOVS     r0,#0x44              ;2386
0000c0  5501              STRB     r1,[r0,r4]            ;2386
0000c2  e005              B        |L46.208|
                  |L46.196|
0000c4  2102              MOVS     r1,#2                 ;2386
0000c6  2045              MOVS     r0,#0x45              ;2386
0000c8  5501              STRB     r1,[r0,r4]            ;2386
0000ca  e001              B        |L46.208|
                  |L46.204|
0000cc  2001              MOVS     r0,#1                 ;2391
0000ce  e7c8              B        |L46.98|
                  |L46.208|
0000d0  2201              MOVS     r2,#1                 ;2395
0000d2  4629              MOV      r1,r5                 ;2395
0000d4  6820              LDR      r0,[r4,#0]            ;2395
0000d6  f7fffffe          BL       TIM_CCxChannelCmd
0000da  b135              CBZ      r5,|L46.234|
0000dc  2d04              CMP      r5,#4                 ;2397
0000de  d01f              BEQ      |L46.288|
0000e0  2d08              CMP      r5,#8                 ;2397
0000e2  d038              BEQ      |L46.342|
0000e4  2d0c              CMP      r5,#0xc               ;2397
0000e6  d16c              BNE      |L46.450|
0000e8  e050              B        |L46.396|
                  |L46.234|
0000ea  4953              LDR      r1,|L46.568|
0000ec  6a60              LDR      r0,[r4,#0x24]         ;2402
0000ee  63c1              STR      r1,[r0,#0x3c]         ;2402
0000f0  4952              LDR      r1,|L46.572|
0000f2  6a60              LDR      r0,[r4,#0x24]         ;2403
0000f4  6401              STR      r1,[r0,#0x40]         ;2403
0000f6  4952              LDR      r1,|L46.576|
0000f8  6a60              LDR      r0,[r4,#0x24]         ;2406
0000fa  64c1              STR      r1,[r0,#0x4c]         ;2406
0000fc  6822              LDR      r2,[r4,#0]            ;2409
0000fe  f1020134          ADD      r1,r2,#0x34           ;2409
000102  463b              MOV      r3,r7                 ;2409
000104  4632              MOV      r2,r6                 ;2409
000106  6a60              LDR      r0,[r4,#0x24]         ;2409
000108  f7fffffe          BL       HAL_DMA_Start_IT
00010c  b108              CBZ      r0,|L46.274|
00010e  2001              MOVS     r0,#1                 ;2413
000110  e7a7              B        |L46.98|
                  |L46.274|
000112  6820              LDR      r0,[r4,#0]            ;2416
000114  68c0              LDR      r0,[r0,#0xc]          ;2416
000116  f4407000          ORR      r0,r0,#0x200          ;2416
00011a  6821              LDR      r1,[r4,#0]            ;2416
00011c  60c8              STR      r0,[r1,#0xc]          ;2416
00011e  e053              B        |L46.456|
                  |L46.288|
000120  4945              LDR      r1,|L46.568|
000122  6aa0              LDR      r0,[r4,#0x28]         ;2423
000124  63c1              STR      r1,[r0,#0x3c]         ;2423
000126  4945              LDR      r1,|L46.572|
000128  6aa0              LDR      r0,[r4,#0x28]         ;2424
00012a  6401              STR      r1,[r0,#0x40]         ;2424
00012c  4944              LDR      r1,|L46.576|
00012e  6aa0              LDR      r0,[r4,#0x28]         ;2427
000130  64c1              STR      r1,[r0,#0x4c]         ;2427
000132  6822              LDR      r2,[r4,#0]            ;2430
000134  f1020138          ADD      r1,r2,#0x38           ;2430
000138  463b              MOV      r3,r7                 ;2430
00013a  4632              MOV      r2,r6                 ;2430
00013c  6aa0              LDR      r0,[r4,#0x28]         ;2430
00013e  f7fffffe          BL       HAL_DMA_Start_IT
000142  b108              CBZ      r0,|L46.328|
000144  2001              MOVS     r0,#1                 ;2434
000146  e78c              B        |L46.98|
                  |L46.328|
000148  6820              LDR      r0,[r4,#0]            ;2437
00014a  68c0              LDR      r0,[r0,#0xc]          ;2437
00014c  f4406080          ORR      r0,r0,#0x400          ;2437
000150  6821              LDR      r1,[r4,#0]            ;2437
000152  60c8              STR      r0,[r1,#0xc]          ;2437
000154  e038              B        |L46.456|
                  |L46.342|
000156  4938              LDR      r1,|L46.568|
000158  6ae0              LDR      r0,[r4,#0x2c]         ;2444
00015a  63c1              STR      r1,[r0,#0x3c]         ;2444
00015c  4937              LDR      r1,|L46.572|
00015e  6ae0              LDR      r0,[r4,#0x2c]         ;2445
000160  6401              STR      r1,[r0,#0x40]         ;2445
000162  4937              LDR      r1,|L46.576|
000164  6ae0              LDR      r0,[r4,#0x2c]         ;2448
000166  64c1              STR      r1,[r0,#0x4c]         ;2448
000168  6822              LDR      r2,[r4,#0]            ;2451
00016a  f102013c          ADD      r1,r2,#0x3c           ;2451
00016e  463b              MOV      r3,r7                 ;2451
000170  4632              MOV      r2,r6                 ;2451
000172  6ae0              LDR      r0,[r4,#0x2c]         ;2451
000174  f7fffffe          BL       HAL_DMA_Start_IT
000178  b108              CBZ      r0,|L46.382|
00017a  2001              MOVS     r0,#1                 ;2455
00017c  e771              B        |L46.98|
                  |L46.382|
00017e  6820              LDR      r0,[r4,#0]            ;2458
000180  68c0              LDR      r0,[r0,#0xc]          ;2458
000182  f4406000          ORR      r0,r0,#0x800          ;2458
000186  6821              LDR      r1,[r4,#0]            ;2458
000188  60c8              STR      r0,[r1,#0xc]          ;2458
00018a  e01d              B        |L46.456|
                  |L46.396|
00018c  492a              LDR      r1,|L46.568|
00018e  6b20              LDR      r0,[r4,#0x30]         ;2465
000190  63c1              STR      r1,[r0,#0x3c]         ;2465
000192  492a              LDR      r1,|L46.572|
000194  6b20              LDR      r0,[r4,#0x30]         ;2466
000196  6401              STR      r1,[r0,#0x40]         ;2466
000198  4929              LDR      r1,|L46.576|
00019a  6b20              LDR      r0,[r4,#0x30]         ;2469
00019c  64c1              STR      r1,[r0,#0x4c]         ;2469
00019e  6822              LDR      r2,[r4,#0]            ;2472
0001a0  f1020140          ADD      r1,r2,#0x40           ;2472
0001a4  463b              MOV      r3,r7                 ;2472
0001a6  4632              MOV      r2,r6                 ;2472
0001a8  6b20              LDR      r0,[r4,#0x30]         ;2472
0001aa  f7fffffe          BL       HAL_DMA_Start_IT
0001ae  b108              CBZ      r0,|L46.436|
0001b0  2001              MOVS     r0,#1                 ;2476
0001b2  e756              B        |L46.98|
                  |L46.436|
0001b4  6820              LDR      r0,[r4,#0]            ;2479
0001b6  68c0              LDR      r0,[r0,#0xc]          ;2479
0001b8  f4405080          ORR      r0,r0,#0x1000         ;2479
0001bc  6821              LDR      r1,[r4,#0]            ;2479
0001be  60c8              STR      r0,[r1,#0xc]          ;2479
0001c0  e002              B        |L46.456|
                  |L46.450|
0001c2  f04f0b01          MOV      r11,#1                ;2484
0001c6  bf00              NOP                            ;2485
                  |L46.456|
0001c8  bf00              NOP                            ;2417
0001ca  491e              LDR      r1,|L46.580|
0001cc  6820              LDR      r0,[r4,#0]            ;2489
0001ce  4288              CMP      r0,r1                 ;2489
0001d0  d01b              BEQ      |L46.522|
0001d2  6820              LDR      r0,[r4,#0]            ;2489
0001d4  f1b04f80          CMP      r0,#0x40000000        ;2489
0001d8  d017              BEQ      |L46.522|
0001da  491b              LDR      r1,|L46.584|
0001dc  6820              LDR      r0,[r4,#0]            ;2489
0001de  4288              CMP      r0,r1                 ;2489
0001e0  d013              BEQ      |L46.522|
0001e2  491a              LDR      r1,|L46.588|
0001e4  6820              LDR      r0,[r4,#0]            ;2489
0001e6  4288              CMP      r0,r1                 ;2489
0001e8  d00f              BEQ      |L46.522|
0001ea  4919              LDR      r1,|L46.592|
0001ec  6820              LDR      r0,[r4,#0]            ;2489
0001ee  4288              CMP      r0,r1                 ;2489
0001f0  d00b              BEQ      |L46.522|
0001f2  4918              LDR      r1,|L46.596|
0001f4  6820              LDR      r0,[r4,#0]            ;2489
0001f6  4288              CMP      r0,r1                 ;2489
0001f8  d007              BEQ      |L46.522|
0001fa  4917              LDR      r1,|L46.600|
0001fc  6820              LDR      r0,[r4,#0]            ;2489
0001fe  4288              CMP      r0,r1                 ;2489
000200  d003              BEQ      |L46.522|
000202  4916              LDR      r1,|L46.604|
000204  6820              LDR      r0,[r4,#0]            ;2489
000206  4288              CMP      r0,r1                 ;2489
000208  d10d              BNE      |L46.550|
                  |L46.522|
00020a  6820              LDR      r0,[r4,#0]            ;2491
00020c  6880              LDR      r0,[r0,#8]            ;2491
00020e  f0000807          AND      r8,r0,#7              ;2491
000212  f1b80f06          CMP      r8,#6                 ;2492
000216  d00c              BEQ      |L46.562|
000218  6820              LDR      r0,[r4,#0]            ;2494
00021a  6800              LDR      r0,[r0,#0]            ;2494
00021c  f0400001          ORR      r0,r0,#1              ;2494
000220  6821              LDR      r1,[r4,#0]            ;2494
000222  6008              STR      r0,[r1,#0]            ;2494
000224  e005              B        |L46.562|
                  |L46.550|
000226  6820              LDR      r0,[r4,#0]            ;2499
000228  6800              LDR      r0,[r0,#0]            ;2499
00022a  f0400001          ORR      r0,r0,#1              ;2499
00022e  6821              LDR      r1,[r4,#0]            ;2499
000230  6008              STR      r0,[r1,#0]            ;2499
                  |L46.562|
000232  4658              MOV      r0,r11                ;2503
000234  e715              B        |L46.98|
;;;2505   
                          ENDP

000236  0000              DCW      0x0000
                  |L46.568|
                          DCD      TIM_DMACaptureCplt
                  |L46.572|
                          DCD      TIM_DMACaptureHalfCplt
                  |L46.576|
                          DCD      TIM_DMAError
                  |L46.580|
                          DCD      0x40010000
                  |L46.584|
                          DCD      0x40000400
                  |L46.588|
                          DCD      0x40000800
                  |L46.592|
                          DCD      0x40000c00
                  |L46.596|
                          DCD      0x40010400
                  |L46.600|
                          DCD      0x40014000
                  |L46.604|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_IC_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_IC_Start_IT PROC
;;;2193     */
;;;2194   HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2195   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;2196     HAL_StatusTypeDef status = HAL_OK;
000008  2600              MOVS     r6,#0
;;;2197     uint32_t tmpsmcr;
;;;2198   
;;;2199     HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
00000a  b915              CBNZ     r5,|L47.18|
00000c  f894003e          LDRB     r0,[r4,#0x3e]
000010  e00b              B        |L47.42|
                  |L47.18|
000012  2d04              CMP      r5,#4
000014  d102              BNE      |L47.28|
000016  203f              MOVS     r0,#0x3f
000018  5d00              LDRB     r0,[r0,r4]
00001a  e006              B        |L47.42|
                  |L47.28|
00001c  2d08              CMP      r5,#8
00001e  d102              BNE      |L47.38|
000020  2040              MOVS     r0,#0x40
000022  5d00              LDRB     r0,[r0,r4]
000024  e001              B        |L47.42|
                  |L47.38|
000026  2041              MOVS     r0,#0x41
000028  5d00              LDRB     r0,[r0,r4]
                  |L47.42|
00002a  4680              MOV      r8,r0
;;;2200     HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
00002c  b915              CBNZ     r5,|L47.52|
00002e  f8940042          LDRB     r0,[r4,#0x42]
000032  e00b              B        |L47.76|
                  |L47.52|
000034  2d04              CMP      r5,#4
000036  d102              BNE      |L47.62|
000038  2043              MOVS     r0,#0x43
00003a  5d00              LDRB     r0,[r0,r4]
00003c  e006              B        |L47.76|
                  |L47.62|
00003e  2d08              CMP      r5,#8
000040  d102              BNE      |L47.72|
000042  2044              MOVS     r0,#0x44
000044  5d00              LDRB     r0,[r0,r4]
000046  e001              B        |L47.76|
                  |L47.72|
000048  2045              MOVS     r0,#0x45
00004a  5d00              LDRB     r0,[r0,r4]
                  |L47.76|
00004c  4681              MOV      r9,r0
;;;2201   
;;;2202     /* Check the parameters */
;;;2203     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;2204   
;;;2205     /* Check the TIM channel state */
;;;2206     if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
00004e  f1b80f01          CMP      r8,#1
000052  d102              BNE      |L47.90|
;;;2207         || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
000054  f1b90f01          CMP      r9,#1
000058  d002              BEQ      |L47.96|
                  |L47.90|
;;;2208     {
;;;2209       return HAL_ERROR;
00005a  2001              MOVS     r0,#1
                  |L47.92|
;;;2210     }
;;;2211   
;;;2212     /* Set the TIM channel state */
;;;2213     TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2214     TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2215   
;;;2216     switch (Channel)
;;;2217     {
;;;2218       case TIM_CHANNEL_1:
;;;2219       {
;;;2220         /* Enable the TIM Capture/Compare 1 interrupt */
;;;2221         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;2222         break;
;;;2223       }
;;;2224   
;;;2225       case TIM_CHANNEL_2:
;;;2226       {
;;;2227         /* Enable the TIM Capture/Compare 2 interrupt */
;;;2228         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;2229         break;
;;;2230       }
;;;2231   
;;;2232       case TIM_CHANNEL_3:
;;;2233       {
;;;2234         /* Enable the TIM Capture/Compare 3 interrupt */
;;;2235         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
;;;2236         break;
;;;2237       }
;;;2238   
;;;2239       case TIM_CHANNEL_4:
;;;2240       {
;;;2241         /* Enable the TIM Capture/Compare 4 interrupt */
;;;2242         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
;;;2243         break;
;;;2244       }
;;;2245   
;;;2246       default:
;;;2247         status = HAL_ERROR;
;;;2248         break;
;;;2249     }
;;;2250   
;;;2251     if (status == HAL_OK)
;;;2252     {
;;;2253       /* Enable the Input Capture channel */
;;;2254       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;2255   
;;;2256       /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;2257       if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;2258       {
;;;2259         tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;2260         if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;2261         {
;;;2262           __HAL_TIM_ENABLE(htim);
;;;2263         }
;;;2264       }
;;;2265       else
;;;2266       {
;;;2267         __HAL_TIM_ENABLE(htim);
;;;2268       }
;;;2269     }
;;;2270   
;;;2271     /* Return function status */
;;;2272     return status;
;;;2273   }
00005c  e8bd83f0          POP      {r4-r9,pc}
                  |L47.96|
000060  b91d              CBNZ     r5,|L47.106|
000062  2002              MOVS     r0,#2                 ;2213
000064  f884003e          STRB     r0,[r4,#0x3e]         ;2213
000068  e00e              B        |L47.136|
                  |L47.106|
00006a  2d04              CMP      r5,#4                 ;2213
00006c  d103              BNE      |L47.118|
00006e  2102              MOVS     r1,#2                 ;2213
000070  203f              MOVS     r0,#0x3f              ;2213
000072  5501              STRB     r1,[r0,r4]            ;2213
000074  e008              B        |L47.136|
                  |L47.118|
000076  2d08              CMP      r5,#8                 ;2213
000078  d103              BNE      |L47.130|
00007a  2102              MOVS     r1,#2                 ;2213
00007c  2040              MOVS     r0,#0x40              ;2213
00007e  5501              STRB     r1,[r0,r4]            ;2213
000080  e002              B        |L47.136|
                  |L47.130|
000082  2102              MOVS     r1,#2                 ;2213
000084  2041              MOVS     r0,#0x41              ;2213
000086  5501              STRB     r1,[r0,r4]            ;2213
                  |L47.136|
000088  b91d              CBNZ     r5,|L47.146|
00008a  2002              MOVS     r0,#2                 ;2214
00008c  f8840042          STRB     r0,[r4,#0x42]         ;2214
000090  e00e              B        |L47.176|
                  |L47.146|
000092  2d04              CMP      r5,#4                 ;2214
000094  d103              BNE      |L47.158|
000096  2102              MOVS     r1,#2                 ;2214
000098  2043              MOVS     r0,#0x43              ;2214
00009a  5501              STRB     r1,[r0,r4]            ;2214
00009c  e008              B        |L47.176|
                  |L47.158|
00009e  2d08              CMP      r5,#8                 ;2214
0000a0  d103              BNE      |L47.170|
0000a2  2102              MOVS     r1,#2                 ;2214
0000a4  2044              MOVS     r0,#0x44              ;2214
0000a6  5501              STRB     r1,[r0,r4]            ;2214
0000a8  e002              B        |L47.176|
                  |L47.170|
0000aa  2102              MOVS     r1,#2                 ;2214
0000ac  2045              MOVS     r0,#0x45              ;2214
0000ae  5501              STRB     r1,[r0,r4]            ;2214
                  |L47.176|
0000b0  b135              CBZ      r5,|L47.192|
0000b2  2d04              CMP      r5,#4                 ;2216
0000b4  d00b              BEQ      |L47.206|
0000b6  2d08              CMP      r5,#8                 ;2216
0000b8  d010              BEQ      |L47.220|
0000ba  2d0c              CMP      r5,#0xc               ;2216
0000bc  d11c              BNE      |L47.248|
0000be  e014              B        |L47.234|
                  |L47.192|
0000c0  6820              LDR      r0,[r4,#0]            ;2221
0000c2  68c0              LDR      r0,[r0,#0xc]          ;2221
0000c4  f0400002          ORR      r0,r0,#2              ;2221
0000c8  6821              LDR      r1,[r4,#0]            ;2221
0000ca  60c8              STR      r0,[r1,#0xc]          ;2221
0000cc  e016              B        |L47.252|
                  |L47.206|
0000ce  6820              LDR      r0,[r4,#0]            ;2228
0000d0  68c0              LDR      r0,[r0,#0xc]          ;2228
0000d2  f0400004          ORR      r0,r0,#4              ;2228
0000d6  6821              LDR      r1,[r4,#0]            ;2228
0000d8  60c8              STR      r0,[r1,#0xc]          ;2228
0000da  e00f              B        |L47.252|
                  |L47.220|
0000dc  6820              LDR      r0,[r4,#0]            ;2235
0000de  68c0              LDR      r0,[r0,#0xc]          ;2235
0000e0  f0400008          ORR      r0,r0,#8              ;2235
0000e4  6821              LDR      r1,[r4,#0]            ;2235
0000e6  60c8              STR      r0,[r1,#0xc]          ;2235
0000e8  e008              B        |L47.252|
                  |L47.234|
0000ea  6820              LDR      r0,[r4,#0]            ;2242
0000ec  68c0              LDR      r0,[r0,#0xc]          ;2242
0000ee  f0400010          ORR      r0,r0,#0x10           ;2242
0000f2  6821              LDR      r1,[r4,#0]            ;2242
0000f4  60c8              STR      r0,[r1,#0xc]          ;2242
0000f6  e001              B        |L47.252|
                  |L47.248|
0000f8  2601              MOVS     r6,#1                 ;2247
0000fa  bf00              NOP                            ;2248
                  |L47.252|
0000fc  bf00              NOP                            ;2222
0000fe  bb86              CBNZ     r6,|L47.354|
000100  2201              MOVS     r2,#1                 ;2254
000102  4629              MOV      r1,r5                 ;2254
000104  6820              LDR      r0,[r4,#0]            ;2254
000106  f7fffffe          BL       TIM_CCxChannelCmd
00010a  491a              LDR      r1,|L47.372|
00010c  6820              LDR      r0,[r4,#0]            ;2257
00010e  4288              CMP      r0,r1                 ;2257
000110  d01b              BEQ      |L47.330|
000112  6820              LDR      r0,[r4,#0]            ;2257
000114  f1b04f80          CMP      r0,#0x40000000        ;2257
000118  d017              BEQ      |L47.330|
00011a  4917              LDR      r1,|L47.376|
00011c  6820              LDR      r0,[r4,#0]            ;2257
00011e  4288              CMP      r0,r1                 ;2257
000120  d013              BEQ      |L47.330|
000122  4916              LDR      r1,|L47.380|
000124  6820              LDR      r0,[r4,#0]            ;2257
000126  4288              CMP      r0,r1                 ;2257
000128  d00f              BEQ      |L47.330|
00012a  4915              LDR      r1,|L47.384|
00012c  6820              LDR      r0,[r4,#0]            ;2257
00012e  4288              CMP      r0,r1                 ;2257
000130  d00b              BEQ      |L47.330|
000132  4914              LDR      r1,|L47.388|
000134  6820              LDR      r0,[r4,#0]            ;2257
000136  4288              CMP      r0,r1                 ;2257
000138  d007              BEQ      |L47.330|
00013a  4913              LDR      r1,|L47.392|
00013c  6820              LDR      r0,[r4,#0]            ;2257
00013e  4288              CMP      r0,r1                 ;2257
000140  d003              BEQ      |L47.330|
000142  4912              LDR      r1,|L47.396|
000144  6820              LDR      r0,[r4,#0]            ;2257
000146  4288              CMP      r0,r1                 ;2257
000148  d10c              BNE      |L47.356|
                  |L47.330|
00014a  6820              LDR      r0,[r4,#0]            ;2259
00014c  6880              LDR      r0,[r0,#8]            ;2259
00014e  f0000707          AND      r7,r0,#7              ;2259
000152  2f06              CMP      r7,#6                 ;2260
000154  d00c              BEQ      |L47.368|
000156  6820              LDR      r0,[r4,#0]            ;2262
000158  6800              LDR      r0,[r0,#0]            ;2262
00015a  f0400001          ORR      r0,r0,#1              ;2262
00015e  6821              LDR      r1,[r4,#0]            ;2262
000160  6008              STR      r0,[r1,#0]            ;2262
                  |L47.354|
000162  e005              B        |L47.368|
                  |L47.356|
000164  6820              LDR      r0,[r4,#0]            ;2267
000166  6800              LDR      r0,[r0,#0]            ;2267
000168  f0400001          ORR      r0,r0,#1              ;2267
00016c  6821              LDR      r1,[r4,#0]            ;2267
00016e  6008              STR      r0,[r1,#0]            ;2267
                  |L47.368|
000170  4630              MOV      r0,r6                 ;2272
000172  e773              B        |L47.92|
;;;2274   
                          ENDP

                  |L47.372|
                          DCD      0x40010000
                  |L47.376|
                          DCD      0x40000400
                  |L47.380|
                          DCD      0x40000800
                  |L47.384|
                          DCD      0x40000c00
                  |L47.388|
                          DCD      0x40010400
                  |L47.392|
                          DCD      0x40014000
                  |L47.396|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_IC_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Stop PROC
;;;2163     */
;;;2164   HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;2165   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2166     /* Check the parameters */
;;;2167     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;2168   
;;;2169     /* Disable the Input Capture channel */
;;;2170     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxChannelCmd
;;;2171   
;;;2172     /* Disable the Peripheral */
;;;2173     __HAL_TIM_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L48.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L48.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6800              LDR      r0,[r0,#0]
00002c  f0200001          BIC      r0,r0,#1
000030  6821              LDR      r1,[r4,#0]
000032  6008              STR      r0,[r1,#0]
                  |L48.52|
000034  bf00              NOP      
;;;2174   
;;;2175     /* Set the TIM channel state */
;;;2176     TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
000036  b91d              CBNZ     r5,|L48.64|
000038  2001              MOVS     r0,#1
00003a  f884003e          STRB     r0,[r4,#0x3e]
00003e  e00e              B        |L48.94|
                  |L48.64|
000040  2d04              CMP      r5,#4
000042  d103              BNE      |L48.76|
000044  2101              MOVS     r1,#1
000046  203f              MOVS     r0,#0x3f
000048  5501              STRB     r1,[r0,r4]
00004a  e008              B        |L48.94|
                  |L48.76|
00004c  2d08              CMP      r5,#8
00004e  d103              BNE      |L48.88|
000050  2101              MOVS     r1,#1
000052  2040              MOVS     r0,#0x40
000054  5501              STRB     r1,[r0,r4]
000056  e002              B        |L48.94|
                  |L48.88|
000058  2101              MOVS     r1,#1
00005a  2041              MOVS     r0,#0x41
00005c  5501              STRB     r1,[r0,r4]
                  |L48.94|
;;;2177     TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
00005e  b91d              CBNZ     r5,|L48.104|
000060  2001              MOVS     r0,#1
000062  f8840042          STRB     r0,[r4,#0x42]
000066  e00e              B        |L48.134|
                  |L48.104|
000068  2d04              CMP      r5,#4
00006a  d103              BNE      |L48.116|
00006c  2101              MOVS     r1,#1
00006e  2043              MOVS     r0,#0x43
000070  5501              STRB     r1,[r0,r4]
000072  e008              B        |L48.134|
                  |L48.116|
000074  2d08              CMP      r5,#8
000076  d103              BNE      |L48.128|
000078  2101              MOVS     r1,#1
00007a  2044              MOVS     r0,#0x44
00007c  5501              STRB     r1,[r0,r4]
00007e  e002              B        |L48.134|
                  |L48.128|
000080  2101              MOVS     r1,#1
000082  2045              MOVS     r0,#0x45
000084  5501              STRB     r1,[r0,r4]
                  |L48.134|
;;;2178   
;;;2179     /* Return function status */
;;;2180     return HAL_OK;
000086  2000              MOVS     r0,#0
;;;2181   }
000088  bd30              POP      {r4,r5,pc}
;;;2182   
                          ENDP


                          AREA ||i.HAL_TIM_IC_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Stop_DMA PROC
;;;2516     */
;;;2517   HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;2518   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2519     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;2520   
;;;2521     /* Check the parameters */
;;;2522     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;2523     assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
;;;2524   
;;;2525     /* Disable the Input Capture channel */
;;;2526     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000008  2200              MOVS     r2,#0
00000a  4629              MOV      r1,r5
00000c  6820              LDR      r0,[r4,#0]
00000e  f7fffffe          BL       TIM_CCxChannelCmd
;;;2527   
;;;2528     switch (Channel)
000012  b135              CBZ      r5,|L49.34|
000014  2d04              CMP      r5,#4
000016  d00e              BEQ      |L49.54|
000018  2d08              CMP      r5,#8
00001a  d016              BEQ      |L49.74|
00001c  2d0c              CMP      r5,#0xc
00001e  d128              BNE      |L49.114|
000020  e01d              B        |L49.94|
                  |L49.34|
;;;2529     {
;;;2530       case TIM_CHANNEL_1:
;;;2531       {
;;;2532         /* Disable the TIM Capture/Compare 1 DMA request */
;;;2533         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000022  6820              LDR      r0,[r4,#0]
000024  68c0              LDR      r0,[r0,#0xc]
000026  f4207000          BIC      r0,r0,#0x200
00002a  6821              LDR      r1,[r4,#0]
00002c  60c8              STR      r0,[r1,#0xc]
;;;2534         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
00002e  6a60              LDR      r0,[r4,#0x24]
000030  f7fffffe          BL       HAL_DMA_Abort_IT
;;;2535         break;
000034  e01f              B        |L49.118|
                  |L49.54|
;;;2536       }
;;;2537   
;;;2538       case TIM_CHANNEL_2:
;;;2539       {
;;;2540         /* Disable the TIM Capture/Compare 2 DMA request */
;;;2541         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000036  6820              LDR      r0,[r4,#0]
000038  68c0              LDR      r0,[r0,#0xc]
00003a  f4206080          BIC      r0,r0,#0x400
00003e  6821              LDR      r1,[r4,#0]
000040  60c8              STR      r0,[r1,#0xc]
;;;2542         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
000042  6aa0              LDR      r0,[r4,#0x28]
000044  f7fffffe          BL       HAL_DMA_Abort_IT
;;;2543         break;
000048  e015              B        |L49.118|
                  |L49.74|
;;;2544       }
;;;2545   
;;;2546       case TIM_CHANNEL_3:
;;;2547       {
;;;2548         /* Disable the TIM Capture/Compare 3  DMA request */
;;;2549         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00004a  6820              LDR      r0,[r4,#0]
00004c  68c0              LDR      r0,[r0,#0xc]
00004e  f4206000          BIC      r0,r0,#0x800
000052  6821              LDR      r1,[r4,#0]
000054  60c8              STR      r0,[r1,#0xc]
;;;2550         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
000056  6ae0              LDR      r0,[r4,#0x2c]
000058  f7fffffe          BL       HAL_DMA_Abort_IT
;;;2551         break;
00005c  e00b              B        |L49.118|
                  |L49.94|
;;;2552       }
;;;2553   
;;;2554       case TIM_CHANNEL_4:
;;;2555       {
;;;2556         /* Disable the TIM Capture/Compare 4  DMA request */
;;;2557         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
00005e  6820              LDR      r0,[r4,#0]
000060  68c0              LDR      r0,[r0,#0xc]
000062  f4205080          BIC      r0,r0,#0x1000
000066  6821              LDR      r1,[r4,#0]
000068  60c8              STR      r0,[r1,#0xc]
;;;2558         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
00006a  6b20              LDR      r0,[r4,#0x30]
00006c  f7fffffe          BL       HAL_DMA_Abort_IT
;;;2559         break;
000070  e001              B        |L49.118|
                  |L49.114|
;;;2560       }
;;;2561   
;;;2562       default:
;;;2563         status = HAL_ERROR;
000072  2601              MOVS     r6,#1
;;;2564         break;
000074  bf00              NOP      
                  |L49.118|
000076  bf00              NOP                            ;2535
;;;2565     }
;;;2566   
;;;2567     if (status == HAL_OK)
000078  bb56              CBNZ     r6,|L49.208|
;;;2568     {
;;;2569       /* Disable the Peripheral */
;;;2570       __HAL_TIM_DISABLE(htim);
00007a  bf00              NOP      
00007c  6820              LDR      r0,[r4,#0]
00007e  6a00              LDR      r0,[r0,#0x20]
000080  f2411111          MOV      r1,#0x1111
000084  4008              ANDS     r0,r0,r1
000086  b950              CBNZ     r0,|L49.158|
000088  6820              LDR      r0,[r4,#0]
00008a  6a00              LDR      r0,[r0,#0x20]
00008c  1089              ASRS     r1,r1,#2
00008e  4008              ANDS     r0,r0,r1
000090  b928              CBNZ     r0,|L49.158|
000092  6820              LDR      r0,[r4,#0]
000094  6800              LDR      r0,[r0,#0]
000096  f0200001          BIC      r0,r0,#1
00009a  6821              LDR      r1,[r4,#0]
00009c  6008              STR      r0,[r1,#0]
                  |L49.158|
00009e  bf00              NOP      
;;;2571   
;;;2572       /* Set the TIM channel state */
;;;2573       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000a0  b91d              CBNZ     r5,|L49.170|
0000a2  2001              MOVS     r0,#1
0000a4  f884003e          STRB     r0,[r4,#0x3e]
0000a8  e00e              B        |L49.200|
                  |L49.170|
0000aa  2d04              CMP      r5,#4
0000ac  d103              BNE      |L49.182|
0000ae  2101              MOVS     r1,#1
0000b0  203f              MOVS     r0,#0x3f
0000b2  5501              STRB     r1,[r0,r4]
0000b4  e008              B        |L49.200|
                  |L49.182|
0000b6  2d08              CMP      r5,#8
0000b8  d103              BNE      |L49.194|
0000ba  2101              MOVS     r1,#1
0000bc  2040              MOVS     r0,#0x40
0000be  5501              STRB     r1,[r0,r4]
0000c0  e002              B        |L49.200|
                  |L49.194|
0000c2  2101              MOVS     r1,#1
0000c4  2041              MOVS     r0,#0x41
0000c6  5501              STRB     r1,[r0,r4]
                  |L49.200|
;;;2574       TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000c8  b91d              CBNZ     r5,|L49.210|
0000ca  2001              MOVS     r0,#1
0000cc  f8840042          STRB     r0,[r4,#0x42]
                  |L49.208|
0000d0  e00e              B        |L49.240|
                  |L49.210|
0000d2  2d04              CMP      r5,#4
0000d4  d103              BNE      |L49.222|
0000d6  2101              MOVS     r1,#1
0000d8  2043              MOVS     r0,#0x43
0000da  5501              STRB     r1,[r0,r4]
0000dc  e008              B        |L49.240|
                  |L49.222|
0000de  2d08              CMP      r5,#8
0000e0  d103              BNE      |L49.234|
0000e2  2101              MOVS     r1,#1
0000e4  2044              MOVS     r0,#0x44
0000e6  5501              STRB     r1,[r0,r4]
0000e8  e002              B        |L49.240|
                  |L49.234|
0000ea  2101              MOVS     r1,#1
0000ec  2045              MOVS     r0,#0x45
0000ee  5501              STRB     r1,[r0,r4]
                  |L49.240|
;;;2575     }
;;;2576   
;;;2577     /* Return function status */
;;;2578     return status;
0000f0  4630              MOV      r0,r6
;;;2579   }
0000f2  bd70              POP      {r4-r6,pc}
;;;2580   /**
                          ENDP


                          AREA ||i.HAL_TIM_IC_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IC_Stop_IT PROC
;;;2285     */
;;;2286   HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;2287   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2288     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;2289   
;;;2290     /* Check the parameters */
;;;2291     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;2292   
;;;2293     switch (Channel)
000008  b135              CBZ      r5,|L50.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L50.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L50.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L50.80|
000016  e014              B        |L50.66|
                  |L50.24|
;;;2294     {
;;;2295       case TIM_CHANNEL_1:
;;;2296       {
;;;2297         /* Disable the TIM Capture/Compare 1 interrupt */
;;;2298         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f0200002          BIC      r0,r0,#2
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;2299         break;
000024  e016              B        |L50.84|
                  |L50.38|
;;;2300       }
;;;2301   
;;;2302       case TIM_CHANNEL_2:
;;;2303       {
;;;2304         /* Disable the TIM Capture/Compare 2 interrupt */
;;;2305         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f0200004          BIC      r0,r0,#4
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;2306         break;
000032  e00f              B        |L50.84|
                  |L50.52|
;;;2307       }
;;;2308   
;;;2309       case TIM_CHANNEL_3:
;;;2310       {
;;;2311         /* Disable the TIM Capture/Compare 3 interrupt */
;;;2312         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0200008          BIC      r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;2313         break;
000040  e008              B        |L50.84|
                  |L50.66|
;;;2314       }
;;;2315   
;;;2316       case TIM_CHANNEL_4:
;;;2317       {
;;;2318         /* Disable the TIM Capture/Compare 4 interrupt */
;;;2319         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;2320         break;
00004e  e001              B        |L50.84|
                  |L50.80|
;;;2321       }
;;;2322   
;;;2323       default:
;;;2324         status = HAL_ERROR;
000050  2601              MOVS     r6,#1
;;;2325         break;
000052  bf00              NOP      
                  |L50.84|
000054  bf00              NOP                            ;2299
;;;2326     }
;;;2327   
;;;2328     if (status == HAL_OK)
000056  2e00              CMP      r6,#0
000058  d13f              BNE      |L50.218|
;;;2329     {
;;;2330       /* Disable the Input Capture channel */
;;;2331       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
00005a  2200              MOVS     r2,#0
00005c  4629              MOV      r1,r5
00005e  6820              LDR      r0,[r4,#0]
000060  f7fffffe          BL       TIM_CCxChannelCmd
;;;2332   
;;;2333       /* Disable the Peripheral */
;;;2334       __HAL_TIM_DISABLE(htim);
000064  bf00              NOP      
000066  6820              LDR      r0,[r4,#0]
000068  6a00              LDR      r0,[r0,#0x20]
00006a  f2411111          MOV      r1,#0x1111
00006e  4008              ANDS     r0,r0,r1
000070  b950              CBNZ     r0,|L50.136|
000072  6820              LDR      r0,[r4,#0]
000074  6a00              LDR      r0,[r0,#0x20]
000076  1089              ASRS     r1,r1,#2
000078  4008              ANDS     r0,r0,r1
00007a  b928              CBNZ     r0,|L50.136|
00007c  6820              LDR      r0,[r4,#0]
00007e  6800              LDR      r0,[r0,#0]
000080  f0200001          BIC      r0,r0,#1
000084  6821              LDR      r1,[r4,#0]
000086  6008              STR      r0,[r1,#0]
                  |L50.136|
000088  bf00              NOP      
;;;2335   
;;;2336       /* Set the TIM channel state */
;;;2337       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
00008a  b91d              CBNZ     r5,|L50.148|
00008c  2001              MOVS     r0,#1
00008e  f884003e          STRB     r0,[r4,#0x3e]
000092  e00e              B        |L50.178|
                  |L50.148|
000094  2d04              CMP      r5,#4
000096  d103              BNE      |L50.160|
000098  2101              MOVS     r1,#1
00009a  203f              MOVS     r0,#0x3f
00009c  5501              STRB     r1,[r0,r4]
00009e  e008              B        |L50.178|
                  |L50.160|
0000a0  2d08              CMP      r5,#8
0000a2  d103              BNE      |L50.172|
0000a4  2101              MOVS     r1,#1
0000a6  2040              MOVS     r0,#0x40
0000a8  5501              STRB     r1,[r0,r4]
0000aa  e002              B        |L50.178|
                  |L50.172|
0000ac  2101              MOVS     r1,#1
0000ae  2041              MOVS     r0,#0x41
0000b0  5501              STRB     r1,[r0,r4]
                  |L50.178|
;;;2338       TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000b2  b91d              CBNZ     r5,|L50.188|
0000b4  2001              MOVS     r0,#1
0000b6  f8840042          STRB     r0,[r4,#0x42]
0000ba  e00e              B        |L50.218|
                  |L50.188|
0000bc  2d04              CMP      r5,#4
0000be  d103              BNE      |L50.200|
0000c0  2101              MOVS     r1,#1
0000c2  2043              MOVS     r0,#0x43
0000c4  5501              STRB     r1,[r0,r4]
0000c6  e008              B        |L50.218|
                  |L50.200|
0000c8  2d08              CMP      r5,#8
0000ca  d103              BNE      |L50.212|
0000cc  2101              MOVS     r1,#1
0000ce  2044              MOVS     r0,#0x44
0000d0  5501              STRB     r1,[r0,r4]
0000d2  e002              B        |L50.218|
                  |L50.212|
0000d4  2101              MOVS     r1,#1
0000d6  2045              MOVS     r0,#0x45
0000d8  5501              STRB     r1,[r0,r4]
                  |L50.218|
;;;2339     }
;;;2340   
;;;2341     /* Return function status */
;;;2342     return status;
0000da  4630              MOV      r0,r6
;;;2343   }
0000dc  bd70              POP      {r4-r6,pc}
;;;2344   
                          ENDP


                          AREA ||i.HAL_TIM_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_TIM_IRQHandler PROC
;;;3814     */
;;;3815   void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;3816   {
000002  4604              MOV      r4,r0
;;;3817     /* Capture compare 1 event */
;;;3818     if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
000004  6820              LDR      r0,[r4,#0]
000006  6900              LDR      r0,[r0,#0x10]
000008  f3c00040          UBFX     r0,r0,#1,#1
00000c  b1d8              CBZ      r0,|L51.70|
;;;3819     {
;;;3820       if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f3c00040          UBFX     r0,r0,#1,#1
000016  b1b0              CBZ      r0,|L51.70|
;;;3821       {
;;;3822         {
;;;3823           __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
000018  f06f0002          MVN      r0,#2
00001c  6821              LDR      r1,[r4,#0]
00001e  6108              STR      r0,[r1,#0x10]
;;;3824           htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
000020  2001              MOVS     r0,#1
000022  7720              STRB     r0,[r4,#0x1c]
;;;3825   
;;;3826           /* Input capture event */
;;;3827           if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
000024  6820              LDR      r0,[r4,#0]
000026  6980              LDR      r0,[r0,#0x18]
000028  f0000003          AND      r0,r0,#3
00002c  b118              CBZ      r0,|L51.54|
;;;3828           {
;;;3829   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3830             htim->IC_CaptureCallback(htim);
;;;3831   #else
;;;3832             HAL_TIM_IC_CaptureCallback(htim);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
000034  e005              B        |L51.66|
                  |L51.54|
;;;3833   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3834           }
;;;3835           /* Output compare event */
;;;3836           else
;;;3837           {
;;;3838   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3839             htim->OC_DelayElapsedCallback(htim);
;;;3840             htim->PWM_PulseFinishedCallback(htim);
;;;3841   #else
;;;3842             HAL_TIM_OC_DelayElapsedCallback(htim);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;3843             HAL_TIM_PWM_PulseFinishedCallback(htim);
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L51.66|
;;;3844   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3845           }
;;;3846           htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000042  2000              MOVS     r0,#0
000044  7720              STRB     r0,[r4,#0x1c]
                  |L51.70|
;;;3847         }
;;;3848       }
;;;3849     }
;;;3850     /* Capture compare 2 event */
;;;3851     if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
000046  6820              LDR      r0,[r4,#0]
000048  6900              LDR      r0,[r0,#0x10]
00004a  f3c00080          UBFX     r0,r0,#2,#1
00004e  b1d8              CBZ      r0,|L51.136|
;;;3852     {
;;;3853       if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
000050  6820              LDR      r0,[r4,#0]
000052  68c0              LDR      r0,[r0,#0xc]
000054  f3c00080          UBFX     r0,r0,#2,#1
000058  b1b0              CBZ      r0,|L51.136|
;;;3854       {
;;;3855         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
00005a  f06f0004          MVN      r0,#4
00005e  6821              LDR      r1,[r4,#0]
000060  6108              STR      r0,[r1,#0x10]
;;;3856         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000062  2002              MOVS     r0,#2
000064  7720              STRB     r0,[r4,#0x1c]
;;;3857         /* Input capture event */
;;;3858         if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
000066  6820              LDR      r0,[r4,#0]
000068  6980              LDR      r0,[r0,#0x18]
00006a  f4007040          AND      r0,r0,#0x300
00006e  b118              CBZ      r0,|L51.120|
;;;3859         {
;;;3860   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3861           htim->IC_CaptureCallback(htim);
;;;3862   #else
;;;3863           HAL_TIM_IC_CaptureCallback(htim);
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
000076  e005              B        |L51.132|
                  |L51.120|
;;;3864   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3865         }
;;;3866         /* Output compare event */
;;;3867         else
;;;3868         {
;;;3869   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3870           htim->OC_DelayElapsedCallback(htim);
;;;3871           htim->PWM_PulseFinishedCallback(htim);
;;;3872   #else
;;;3873           HAL_TIM_OC_DelayElapsedCallback(htim);
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;3874           HAL_TIM_PWM_PulseFinishedCallback(htim);
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L51.132|
;;;3875   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3876         }
;;;3877         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000084  2000              MOVS     r0,#0
000086  7720              STRB     r0,[r4,#0x1c]
                  |L51.136|
;;;3878       }
;;;3879     }
;;;3880     /* Capture compare 3 event */
;;;3881     if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
000088  6820              LDR      r0,[r4,#0]
00008a  6900              LDR      r0,[r0,#0x10]
00008c  f3c000c0          UBFX     r0,r0,#3,#1
000090  b1d8              CBZ      r0,|L51.202|
;;;3882     {
;;;3883       if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
000092  6820              LDR      r0,[r4,#0]
000094  68c0              LDR      r0,[r0,#0xc]
000096  f3c000c0          UBFX     r0,r0,#3,#1
00009a  b1b0              CBZ      r0,|L51.202|
;;;3884       {
;;;3885         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
00009c  f06f0008          MVN      r0,#8
0000a0  6821              LDR      r1,[r4,#0]
0000a2  6108              STR      r0,[r1,#0x10]
;;;3886         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
0000a4  2004              MOVS     r0,#4
0000a6  7720              STRB     r0,[r4,#0x1c]
;;;3887         /* Input capture event */
;;;3888         if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
0000a8  6820              LDR      r0,[r4,#0]
0000aa  69c0              LDR      r0,[r0,#0x1c]
0000ac  f0000003          AND      r0,r0,#3
0000b0  b118              CBZ      r0,|L51.186|
;;;3889         {
;;;3890   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3891           htim->IC_CaptureCallback(htim);
;;;3892   #else
;;;3893           HAL_TIM_IC_CaptureCallback(htim);
0000b2  4620              MOV      r0,r4
0000b4  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
0000b8  e005              B        |L51.198|
                  |L51.186|
;;;3894   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3895         }
;;;3896         /* Output compare event */
;;;3897         else
;;;3898         {
;;;3899   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3900           htim->OC_DelayElapsedCallback(htim);
;;;3901           htim->PWM_PulseFinishedCallback(htim);
;;;3902   #else
;;;3903           HAL_TIM_OC_DelayElapsedCallback(htim);
0000ba  4620              MOV      r0,r4
0000bc  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;3904           HAL_TIM_PWM_PulseFinishedCallback(htim);
0000c0  4620              MOV      r0,r4
0000c2  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L51.198|
;;;3905   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3906         }
;;;3907         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
0000c6  2000              MOVS     r0,#0
0000c8  7720              STRB     r0,[r4,#0x1c]
                  |L51.202|
;;;3908       }
;;;3909     }
;;;3910     /* Capture compare 4 event */
;;;3911     if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
0000ca  6820              LDR      r0,[r4,#0]
0000cc  6900              LDR      r0,[r0,#0x10]
0000ce  f3c01000          UBFX     r0,r0,#4,#1
0000d2  b1d8              CBZ      r0,|L51.268|
;;;3912     {
;;;3913       if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
0000d4  6820              LDR      r0,[r4,#0]
0000d6  68c0              LDR      r0,[r0,#0xc]
0000d8  f3c01000          UBFX     r0,r0,#4,#1
0000dc  b1b0              CBZ      r0,|L51.268|
;;;3914       {
;;;3915         __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
0000de  f06f0010          MVN      r0,#0x10
0000e2  6821              LDR      r1,[r4,#0]
0000e4  6108              STR      r0,[r1,#0x10]
;;;3916         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
0000e6  2008              MOVS     r0,#8
0000e8  7720              STRB     r0,[r4,#0x1c]
;;;3917         /* Input capture event */
;;;3918         if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
0000ea  6820              LDR      r0,[r4,#0]
0000ec  69c0              LDR      r0,[r0,#0x1c]
0000ee  f4007040          AND      r0,r0,#0x300
0000f2  b118              CBZ      r0,|L51.252|
;;;3919         {
;;;3920   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3921           htim->IC_CaptureCallback(htim);
;;;3922   #else
;;;3923           HAL_TIM_IC_CaptureCallback(htim);
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
0000fa  e005              B        |L51.264|
                  |L51.252|
;;;3924   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3925         }
;;;3926         /* Output compare event */
;;;3927         else
;;;3928         {
;;;3929   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3930           htim->OC_DelayElapsedCallback(htim);
;;;3931           htim->PWM_PulseFinishedCallback(htim);
;;;3932   #else
;;;3933           HAL_TIM_OC_DelayElapsedCallback(htim);
0000fc  4620              MOV      r0,r4
0000fe  f7fffffe          BL       HAL_TIM_OC_DelayElapsedCallback
;;;3934           HAL_TIM_PWM_PulseFinishedCallback(htim);
000102  4620              MOV      r0,r4
000104  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
                  |L51.264|
;;;3935   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3936         }
;;;3937         htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000108  2000              MOVS     r0,#0
00010a  7720              STRB     r0,[r4,#0x1c]
                  |L51.268|
;;;3938       }
;;;3939     }
;;;3940     /* TIM Update event */
;;;3941     if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
00010c  6820              LDR      r0,[r4,#0]
00010e  6900              LDR      r0,[r0,#0x10]
000110  f0000001          AND      r0,r0,#1
000114  b158              CBZ      r0,|L51.302|
;;;3942     {
;;;3943       if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
000116  6820              LDR      r0,[r4,#0]
000118  68c0              LDR      r0,[r0,#0xc]
00011a  f0000001          AND      r0,r0,#1
00011e  b130              CBZ      r0,|L51.302|
;;;3944       {
;;;3945         __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
000120  f06f0001          MVN      r0,#1
000124  6821              LDR      r1,[r4,#0]
000126  6108              STR      r0,[r1,#0x10]
;;;3946   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3947         htim->PeriodElapsedCallback(htim);
;;;3948   #else
;;;3949         HAL_TIM_PeriodElapsedCallback(htim);
000128  4620              MOV      r0,r4
00012a  f7fffffe          BL       HAL_TIM_PeriodElapsedCallback
                  |L51.302|
;;;3950   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3951       }
;;;3952     }
;;;3953     /* TIM Break input event */
;;;3954     if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
00012e  6820              LDR      r0,[r4,#0]
000130  6900              LDR      r0,[r0,#0x10]
000132  f3c010c0          UBFX     r0,r0,#7,#1
000136  b158              CBZ      r0,|L51.336|
;;;3955     {
;;;3956       if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
000138  6820              LDR      r0,[r4,#0]
00013a  68c0              LDR      r0,[r0,#0xc]
00013c  f3c010c0          UBFX     r0,r0,#7,#1
000140  b130              CBZ      r0,|L51.336|
;;;3957       {
;;;3958         __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
000142  f06f0080          MVN      r0,#0x80
000146  6821              LDR      r1,[r4,#0]
000148  6108              STR      r0,[r1,#0x10]
;;;3959   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3960         htim->BreakCallback(htim);
;;;3961   #else
;;;3962         HAL_TIMEx_BreakCallback(htim);
00014a  4620              MOV      r0,r4
00014c  f7fffffe          BL       HAL_TIMEx_BreakCallback
                  |L51.336|
;;;3963   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3964       }
;;;3965     }
;;;3966     /* TIM Trigger detection event */
;;;3967     if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
000150  6820              LDR      r0,[r4,#0]
000152  6900              LDR      r0,[r0,#0x10]
000154  f3c01080          UBFX     r0,r0,#6,#1
000158  b158              CBZ      r0,|L51.370|
;;;3968     {
;;;3969       if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
00015a  6820              LDR      r0,[r4,#0]
00015c  68c0              LDR      r0,[r0,#0xc]
00015e  f3c01080          UBFX     r0,r0,#6,#1
000162  b130              CBZ      r0,|L51.370|
;;;3970       {
;;;3971         __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
000164  f06f0040          MVN      r0,#0x40
000168  6821              LDR      r1,[r4,#0]
00016a  6108              STR      r0,[r1,#0x10]
;;;3972   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3973         htim->TriggerCallback(htim);
;;;3974   #else
;;;3975         HAL_TIM_TriggerCallback(htim);
00016c  4620              MOV      r0,r4
00016e  f7fffffe          BL       HAL_TIM_TriggerCallback
                  |L51.370|
;;;3976   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3977       }
;;;3978     }
;;;3979     /* TIM commutation event */
;;;3980     if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
000172  6820              LDR      r0,[r4,#0]
000174  6900              LDR      r0,[r0,#0x10]
000176  f3c01040          UBFX     r0,r0,#5,#1
00017a  b158              CBZ      r0,|L51.404|
;;;3981     {
;;;3982       if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
00017c  6820              LDR      r0,[r4,#0]
00017e  68c0              LDR      r0,[r0,#0xc]
000180  f3c01040          UBFX     r0,r0,#5,#1
000184  b130              CBZ      r0,|L51.404|
;;;3983       {
;;;3984         __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
000186  f06f0020          MVN      r0,#0x20
00018a  6821              LDR      r1,[r4,#0]
00018c  6108              STR      r0,[r1,#0x10]
;;;3985   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;3986         htim->CommutationCallback(htim);
;;;3987   #else
;;;3988         HAL_TIMEx_CommutCallback(htim);
00018e  4620              MOV      r0,r4
000190  f7fffffe          BL       HAL_TIMEx_CommutCallback
                  |L51.404|
;;;3989   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;3990       }
;;;3991     }
;;;3992   }
000194  bd10              POP      {r4,pc}
;;;3993   
                          ENDP


                          AREA ||i.HAL_TIM_OC_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_ConfigChannel PROC
;;;4029     */
;;;4030   HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4031                                              TIM_OC_InitTypeDef *sConfig,
;;;4032                                              uint32_t Channel)
;;;4033   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;4034     HAL_StatusTypeDef status = HAL_OK;
00000a  2700              MOVS     r7,#0
;;;4035   
;;;4036     /* Check the parameters */
;;;4037     assert_param(IS_TIM_CHANNELS(Channel));
;;;4038     assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
;;;4039     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;4040   
;;;4041     /* Process Locked */
;;;4042     __HAL_LOCK(htim);
00000c  bf00              NOP      
00000e  f894003c          LDRB     r0,[r4,#0x3c]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L52.28|
000016  2002              MOVS     r0,#2
                  |L52.24|
;;;4043   
;;;4044     switch (Channel)
;;;4045     {
;;;4046       case TIM_CHANNEL_1:
;;;4047       {
;;;4048         /* Check the parameters */
;;;4049         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4050   
;;;4051         /* Configure the TIM Channel 1 in Output Compare */
;;;4052         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;4053         break;
;;;4054       }
;;;4055   
;;;4056       case TIM_CHANNEL_2:
;;;4057       {
;;;4058         /* Check the parameters */
;;;4059         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4060   
;;;4061         /* Configure the TIM Channel 2 in Output Compare */
;;;4062         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;4063         break;
;;;4064       }
;;;4065   
;;;4066       case TIM_CHANNEL_3:
;;;4067       {
;;;4068         /* Check the parameters */
;;;4069         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;4070   
;;;4071         /* Configure the TIM Channel 3 in Output Compare */
;;;4072         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;4073         break;
;;;4074       }
;;;4075   
;;;4076       case TIM_CHANNEL_4:
;;;4077       {
;;;4078         /* Check the parameters */
;;;4079         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;4080   
;;;4081         /* Configure the TIM Channel 4 in Output Compare */
;;;4082         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;4083         break;
;;;4084       }
;;;4085   
;;;4086       default:
;;;4087         status = HAL_ERROR;
;;;4088         break;
;;;4089     }
;;;4090   
;;;4091     __HAL_UNLOCK(htim);
;;;4092   
;;;4093     return status;
;;;4094   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L52.28|
00001c  2001              MOVS     r0,#1                 ;4042
00001e  f884003c          STRB     r0,[r4,#0x3c]         ;4042
000022  bf00              NOP                            ;4042
000024  b135              CBZ      r5,|L52.52|
000026  2d04              CMP      r5,#4                 ;4044
000028  d009              BEQ      |L52.62|
00002a  2d08              CMP      r5,#8                 ;4044
00002c  d00c              BEQ      |L52.72|
00002e  2d0c              CMP      r5,#0xc               ;4044
000030  d114              BNE      |L52.92|
000032  e00e              B        |L52.82|
                  |L52.52|
000034  4631              MOV      r1,r6                 ;4052
000036  6820              LDR      r0,[r4,#0]            ;4052
000038  f7fffffe          BL       TIM_OC1_SetConfig
00003c  e010              B        |L52.96|
                  |L52.62|
00003e  4631              MOV      r1,r6                 ;4062
000040  6820              LDR      r0,[r4,#0]            ;4062
000042  f7fffffe          BL       TIM_OC2_SetConfig
000046  e00b              B        |L52.96|
                  |L52.72|
000048  4631              MOV      r1,r6                 ;4072
00004a  6820              LDR      r0,[r4,#0]            ;4072
00004c  f7fffffe          BL       TIM_OC3_SetConfig
000050  e006              B        |L52.96|
                  |L52.82|
000052  4631              MOV      r1,r6                 ;4082
000054  6820              LDR      r0,[r4,#0]            ;4082
000056  f7fffffe          BL       TIM_OC4_SetConfig
00005a  e001              B        |L52.96|
                  |L52.92|
00005c  2701              MOVS     r7,#1                 ;4087
00005e  bf00              NOP                            ;4088
                  |L52.96|
000060  bf00              NOP                            ;4053
000062  bf00              NOP                            ;4091
000064  2000              MOVS     r0,#0                 ;4091
000066  f884003c          STRB     r0,[r4,#0x3c]         ;4091
00006a  bf00              NOP                            ;4091
00006c  4638              MOV      r0,r7                 ;4093
00006e  e7d3              B        |L52.24|
;;;4095   
                          ENDP


                          AREA ||i.HAL_TIM_OC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_DeInit PROC
;;;707      */
;;;708    HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;709    {
000002  4604              MOV      r4,r0
;;;710      /* Check the parameters */
;;;711      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;712    
;;;713      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  f884003d          STRB     r0,[r4,#0x3d]
;;;714    
;;;715      /* Disable the TIM Peripheral Clock */
;;;716      __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f2411111          MOV      r1,#0x1111
000014  4008              ANDS     r0,r0,r1
000016  b950              CBNZ     r0,|L53.46|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  b928              CBNZ     r0,|L53.46|
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
                  |L53.46|
00002e  bf00              NOP      
;;;717    
;;;718    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;719      if (htim->OC_MspDeInitCallback == NULL)
;;;720      {
;;;721        htim->OC_MspDeInitCallback = HAL_TIM_OC_MspDeInit;
;;;722      }
;;;723      /* DeInit the low level hardware */
;;;724      htim->OC_MspDeInitCallback(htim);
;;;725    #else
;;;726      /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;727      HAL_TIM_OC_MspDeInit(htim);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_TIM_OC_MspDeInit
;;;728    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;729    
;;;730      /* Change the DMA burst operation state */
;;;731      htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
000036  2000              MOVS     r0,#0
000038  f8840046          STRB     r0,[r4,#0x46]
;;;732    
;;;733      /* Change the TIM channels state */
;;;734      TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
00003c  bf00              NOP      
00003e  f884003e          STRB     r0,[r4,#0x3e]
000042  2100              MOVS     r1,#0
000044  203f              MOVS     r0,#0x3f
000046  5501              STRB     r1,[r0,r4]
000048  2040              MOVS     r0,#0x40
00004a  5501              STRB     r1,[r0,r4]
00004c  2041              MOVS     r0,#0x41
00004e  5501              STRB     r1,[r0,r4]
000050  bf00              NOP      
;;;735      TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
000052  bf00              NOP      
000054  2000              MOVS     r0,#0
000056  f8840042          STRB     r0,[r4,#0x42]
00005a  2043              MOVS     r0,#0x43
00005c  5501              STRB     r1,[r0,r4]
00005e  2044              MOVS     r0,#0x44
000060  5501              STRB     r1,[r0,r4]
000062  2045              MOVS     r0,#0x45
000064  5501              STRB     r1,[r0,r4]
000066  bf00              NOP      
;;;736    
;;;737      /* Change TIM state */
;;;738      htim->State = HAL_TIM_STATE_RESET;
000068  2000              MOVS     r0,#0
00006a  f884003d          STRB     r0,[r4,#0x3d]
;;;739    
;;;740      /* Release Lock */
;;;741      __HAL_UNLOCK(htim);
00006e  bf00              NOP      
000070  f884003c          STRB     r0,[r4,#0x3c]
000074  bf00              NOP      
;;;742    
;;;743      return HAL_OK;
;;;744    }
000076  bd10              POP      {r4,pc}
;;;745    
                          ENDP


                          AREA ||i.HAL_TIM_OC_DelayElapsedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_DelayElapsedCallback PROC
;;;5674     */
;;;5675   __weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5676   {
;;;5677     /* Prevent unused argument(s) compilation warning */
;;;5678     UNUSED(htim);
;;;5679   
;;;5680     /* NOTE : This function should not be modified, when the callback is needed,
;;;5681               the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
;;;5682      */
;;;5683   }
;;;5684   
                          ENDP


                          AREA ||i.HAL_TIM_OC_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_GetState PROC
;;;6347     */
;;;6348   HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;6349   {
;;;6350     return htim->State;
000002  f891003d          LDRB     r0,[r1,#0x3d]
;;;6351   }
000006  4770              BX       lr
;;;6352   
                          ENDP


                          AREA ||i.HAL_TIM_OC_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_Init PROC
;;;648      */
;;;649    HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;650    {
000002  4604              MOV      r4,r0
;;;651      /* Check the TIM handle allocation */
;;;652      if (htim == NULL)
000004  b90c              CBNZ     r4,|L56.10|
;;;653      {
;;;654        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L56.8|
;;;655      }
;;;656    
;;;657      /* Check the parameters */
;;;658      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;659      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;660      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;661      assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;662    
;;;663      if (htim->State == HAL_TIM_STATE_RESET)
;;;664      {
;;;665        /* Allocate lock resource and initialize it */
;;;666        htim->Lock = HAL_UNLOCKED;
;;;667    
;;;668    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;669        /* Reset interrupt callbacks to legacy weak callbacks */
;;;670        TIM_ResetCallback(htim);
;;;671    
;;;672        if (htim->OC_MspInitCallback == NULL)
;;;673        {
;;;674          htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
;;;675        }
;;;676        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;677        htim->OC_MspInitCallback(htim);
;;;678    #else
;;;679        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;680        HAL_TIM_OC_MspInit(htim);
;;;681    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;682      }
;;;683    
;;;684      /* Set the TIM state */
;;;685      htim->State = HAL_TIM_STATE_BUSY;
;;;686    
;;;687      /* Init the base time for the Output Compare */
;;;688      TIM_Base_SetConfig(htim->Instance,  &htim->Init);
;;;689    
;;;690      /* Initialize the DMA burst operation state */
;;;691      htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
;;;692    
;;;693      /* Initialize the TIM channels state */
;;;694      TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
;;;695      TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
;;;696    
;;;697      /* Initialize the TIM state*/
;;;698      htim->State = HAL_TIM_STATE_READY;
;;;699    
;;;700      return HAL_OK;
;;;701    }
000008  bd10              POP      {r4,pc}
                  |L56.10|
00000a  f894003d          LDRB     r0,[r4,#0x3d]         ;663
00000e  b928              CBNZ     r0,|L56.28|
000010  2000              MOVS     r0,#0                 ;666
000012  f884003c          STRB     r0,[r4,#0x3c]         ;666
000016  4620              MOV      r0,r4                 ;680
000018  f7fffffe          BL       HAL_TIM_OC_MspInit
                  |L56.28|
00001c  2002              MOVS     r0,#2                 ;685
00001e  f884003d          STRB     r0,[r4,#0x3d]         ;685
000022  1d21              ADDS     r1,r4,#4              ;688
000024  6820              LDR      r0,[r4,#0]            ;688
000026  f7fffffe          BL       TIM_Base_SetConfig
00002a  2001              MOVS     r0,#1                 ;691
00002c  f8840046          STRB     r0,[r4,#0x46]         ;691
000030  bf00              NOP                            ;694
000032  f884003e          STRB     r0,[r4,#0x3e]         ;694
000036  2101              MOVS     r1,#1                 ;694
000038  203f              MOVS     r0,#0x3f              ;694
00003a  5501              STRB     r1,[r0,r4]            ;694
00003c  2040              MOVS     r0,#0x40              ;694
00003e  5501              STRB     r1,[r0,r4]            ;694
000040  2041              MOVS     r0,#0x41              ;694
000042  5501              STRB     r1,[r0,r4]            ;694
000044  bf00              NOP                            ;694
000046  bf00              NOP                            ;695
000048  2001              MOVS     r0,#1                 ;695
00004a  f8840042          STRB     r0,[r4,#0x42]         ;695
00004e  2043              MOVS     r0,#0x43              ;695
000050  5501              STRB     r1,[r0,r4]            ;695
000052  2044              MOVS     r0,#0x44              ;695
000054  5501              STRB     r1,[r0,r4]            ;695
000056  2045              MOVS     r0,#0x45              ;695
000058  5501              STRB     r1,[r0,r4]            ;695
00005a  bf00              NOP                            ;695
00005c  2001              MOVS     r0,#1                 ;698
00005e  f884003d          STRB     r0,[r4,#0x3d]         ;698
000062  2000              MOVS     r0,#0                 ;700
000064  e7d0              B        |L56.8|
;;;702    
                          ENDP


                          AREA ||i.HAL_TIM_OC_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_MspDeInit PROC
;;;765      */
;;;766    __weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;767    {
;;;768      /* Prevent unused argument(s) compilation warning */
;;;769      UNUSED(htim);
;;;770    
;;;771      /* NOTE : This function should not be modified, when the callback is needed,
;;;772                the HAL_TIM_OC_MspDeInit could be implemented in the user file
;;;773       */
;;;774    }
;;;775    
                          ENDP


                          AREA ||i.HAL_TIM_OC_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OC_MspInit PROC
;;;750      */
;;;751    __weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;752    {
;;;753      /* Prevent unused argument(s) compilation warning */
;;;754      UNUSED(htim);
;;;755    
;;;756      /* NOTE : This function should not be modified, when the callback is needed,
;;;757                the HAL_TIM_OC_MspInit could be implemented in the user file
;;;758       */
;;;759    }
;;;760    
                          ENDP


                          AREA ||i.HAL_TIM_OC_Start||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Start PROC
;;;786      */
;;;787    HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;788    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;789      uint32_t tmpsmcr;
;;;790    
;;;791      /* Check the parameters */
;;;792      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;793    
;;;794      /* Check the TIM channel state */
;;;795      if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
000006  b915              CBNZ     r5,|L59.14|
000008  f894003e          LDRB     r0,[r4,#0x3e]
00000c  e00b              B        |L59.38|
                  |L59.14|
00000e  2d04              CMP      r5,#4
000010  d102              BNE      |L59.24|
000012  203f              MOVS     r0,#0x3f
000014  5d00              LDRB     r0,[r0,r4]
000016  e006              B        |L59.38|
                  |L59.24|
000018  2d08              CMP      r5,#8
00001a  d102              BNE      |L59.34|
00001c  2040              MOVS     r0,#0x40
00001e  5d00              LDRB     r0,[r0,r4]
000020  e001              B        |L59.38|
                  |L59.34|
000022  2041              MOVS     r0,#0x41
000024  5d00              LDRB     r0,[r0,r4]
                  |L59.38|
000026  2801              CMP      r0,#1
000028  d001              BEQ      |L59.46|
;;;796      {
;;;797        return HAL_ERROR;
00002a  2001              MOVS     r0,#1
                  |L59.44|
;;;798      }
;;;799    
;;;800      /* Set the TIM channel state */
;;;801      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;802    
;;;803      /* Enable the Output compare channel */
;;;804      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;805    
;;;806      if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
;;;807      {
;;;808        /* Enable the main output */
;;;809        __HAL_TIM_MOE_ENABLE(htim);
;;;810      }
;;;811    
;;;812      /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;813      if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;814      {
;;;815        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;816        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;817        {
;;;818          __HAL_TIM_ENABLE(htim);
;;;819        }
;;;820      }
;;;821      else
;;;822      {
;;;823        __HAL_TIM_ENABLE(htim);
;;;824      }
;;;825    
;;;826      /* Return function status */
;;;827      return HAL_OK;
;;;828    }
00002c  bd70              POP      {r4-r6,pc}
                  |L59.46|
00002e  b91d              CBNZ     r5,|L59.56|
000030  2002              MOVS     r0,#2                 ;801
000032  f884003e          STRB     r0,[r4,#0x3e]         ;801
000036  e00e              B        |L59.86|
                  |L59.56|
000038  2d04              CMP      r5,#4                 ;801
00003a  d103              BNE      |L59.68|
00003c  2102              MOVS     r1,#2                 ;801
00003e  203f              MOVS     r0,#0x3f              ;801
000040  5501              STRB     r1,[r0,r4]            ;801
000042  e008              B        |L59.86|
                  |L59.68|
000044  2d08              CMP      r5,#8                 ;801
000046  d103              BNE      |L59.80|
000048  2102              MOVS     r1,#2                 ;801
00004a  2040              MOVS     r0,#0x40              ;801
00004c  5501              STRB     r1,[r0,r4]            ;801
00004e  e002              B        |L59.86|
                  |L59.80|
000050  2102              MOVS     r1,#2                 ;801
000052  2041              MOVS     r0,#0x41              ;801
000054  5501              STRB     r1,[r0,r4]            ;801
                  |L59.86|
000056  2201              MOVS     r2,#1                 ;804
000058  4629              MOV      r1,r5                 ;804
00005a  6820              LDR      r0,[r4,#0]            ;804
00005c  f7fffffe          BL       TIM_CCxChannelCmd
000060  4923              LDR      r1,|L59.240|
000062  6820              LDR      r0,[r4,#0]            ;806
000064  4288              CMP      r0,r1                 ;806
000066  d003              BEQ      |L59.112|
000068  4922              LDR      r1,|L59.244|
00006a  6820              LDR      r0,[r4,#0]            ;806
00006c  4288              CMP      r0,r1                 ;806
00006e  d101              BNE      |L59.116|
                  |L59.112|
000070  2001              MOVS     r0,#1                 ;806
000072  e000              B        |L59.118|
                  |L59.116|
000074  2000              MOVS     r0,#0                 ;806
                  |L59.118|
000076  b128              CBZ      r0,|L59.132|
000078  6820              LDR      r0,[r4,#0]            ;809
00007a  6c40              LDR      r0,[r0,#0x44]         ;809
00007c  f4404000          ORR      r0,r0,#0x8000         ;809
000080  6821              LDR      r1,[r4,#0]            ;809
000082  6448              STR      r0,[r1,#0x44]         ;809
                  |L59.132|
000084  491a              LDR      r1,|L59.240|
000086  6820              LDR      r0,[r4,#0]            ;813
000088  4288              CMP      r0,r1                 ;813
00008a  d01b              BEQ      |L59.196|
00008c  6820              LDR      r0,[r4,#0]            ;813
00008e  f1b04f80          CMP      r0,#0x40000000        ;813
000092  d017              BEQ      |L59.196|
000094  4918              LDR      r1,|L59.248|
000096  6820              LDR      r0,[r4,#0]            ;813
000098  4288              CMP      r0,r1                 ;813
00009a  d013              BEQ      |L59.196|
00009c  4917              LDR      r1,|L59.252|
00009e  6820              LDR      r0,[r4,#0]            ;813
0000a0  4288              CMP      r0,r1                 ;813
0000a2  d00f              BEQ      |L59.196|
0000a4  4916              LDR      r1,|L59.256|
0000a6  6820              LDR      r0,[r4,#0]            ;813
0000a8  4288              CMP      r0,r1                 ;813
0000aa  d00b              BEQ      |L59.196|
0000ac  4911              LDR      r1,|L59.244|
0000ae  6820              LDR      r0,[r4,#0]            ;813
0000b0  4288              CMP      r0,r1                 ;813
0000b2  d007              BEQ      |L59.196|
0000b4  4913              LDR      r1,|L59.260|
0000b6  6820              LDR      r0,[r4,#0]            ;813
0000b8  4288              CMP      r0,r1                 ;813
0000ba  d003              BEQ      |L59.196|
0000bc  4912              LDR      r1,|L59.264|
0000be  6820              LDR      r0,[r4,#0]            ;813
0000c0  4288              CMP      r0,r1                 ;813
0000c2  d10c              BNE      |L59.222|
                  |L59.196|
0000c4  6820              LDR      r0,[r4,#0]            ;815
0000c6  6880              LDR      r0,[r0,#8]            ;815
0000c8  f0000607          AND      r6,r0,#7              ;815
0000cc  2e06              CMP      r6,#6                 ;816
0000ce  d00c              BEQ      |L59.234|
0000d0  6820              LDR      r0,[r4,#0]            ;818
0000d2  6800              LDR      r0,[r0,#0]            ;818
0000d4  f0400001          ORR      r0,r0,#1              ;818
0000d8  6821              LDR      r1,[r4,#0]            ;818
0000da  6008              STR      r0,[r1,#0]            ;818
0000dc  e005              B        |L59.234|
                  |L59.222|
0000de  6820              LDR      r0,[r4,#0]            ;823
0000e0  6800              LDR      r0,[r0,#0]            ;823
0000e2  f0400001          ORR      r0,r0,#1              ;823
0000e6  6821              LDR      r1,[r4,#0]            ;823
0000e8  6008              STR      r0,[r1,#0]            ;823
                  |L59.234|
0000ea  2000              MOVS     r0,#0                 ;827
0000ec  e79e              B        |L59.44|
;;;829    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L59.240|
                          DCD      0x40010000
                  |L59.244|
                          DCD      0x40010400
                  |L59.248|
                          DCD      0x40000400
                  |L59.252|
                          DCD      0x40000800
                  |L59.256|
                          DCD      0x40000c00
                  |L59.260|
                          DCD      0x40014000
                  |L59.264|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_OC_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Start_DMA PROC
;;;1045     */
;;;1046   HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1047   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1048     HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;1049     uint32_t tmpsmcr;
;;;1050   
;;;1051     /* Check the parameters */
;;;1052     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1053   
;;;1054     /* Set the TIM channel state */
;;;1055     if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
000010  b915              CBNZ     r5,|L60.24|
000012  f894003e          LDRB     r0,[r4,#0x3e]
000016  e00b              B        |L60.48|
                  |L60.24|
000018  2d04              CMP      r5,#4
00001a  d102              BNE      |L60.34|
00001c  203f              MOVS     r0,#0x3f
00001e  5d00              LDRB     r0,[r0,r4]
000020  e006              B        |L60.48|
                  |L60.34|
000022  2d08              CMP      r5,#8
000024  d102              BNE      |L60.44|
000026  2040              MOVS     r0,#0x40
000028  5d00              LDRB     r0,[r0,r4]
00002a  e001              B        |L60.48|
                  |L60.44|
00002c  2041              MOVS     r0,#0x41
00002e  5d00              LDRB     r0,[r0,r4]
                  |L60.48|
000030  2802              CMP      r0,#2
000032  d101              BNE      |L60.56|
                  |L60.52|
;;;1056     {
;;;1057       return HAL_BUSY;
;;;1058     }
;;;1059     else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
;;;1060     {
;;;1061       if ((pData == NULL) && (Length > 0U))
;;;1062       {
;;;1063         return HAL_ERROR;
;;;1064       }
;;;1065       else
;;;1066       {
;;;1067         TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1068       }
;;;1069     }
;;;1070     else
;;;1071     {
;;;1072       return HAL_ERROR;
;;;1073     }
;;;1074   
;;;1075     switch (Channel)
;;;1076     {
;;;1077       case TIM_CHANNEL_1:
;;;1078       {
;;;1079         /* Set the DMA compare callbacks */
;;;1080         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1081         htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1082   
;;;1083         /* Set the DMA error callback */
;;;1084         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1085   
;;;1086         /* Enable the DMA stream */
;;;1087         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
;;;1088                              Length) != HAL_OK)
;;;1089         {
;;;1090           /* Return error status */
;;;1091           return HAL_ERROR;
;;;1092         }
;;;1093   
;;;1094         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1095         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1096         break;
;;;1097       }
;;;1098   
;;;1099       case TIM_CHANNEL_2:
;;;1100       {
;;;1101         /* Set the DMA compare callbacks */
;;;1102         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1103         htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1104   
;;;1105         /* Set the DMA error callback */
;;;1106         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1107   
;;;1108         /* Enable the DMA stream */
;;;1109         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
;;;1110                              Length) != HAL_OK)
;;;1111         {
;;;1112           /* Return error status */
;;;1113           return HAL_ERROR;
;;;1114         }
;;;1115   
;;;1116         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1117         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1118         break;
;;;1119       }
;;;1120   
;;;1121       case TIM_CHANNEL_3:
;;;1122       {
;;;1123         /* Set the DMA compare callbacks */
;;;1124         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1125         htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1126   
;;;1127         /* Set the DMA error callback */
;;;1128         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1129   
;;;1130         /* Enable the DMA stream */
;;;1131         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
;;;1132                              Length) != HAL_OK)
;;;1133         {
;;;1134           /* Return error status */
;;;1135           return HAL_ERROR;
;;;1136         }
;;;1137         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1138         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1139         break;
;;;1140       }
;;;1141   
;;;1142       case TIM_CHANNEL_4:
;;;1143       {
;;;1144         /* Set the DMA compare callbacks */
;;;1145         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1146         htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1147   
;;;1148         /* Set the DMA error callback */
;;;1149         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1150   
;;;1151         /* Enable the DMA stream */
;;;1152         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
;;;1153                              Length) != HAL_OK)
;;;1154         {
;;;1155           /* Return error status */
;;;1156           return HAL_ERROR;
;;;1157         }
;;;1158         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1159         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1160         break;
;;;1161       }
;;;1162   
;;;1163       default:
;;;1164         status = HAL_ERROR;
;;;1165         break;
;;;1166     }
;;;1167   
;;;1168     if (status == HAL_OK)
;;;1169     {
;;;1170       /* Enable the Output compare channel */
;;;1171       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1172   
;;;1173       if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
;;;1174       {
;;;1175         /* Enable the main output */
;;;1176         __HAL_TIM_MOE_ENABLE(htim);
;;;1177       }
;;;1178   
;;;1179       /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;1180       if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;1181       {
;;;1182         tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;1183         if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;1184         {
;;;1185           __HAL_TIM_ENABLE(htim);
;;;1186         }
;;;1187       }
;;;1188       else
;;;1189       {
;;;1190         __HAL_TIM_ENABLE(htim);
;;;1191       }
;;;1192     }
;;;1193   
;;;1194     /* Return function status */
;;;1195     return status;
;;;1196   }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L60.56|
000038  b915              CBNZ     r5,|L60.64|
00003a  f894003e          LDRB     r0,[r4,#0x3e]         ;1059
00003e  e00b              B        |L60.88|
                  |L60.64|
000040  2d04              CMP      r5,#4                 ;1059
000042  d102              BNE      |L60.74|
000044  203f              MOVS     r0,#0x3f              ;1059
000046  5d00              LDRB     r0,[r0,r4]            ;1059
000048  e006              B        |L60.88|
                  |L60.74|
00004a  2d08              CMP      r5,#8                 ;1059
00004c  d102              BNE      |L60.84|
00004e  2040              MOVS     r0,#0x40              ;1059
000050  5d00              LDRB     r0,[r0,r4]            ;1059
000052  e001              B        |L60.88|
                  |L60.84|
000054  2041              MOVS     r0,#0x41              ;1059
000056  5d00              LDRB     r0,[r0,r4]            ;1059
                  |L60.88|
000058  2801              CMP      r0,#1                 ;1059
00005a  d117              BNE      |L60.140|
00005c  b90e              CBNZ     r6,|L60.98|
00005e  b107              CBZ      r7,|L60.98|
000060  e7e8              B        |L60.52|
                  |L60.98|
000062  b91d              CBNZ     r5,|L60.108|
000064  2002              MOVS     r0,#2                 ;1067
000066  f884003e          STRB     r0,[r4,#0x3e]         ;1067
00006a  e011              B        |L60.144|
                  |L60.108|
00006c  2d04              CMP      r5,#4                 ;1067
00006e  d103              BNE      |L60.120|
000070  2102              MOVS     r1,#2                 ;1067
000072  203f              MOVS     r0,#0x3f              ;1067
000074  5501              STRB     r1,[r0,r4]            ;1067
000076  e00b              B        |L60.144|
                  |L60.120|
000078  2d08              CMP      r5,#8                 ;1067
00007a  d103              BNE      |L60.132|
00007c  2102              MOVS     r1,#2                 ;1067
00007e  2040              MOVS     r0,#0x40              ;1067
000080  5501              STRB     r1,[r0,r4]            ;1067
000082  e005              B        |L60.144|
                  |L60.132|
000084  2102              MOVS     r1,#2                 ;1067
000086  2041              MOVS     r0,#0x41              ;1067
000088  5501              STRB     r1,[r0,r4]            ;1067
00008a  e001              B        |L60.144|
                  |L60.140|
00008c  2001              MOVS     r0,#1                 ;1072
00008e  e7d1              B        |L60.52|
                  |L60.144|
000090  b135              CBZ      r5,|L60.160|
000092  2d04              CMP      r5,#4                 ;1075
000094  d01f              BEQ      |L60.214|
000096  2d08              CMP      r5,#8                 ;1075
000098  d038              BEQ      |L60.268|
00009a  2d0c              CMP      r5,#0xc               ;1075
00009c  d16c              BNE      |L60.376|
00009e  e050              B        |L60.322|
                  |L60.160|
0000a0  495f              LDR      r1,|L60.544|
0000a2  6a60              LDR      r0,[r4,#0x24]         ;1080
0000a4  63c1              STR      r1,[r0,#0x3c]         ;1080
0000a6  495f              LDR      r1,|L60.548|
0000a8  6a60              LDR      r0,[r4,#0x24]         ;1081
0000aa  6401              STR      r1,[r0,#0x40]         ;1081
0000ac  495e              LDR      r1,|L60.552|
0000ae  6a60              LDR      r0,[r4,#0x24]         ;1084
0000b0  64c1              STR      r1,[r0,#0x4c]         ;1084
0000b2  6821              LDR      r1,[r4,#0]            ;1087
0000b4  f1010234          ADD      r2,r1,#0x34           ;1087
0000b8  463b              MOV      r3,r7                 ;1087
0000ba  4631              MOV      r1,r6                 ;1087
0000bc  6a60              LDR      r0,[r4,#0x24]         ;1087
0000be  f7fffffe          BL       HAL_DMA_Start_IT
0000c2  b108              CBZ      r0,|L60.200|
0000c4  2001              MOVS     r0,#1                 ;1091
0000c6  e7b5              B        |L60.52|
                  |L60.200|
0000c8  6820              LDR      r0,[r4,#0]            ;1095
0000ca  68c0              LDR      r0,[r0,#0xc]          ;1095
0000cc  f4407000          ORR      r0,r0,#0x200          ;1095
0000d0  6821              LDR      r1,[r4,#0]            ;1095
0000d2  60c8              STR      r0,[r1,#0xc]          ;1095
0000d4  e053              B        |L60.382|
                  |L60.214|
0000d6  4952              LDR      r1,|L60.544|
0000d8  6aa0              LDR      r0,[r4,#0x28]         ;1102
0000da  63c1              STR      r1,[r0,#0x3c]         ;1102
0000dc  4951              LDR      r1,|L60.548|
0000de  6aa0              LDR      r0,[r4,#0x28]         ;1103
0000e0  6401              STR      r1,[r0,#0x40]         ;1103
0000e2  4951              LDR      r1,|L60.552|
0000e4  6aa0              LDR      r0,[r4,#0x28]         ;1106
0000e6  64c1              STR      r1,[r0,#0x4c]         ;1106
0000e8  6821              LDR      r1,[r4,#0]            ;1109
0000ea  f1010238          ADD      r2,r1,#0x38           ;1109
0000ee  463b              MOV      r3,r7                 ;1109
0000f0  4631              MOV      r1,r6                 ;1109
0000f2  6aa0              LDR      r0,[r4,#0x28]         ;1109
0000f4  f7fffffe          BL       HAL_DMA_Start_IT
0000f8  b108              CBZ      r0,|L60.254|
0000fa  2001              MOVS     r0,#1                 ;1113
0000fc  e79a              B        |L60.52|
                  |L60.254|
0000fe  6820              LDR      r0,[r4,#0]            ;1117
000100  68c0              LDR      r0,[r0,#0xc]          ;1117
000102  f4406080          ORR      r0,r0,#0x400          ;1117
000106  6821              LDR      r1,[r4,#0]            ;1117
000108  60c8              STR      r0,[r1,#0xc]          ;1117
00010a  e038              B        |L60.382|
                  |L60.268|
00010c  4944              LDR      r1,|L60.544|
00010e  6ae0              LDR      r0,[r4,#0x2c]         ;1124
000110  63c1              STR      r1,[r0,#0x3c]         ;1124
000112  4944              LDR      r1,|L60.548|
000114  6ae0              LDR      r0,[r4,#0x2c]         ;1125
000116  6401              STR      r1,[r0,#0x40]         ;1125
000118  4943              LDR      r1,|L60.552|
00011a  6ae0              LDR      r0,[r4,#0x2c]         ;1128
00011c  64c1              STR      r1,[r0,#0x4c]         ;1128
00011e  6821              LDR      r1,[r4,#0]            ;1131
000120  f101023c          ADD      r2,r1,#0x3c           ;1131
000124  463b              MOV      r3,r7                 ;1131
000126  4631              MOV      r1,r6                 ;1131
000128  6ae0              LDR      r0,[r4,#0x2c]         ;1131
00012a  f7fffffe          BL       HAL_DMA_Start_IT
00012e  b108              CBZ      r0,|L60.308|
000130  2001              MOVS     r0,#1                 ;1135
000132  e77f              B        |L60.52|
                  |L60.308|
000134  6820              LDR      r0,[r4,#0]            ;1138
000136  68c0              LDR      r0,[r0,#0xc]          ;1138
000138  f4406000          ORR      r0,r0,#0x800          ;1138
00013c  6821              LDR      r1,[r4,#0]            ;1138
00013e  60c8              STR      r0,[r1,#0xc]          ;1138
000140  e01d              B        |L60.382|
                  |L60.322|
000142  4937              LDR      r1,|L60.544|
000144  6b20              LDR      r0,[r4,#0x30]         ;1145
000146  63c1              STR      r1,[r0,#0x3c]         ;1145
000148  4936              LDR      r1,|L60.548|
00014a  6b20              LDR      r0,[r4,#0x30]         ;1146
00014c  6401              STR      r1,[r0,#0x40]         ;1146
00014e  4936              LDR      r1,|L60.552|
000150  6b20              LDR      r0,[r4,#0x30]         ;1149
000152  64c1              STR      r1,[r0,#0x4c]         ;1149
000154  6821              LDR      r1,[r4,#0]            ;1152
000156  f1010240          ADD      r2,r1,#0x40           ;1152
00015a  463b              MOV      r3,r7                 ;1152
00015c  4631              MOV      r1,r6                 ;1152
00015e  6b20              LDR      r0,[r4,#0x30]         ;1152
000160  f7fffffe          BL       HAL_DMA_Start_IT
000164  b108              CBZ      r0,|L60.362|
000166  2001              MOVS     r0,#1                 ;1156
000168  e764              B        |L60.52|
                  |L60.362|
00016a  6820              LDR      r0,[r4,#0]            ;1159
00016c  68c0              LDR      r0,[r0,#0xc]          ;1159
00016e  f4405080          ORR      r0,r0,#0x1000         ;1159
000172  6821              LDR      r1,[r4,#0]            ;1159
000174  60c8              STR      r0,[r1,#0xc]          ;1159
000176  e002              B        |L60.382|
                  |L60.376|
000178  f04f0801          MOV      r8,#1                 ;1164
00017c  bf00              NOP                            ;1165
                  |L60.382|
00017e  bf00              NOP                            ;1096
000180  f1b80f00          CMP      r8,#0                 ;1168
000184  d14a              BNE      |L60.540|
000186  2201              MOVS     r2,#1                 ;1171
000188  4629              MOV      r1,r5                 ;1171
00018a  6820              LDR      r0,[r4,#0]            ;1171
00018c  f7fffffe          BL       TIM_CCxChannelCmd
000190  4926              LDR      r1,|L60.556|
000192  6820              LDR      r0,[r4,#0]            ;1173
000194  4288              CMP      r0,r1                 ;1173
000196  d003              BEQ      |L60.416|
000198  4925              LDR      r1,|L60.560|
00019a  6820              LDR      r0,[r4,#0]            ;1173
00019c  4288              CMP      r0,r1                 ;1173
00019e  d101              BNE      |L60.420|
                  |L60.416|
0001a0  2001              MOVS     r0,#1                 ;1173
0001a2  e000              B        |L60.422|
                  |L60.420|
0001a4  2000              MOVS     r0,#0                 ;1173
                  |L60.422|
0001a6  b128              CBZ      r0,|L60.436|
0001a8  6820              LDR      r0,[r4,#0]            ;1176
0001aa  6c40              LDR      r0,[r0,#0x44]         ;1176
0001ac  f4404000          ORR      r0,r0,#0x8000         ;1176
0001b0  6821              LDR      r1,[r4,#0]            ;1176
0001b2  6448              STR      r0,[r1,#0x44]         ;1176
                  |L60.436|
0001b4  491d              LDR      r1,|L60.556|
0001b6  6820              LDR      r0,[r4,#0]            ;1180
0001b8  4288              CMP      r0,r1                 ;1180
0001ba  d01b              BEQ      |L60.500|
0001bc  6820              LDR      r0,[r4,#0]            ;1180
0001be  f1b04f80          CMP      r0,#0x40000000        ;1180
0001c2  d017              BEQ      |L60.500|
0001c4  491b              LDR      r1,|L60.564|
0001c6  6820              LDR      r0,[r4,#0]            ;1180
0001c8  4288              CMP      r0,r1                 ;1180
0001ca  d013              BEQ      |L60.500|
0001cc  491a              LDR      r1,|L60.568|
0001ce  6820              LDR      r0,[r4,#0]            ;1180
0001d0  4288              CMP      r0,r1                 ;1180
0001d2  d00f              BEQ      |L60.500|
0001d4  4919              LDR      r1,|L60.572|
0001d6  6820              LDR      r0,[r4,#0]            ;1180
0001d8  4288              CMP      r0,r1                 ;1180
0001da  d00b              BEQ      |L60.500|
0001dc  4914              LDR      r1,|L60.560|
0001de  6820              LDR      r0,[r4,#0]            ;1180
0001e0  4288              CMP      r0,r1                 ;1180
0001e2  d007              BEQ      |L60.500|
0001e4  4916              LDR      r1,|L60.576|
0001e6  6820              LDR      r0,[r4,#0]            ;1180
0001e8  4288              CMP      r0,r1                 ;1180
0001ea  d003              BEQ      |L60.500|
0001ec  4915              LDR      r1,|L60.580|
0001ee  6820              LDR      r0,[r4,#0]            ;1180
0001f0  4288              CMP      r0,r1                 ;1180
0001f2  d10d              BNE      |L60.528|
                  |L60.500|
0001f4  6820              LDR      r0,[r4,#0]            ;1182
0001f6  6880              LDR      r0,[r0,#8]            ;1182
0001f8  f0000907          AND      r9,r0,#7              ;1182
0001fc  f1b90f06          CMP      r9,#6                 ;1183
000200  d00c              BEQ      |L60.540|
000202  6820              LDR      r0,[r4,#0]            ;1185
000204  6800              LDR      r0,[r0,#0]            ;1185
000206  f0400001          ORR      r0,r0,#1              ;1185
00020a  6821              LDR      r1,[r4,#0]            ;1185
00020c  6008              STR      r0,[r1,#0]            ;1185
00020e  e005              B        |L60.540|
                  |L60.528|
000210  6820              LDR      r0,[r4,#0]            ;1190
000212  6800              LDR      r0,[r0,#0]            ;1190
000214  f0400001          ORR      r0,r0,#1              ;1190
000218  6821              LDR      r1,[r4,#0]            ;1190
00021a  6008              STR      r0,[r1,#0]            ;1190
                  |L60.540|
00021c  4640              MOV      r0,r8                 ;1195
00021e  e709              B        |L60.52|
;;;1197   
                          ENDP

                  |L60.544|
                          DCD      TIM_DMADelayPulseCplt
                  |L60.548|
                          DCD      TIM_DMADelayPulseHalfCplt
                  |L60.552|
                          DCD      TIM_DMAError
                  |L60.556|
                          DCD      0x40010000
                  |L60.560|
                          DCD      0x40010400
                  |L60.564|
                          DCD      0x40000400
                  |L60.568|
                          DCD      0x40000800
                  |L60.572|
                          DCD      0x40000c00
                  |L60.576|
                          DCD      0x40014000
                  |L60.580|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_OC_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Start_IT PROC
;;;875      */
;;;876    HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b5f0              PUSH     {r4-r7,lr}
;;;877    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;878      HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;879      uint32_t tmpsmcr;
;;;880    
;;;881      /* Check the parameters */
;;;882      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;883    
;;;884      /* Check the TIM channel state */
;;;885      if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
000008  b915              CBNZ     r5,|L61.16|
00000a  f894003e          LDRB     r0,[r4,#0x3e]
00000e  e00b              B        |L61.40|
                  |L61.16|
000010  2d04              CMP      r5,#4
000012  d102              BNE      |L61.26|
000014  203f              MOVS     r0,#0x3f
000016  5d00              LDRB     r0,[r0,r4]
000018  e006              B        |L61.40|
                  |L61.26|
00001a  2d08              CMP      r5,#8
00001c  d102              BNE      |L61.36|
00001e  2040              MOVS     r0,#0x40
000020  5d00              LDRB     r0,[r0,r4]
000022  e001              B        |L61.40|
                  |L61.36|
000024  2041              MOVS     r0,#0x41
000026  5d00              LDRB     r0,[r0,r4]
                  |L61.40|
000028  2801              CMP      r0,#1
00002a  d001              BEQ      |L61.48|
;;;886      {
;;;887        return HAL_ERROR;
00002c  2001              MOVS     r0,#1
                  |L61.46|
;;;888      }
;;;889    
;;;890      /* Set the TIM channel state */
;;;891      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;892    
;;;893      switch (Channel)
;;;894      {
;;;895        case TIM_CHANNEL_1:
;;;896        {
;;;897          /* Enable the TIM Capture/Compare 1 interrupt */
;;;898          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;899          break;
;;;900        }
;;;901    
;;;902        case TIM_CHANNEL_2:
;;;903        {
;;;904          /* Enable the TIM Capture/Compare 2 interrupt */
;;;905          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;906          break;
;;;907        }
;;;908    
;;;909        case TIM_CHANNEL_3:
;;;910        {
;;;911          /* Enable the TIM Capture/Compare 3 interrupt */
;;;912          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
;;;913          break;
;;;914        }
;;;915    
;;;916        case TIM_CHANNEL_4:
;;;917        {
;;;918          /* Enable the TIM Capture/Compare 4 interrupt */
;;;919          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
;;;920          break;
;;;921        }
;;;922    
;;;923        default:
;;;924          status = HAL_ERROR;
;;;925          break;
;;;926      }
;;;927    
;;;928      if (status == HAL_OK)
;;;929      {
;;;930        /* Enable the Output compare channel */
;;;931        TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;932    
;;;933        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
;;;934        {
;;;935          /* Enable the main output */
;;;936          __HAL_TIM_MOE_ENABLE(htim);
;;;937        }
;;;938    
;;;939        /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;940        if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;941        {
;;;942          tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;943          if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;944          {
;;;945            __HAL_TIM_ENABLE(htim);
;;;946          }
;;;947        }
;;;948        else
;;;949        {
;;;950          __HAL_TIM_ENABLE(htim);
;;;951        }
;;;952      }
;;;953    
;;;954      /* Return function status */
;;;955      return status;
;;;956    }
00002e  bdf0              POP      {r4-r7,pc}
                  |L61.48|
000030  b91d              CBNZ     r5,|L61.58|
000032  2002              MOVS     r0,#2                 ;891
000034  f884003e          STRB     r0,[r4,#0x3e]         ;891
000038  e00e              B        |L61.88|
                  |L61.58|
00003a  2d04              CMP      r5,#4                 ;891
00003c  d103              BNE      |L61.70|
00003e  2102              MOVS     r1,#2                 ;891
000040  203f              MOVS     r0,#0x3f              ;891
000042  5501              STRB     r1,[r0,r4]            ;891
000044  e008              B        |L61.88|
                  |L61.70|
000046  2d08              CMP      r5,#8                 ;891
000048  d103              BNE      |L61.82|
00004a  2102              MOVS     r1,#2                 ;891
00004c  2040              MOVS     r0,#0x40              ;891
00004e  5501              STRB     r1,[r0,r4]            ;891
000050  e002              B        |L61.88|
                  |L61.82|
000052  2102              MOVS     r1,#2                 ;891
000054  2041              MOVS     r0,#0x41              ;891
000056  5501              STRB     r1,[r0,r4]            ;891
                  |L61.88|
000058  b135              CBZ      r5,|L61.104|
00005a  2d04              CMP      r5,#4                 ;893
00005c  d00b              BEQ      |L61.118|
00005e  2d08              CMP      r5,#8                 ;893
000060  d010              BEQ      |L61.132|
000062  2d0c              CMP      r5,#0xc               ;893
000064  d11c              BNE      |L61.160|
000066  e014              B        |L61.146|
                  |L61.104|
000068  6820              LDR      r0,[r4,#0]            ;898
00006a  68c0              LDR      r0,[r0,#0xc]          ;898
00006c  f0400002          ORR      r0,r0,#2              ;898
000070  6821              LDR      r1,[r4,#0]            ;898
000072  60c8              STR      r0,[r1,#0xc]          ;898
000074  e016              B        |L61.164|
                  |L61.118|
000076  6820              LDR      r0,[r4,#0]            ;905
000078  68c0              LDR      r0,[r0,#0xc]          ;905
00007a  f0400004          ORR      r0,r0,#4              ;905
00007e  6821              LDR      r1,[r4,#0]            ;905
000080  60c8              STR      r0,[r1,#0xc]          ;905
000082  e00f              B        |L61.164|
                  |L61.132|
000084  6820              LDR      r0,[r4,#0]            ;912
000086  68c0              LDR      r0,[r0,#0xc]          ;912
000088  f0400008          ORR      r0,r0,#8              ;912
00008c  6821              LDR      r1,[r4,#0]            ;912
00008e  60c8              STR      r0,[r1,#0xc]          ;912
000090  e008              B        |L61.164|
                  |L61.146|
000092  6820              LDR      r0,[r4,#0]            ;919
000094  68c0              LDR      r0,[r0,#0xc]          ;919
000096  f0400010          ORR      r0,r0,#0x10           ;919
00009a  6821              LDR      r1,[r4,#0]            ;919
00009c  60c8              STR      r0,[r1,#0xc]          ;919
00009e  e001              B        |L61.164|
                  |L61.160|
0000a0  2601              MOVS     r6,#1                 ;924
0000a2  bf00              NOP                            ;925
                  |L61.164|
0000a4  bf00              NOP                            ;899
0000a6  bbee              CBNZ     r6,|L61.292|
0000a8  2201              MOVS     r2,#1                 ;931
0000aa  4629              MOV      r1,r5                 ;931
0000ac  6820              LDR      r0,[r4,#0]            ;931
0000ae  f7fffffe          BL       TIM_CCxChannelCmd
0000b2  4924              LDR      r1,|L61.324|
0000b4  6820              LDR      r0,[r4,#0]            ;933
0000b6  4288              CMP      r0,r1                 ;933
0000b8  d003              BEQ      |L61.194|
0000ba  4923              LDR      r1,|L61.328|
0000bc  6820              LDR      r0,[r4,#0]            ;933
0000be  4288              CMP      r0,r1                 ;933
0000c0  d101              BNE      |L61.198|
                  |L61.194|
0000c2  2001              MOVS     r0,#1                 ;933
0000c4  e000              B        |L61.200|
                  |L61.198|
0000c6  2000              MOVS     r0,#0                 ;933
                  |L61.200|
0000c8  b128              CBZ      r0,|L61.214|
0000ca  6820              LDR      r0,[r4,#0]            ;936
0000cc  6c40              LDR      r0,[r0,#0x44]         ;936
0000ce  f4404000          ORR      r0,r0,#0x8000         ;936
0000d2  6821              LDR      r1,[r4,#0]            ;936
0000d4  6448              STR      r0,[r1,#0x44]         ;936
                  |L61.214|
0000d6  491b              LDR      r1,|L61.324|
0000d8  6820              LDR      r0,[r4,#0]            ;940
0000da  4288              CMP      r0,r1                 ;940
0000dc  d01b              BEQ      |L61.278|
0000de  6820              LDR      r0,[r4,#0]            ;940
0000e0  f1b04f80          CMP      r0,#0x40000000        ;940
0000e4  d017              BEQ      |L61.278|
0000e6  4919              LDR      r1,|L61.332|
0000e8  6820              LDR      r0,[r4,#0]            ;940
0000ea  4288              CMP      r0,r1                 ;940
0000ec  d013              BEQ      |L61.278|
0000ee  4918              LDR      r1,|L61.336|
0000f0  6820              LDR      r0,[r4,#0]            ;940
0000f2  4288              CMP      r0,r1                 ;940
0000f4  d00f              BEQ      |L61.278|
0000f6  4917              LDR      r1,|L61.340|
0000f8  6820              LDR      r0,[r4,#0]            ;940
0000fa  4288              CMP      r0,r1                 ;940
0000fc  d00b              BEQ      |L61.278|
0000fe  4912              LDR      r1,|L61.328|
000100  6820              LDR      r0,[r4,#0]            ;940
000102  4288              CMP      r0,r1                 ;940
000104  d007              BEQ      |L61.278|
000106  4914              LDR      r1,|L61.344|
000108  6820              LDR      r0,[r4,#0]            ;940
00010a  4288              CMP      r0,r1                 ;940
00010c  d003              BEQ      |L61.278|
00010e  4913              LDR      r1,|L61.348|
000110  6820              LDR      r0,[r4,#0]            ;940
000112  4288              CMP      r0,r1                 ;940
000114  d10e              BNE      |L61.308|
                  |L61.278|
000116  6820              LDR      r0,[r4,#0]            ;942
000118  6880              LDR      r0,[r0,#8]            ;942
00011a  f0000707          AND      r7,r0,#7              ;942
00011e  2f06              CMP      r7,#6                 ;943
000120  d00e              BEQ      |L61.320|
000122  e000              B        |L61.294|
                  |L61.292|
000124  e00c              B        |L61.320|
                  |L61.294|
000126  6820              LDR      r0,[r4,#0]            ;945
000128  6800              LDR      r0,[r0,#0]            ;945
00012a  f0400001          ORR      r0,r0,#1              ;945
00012e  6821              LDR      r1,[r4,#0]            ;945
000130  6008              STR      r0,[r1,#0]            ;945
000132  e005              B        |L61.320|
                  |L61.308|
000134  6820              LDR      r0,[r4,#0]            ;950
000136  6800              LDR      r0,[r0,#0]            ;950
000138  f0400001          ORR      r0,r0,#1              ;950
00013c  6821              LDR      r1,[r4,#0]            ;950
00013e  6008              STR      r0,[r1,#0]            ;950
                  |L61.320|
000140  4630              MOV      r0,r6                 ;955
000142  e774              B        |L61.46|
;;;957    
                          ENDP

                  |L61.324|
                          DCD      0x40010000
                  |L61.328|
                          DCD      0x40010400
                  |L61.332|
                          DCD      0x40000400
                  |L61.336|
                          DCD      0x40000800
                  |L61.340|
                          DCD      0x40000c00
                  |L61.344|
                          DCD      0x40014000
                  |L61.348|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_OC_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Stop PROC
;;;840      */
;;;841    HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;842    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;843      /* Check the parameters */
;;;844      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;845    
;;;846      /* Disable the Output compare channel */
;;;847      TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxChannelCmd
;;;848    
;;;849      if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
000010  4923              LDR      r1,|L62.160|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d003              BEQ      |L62.32|
000018  4922              LDR      r1,|L62.164|
00001a  6820              LDR      r0,[r4,#0]
00001c  4288              CMP      r0,r1
00001e  d101              BNE      |L62.36|
                  |L62.32|
000020  2001              MOVS     r0,#1
000022  e000              B        |L62.38|
                  |L62.36|
000024  2000              MOVS     r0,#0
                  |L62.38|
000026  b190              CBZ      r0,|L62.78|
;;;850      {
;;;851        /* Disable the Main Output */
;;;852        __HAL_TIM_MOE_DISABLE(htim);
000028  bf00              NOP      
00002a  6820              LDR      r0,[r4,#0]
00002c  6a00              LDR      r0,[r0,#0x20]
00002e  f2411111          MOV      r1,#0x1111
000032  4008              ANDS     r0,r0,r1
000034  b950              CBNZ     r0,|L62.76|
000036  6820              LDR      r0,[r4,#0]
000038  6a00              LDR      r0,[r0,#0x20]
00003a  1089              ASRS     r1,r1,#2
00003c  4008              ANDS     r0,r0,r1
00003e  b928              CBNZ     r0,|L62.76|
000040  6820              LDR      r0,[r4,#0]
000042  6c40              LDR      r0,[r0,#0x44]
000044  f4204000          BIC      r0,r0,#0x8000
000048  6821              LDR      r1,[r4,#0]
00004a  6448              STR      r0,[r1,#0x44]
                  |L62.76|
00004c  bf00              NOP      
                  |L62.78|
;;;853      }
;;;854    
;;;855      /* Disable the Peripheral */
;;;856      __HAL_TIM_DISABLE(htim);
00004e  bf00              NOP      
000050  6820              LDR      r0,[r4,#0]
000052  6a00              LDR      r0,[r0,#0x20]
000054  f2411111          MOV      r1,#0x1111
000058  4008              ANDS     r0,r0,r1
00005a  b950              CBNZ     r0,|L62.114|
00005c  6820              LDR      r0,[r4,#0]
00005e  6a00              LDR      r0,[r0,#0x20]
000060  1089              ASRS     r1,r1,#2
000062  4008              ANDS     r0,r0,r1
000064  b928              CBNZ     r0,|L62.114|
000066  6820              LDR      r0,[r4,#0]
000068  6800              LDR      r0,[r0,#0]
00006a  f0200001          BIC      r0,r0,#1
00006e  6821              LDR      r1,[r4,#0]
000070  6008              STR      r0,[r1,#0]
                  |L62.114|
000072  bf00              NOP      
;;;857    
;;;858      /* Set the TIM channel state */
;;;859      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
000074  b91d              CBNZ     r5,|L62.126|
000076  2001              MOVS     r0,#1
000078  f884003e          STRB     r0,[r4,#0x3e]
00007c  e00e              B        |L62.156|
                  |L62.126|
00007e  2d04              CMP      r5,#4
000080  d103              BNE      |L62.138|
000082  2101              MOVS     r1,#1
000084  203f              MOVS     r0,#0x3f
000086  5501              STRB     r1,[r0,r4]
000088  e008              B        |L62.156|
                  |L62.138|
00008a  2d08              CMP      r5,#8
00008c  d103              BNE      |L62.150|
00008e  2101              MOVS     r1,#1
000090  2040              MOVS     r0,#0x40
000092  5501              STRB     r1,[r0,r4]
000094  e002              B        |L62.156|
                  |L62.150|
000096  2101              MOVS     r1,#1
000098  2041              MOVS     r0,#0x41
00009a  5501              STRB     r1,[r0,r4]
                  |L62.156|
;;;860    
;;;861      /* Return function status */
;;;862      return HAL_OK;
00009c  2000              MOVS     r0,#0
;;;863    }
00009e  bd30              POP      {r4,r5,pc}
;;;864    
                          ENDP

                  |L62.160|
                          DCD      0x40010000
                  |L62.164|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_OC_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Stop_DMA PROC
;;;1208     */
;;;1209   HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1210   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1211     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;1212   
;;;1213     /* Check the parameters */
;;;1214     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1215   
;;;1216     switch (Channel)
000008  b135              CBZ      r5,|L63.24|
00000a  2d04              CMP      r5,#4
00000c  d00e              BEQ      |L63.44|
00000e  2d08              CMP      r5,#8
000010  d016              BEQ      |L63.64|
000012  2d0c              CMP      r5,#0xc
000014  d128              BNE      |L63.104|
000016  e01d              B        |L63.84|
                  |L63.24|
;;;1217     {
;;;1218       case TIM_CHANNEL_1:
;;;1219       {
;;;1220         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1221         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f4207000          BIC      r0,r0,#0x200
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;1222         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
000024  6a60              LDR      r0,[r4,#0x24]
000026  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1223         break;
00002a  e01f              B        |L63.108|
                  |L63.44|
;;;1224       }
;;;1225   
;;;1226       case TIM_CHANNEL_2:
;;;1227       {
;;;1228         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1229         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
00002c  6820              LDR      r0,[r4,#0]
00002e  68c0              LDR      r0,[r0,#0xc]
000030  f4206080          BIC      r0,r0,#0x400
000034  6821              LDR      r1,[r4,#0]
000036  60c8              STR      r0,[r1,#0xc]
;;;1230         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
000038  6aa0              LDR      r0,[r4,#0x28]
00003a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1231         break;
00003e  e015              B        |L63.108|
                  |L63.64|
;;;1232       }
;;;1233   
;;;1234       case TIM_CHANNEL_3:
;;;1235       {
;;;1236         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1237         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f4206000          BIC      r0,r0,#0x800
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1238         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
00004c  6ae0              LDR      r0,[r4,#0x2c]
00004e  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1239         break;
000052  e00b              B        |L63.108|
                  |L63.84|
;;;1240       }
;;;1241   
;;;1242       case TIM_CHANNEL_4:
;;;1243       {
;;;1244         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1245         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000054  6820              LDR      r0,[r4,#0]
000056  68c0              LDR      r0,[r0,#0xc]
000058  f4205080          BIC      r0,r0,#0x1000
00005c  6821              LDR      r1,[r4,#0]
00005e  60c8              STR      r0,[r1,#0xc]
;;;1246         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
000060  6b20              LDR      r0,[r4,#0x30]
000062  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1247         break;
000066  e001              B        |L63.108|
                  |L63.104|
;;;1248       }
;;;1249   
;;;1250       default:
;;;1251         status = HAL_ERROR;
000068  2601              MOVS     r6,#1
;;;1252         break;
00006a  bf00              NOP      
                  |L63.108|
00006c  bf00              NOP                            ;1223
;;;1253     }
;;;1254   
;;;1255     if (status == HAL_OK)
00006e  2e00              CMP      r6,#0
000070  d14a              BNE      |L63.264|
;;;1256     {
;;;1257       /* Disable the Output compare channel */
;;;1258       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000072  2200              MOVS     r2,#0
000074  4629              MOV      r1,r5
000076  6820              LDR      r0,[r4,#0]
000078  f7fffffe          BL       TIM_CCxChannelCmd
;;;1259   
;;;1260       if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
00007c  4923              LDR      r1,|L63.268|
00007e  6820              LDR      r0,[r4,#0]
000080  4288              CMP      r0,r1
000082  d003              BEQ      |L63.140|
000084  4922              LDR      r1,|L63.272|
000086  6820              LDR      r0,[r4,#0]
000088  4288              CMP      r0,r1
00008a  d101              BNE      |L63.144|
                  |L63.140|
00008c  2001              MOVS     r0,#1
00008e  e000              B        |L63.146|
                  |L63.144|
000090  2000              MOVS     r0,#0
                  |L63.146|
000092  b190              CBZ      r0,|L63.186|
;;;1261       {
;;;1262         /* Disable the Main Output */
;;;1263         __HAL_TIM_MOE_DISABLE(htim);
000094  bf00              NOP      
000096  6820              LDR      r0,[r4,#0]
000098  6a00              LDR      r0,[r0,#0x20]
00009a  f2411111          MOV      r1,#0x1111
00009e  4008              ANDS     r0,r0,r1
0000a0  b950              CBNZ     r0,|L63.184|
0000a2  6820              LDR      r0,[r4,#0]
0000a4  6a00              LDR      r0,[r0,#0x20]
0000a6  1089              ASRS     r1,r1,#2
0000a8  4008              ANDS     r0,r0,r1
0000aa  b928              CBNZ     r0,|L63.184|
0000ac  6820              LDR      r0,[r4,#0]
0000ae  6c40              LDR      r0,[r0,#0x44]
0000b0  f4204000          BIC      r0,r0,#0x8000
0000b4  6821              LDR      r1,[r4,#0]
0000b6  6448              STR      r0,[r1,#0x44]
                  |L63.184|
0000b8  bf00              NOP      
                  |L63.186|
;;;1264       }
;;;1265   
;;;1266       /* Disable the Peripheral */
;;;1267       __HAL_TIM_DISABLE(htim);
0000ba  bf00              NOP      
0000bc  6820              LDR      r0,[r4,#0]
0000be  6a00              LDR      r0,[r0,#0x20]
0000c0  f2411111          MOV      r1,#0x1111
0000c4  4008              ANDS     r0,r0,r1
0000c6  b950              CBNZ     r0,|L63.222|
0000c8  6820              LDR      r0,[r4,#0]
0000ca  6a00              LDR      r0,[r0,#0x20]
0000cc  1089              ASRS     r1,r1,#2
0000ce  4008              ANDS     r0,r0,r1
0000d0  b928              CBNZ     r0,|L63.222|
0000d2  6820              LDR      r0,[r4,#0]
0000d4  6800              LDR      r0,[r0,#0]
0000d6  f0200001          BIC      r0,r0,#1
0000da  6821              LDR      r1,[r4,#0]
0000dc  6008              STR      r0,[r1,#0]
                  |L63.222|
0000de  bf00              NOP      
;;;1268   
;;;1269       /* Set the TIM channel state */
;;;1270       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000e0  b91d              CBNZ     r5,|L63.234|
0000e2  2001              MOVS     r0,#1
0000e4  f884003e          STRB     r0,[r4,#0x3e]
0000e8  e00e              B        |L63.264|
                  |L63.234|
0000ea  2d04              CMP      r5,#4
0000ec  d103              BNE      |L63.246|
0000ee  2101              MOVS     r1,#1
0000f0  203f              MOVS     r0,#0x3f
0000f2  5501              STRB     r1,[r0,r4]
0000f4  e008              B        |L63.264|
                  |L63.246|
0000f6  2d08              CMP      r5,#8
0000f8  d103              BNE      |L63.258|
0000fa  2101              MOVS     r1,#1
0000fc  2040              MOVS     r0,#0x40
0000fe  5501              STRB     r1,[r0,r4]
000100  e002              B        |L63.264|
                  |L63.258|
000102  2101              MOVS     r1,#1
000104  2041              MOVS     r0,#0x41
000106  5501              STRB     r1,[r0,r4]
                  |L63.264|
;;;1271     }
;;;1272   
;;;1273     /* Return function status */
;;;1274     return status;
000108  4630              MOV      r0,r6
;;;1275   }
00010a  bd70              POP      {r4-r6,pc}
;;;1276   
                          ENDP

                  |L63.268|
                          DCD      0x40010000
                  |L63.272|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_OC_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OC_Stop_IT PROC
;;;968      */
;;;969    HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;970    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;971      HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;972    
;;;973      /* Check the parameters */
;;;974      assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;975    
;;;976      switch (Channel)
000008  b135              CBZ      r5,|L64.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L64.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L64.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L64.80|
000016  e014              B        |L64.66|
                  |L64.24|
;;;977      {
;;;978        case TIM_CHANNEL_1:
;;;979        {
;;;980          /* Disable the TIM Capture/Compare 1 interrupt */
;;;981          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f0200002          BIC      r0,r0,#2
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;982          break;
000024  e016              B        |L64.84|
                  |L64.38|
;;;983        }
;;;984    
;;;985        case TIM_CHANNEL_2:
;;;986        {
;;;987          /* Disable the TIM Capture/Compare 2 interrupt */
;;;988          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f0200004          BIC      r0,r0,#4
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;989          break;
000032  e00f              B        |L64.84|
                  |L64.52|
;;;990        }
;;;991    
;;;992        case TIM_CHANNEL_3:
;;;993        {
;;;994          /* Disable the TIM Capture/Compare 3 interrupt */
;;;995          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0200008          BIC      r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;996          break;
000040  e008              B        |L64.84|
                  |L64.66|
;;;997        }
;;;998    
;;;999        case TIM_CHANNEL_4:
;;;1000       {
;;;1001         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1002         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;1003         break;
00004e  e001              B        |L64.84|
                  |L64.80|
;;;1004       }
;;;1005   
;;;1006       default:
;;;1007         status = HAL_ERROR;
000050  2601              MOVS     r6,#1
;;;1008         break;
000052  bf00              NOP      
                  |L64.84|
000054  bf00              NOP                            ;982
;;;1009     }
;;;1010   
;;;1011     if (status == HAL_OK)
000056  2e00              CMP      r6,#0
000058  d14a              BNE      |L64.240|
;;;1012     {
;;;1013       /* Disable the Output compare channel */
;;;1014       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
00005a  2200              MOVS     r2,#0
00005c  4629              MOV      r1,r5
00005e  6820              LDR      r0,[r4,#0]
000060  f7fffffe          BL       TIM_CCxChannelCmd
;;;1015   
;;;1016       if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
000064  4923              LDR      r1,|L64.244|
000066  6820              LDR      r0,[r4,#0]
000068  4288              CMP      r0,r1
00006a  d003              BEQ      |L64.116|
00006c  4922              LDR      r1,|L64.248|
00006e  6820              LDR      r0,[r4,#0]
000070  4288              CMP      r0,r1
000072  d101              BNE      |L64.120|
                  |L64.116|
000074  2001              MOVS     r0,#1
000076  e000              B        |L64.122|
                  |L64.120|
000078  2000              MOVS     r0,#0
                  |L64.122|
00007a  b190              CBZ      r0,|L64.162|
;;;1017       {
;;;1018         /* Disable the Main Output */
;;;1019         __HAL_TIM_MOE_DISABLE(htim);
00007c  bf00              NOP      
00007e  6820              LDR      r0,[r4,#0]
000080  6a00              LDR      r0,[r0,#0x20]
000082  f2411111          MOV      r1,#0x1111
000086  4008              ANDS     r0,r0,r1
000088  b950              CBNZ     r0,|L64.160|
00008a  6820              LDR      r0,[r4,#0]
00008c  6a00              LDR      r0,[r0,#0x20]
00008e  1089              ASRS     r1,r1,#2
000090  4008              ANDS     r0,r0,r1
000092  b928              CBNZ     r0,|L64.160|
000094  6820              LDR      r0,[r4,#0]
000096  6c40              LDR      r0,[r0,#0x44]
000098  f4204000          BIC      r0,r0,#0x8000
00009c  6821              LDR      r1,[r4,#0]
00009e  6448              STR      r0,[r1,#0x44]
                  |L64.160|
0000a0  bf00              NOP      
                  |L64.162|
;;;1020       }
;;;1021   
;;;1022       /* Disable the Peripheral */
;;;1023       __HAL_TIM_DISABLE(htim);
0000a2  bf00              NOP      
0000a4  6820              LDR      r0,[r4,#0]
0000a6  6a00              LDR      r0,[r0,#0x20]
0000a8  f2411111          MOV      r1,#0x1111
0000ac  4008              ANDS     r0,r0,r1
0000ae  b950              CBNZ     r0,|L64.198|
0000b0  6820              LDR      r0,[r4,#0]
0000b2  6a00              LDR      r0,[r0,#0x20]
0000b4  1089              ASRS     r1,r1,#2
0000b6  4008              ANDS     r0,r0,r1
0000b8  b928              CBNZ     r0,|L64.198|
0000ba  6820              LDR      r0,[r4,#0]
0000bc  6800              LDR      r0,[r0,#0]
0000be  f0200001          BIC      r0,r0,#1
0000c2  6821              LDR      r1,[r4,#0]
0000c4  6008              STR      r0,[r1,#0]
                  |L64.198|
0000c6  bf00              NOP      
;;;1024   
;;;1025       /* Set the TIM channel state */
;;;1026       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000c8  b91d              CBNZ     r5,|L64.210|
0000ca  2001              MOVS     r0,#1
0000cc  f884003e          STRB     r0,[r4,#0x3e]
0000d0  e00e              B        |L64.240|
                  |L64.210|
0000d2  2d04              CMP      r5,#4
0000d4  d103              BNE      |L64.222|
0000d6  2101              MOVS     r1,#1
0000d8  203f              MOVS     r0,#0x3f
0000da  5501              STRB     r1,[r0,r4]
0000dc  e008              B        |L64.240|
                  |L64.222|
0000de  2d08              CMP      r5,#8
0000e0  d103              BNE      |L64.234|
0000e2  2101              MOVS     r1,#1
0000e4  2040              MOVS     r0,#0x40
0000e6  5501              STRB     r1,[r0,r4]
0000e8  e002              B        |L64.240|
                  |L64.234|
0000ea  2101              MOVS     r1,#1
0000ec  2041              MOVS     r0,#0x41
0000ee  5501              STRB     r1,[r0,r4]
                  |L64.240|
;;;1027     }
;;;1028   
;;;1029     /* Return function status */
;;;1030     return status;
0000f0  4630              MOV      r0,r6
;;;1031   }
0000f2  bd70              POP      {r4-r6,pc}
;;;1032   
                          ENDP

                  |L64.244|
                          DCD      0x40010000
                  |L64.248|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_OnePulse_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_ConfigChannel PROC
;;;4321     */
;;;4322   HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4323                                                    uint32_t OutputChannel,  uint32_t InputChannel)
;;;4324   {
000004  b088              SUB      sp,sp,#0x20
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
;;;4325     HAL_StatusTypeDef status = HAL_OK;
00000e  f04f0800          MOV      r8,#0
;;;4326     TIM_OC_InitTypeDef temp1;
;;;4327   
;;;4328     /* Check the parameters */
;;;4329     assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
;;;4330     assert_param(IS_TIM_OPM_CHANNELS(InputChannel));
;;;4331   
;;;4332     if (OutputChannel != InputChannel)
000012  42be              CMP      r6,r7
000014  d07e              BEQ      |L65.276|
;;;4333     {
;;;4334       /* Process Locked */
;;;4335       __HAL_LOCK(htim);
000016  bf00              NOP      
000018  f894003c          LDRB     r0,[r4,#0x3c]
00001c  2801              CMP      r0,#1
00001e  d103              BNE      |L65.40|
000020  2002              MOVS     r0,#2
                  |L65.34|
;;;4336   
;;;4337       htim->State = HAL_TIM_STATE_BUSY;
;;;4338   
;;;4339       /* Extract the Output compare configuration from sConfig structure */
;;;4340       temp1.OCMode = sConfig->OCMode;
;;;4341       temp1.Pulse = sConfig->Pulse;
;;;4342       temp1.OCPolarity = sConfig->OCPolarity;
;;;4343       temp1.OCNPolarity = sConfig->OCNPolarity;
;;;4344       temp1.OCIdleState = sConfig->OCIdleState;
;;;4345       temp1.OCNIdleState = sConfig->OCNIdleState;
;;;4346   
;;;4347       switch (OutputChannel)
;;;4348       {
;;;4349         case TIM_CHANNEL_1:
;;;4350         {
;;;4351           assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4352   
;;;4353           TIM_OC1_SetConfig(htim->Instance, &temp1);
;;;4354           break;
;;;4355         }
;;;4356   
;;;4357         case TIM_CHANNEL_2:
;;;4358         {
;;;4359           assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4360   
;;;4361           TIM_OC2_SetConfig(htim->Instance, &temp1);
;;;4362           break;
;;;4363         }
;;;4364   
;;;4365         default:
;;;4366           status = HAL_ERROR;
;;;4367           break;
;;;4368       }
;;;4369   
;;;4370       if (status == HAL_OK)
;;;4371       {
;;;4372         switch (InputChannel)
;;;4373         {
;;;4374           case TIM_CHANNEL_1:
;;;4375           {
;;;4376             assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4377   
;;;4378             TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
;;;4379                               sConfig->ICSelection, sConfig->ICFilter);
;;;4380   
;;;4381             /* Reset the IC1PSC Bits */
;;;4382             htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;4383   
;;;4384             /* Select the Trigger source */
;;;4385             htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;4386             htim->Instance->SMCR |= TIM_TS_TI1FP1;
;;;4387   
;;;4388             /* Select the Slave Mode */
;;;4389             htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;4390             htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
;;;4391             break;
;;;4392           }
;;;4393   
;;;4394           case TIM_CHANNEL_2:
;;;4395           {
;;;4396             assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4397   
;;;4398             TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
;;;4399                               sConfig->ICSelection, sConfig->ICFilter);
;;;4400   
;;;4401             /* Reset the IC2PSC Bits */
;;;4402             htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
;;;4403   
;;;4404             /* Select the Trigger source */
;;;4405             htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;4406             htim->Instance->SMCR |= TIM_TS_TI2FP2;
;;;4407   
;;;4408             /* Select the Slave Mode */
;;;4409             htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;4410             htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
;;;4411             break;
;;;4412           }
;;;4413   
;;;4414           default:
;;;4415             status = HAL_ERROR;
;;;4416             break;
;;;4417         }
;;;4418       }
;;;4419   
;;;4420       htim->State = HAL_TIM_STATE_READY;
;;;4421   
;;;4422       __HAL_UNLOCK(htim);
;;;4423   
;;;4424       return status;
;;;4425     }
;;;4426     else
;;;4427     {
;;;4428       return HAL_ERROR;
;;;4429     }
;;;4430   }
000022  b008              ADD      sp,sp,#0x20
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L65.40|
000028  2001              MOVS     r0,#1                 ;4335
00002a  f884003c          STRB     r0,[r4,#0x3c]         ;4335
00002e  bf00              NOP                            ;4335
000030  2002              MOVS     r0,#2                 ;4337
000032  f884003d          STRB     r0,[r4,#0x3d]         ;4337
000036  6828              LDR      r0,[r5,#0]            ;4340
000038  9001              STR      r0,[sp,#4]            ;4340
00003a  6868              LDR      r0,[r5,#4]            ;4341
00003c  9002              STR      r0,[sp,#8]            ;4341
00003e  68a8              LDR      r0,[r5,#8]            ;4342
000040  9003              STR      r0,[sp,#0xc]          ;4342
000042  68e8              LDR      r0,[r5,#0xc]          ;4343
000044  9004              STR      r0,[sp,#0x10]         ;4343
000046  6928              LDR      r0,[r5,#0x10]         ;4344
000048  9006              STR      r0,[sp,#0x18]         ;4344
00004a  6968              LDR      r0,[r5,#0x14]         ;4345
00004c  9007              STR      r0,[sp,#0x1c]         ;4345
00004e  b116              CBZ      r6,|L65.86|
000050  2e04              CMP      r6,#4                 ;4347
000052  d10a              BNE      |L65.106|
000054  e004              B        |L65.96|
                  |L65.86|
000056  a901              ADD      r1,sp,#4              ;4353
000058  6820              LDR      r0,[r4,#0]            ;4353
00005a  f7fffffe          BL       TIM_OC1_SetConfig
00005e  e007              B        |L65.112|
                  |L65.96|
000060  a901              ADD      r1,sp,#4              ;4361
000062  6820              LDR      r0,[r4,#0]            ;4361
000064  f7fffffe          BL       TIM_OC2_SetConfig
000068  e002              B        |L65.112|
                  |L65.106|
00006a  f04f0801          MOV      r8,#1                 ;4366
00006e  bf00              NOP                            ;4367
                  |L65.112|
000070  bf00              NOP                            ;4354
000072  f1b80f00          CMP      r8,#0                 ;4370
000076  d152              BNE      |L65.286|
000078  b117              CBZ      r7,|L65.128|
00007a  2f04              CMP      r7,#4                 ;4372
00007c  d14b              BNE      |L65.278|
00007e  e024              B        |L65.202|
                  |L65.128|
000080  e9d52307          LDRD     r2,r3,[r5,#0x1c]      ;4378
000084  69a9              LDR      r1,[r5,#0x18]         ;4378
000086  6820              LDR      r0,[r4,#0]            ;4378
000088  f7fffffe          BL       TIM_TI1_SetConfig
00008c  6820              LDR      r0,[r4,#0]            ;4382
00008e  6980              LDR      r0,[r0,#0x18]         ;4382
000090  f020000c          BIC      r0,r0,#0xc            ;4382
000094  6821              LDR      r1,[r4,#0]            ;4382
000096  6188              STR      r0,[r1,#0x18]         ;4382
000098  6820              LDR      r0,[r4,#0]            ;4385
00009a  6880              LDR      r0,[r0,#8]            ;4385
00009c  f0200070          BIC      r0,r0,#0x70           ;4385
0000a0  6821              LDR      r1,[r4,#0]            ;4385
0000a2  6088              STR      r0,[r1,#8]            ;4385
0000a4  6820              LDR      r0,[r4,#0]            ;4386
0000a6  6880              LDR      r0,[r0,#8]            ;4386
0000a8  f0400050          ORR      r0,r0,#0x50           ;4386
0000ac  6821              LDR      r1,[r4,#0]            ;4386
0000ae  6088              STR      r0,[r1,#8]            ;4386
0000b0  6820              LDR      r0,[r4,#0]            ;4389
0000b2  6880              LDR      r0,[r0,#8]            ;4389
0000b4  f0200007          BIC      r0,r0,#7              ;4389
0000b8  6821              LDR      r1,[r4,#0]            ;4389
0000ba  6088              STR      r0,[r1,#8]            ;4389
0000bc  6820              LDR      r0,[r4,#0]            ;4390
0000be  6880              LDR      r0,[r0,#8]            ;4390
0000c0  f0400006          ORR      r0,r0,#6              ;4390
0000c4  6821              LDR      r1,[r4,#0]            ;4390
0000c6  6088              STR      r0,[r1,#8]            ;4390
0000c8  e028              B        |L65.284|
                  |L65.202|
0000ca  e9d52307          LDRD     r2,r3,[r5,#0x1c]      ;4398
0000ce  69a9              LDR      r1,[r5,#0x18]         ;4398
0000d0  6820              LDR      r0,[r4,#0]            ;4398
0000d2  f7fffffe          BL       TIM_TI2_SetConfig
0000d6  6820              LDR      r0,[r4,#0]            ;4402
0000d8  6980              LDR      r0,[r0,#0x18]         ;4402
0000da  f4206040          BIC      r0,r0,#0xc00          ;4402
0000de  6821              LDR      r1,[r4,#0]            ;4402
0000e0  6188              STR      r0,[r1,#0x18]         ;4402
0000e2  6820              LDR      r0,[r4,#0]            ;4405
0000e4  6880              LDR      r0,[r0,#8]            ;4405
0000e6  f0200070          BIC      r0,r0,#0x70           ;4405
0000ea  6821              LDR      r1,[r4,#0]            ;4405
0000ec  6088              STR      r0,[r1,#8]            ;4405
0000ee  6820              LDR      r0,[r4,#0]            ;4406
0000f0  6880              LDR      r0,[r0,#8]            ;4406
0000f2  f0400060          ORR      r0,r0,#0x60           ;4406
0000f6  6821              LDR      r1,[r4,#0]            ;4406
0000f8  6088              STR      r0,[r1,#8]            ;4406
0000fa  6820              LDR      r0,[r4,#0]            ;4409
0000fc  6880              LDR      r0,[r0,#8]            ;4409
0000fe  f0200007          BIC      r0,r0,#7              ;4409
000102  6821              LDR      r1,[r4,#0]            ;4409
000104  6088              STR      r0,[r1,#8]            ;4409
000106  6820              LDR      r0,[r4,#0]            ;4410
000108  6880              LDR      r0,[r0,#8]            ;4410
00010a  f0400006          ORR      r0,r0,#6              ;4410
00010e  6821              LDR      r1,[r4,#0]            ;4410
000110  6088              STR      r0,[r1,#8]            ;4410
000112  e003              B        |L65.284|
                  |L65.276|
000114  e00d              B        |L65.306|
                  |L65.278|
000116  f04f0801          MOV      r8,#1                 ;4415
00011a  bf00              NOP                            ;4416
                  |L65.284|
00011c  bf00              NOP                            ;4391
                  |L65.286|
00011e  2001              MOVS     r0,#1                 ;4420
000120  f884003d          STRB     r0,[r4,#0x3d]         ;4420
000124  bf00              NOP                            ;4422
000126  2000              MOVS     r0,#0                 ;4422
000128  f884003c          STRB     r0,[r4,#0x3c]         ;4422
00012c  bf00              NOP                            ;4422
00012e  4640              MOV      r0,r8                 ;4424
000130  e777              B        |L65.34|
                  |L65.306|
000132  2001              MOVS     r0,#1                 ;4428
000134  e775              B        |L65.34|
;;;4431   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_DeInit PROC
;;;2689     */
;;;2690   HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;2691   {
000002  4604              MOV      r4,r0
;;;2692     /* Check the parameters */
;;;2693     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;2694   
;;;2695     htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  f884003d          STRB     r0,[r4,#0x3d]
;;;2696   
;;;2697     /* Disable the TIM Peripheral Clock */
;;;2698     __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f2411111          MOV      r1,#0x1111
000014  4008              ANDS     r0,r0,r1
000016  b950              CBNZ     r0,|L66.46|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  b928              CBNZ     r0,|L66.46|
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
                  |L66.46|
00002e  bf00              NOP      
;;;2699   
;;;2700   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2701     if (htim->OnePulse_MspDeInitCallback == NULL)
;;;2702     {
;;;2703       htim->OnePulse_MspDeInitCallback = HAL_TIM_OnePulse_MspDeInit;
;;;2704     }
;;;2705     /* DeInit the low level hardware */
;;;2706     htim->OnePulse_MspDeInitCallback(htim);
;;;2707   #else
;;;2708     /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;2709     HAL_TIM_OnePulse_MspDeInit(htim);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_TIM_OnePulse_MspDeInit
;;;2710   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2711   
;;;2712     /* Change the DMA burst operation state */
;;;2713     htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
000036  2000              MOVS     r0,#0
000038  f8840046          STRB     r0,[r4,#0x46]
;;;2714   
;;;2715     /* Set the TIM channel state */
;;;2716     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
00003c  f884003e          STRB     r0,[r4,#0x3e]
;;;2717     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
000040  2100              MOVS     r1,#0
000042  203f              MOVS     r0,#0x3f
000044  5501              STRB     r1,[r0,r4]
;;;2718     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
000046  2000              MOVS     r0,#0
000048  f8840042          STRB     r0,[r4,#0x42]
;;;2719     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
00004c  2043              MOVS     r0,#0x43
00004e  5501              STRB     r1,[r0,r4]
;;;2720   
;;;2721     /* Change TIM state */
;;;2722     htim->State = HAL_TIM_STATE_RESET;
000050  2000              MOVS     r0,#0
000052  f884003d          STRB     r0,[r4,#0x3d]
;;;2723   
;;;2724     /* Release Lock */
;;;2725     __HAL_UNLOCK(htim);
000056  bf00              NOP      
000058  f884003c          STRB     r0,[r4,#0x3c]
00005c  bf00              NOP      
;;;2726   
;;;2727     return HAL_OK;
;;;2728   }
00005e  bd10              POP      {r4,pc}
;;;2729   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_GetState PROC
;;;6377     */
;;;6378   HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;6379   {
;;;6380     return htim->State;
000002  f891003d          LDRB     r0,[r1,#0x3d]
;;;6381   }
000006  4770              BX       lr
;;;6382   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_Init PROC
;;;2621     */
;;;2622   HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
000000  b570              PUSH     {r4-r6,lr}
;;;2623   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2624     /* Check the TIM handle allocation */
;;;2625     if (htim == NULL)
000006  b90c              CBNZ     r4,|L68.12|
;;;2626     {
;;;2627       return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L68.10|
;;;2628     }
;;;2629   
;;;2630     /* Check the parameters */
;;;2631     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;2632     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;2633     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;2634     assert_param(IS_TIM_OPM_MODE(OnePulseMode));
;;;2635     assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;2636   
;;;2637     if (htim->State == HAL_TIM_STATE_RESET)
;;;2638     {
;;;2639       /* Allocate lock resource and initialize it */
;;;2640       htim->Lock = HAL_UNLOCKED;
;;;2641   
;;;2642   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2643       /* Reset interrupt callbacks to legacy weak callbacks */
;;;2644       TIM_ResetCallback(htim);
;;;2645   
;;;2646       if (htim->OnePulse_MspInitCallback == NULL)
;;;2647       {
;;;2648         htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
;;;2649       }
;;;2650       /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;2651       htim->OnePulse_MspInitCallback(htim);
;;;2652   #else
;;;2653       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;2654       HAL_TIM_OnePulse_MspInit(htim);
;;;2655   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2656     }
;;;2657   
;;;2658     /* Set the TIM state */
;;;2659     htim->State = HAL_TIM_STATE_BUSY;
;;;2660   
;;;2661     /* Configure the Time base in the One Pulse Mode */
;;;2662     TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;2663   
;;;2664     /* Reset the OPM Bit */
;;;2665     htim->Instance->CR1 &= ~TIM_CR1_OPM;
;;;2666   
;;;2667     /* Configure the OPM Mode */
;;;2668     htim->Instance->CR1 |= OnePulseMode;
;;;2669   
;;;2670     /* Initialize the DMA burst operation state */
;;;2671     htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
;;;2672   
;;;2673     /* Initialize the TIM channels state */
;;;2674     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
;;;2675     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
;;;2676     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
;;;2677     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
;;;2678   
;;;2679     /* Initialize the TIM state*/
;;;2680     htim->State = HAL_TIM_STATE_READY;
;;;2681   
;;;2682     return HAL_OK;
;;;2683   }
00000a  bd70              POP      {r4-r6,pc}
                  |L68.12|
00000c  f894003d          LDRB     r0,[r4,#0x3d]         ;2637
000010  b928              CBNZ     r0,|L68.30|
000012  2000              MOVS     r0,#0                 ;2640
000014  f884003c          STRB     r0,[r4,#0x3c]         ;2640
000018  4620              MOV      r0,r4                 ;2654
00001a  f7fffffe          BL       HAL_TIM_OnePulse_MspInit
                  |L68.30|
00001e  2002              MOVS     r0,#2                 ;2659
000020  f884003d          STRB     r0,[r4,#0x3d]         ;2659
000024  1d21              ADDS     r1,r4,#4              ;2662
000026  6820              LDR      r0,[r4,#0]            ;2662
000028  f7fffffe          BL       TIM_Base_SetConfig
00002c  6820              LDR      r0,[r4,#0]            ;2665
00002e  6800              LDR      r0,[r0,#0]            ;2665
000030  f0200008          BIC      r0,r0,#8              ;2665
000034  6821              LDR      r1,[r4,#0]            ;2665
000036  6008              STR      r0,[r1,#0]            ;2665
000038  6820              LDR      r0,[r4,#0]            ;2668
00003a  6800              LDR      r0,[r0,#0]            ;2668
00003c  4328              ORRS     r0,r0,r5              ;2668
00003e  6821              LDR      r1,[r4,#0]            ;2668
000040  6008              STR      r0,[r1,#0]            ;2668
000042  2001              MOVS     r0,#1                 ;2671
000044  f8840046          STRB     r0,[r4,#0x46]         ;2671
000048  f884003e          STRB     r0,[r4,#0x3e]         ;2674
00004c  2101              MOVS     r1,#1                 ;2675
00004e  203f              MOVS     r0,#0x3f              ;2675
000050  5501              STRB     r1,[r0,r4]            ;2675
000052  2001              MOVS     r0,#1                 ;2676
000054  f8840042          STRB     r0,[r4,#0x42]         ;2676
000058  2043              MOVS     r0,#0x43              ;2677
00005a  5501              STRB     r1,[r0,r4]            ;2677
00005c  2001              MOVS     r0,#1                 ;2680
00005e  f884003d          STRB     r0,[r4,#0x3d]         ;2680
000062  2000              MOVS     r0,#0                 ;2682
000064  e7d1              B        |L68.10|
;;;2684   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_MspDeInit PROC
;;;2749     */
;;;2750   __weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2751   {
;;;2752     /* Prevent unused argument(s) compilation warning */
;;;2753     UNUSED(htim);
;;;2754   
;;;2755     /* NOTE : This function should not be modified, when the callback is needed,
;;;2756               the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
;;;2757      */
;;;2758   }
;;;2759   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_OnePulse_MspInit PROC
;;;2734     */
;;;2735   __weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2736   {
;;;2737     /* Prevent unused argument(s) compilation warning */
;;;2738     UNUSED(htim);
;;;2739   
;;;2740     /* NOTE : This function should not be modified, when the callback is needed,
;;;2741               the HAL_TIM_OnePulse_MspInit could be implemented in the user file
;;;2742      */
;;;2743   }
;;;2744   
                          ENDP


                          AREA ||i.HAL_TIM_OnePulse_Start||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_Start PROC
;;;2769     */
;;;2770   HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2771   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;2772     HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
000008  f894503e          LDRB     r5,[r4,#0x3e]
;;;2773     HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
00000c  203f              MOVS     r0,#0x3f
00000e  5d06              LDRB     r6,[r0,r4]
;;;2774     HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
000010  f8947042          LDRB     r7,[r4,#0x42]
;;;2775     HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
000014  2043              MOVS     r0,#0x43
000016  f8108004          LDRB     r8,[r0,r4]
;;;2776   
;;;2777     /* Prevent unused argument(s) compilation warning */
;;;2778     UNUSED(OutputChannel);
;;;2779   
;;;2780     /* Check the TIM channels state */
;;;2781     if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
00001a  2d01              CMP      r5,#1
00001c  d106              BNE      |L71.44|
;;;2782         || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
00001e  2e01              CMP      r6,#1
000020  d104              BNE      |L71.44|
;;;2783         || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
000022  2f01              CMP      r7,#1
000024  d102              BNE      |L71.44|
;;;2784         || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
000026  f1b80f01          CMP      r8,#1
00002a  d002              BEQ      |L71.50|
                  |L71.44|
;;;2785     {
;;;2786       return HAL_ERROR;
00002c  2001              MOVS     r0,#1
                  |L71.46|
;;;2787     }
;;;2788   
;;;2789     /* Set the TIM channels state */
;;;2790     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2791     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2792     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2793     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2794   
;;;2795     /* Enable the Capture compare and the Input Capture channels
;;;2796       (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2797       if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2798       if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
;;;2799       whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together
;;;2800   
;;;2801       No need to enable the counter, it's enabled automatically by hardware
;;;2802       (the counter starts in response to a stimulus and generate a pulse */
;;;2803   
;;;2804     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2805     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2806   
;;;2807     if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
;;;2808     {
;;;2809       /* Enable the main output */
;;;2810       __HAL_TIM_MOE_ENABLE(htim);
;;;2811     }
;;;2812   
;;;2813     /* Return function status */
;;;2814     return HAL_OK;
;;;2815   }
00002e  e8bd83f0          POP      {r4-r9,pc}
                  |L71.50|
000032  2002              MOVS     r0,#2                 ;2790
000034  f884003e          STRB     r0,[r4,#0x3e]         ;2790
000038  2102              MOVS     r1,#2                 ;2791
00003a  203f              MOVS     r0,#0x3f              ;2791
00003c  5501              STRB     r1,[r0,r4]            ;2791
00003e  2002              MOVS     r0,#2                 ;2792
000040  f8840042          STRB     r0,[r4,#0x42]         ;2792
000044  2043              MOVS     r0,#0x43              ;2793
000046  5501              STRB     r1,[r0,r4]            ;2793
000048  2201              MOVS     r2,#1                 ;2804
00004a  2100              MOVS     r1,#0                 ;2804
00004c  6820              LDR      r0,[r4,#0]            ;2804
00004e  f7fffffe          BL       TIM_CCxChannelCmd
000052  2201              MOVS     r2,#1                 ;2805
000054  2104              MOVS     r1,#4                 ;2805
000056  6820              LDR      r0,[r4,#0]            ;2805
000058  f7fffffe          BL       TIM_CCxChannelCmd
00005c  4909              LDR      r1,|L71.132|
00005e  6820              LDR      r0,[r4,#0]            ;2807
000060  4288              CMP      r0,r1                 ;2807
000062  d003              BEQ      |L71.108|
000064  4908              LDR      r1,|L71.136|
000066  6820              LDR      r0,[r4,#0]            ;2807
000068  4288              CMP      r0,r1                 ;2807
00006a  d101              BNE      |L71.112|
                  |L71.108|
00006c  2001              MOVS     r0,#1                 ;2807
00006e  e000              B        |L71.114|
                  |L71.112|
000070  2000              MOVS     r0,#0                 ;2807
                  |L71.114|
000072  b128              CBZ      r0,|L71.128|
000074  6820              LDR      r0,[r4,#0]            ;2810
000076  6c40              LDR      r0,[r0,#0x44]         ;2810
000078  f4404000          ORR      r0,r0,#0x8000         ;2810
00007c  6821              LDR      r1,[r4,#0]            ;2810
00007e  6448              STR      r0,[r1,#0x44]         ;2810
                  |L71.128|
000080  2000              MOVS     r0,#0                 ;2814
000082  e7d4              B        |L71.46|
;;;2816   
                          ENDP

                  |L71.132|
                          DCD      0x40010000
                  |L71.136|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_OnePulse_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_Start_IT PROC
;;;2869     */
;;;2870   HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2871   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;2872     HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
000008  f894503e          LDRB     r5,[r4,#0x3e]
;;;2873     HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
00000c  203f              MOVS     r0,#0x3f
00000e  5d06              LDRB     r6,[r0,r4]
;;;2874     HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
000010  f8947042          LDRB     r7,[r4,#0x42]
;;;2875     HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
000014  2043              MOVS     r0,#0x43
000016  f8108004          LDRB     r8,[r0,r4]
;;;2876   
;;;2877     /* Prevent unused argument(s) compilation warning */
;;;2878     UNUSED(OutputChannel);
;;;2879   
;;;2880     /* Check the TIM channels state */
;;;2881     if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
00001a  2d01              CMP      r5,#1
00001c  d106              BNE      |L72.44|
;;;2882         || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
00001e  2e01              CMP      r6,#1
000020  d104              BNE      |L72.44|
;;;2883         || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
000022  2f01              CMP      r7,#1
000024  d102              BNE      |L72.44|
;;;2884         || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
000026  f1b80f01          CMP      r8,#1
00002a  d002              BEQ      |L72.50|
                  |L72.44|
;;;2885     {
;;;2886       return HAL_ERROR;
00002c  2001              MOVS     r0,#1
                  |L72.46|
;;;2887     }
;;;2888   
;;;2889     /* Set the TIM channels state */
;;;2890     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2891     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2892     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2893     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;2894   
;;;2895     /* Enable the Capture compare and the Input Capture channels
;;;2896       (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2897       if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2898       if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
;;;2899       whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together
;;;2900   
;;;2901       No need to enable the counter, it's enabled automatically by hardware
;;;2902       (the counter starts in response to a stimulus and generate a pulse */
;;;2903   
;;;2904     /* Enable the TIM Capture/Compare 1 interrupt */
;;;2905     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;2906   
;;;2907     /* Enable the TIM Capture/Compare 2 interrupt */
;;;2908     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;2909   
;;;2910     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;2911     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
;;;2912   
;;;2913     if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
;;;2914     {
;;;2915       /* Enable the main output */
;;;2916       __HAL_TIM_MOE_ENABLE(htim);
;;;2917     }
;;;2918   
;;;2919     /* Return function status */
;;;2920     return HAL_OK;
;;;2921   }
00002e  e8bd83f0          POP      {r4-r9,pc}
                  |L72.50|
000032  2002              MOVS     r0,#2                 ;2890
000034  f884003e          STRB     r0,[r4,#0x3e]         ;2890
000038  2102              MOVS     r1,#2                 ;2891
00003a  203f              MOVS     r0,#0x3f              ;2891
00003c  5501              STRB     r1,[r0,r4]            ;2891
00003e  2002              MOVS     r0,#2                 ;2892
000040  f8840042          STRB     r0,[r4,#0x42]         ;2892
000044  2043              MOVS     r0,#0x43              ;2893
000046  5501              STRB     r1,[r0,r4]            ;2893
000048  6820              LDR      r0,[r4,#0]            ;2905
00004a  68c0              LDR      r0,[r0,#0xc]          ;2905
00004c  f0400002          ORR      r0,r0,#2              ;2905
000050  6821              LDR      r1,[r4,#0]            ;2905
000052  60c8              STR      r0,[r1,#0xc]          ;2905
000054  6820              LDR      r0,[r4,#0]            ;2908
000056  68c0              LDR      r0,[r0,#0xc]          ;2908
000058  f0400004          ORR      r0,r0,#4              ;2908
00005c  6821              LDR      r1,[r4,#0]            ;2908
00005e  60c8              STR      r0,[r1,#0xc]          ;2908
000060  2201              MOVS     r2,#1                 ;2910
000062  2100              MOVS     r1,#0                 ;2910
000064  6820              LDR      r0,[r4,#0]            ;2910
000066  f7fffffe          BL       TIM_CCxChannelCmd
00006a  2201              MOVS     r2,#1                 ;2911
00006c  2104              MOVS     r1,#4                 ;2911
00006e  6820              LDR      r0,[r4,#0]            ;2911
000070  f7fffffe          BL       TIM_CCxChannelCmd
000074  4909              LDR      r1,|L72.156|
000076  6820              LDR      r0,[r4,#0]            ;2913
000078  4288              CMP      r0,r1                 ;2913
00007a  d003              BEQ      |L72.132|
00007c  4908              LDR      r1,|L72.160|
00007e  6820              LDR      r0,[r4,#0]            ;2913
000080  4288              CMP      r0,r1                 ;2913
000082  d101              BNE      |L72.136|
                  |L72.132|
000084  2001              MOVS     r0,#1                 ;2913
000086  e000              B        |L72.138|
                  |L72.136|
000088  2000              MOVS     r0,#0                 ;2913
                  |L72.138|
00008a  b128              CBZ      r0,|L72.152|
00008c  6820              LDR      r0,[r4,#0]            ;2916
00008e  6c40              LDR      r0,[r0,#0x44]         ;2916
000090  f4404000          ORR      r0,r0,#0x8000         ;2916
000094  6821              LDR      r1,[r4,#0]            ;2916
000096  6448              STR      r0,[r1,#0x44]         ;2916
                  |L72.152|
000098  2000              MOVS     r0,#0                 ;2920
00009a  e7c8              B        |L72.46|
;;;2922   
                          ENDP

                  |L72.156|
                          DCD      0x40010000
                  |L72.160|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_OnePulse_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_Stop PROC
;;;2826     */
;;;2827   HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b530              PUSH     {r4,r5,lr}
;;;2828   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2829     /* Prevent unused argument(s) compilation warning */
;;;2830     UNUSED(OutputChannel);
;;;2831   
;;;2832     /* Disable the Capture compare and the Input Capture channels
;;;2833     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2834     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2835     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
;;;2836     whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
;;;2837   
;;;2838     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000006  2200              MOVS     r2,#0
000008  4611              MOV      r1,r2
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxChannelCmd
;;;2839     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
000010  2200              MOVS     r2,#0
000012  2104              MOVS     r1,#4
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       TIM_CCxChannelCmd
;;;2840   
;;;2841     if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
00001a  491f              LDR      r1,|L73.152|
00001c  6820              LDR      r0,[r4,#0]
00001e  4288              CMP      r0,r1
000020  d003              BEQ      |L73.42|
000022  491e              LDR      r1,|L73.156|
000024  6820              LDR      r0,[r4,#0]
000026  4288              CMP      r0,r1
000028  d101              BNE      |L73.46|
                  |L73.42|
00002a  2001              MOVS     r0,#1
00002c  e000              B        |L73.48|
                  |L73.46|
00002e  2000              MOVS     r0,#0
                  |L73.48|
000030  b190              CBZ      r0,|L73.88|
;;;2842     {
;;;2843       /* Disable the Main Output */
;;;2844       __HAL_TIM_MOE_DISABLE(htim);
000032  bf00              NOP      
000034  6820              LDR      r0,[r4,#0]
000036  6a00              LDR      r0,[r0,#0x20]
000038  f2411111          MOV      r1,#0x1111
00003c  4008              ANDS     r0,r0,r1
00003e  b950              CBNZ     r0,|L73.86|
000040  6820              LDR      r0,[r4,#0]
000042  6a00              LDR      r0,[r0,#0x20]
000044  1089              ASRS     r1,r1,#2
000046  4008              ANDS     r0,r0,r1
000048  b928              CBNZ     r0,|L73.86|
00004a  6820              LDR      r0,[r4,#0]
00004c  6c40              LDR      r0,[r0,#0x44]
00004e  f4204000          BIC      r0,r0,#0x8000
000052  6821              LDR      r1,[r4,#0]
000054  6448              STR      r0,[r1,#0x44]
                  |L73.86|
000056  bf00              NOP      
                  |L73.88|
;;;2845     }
;;;2846   
;;;2847     /* Disable the Peripheral */
;;;2848     __HAL_TIM_DISABLE(htim);
000058  bf00              NOP      
00005a  6820              LDR      r0,[r4,#0]
00005c  6a00              LDR      r0,[r0,#0x20]
00005e  f2411111          MOV      r1,#0x1111
000062  4008              ANDS     r0,r0,r1
000064  b950              CBNZ     r0,|L73.124|
000066  6820              LDR      r0,[r4,#0]
000068  6a00              LDR      r0,[r0,#0x20]
00006a  1089              ASRS     r1,r1,#2
00006c  4008              ANDS     r0,r0,r1
00006e  b928              CBNZ     r0,|L73.124|
000070  6820              LDR      r0,[r4,#0]
000072  6800              LDR      r0,[r0,#0]
000074  f0200001          BIC      r0,r0,#1
000078  6821              LDR      r1,[r4,#0]
00007a  6008              STR      r0,[r1,#0]
                  |L73.124|
00007c  bf00              NOP      
;;;2849   
;;;2850     /* Set the TIM channels state */
;;;2851     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
00007e  2001              MOVS     r0,#1
000080  f884003e          STRB     r0,[r4,#0x3e]
;;;2852     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000084  2101              MOVS     r1,#1
000086  203f              MOVS     r0,#0x3f
000088  5501              STRB     r1,[r0,r4]
;;;2853     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
00008a  2001              MOVS     r0,#1
00008c  f8840042          STRB     r0,[r4,#0x42]
;;;2854     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000090  2043              MOVS     r0,#0x43
000092  5501              STRB     r1,[r0,r4]
;;;2855   
;;;2856     /* Return function status */
;;;2857     return HAL_OK;
000094  2000              MOVS     r0,#0
;;;2858   }
000096  bd30              POP      {r4,r5,pc}
;;;2859   
                          ENDP

                  |L73.152|
                          DCD      0x40010000
                  |L73.156|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_OnePulse_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_OnePulse_Stop_IT PROC
;;;2932     */
;;;2933   HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b530              PUSH     {r4,r5,lr}
;;;2934   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2935     /* Prevent unused argument(s) compilation warning */
;;;2936     UNUSED(OutputChannel);
;;;2937   
;;;2938     /* Disable the TIM Capture/Compare 1 interrupt */
;;;2939     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000006  6820              LDR      r0,[r4,#0]
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f0200002          BIC      r0,r0,#2
00000e  6821              LDR      r1,[r4,#0]
000010  60c8              STR      r0,[r1,#0xc]
;;;2940   
;;;2941     /* Disable the TIM Capture/Compare 2 interrupt */
;;;2942     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000012  6820              LDR      r0,[r4,#0]
000014  68c0              LDR      r0,[r0,#0xc]
000016  f0200004          BIC      r0,r0,#4
00001a  6821              LDR      r1,[r4,#0]
00001c  60c8              STR      r0,[r1,#0xc]
;;;2943   
;;;2944     /* Disable the Capture compare and the Input Capture channels
;;;2945     (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
;;;2946     if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
;;;2947     if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
;;;2948     whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
;;;2949     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
00001e  2200              MOVS     r2,#0
000020  4611              MOV      r1,r2
000022  6820              LDR      r0,[r4,#0]
000024  f7fffffe          BL       TIM_CCxChannelCmd
;;;2950     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
000028  2200              MOVS     r2,#0
00002a  2104              MOVS     r1,#4
00002c  6820              LDR      r0,[r4,#0]
00002e  f7fffffe          BL       TIM_CCxChannelCmd
;;;2951   
;;;2952     if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
000032  491f              LDR      r1,|L74.176|
000034  6820              LDR      r0,[r4,#0]
000036  4288              CMP      r0,r1
000038  d003              BEQ      |L74.66|
00003a  491e              LDR      r1,|L74.180|
00003c  6820              LDR      r0,[r4,#0]
00003e  4288              CMP      r0,r1
000040  d101              BNE      |L74.70|
                  |L74.66|
000042  2001              MOVS     r0,#1
000044  e000              B        |L74.72|
                  |L74.70|
000046  2000              MOVS     r0,#0
                  |L74.72|
000048  b190              CBZ      r0,|L74.112|
;;;2953     {
;;;2954       /* Disable the Main Output */
;;;2955       __HAL_TIM_MOE_DISABLE(htim);
00004a  bf00              NOP      
00004c  6820              LDR      r0,[r4,#0]
00004e  6a00              LDR      r0,[r0,#0x20]
000050  f2411111          MOV      r1,#0x1111
000054  4008              ANDS     r0,r0,r1
000056  b950              CBNZ     r0,|L74.110|
000058  6820              LDR      r0,[r4,#0]
00005a  6a00              LDR      r0,[r0,#0x20]
00005c  1089              ASRS     r1,r1,#2
00005e  4008              ANDS     r0,r0,r1
000060  b928              CBNZ     r0,|L74.110|
000062  6820              LDR      r0,[r4,#0]
000064  6c40              LDR      r0,[r0,#0x44]
000066  f4204000          BIC      r0,r0,#0x8000
00006a  6821              LDR      r1,[r4,#0]
00006c  6448              STR      r0,[r1,#0x44]
                  |L74.110|
00006e  bf00              NOP      
                  |L74.112|
;;;2956     }
;;;2957   
;;;2958     /* Disable the Peripheral */
;;;2959     __HAL_TIM_DISABLE(htim);
000070  bf00              NOP      
000072  6820              LDR      r0,[r4,#0]
000074  6a00              LDR      r0,[r0,#0x20]
000076  f2411111          MOV      r1,#0x1111
00007a  4008              ANDS     r0,r0,r1
00007c  b950              CBNZ     r0,|L74.148|
00007e  6820              LDR      r0,[r4,#0]
000080  6a00              LDR      r0,[r0,#0x20]
000082  1089              ASRS     r1,r1,#2
000084  4008              ANDS     r0,r0,r1
000086  b928              CBNZ     r0,|L74.148|
000088  6820              LDR      r0,[r4,#0]
00008a  6800              LDR      r0,[r0,#0]
00008c  f0200001          BIC      r0,r0,#1
000090  6821              LDR      r1,[r4,#0]
000092  6008              STR      r0,[r1,#0]
                  |L74.148|
000094  bf00              NOP      
;;;2960   
;;;2961     /* Set the TIM channels state */
;;;2962     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000096  2001              MOVS     r0,#1
000098  f884003e          STRB     r0,[r4,#0x3e]
;;;2963     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
00009c  2101              MOVS     r1,#1
00009e  203f              MOVS     r0,#0x3f
0000a0  5501              STRB     r1,[r0,r4]
;;;2964     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
0000a2  2001              MOVS     r0,#1
0000a4  f8840042          STRB     r0,[r4,#0x42]
;;;2965     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
0000a8  2043              MOVS     r0,#0x43
0000aa  5501              STRB     r1,[r0,r4]
;;;2966   
;;;2967     /* Return function status */
;;;2968     return HAL_OK;
0000ac  2000              MOVS     r0,#0
;;;2969   }
0000ae  bd30              POP      {r4,r5,pc}
;;;2970   
                          ENDP

                  |L74.176|
                          DCD      0x40010000
                  |L74.180|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_PWM_ConfigChannel||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_ConfigChannel PROC
;;;4207     */
;;;4208   HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4209                                               TIM_OC_InitTypeDef *sConfig,
;;;4210                                               uint32_t Channel)
;;;4211   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;4212     HAL_StatusTypeDef status = HAL_OK;
00000a  2700              MOVS     r7,#0
;;;4213   
;;;4214     /* Check the parameters */
;;;4215     assert_param(IS_TIM_CHANNELS(Channel));
;;;4216     assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
;;;4217     assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
;;;4218     assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
;;;4219   
;;;4220     /* Process Locked */
;;;4221     __HAL_LOCK(htim);
00000c  bf00              NOP      
00000e  f894003c          LDRB     r0,[r4,#0x3c]
000012  2801              CMP      r0,#1
000014  d102              BNE      |L75.28|
000016  2002              MOVS     r0,#2
                  |L75.24|
;;;4222   
;;;4223     switch (Channel)
;;;4224     {
;;;4225       case TIM_CHANNEL_1:
;;;4226       {
;;;4227         /* Check the parameters */
;;;4228         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;4229   
;;;4230         /* Configure the Channel 1 in PWM mode */
;;;4231         TIM_OC1_SetConfig(htim->Instance, sConfig);
;;;4232   
;;;4233         /* Set the Preload enable bit for channel1 */
;;;4234         htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
;;;4235   
;;;4236         /* Configure the Output Fast mode */
;;;4237         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
;;;4238         htim->Instance->CCMR1 |= sConfig->OCFastMode;
;;;4239         break;
;;;4240       }
;;;4241   
;;;4242       case TIM_CHANNEL_2:
;;;4243       {
;;;4244         /* Check the parameters */
;;;4245         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;4246   
;;;4247         /* Configure the Channel 2 in PWM mode */
;;;4248         TIM_OC2_SetConfig(htim->Instance, sConfig);
;;;4249   
;;;4250         /* Set the Preload enable bit for channel2 */
;;;4251         htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
;;;4252   
;;;4253         /* Configure the Output Fast mode */
;;;4254         htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
;;;4255         htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
;;;4256         break;
;;;4257       }
;;;4258   
;;;4259       case TIM_CHANNEL_3:
;;;4260       {
;;;4261         /* Check the parameters */
;;;4262         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;4263   
;;;4264         /* Configure the Channel 3 in PWM mode */
;;;4265         TIM_OC3_SetConfig(htim->Instance, sConfig);
;;;4266   
;;;4267         /* Set the Preload enable bit for channel3 */
;;;4268         htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
;;;4269   
;;;4270         /* Configure the Output Fast mode */
;;;4271         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
;;;4272         htim->Instance->CCMR2 |= sConfig->OCFastMode;
;;;4273         break;
;;;4274       }
;;;4275   
;;;4276       case TIM_CHANNEL_4:
;;;4277       {
;;;4278         /* Check the parameters */
;;;4279         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;4280   
;;;4281         /* Configure the Channel 4 in PWM mode */
;;;4282         TIM_OC4_SetConfig(htim->Instance, sConfig);
;;;4283   
;;;4284         /* Set the Preload enable bit for channel4 */
;;;4285         htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
;;;4286   
;;;4287         /* Configure the Output Fast mode */
;;;4288         htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
;;;4289         htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
;;;4290         break;
;;;4291       }
;;;4292   
;;;4293       default:
;;;4294         status = HAL_ERROR;
;;;4295         break;
;;;4296     }
;;;4297   
;;;4298     __HAL_UNLOCK(htim);
;;;4299   
;;;4300     return status;
;;;4301   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L75.28|
00001c  2001              MOVS     r0,#1                 ;4221
00001e  f884003c          STRB     r0,[r4,#0x3c]         ;4221
000022  bf00              NOP                            ;4221
000024  b136              CBZ      r6,|L75.52|
000026  2e04              CMP      r6,#4                 ;4223
000028  d01b              BEQ      |L75.98|
00002a  2e08              CMP      r6,#8                 ;4223
00002c  d031              BEQ      |L75.146|
00002e  2e0c              CMP      r6,#0xc               ;4223
000030  d15e              BNE      |L75.240|
000032  e045              B        |L75.192|
                  |L75.52|
000034  4629              MOV      r1,r5                 ;4231
000036  6820              LDR      r0,[r4,#0]            ;4231
000038  f7fffffe          BL       TIM_OC1_SetConfig
00003c  6820              LDR      r0,[r4,#0]            ;4234
00003e  6980              LDR      r0,[r0,#0x18]         ;4234
000040  f0400008          ORR      r0,r0,#8              ;4234
000044  6821              LDR      r1,[r4,#0]            ;4234
000046  6188              STR      r0,[r1,#0x18]         ;4234
000048  6820              LDR      r0,[r4,#0]            ;4237
00004a  6980              LDR      r0,[r0,#0x18]         ;4237
00004c  f0200004          BIC      r0,r0,#4              ;4237
000050  6821              LDR      r1,[r4,#0]            ;4237
000052  6188              STR      r0,[r1,#0x18]         ;4237
000054  6820              LDR      r0,[r4,#0]            ;4238
000056  6980              LDR      r0,[r0,#0x18]         ;4238
000058  6929              LDR      r1,[r5,#0x10]         ;4238
00005a  4308              ORRS     r0,r0,r1              ;4238
00005c  6821              LDR      r1,[r4,#0]            ;4238
00005e  6188              STR      r0,[r1,#0x18]         ;4238
000060  e048              B        |L75.244|
                  |L75.98|
000062  4629              MOV      r1,r5                 ;4248
000064  6820              LDR      r0,[r4,#0]            ;4248
000066  f7fffffe          BL       TIM_OC2_SetConfig
00006a  6820              LDR      r0,[r4,#0]            ;4251
00006c  6980              LDR      r0,[r0,#0x18]         ;4251
00006e  f4406000          ORR      r0,r0,#0x800          ;4251
000072  6821              LDR      r1,[r4,#0]            ;4251
000074  6188              STR      r0,[r1,#0x18]         ;4251
000076  6820              LDR      r0,[r4,#0]            ;4254
000078  6980              LDR      r0,[r0,#0x18]         ;4254
00007a  f4206080          BIC      r0,r0,#0x400          ;4254
00007e  6821              LDR      r1,[r4,#0]            ;4254
000080  6188              STR      r0,[r1,#0x18]         ;4254
000082  6820              LDR      r0,[r4,#0]            ;4255
000084  6980              LDR      r0,[r0,#0x18]         ;4255
000086  6929              LDR      r1,[r5,#0x10]         ;4255
000088  ea402001          ORR      r0,r0,r1,LSL #8       ;4255
00008c  6821              LDR      r1,[r4,#0]            ;4255
00008e  6188              STR      r0,[r1,#0x18]         ;4255
000090  e030              B        |L75.244|
                  |L75.146|
000092  4629              MOV      r1,r5                 ;4265
000094  6820              LDR      r0,[r4,#0]            ;4265
000096  f7fffffe          BL       TIM_OC3_SetConfig
00009a  6820              LDR      r0,[r4,#0]            ;4268
00009c  69c0              LDR      r0,[r0,#0x1c]         ;4268
00009e  f0400008          ORR      r0,r0,#8              ;4268
0000a2  6821              LDR      r1,[r4,#0]            ;4268
0000a4  61c8              STR      r0,[r1,#0x1c]         ;4268
0000a6  6820              LDR      r0,[r4,#0]            ;4271
0000a8  69c0              LDR      r0,[r0,#0x1c]         ;4271
0000aa  f0200004          BIC      r0,r0,#4              ;4271
0000ae  6821              LDR      r1,[r4,#0]            ;4271
0000b0  61c8              STR      r0,[r1,#0x1c]         ;4271
0000b2  6820              LDR      r0,[r4,#0]            ;4272
0000b4  69c0              LDR      r0,[r0,#0x1c]         ;4272
0000b6  6929              LDR      r1,[r5,#0x10]         ;4272
0000b8  4308              ORRS     r0,r0,r1              ;4272
0000ba  6821              LDR      r1,[r4,#0]            ;4272
0000bc  61c8              STR      r0,[r1,#0x1c]         ;4272
0000be  e019              B        |L75.244|
                  |L75.192|
0000c0  4629              MOV      r1,r5                 ;4282
0000c2  6820              LDR      r0,[r4,#0]            ;4282
0000c4  f7fffffe          BL       TIM_OC4_SetConfig
0000c8  6820              LDR      r0,[r4,#0]            ;4285
0000ca  69c0              LDR      r0,[r0,#0x1c]         ;4285
0000cc  f4406000          ORR      r0,r0,#0x800          ;4285
0000d0  6821              LDR      r1,[r4,#0]            ;4285
0000d2  61c8              STR      r0,[r1,#0x1c]         ;4285
0000d4  6820              LDR      r0,[r4,#0]            ;4288
0000d6  69c0              LDR      r0,[r0,#0x1c]         ;4288
0000d8  f4206080          BIC      r0,r0,#0x400          ;4288
0000dc  6821              LDR      r1,[r4,#0]            ;4288
0000de  61c8              STR      r0,[r1,#0x1c]         ;4288
0000e0  6820              LDR      r0,[r4,#0]            ;4289
0000e2  69c0              LDR      r0,[r0,#0x1c]         ;4289
0000e4  6929              LDR      r1,[r5,#0x10]         ;4289
0000e6  ea402001          ORR      r0,r0,r1,LSL #8       ;4289
0000ea  6821              LDR      r1,[r4,#0]            ;4289
0000ec  61c8              STR      r0,[r1,#0x1c]         ;4289
0000ee  e001              B        |L75.244|
                  |L75.240|
0000f0  2701              MOVS     r7,#1                 ;4294
0000f2  bf00              NOP                            ;4295
                  |L75.244|
0000f4  bf00              NOP                            ;4239
0000f6  bf00              NOP                            ;4298
0000f8  2000              MOVS     r0,#0                 ;4298
0000fa  f884003c          STRB     r0,[r4,#0x3c]         ;4298
0000fe  bf00              NOP                            ;4298
000100  4638              MOV      r0,r7                 ;4300
000102  e789              B        |L75.24|
;;;4302   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_DeInit PROC
;;;1370     */
;;;1371   HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;1372   {
000002  4604              MOV      r4,r0
;;;1373     /* Check the parameters */
;;;1374     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1375   
;;;1376     htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  f884003d          STRB     r0,[r4,#0x3d]
;;;1377   
;;;1378     /* Disable the TIM Peripheral Clock */
;;;1379     __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f2411111          MOV      r1,#0x1111
000014  4008              ANDS     r0,r0,r1
000016  b950              CBNZ     r0,|L76.46|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  b928              CBNZ     r0,|L76.46|
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
                  |L76.46|
00002e  bf00              NOP      
;;;1380   
;;;1381   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;1382     if (htim->PWM_MspDeInitCallback == NULL)
;;;1383     {
;;;1384       htim->PWM_MspDeInitCallback = HAL_TIM_PWM_MspDeInit;
;;;1385     }
;;;1386     /* DeInit the low level hardware */
;;;1387     htim->PWM_MspDeInitCallback(htim);
;;;1388   #else
;;;1389     /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
;;;1390     HAL_TIM_PWM_MspDeInit(htim);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_TIM_PWM_MspDeInit
;;;1391   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;1392   
;;;1393     /* Change the DMA burst operation state */
;;;1394     htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
000036  2000              MOVS     r0,#0
000038  f8840046          STRB     r0,[r4,#0x46]
;;;1395   
;;;1396     /* Change the TIM channels state */
;;;1397     TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
00003c  bf00              NOP      
00003e  f884003e          STRB     r0,[r4,#0x3e]
000042  2100              MOVS     r1,#0
000044  203f              MOVS     r0,#0x3f
000046  5501              STRB     r1,[r0,r4]
000048  2040              MOVS     r0,#0x40
00004a  5501              STRB     r1,[r0,r4]
00004c  2041              MOVS     r0,#0x41
00004e  5501              STRB     r1,[r0,r4]
000050  bf00              NOP      
;;;1398     TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
000052  bf00              NOP      
000054  2000              MOVS     r0,#0
000056  f8840042          STRB     r0,[r4,#0x42]
00005a  2043              MOVS     r0,#0x43
00005c  5501              STRB     r1,[r0,r4]
00005e  2044              MOVS     r0,#0x44
000060  5501              STRB     r1,[r0,r4]
000062  2045              MOVS     r0,#0x45
000064  5501              STRB     r1,[r0,r4]
000066  bf00              NOP      
;;;1399   
;;;1400     /* Change TIM state */
;;;1401     htim->State = HAL_TIM_STATE_RESET;
000068  2000              MOVS     r0,#0
00006a  f884003d          STRB     r0,[r4,#0x3d]
;;;1402   
;;;1403     /* Release Lock */
;;;1404     __HAL_UNLOCK(htim);
00006e  bf00              NOP      
000070  f884003c          STRB     r0,[r4,#0x3c]
000074  bf00              NOP      
;;;1405   
;;;1406     return HAL_OK;
;;;1407   }
000076  bd10              POP      {r4,pc}
;;;1408   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_GetState PROC
;;;6357     */
;;;6358   HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;6359   {
;;;6360     return htim->State;
000002  f891003d          LDRB     r0,[r1,#0x3d]
;;;6361   }
000006  4770              BX       lr
;;;6362   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_Init PROC
;;;1311     */
;;;1312   HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;1313   {
000002  4604              MOV      r4,r0
;;;1314     /* Check the TIM handle allocation */
;;;1315     if (htim == NULL)
000004  b90c              CBNZ     r4,|L78.10|
;;;1316     {
;;;1317       return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L78.8|
;;;1318     }
;;;1319   
;;;1320     /* Check the parameters */
;;;1321     assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;1322     assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;1323     assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;1324     assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;1325   
;;;1326     if (htim->State == HAL_TIM_STATE_RESET)
;;;1327     {
;;;1328       /* Allocate lock resource and initialize it */
;;;1329       htim->Lock = HAL_UNLOCKED;
;;;1330   
;;;1331   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;1332       /* Reset interrupt callbacks to legacy weak callbacks */
;;;1333       TIM_ResetCallback(htim);
;;;1334   
;;;1335       if (htim->PWM_MspInitCallback == NULL)
;;;1336       {
;;;1337         htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
;;;1338       }
;;;1339       /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;1340       htim->PWM_MspInitCallback(htim);
;;;1341   #else
;;;1342       /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;1343       HAL_TIM_PWM_MspInit(htim);
;;;1344   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;1345     }
;;;1346   
;;;1347     /* Set the TIM state */
;;;1348     htim->State = HAL_TIM_STATE_BUSY;
;;;1349   
;;;1350     /* Init the base time for the PWM */
;;;1351     TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;1352   
;;;1353     /* Initialize the DMA burst operation state */
;;;1354     htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
;;;1355   
;;;1356     /* Initialize the TIM channels state */
;;;1357     TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
;;;1358     TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
;;;1359   
;;;1360     /* Initialize the TIM state*/
;;;1361     htim->State = HAL_TIM_STATE_READY;
;;;1362   
;;;1363     return HAL_OK;
;;;1364   }
000008  bd10              POP      {r4,pc}
                  |L78.10|
00000a  f894003d          LDRB     r0,[r4,#0x3d]         ;1326
00000e  b928              CBNZ     r0,|L78.28|
000010  2000              MOVS     r0,#0                 ;1329
000012  f884003c          STRB     r0,[r4,#0x3c]         ;1329
000016  4620              MOV      r0,r4                 ;1343
000018  f7fffffe          BL       HAL_TIM_PWM_MspInit
                  |L78.28|
00001c  2002              MOVS     r0,#2                 ;1348
00001e  f884003d          STRB     r0,[r4,#0x3d]         ;1348
000022  1d21              ADDS     r1,r4,#4              ;1351
000024  6820              LDR      r0,[r4,#0]            ;1351
000026  f7fffffe          BL       TIM_Base_SetConfig
00002a  2001              MOVS     r0,#1                 ;1354
00002c  f8840046          STRB     r0,[r4,#0x46]         ;1354
000030  bf00              NOP                            ;1357
000032  f884003e          STRB     r0,[r4,#0x3e]         ;1357
000036  2101              MOVS     r1,#1                 ;1357
000038  203f              MOVS     r0,#0x3f              ;1357
00003a  5501              STRB     r1,[r0,r4]            ;1357
00003c  2040              MOVS     r0,#0x40              ;1357
00003e  5501              STRB     r1,[r0,r4]            ;1357
000040  2041              MOVS     r0,#0x41              ;1357
000042  5501              STRB     r1,[r0,r4]            ;1357
000044  bf00              NOP                            ;1357
000046  bf00              NOP                            ;1358
000048  2001              MOVS     r0,#1                 ;1358
00004a  f8840042          STRB     r0,[r4,#0x42]         ;1358
00004e  2043              MOVS     r0,#0x43              ;1358
000050  5501              STRB     r1,[r0,r4]            ;1358
000052  2044              MOVS     r0,#0x44              ;1358
000054  5501              STRB     r1,[r0,r4]            ;1358
000056  2045              MOVS     r0,#0x45              ;1358
000058  5501              STRB     r1,[r0,r4]            ;1358
00005a  bf00              NOP                            ;1358
00005c  2001              MOVS     r0,#1                 ;1361
00005e  f884003d          STRB     r0,[r4,#0x3d]         ;1361
000062  2000              MOVS     r0,#0                 ;1363
000064  e7d0              B        |L78.8|
;;;1365   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_MspDeInit PROC
;;;1428     */
;;;1429   __weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1430   {
;;;1431     /* Prevent unused argument(s) compilation warning */
;;;1432     UNUSED(htim);
;;;1433   
;;;1434     /* NOTE : This function should not be modified, when the callback is needed,
;;;1435               the HAL_TIM_PWM_MspDeInit could be implemented in the user file
;;;1436      */
;;;1437   }
;;;1438   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_MspInit PROC
;;;1413     */
;;;1414   __weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;1415   {
;;;1416     /* Prevent unused argument(s) compilation warning */
;;;1417     UNUSED(htim);
;;;1418   
;;;1419     /* NOTE : This function should not be modified, when the callback is needed,
;;;1420               the HAL_TIM_PWM_MspInit could be implemented in the user file
;;;1421      */
;;;1422   }
;;;1423   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_PulseFinishedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_PulseFinishedCallback PROC
;;;5719     */
;;;5720   __weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5721   {
;;;5722     /* Prevent unused argument(s) compilation warning */
;;;5723     UNUSED(htim);
;;;5724   
;;;5725     /* NOTE : This function should not be modified, when the callback is needed,
;;;5726               the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
;;;5727      */
;;;5728   }
;;;5729   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_PulseFinishedHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PWM_PulseFinishedHalfCpltCallback PROC
;;;5734     */
;;;5735   __weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5736   {
;;;5737     /* Prevent unused argument(s) compilation warning */
;;;5738     UNUSED(htim);
;;;5739   
;;;5740     /* NOTE : This function should not be modified, when the callback is needed,
;;;5741               the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
;;;5742      */
;;;5743   }
;;;5744   
                          ENDP


                          AREA ||i.HAL_TIM_PWM_Start||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Start PROC
;;;1449     */
;;;1450   HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1451   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1452     uint32_t tmpsmcr;
;;;1453   
;;;1454     /* Check the parameters */
;;;1455     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1456   
;;;1457     /* Check the TIM channel state */
;;;1458     if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
000006  b915              CBNZ     r5,|L83.14|
000008  f894003e          LDRB     r0,[r4,#0x3e]
00000c  e00b              B        |L83.38|
                  |L83.14|
00000e  2d04              CMP      r5,#4
000010  d102              BNE      |L83.24|
000012  203f              MOVS     r0,#0x3f
000014  5d00              LDRB     r0,[r0,r4]
000016  e006              B        |L83.38|
                  |L83.24|
000018  2d08              CMP      r5,#8
00001a  d102              BNE      |L83.34|
00001c  2040              MOVS     r0,#0x40
00001e  5d00              LDRB     r0,[r0,r4]
000020  e001              B        |L83.38|
                  |L83.34|
000022  2041              MOVS     r0,#0x41
000024  5d00              LDRB     r0,[r0,r4]
                  |L83.38|
000026  2801              CMP      r0,#1
000028  d001              BEQ      |L83.46|
;;;1459     {
;;;1460       return HAL_ERROR;
00002a  2001              MOVS     r0,#1
                  |L83.44|
;;;1461     }
;;;1462   
;;;1463     /* Set the TIM channel state */
;;;1464     TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1465   
;;;1466     /* Enable the Capture compare channel */
;;;1467     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1468   
;;;1469     if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
;;;1470     {
;;;1471       /* Enable the main output */
;;;1472       __HAL_TIM_MOE_ENABLE(htim);
;;;1473     }
;;;1474   
;;;1475     /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;1476     if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;1477     {
;;;1478       tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;1479       if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;1480       {
;;;1481         __HAL_TIM_ENABLE(htim);
;;;1482       }
;;;1483     }
;;;1484     else
;;;1485     {
;;;1486       __HAL_TIM_ENABLE(htim);
;;;1487     }
;;;1488   
;;;1489     /* Return function status */
;;;1490     return HAL_OK;
;;;1491   }
00002c  bd70              POP      {r4-r6,pc}
                  |L83.46|
00002e  b91d              CBNZ     r5,|L83.56|
000030  2002              MOVS     r0,#2                 ;1464
000032  f884003e          STRB     r0,[r4,#0x3e]         ;1464
000036  e00e              B        |L83.86|
                  |L83.56|
000038  2d04              CMP      r5,#4                 ;1464
00003a  d103              BNE      |L83.68|
00003c  2102              MOVS     r1,#2                 ;1464
00003e  203f              MOVS     r0,#0x3f              ;1464
000040  5501              STRB     r1,[r0,r4]            ;1464
000042  e008              B        |L83.86|
                  |L83.68|
000044  2d08              CMP      r5,#8                 ;1464
000046  d103              BNE      |L83.80|
000048  2102              MOVS     r1,#2                 ;1464
00004a  2040              MOVS     r0,#0x40              ;1464
00004c  5501              STRB     r1,[r0,r4]            ;1464
00004e  e002              B        |L83.86|
                  |L83.80|
000050  2102              MOVS     r1,#2                 ;1464
000052  2041              MOVS     r0,#0x41              ;1464
000054  5501              STRB     r1,[r0,r4]            ;1464
                  |L83.86|
000056  2201              MOVS     r2,#1                 ;1467
000058  4629              MOV      r1,r5                 ;1467
00005a  6820              LDR      r0,[r4,#0]            ;1467
00005c  f7fffffe          BL       TIM_CCxChannelCmd
000060  4923              LDR      r1,|L83.240|
000062  6820              LDR      r0,[r4,#0]            ;1469
000064  4288              CMP      r0,r1                 ;1469
000066  d003              BEQ      |L83.112|
000068  4922              LDR      r1,|L83.244|
00006a  6820              LDR      r0,[r4,#0]            ;1469
00006c  4288              CMP      r0,r1                 ;1469
00006e  d101              BNE      |L83.116|
                  |L83.112|
000070  2001              MOVS     r0,#1                 ;1469
000072  e000              B        |L83.118|
                  |L83.116|
000074  2000              MOVS     r0,#0                 ;1469
                  |L83.118|
000076  b128              CBZ      r0,|L83.132|
000078  6820              LDR      r0,[r4,#0]            ;1472
00007a  6c40              LDR      r0,[r0,#0x44]         ;1472
00007c  f4404000          ORR      r0,r0,#0x8000         ;1472
000080  6821              LDR      r1,[r4,#0]            ;1472
000082  6448              STR      r0,[r1,#0x44]         ;1472
                  |L83.132|
000084  491a              LDR      r1,|L83.240|
000086  6820              LDR      r0,[r4,#0]            ;1476
000088  4288              CMP      r0,r1                 ;1476
00008a  d01b              BEQ      |L83.196|
00008c  6820              LDR      r0,[r4,#0]            ;1476
00008e  f1b04f80          CMP      r0,#0x40000000        ;1476
000092  d017              BEQ      |L83.196|
000094  4918              LDR      r1,|L83.248|
000096  6820              LDR      r0,[r4,#0]            ;1476
000098  4288              CMP      r0,r1                 ;1476
00009a  d013              BEQ      |L83.196|
00009c  4917              LDR      r1,|L83.252|
00009e  6820              LDR      r0,[r4,#0]            ;1476
0000a0  4288              CMP      r0,r1                 ;1476
0000a2  d00f              BEQ      |L83.196|
0000a4  4916              LDR      r1,|L83.256|
0000a6  6820              LDR      r0,[r4,#0]            ;1476
0000a8  4288              CMP      r0,r1                 ;1476
0000aa  d00b              BEQ      |L83.196|
0000ac  4911              LDR      r1,|L83.244|
0000ae  6820              LDR      r0,[r4,#0]            ;1476
0000b0  4288              CMP      r0,r1                 ;1476
0000b2  d007              BEQ      |L83.196|
0000b4  4913              LDR      r1,|L83.260|
0000b6  6820              LDR      r0,[r4,#0]            ;1476
0000b8  4288              CMP      r0,r1                 ;1476
0000ba  d003              BEQ      |L83.196|
0000bc  4912              LDR      r1,|L83.264|
0000be  6820              LDR      r0,[r4,#0]            ;1476
0000c0  4288              CMP      r0,r1                 ;1476
0000c2  d10c              BNE      |L83.222|
                  |L83.196|
0000c4  6820              LDR      r0,[r4,#0]            ;1478
0000c6  6880              LDR      r0,[r0,#8]            ;1478
0000c8  f0000607          AND      r6,r0,#7              ;1478
0000cc  2e06              CMP      r6,#6                 ;1479
0000ce  d00c              BEQ      |L83.234|
0000d0  6820              LDR      r0,[r4,#0]            ;1481
0000d2  6800              LDR      r0,[r0,#0]            ;1481
0000d4  f0400001          ORR      r0,r0,#1              ;1481
0000d8  6821              LDR      r1,[r4,#0]            ;1481
0000da  6008              STR      r0,[r1,#0]            ;1481
0000dc  e005              B        |L83.234|
                  |L83.222|
0000de  6820              LDR      r0,[r4,#0]            ;1486
0000e0  6800              LDR      r0,[r0,#0]            ;1486
0000e2  f0400001          ORR      r0,r0,#1              ;1486
0000e6  6821              LDR      r1,[r4,#0]            ;1486
0000e8  6008              STR      r0,[r1,#0]            ;1486
                  |L83.234|
0000ea  2000              MOVS     r0,#0                 ;1490
0000ec  e79e              B        |L83.44|
;;;1492   
                          ENDP

0000ee  0000              DCW      0x0000
                  |L83.240|
                          DCD      0x40010000
                  |L83.244|
                          DCD      0x40010400
                  |L83.248|
                          DCD      0x40000400
                  |L83.252|
                          DCD      0x40000800
                  |L83.256|
                          DCD      0x40000c00
                  |L83.260|
                          DCD      0x40014000
                  |L83.264|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_PWM_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Start_DMA PROC
;;;1708     */
;;;1709   HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1710   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1711     HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;1712     uint32_t tmpsmcr;
;;;1713   
;;;1714     /* Check the parameters */
;;;1715     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1716   
;;;1717     /* Set the TIM channel state */
;;;1718     if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
000010  b915              CBNZ     r5,|L84.24|
000012  f894003e          LDRB     r0,[r4,#0x3e]
000016  e00b              B        |L84.48|
                  |L84.24|
000018  2d04              CMP      r5,#4
00001a  d102              BNE      |L84.34|
00001c  203f              MOVS     r0,#0x3f
00001e  5d00              LDRB     r0,[r0,r4]
000020  e006              B        |L84.48|
                  |L84.34|
000022  2d08              CMP      r5,#8
000024  d102              BNE      |L84.44|
000026  2040              MOVS     r0,#0x40
000028  5d00              LDRB     r0,[r0,r4]
00002a  e001              B        |L84.48|
                  |L84.44|
00002c  2041              MOVS     r0,#0x41
00002e  5d00              LDRB     r0,[r0,r4]
                  |L84.48|
000030  2802              CMP      r0,#2
000032  d101              BNE      |L84.56|
                  |L84.52|
;;;1719     {
;;;1720       return HAL_BUSY;
;;;1721     }
;;;1722     else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
;;;1723     {
;;;1724       if ((pData == NULL) && (Length > 0U))
;;;1725       {
;;;1726         return HAL_ERROR;
;;;1727       }
;;;1728       else
;;;1729       {
;;;1730         TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1731       }
;;;1732     }
;;;1733     else
;;;1734     {
;;;1735       return HAL_ERROR;
;;;1736     }
;;;1737   
;;;1738     switch (Channel)
;;;1739     {
;;;1740       case TIM_CHANNEL_1:
;;;1741       {
;;;1742         /* Set the DMA compare callbacks */
;;;1743         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1744         htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1745   
;;;1746         /* Set the DMA error callback */
;;;1747         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;1748   
;;;1749         /* Enable the DMA stream */
;;;1750         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
;;;1751                              Length) != HAL_OK)
;;;1752         {
;;;1753           /* Return error status */
;;;1754           return HAL_ERROR;
;;;1755         }
;;;1756   
;;;1757         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1758         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1759         break;
;;;1760       }
;;;1761   
;;;1762       case TIM_CHANNEL_2:
;;;1763       {
;;;1764         /* Set the DMA compare callbacks */
;;;1765         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1766         htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1767   
;;;1768         /* Set the DMA error callback */
;;;1769         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
;;;1770   
;;;1771         /* Enable the DMA stream */
;;;1772         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
;;;1773                              Length) != HAL_OK)
;;;1774         {
;;;1775           /* Return error status */
;;;1776           return HAL_ERROR;
;;;1777         }
;;;1778         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1779         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1780         break;
;;;1781       }
;;;1782   
;;;1783       case TIM_CHANNEL_3:
;;;1784       {
;;;1785         /* Set the DMA compare callbacks */
;;;1786         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1787         htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1788   
;;;1789         /* Set the DMA error callback */
;;;1790         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
;;;1791   
;;;1792         /* Enable the DMA stream */
;;;1793         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
;;;1794                              Length) != HAL_OK)
;;;1795         {
;;;1796           /* Return error status */
;;;1797           return HAL_ERROR;
;;;1798         }
;;;1799         /* Enable the TIM Output Capture/Compare 3 request */
;;;1800         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1801         break;
;;;1802       }
;;;1803   
;;;1804       case TIM_CHANNEL_4:
;;;1805       {
;;;1806         /* Set the DMA compare callbacks */
;;;1807         htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
;;;1808         htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1809   
;;;1810         /* Set the DMA error callback */
;;;1811         htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
;;;1812   
;;;1813         /* Enable the DMA stream */
;;;1814         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
;;;1815                              Length) != HAL_OK)
;;;1816         {
;;;1817           /* Return error status */
;;;1818           return HAL_ERROR;
;;;1819         }
;;;1820         /* Enable the TIM Capture/Compare 4 DMA request */
;;;1821         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
;;;1822         break;
;;;1823       }
;;;1824   
;;;1825       default:
;;;1826         status = HAL_ERROR;
;;;1827         break;
;;;1828     }
;;;1829   
;;;1830     if (status == HAL_OK)
;;;1831     {
;;;1832       /* Enable the Capture compare channel */
;;;1833       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1834   
;;;1835       if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
;;;1836       {
;;;1837         /* Enable the main output */
;;;1838         __HAL_TIM_MOE_ENABLE(htim);
;;;1839       }
;;;1840   
;;;1841       /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;1842       if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;1843       {
;;;1844         tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;1845         if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;1846         {
;;;1847           __HAL_TIM_ENABLE(htim);
;;;1848         }
;;;1849       }
;;;1850       else
;;;1851       {
;;;1852         __HAL_TIM_ENABLE(htim);
;;;1853       }
;;;1854     }
;;;1855   
;;;1856     /* Return function status */
;;;1857     return status;
;;;1858   }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L84.56|
000038  b915              CBNZ     r5,|L84.64|
00003a  f894003e          LDRB     r0,[r4,#0x3e]         ;1722
00003e  e00b              B        |L84.88|
                  |L84.64|
000040  2d04              CMP      r5,#4                 ;1722
000042  d102              BNE      |L84.74|
000044  203f              MOVS     r0,#0x3f              ;1722
000046  5d00              LDRB     r0,[r0,r4]            ;1722
000048  e006              B        |L84.88|
                  |L84.74|
00004a  2d08              CMP      r5,#8                 ;1722
00004c  d102              BNE      |L84.84|
00004e  2040              MOVS     r0,#0x40              ;1722
000050  5d00              LDRB     r0,[r0,r4]            ;1722
000052  e001              B        |L84.88|
                  |L84.84|
000054  2041              MOVS     r0,#0x41              ;1722
000056  5d00              LDRB     r0,[r0,r4]            ;1722
                  |L84.88|
000058  2801              CMP      r0,#1                 ;1722
00005a  d117              BNE      |L84.140|
00005c  b90e              CBNZ     r6,|L84.98|
00005e  b107              CBZ      r7,|L84.98|
000060  e7e8              B        |L84.52|
                  |L84.98|
000062  b91d              CBNZ     r5,|L84.108|
000064  2002              MOVS     r0,#2                 ;1730
000066  f884003e          STRB     r0,[r4,#0x3e]         ;1730
00006a  e011              B        |L84.144|
                  |L84.108|
00006c  2d04              CMP      r5,#4                 ;1730
00006e  d103              BNE      |L84.120|
000070  2102              MOVS     r1,#2                 ;1730
000072  203f              MOVS     r0,#0x3f              ;1730
000074  5501              STRB     r1,[r0,r4]            ;1730
000076  e00b              B        |L84.144|
                  |L84.120|
000078  2d08              CMP      r5,#8                 ;1730
00007a  d103              BNE      |L84.132|
00007c  2102              MOVS     r1,#2                 ;1730
00007e  2040              MOVS     r0,#0x40              ;1730
000080  5501              STRB     r1,[r0,r4]            ;1730
000082  e005              B        |L84.144|
                  |L84.132|
000084  2102              MOVS     r1,#2                 ;1730
000086  2041              MOVS     r0,#0x41              ;1730
000088  5501              STRB     r1,[r0,r4]            ;1730
00008a  e001              B        |L84.144|
                  |L84.140|
00008c  2001              MOVS     r0,#1                 ;1735
00008e  e7d1              B        |L84.52|
                  |L84.144|
000090  b135              CBZ      r5,|L84.160|
000092  2d04              CMP      r5,#4                 ;1738
000094  d01f              BEQ      |L84.214|
000096  2d08              CMP      r5,#8                 ;1738
000098  d038              BEQ      |L84.268|
00009a  2d0c              CMP      r5,#0xc               ;1738
00009c  d16c              BNE      |L84.376|
00009e  e050              B        |L84.322|
                  |L84.160|
0000a0  495f              LDR      r1,|L84.544|
0000a2  6a60              LDR      r0,[r4,#0x24]         ;1743
0000a4  63c1              STR      r1,[r0,#0x3c]         ;1743
0000a6  495f              LDR      r1,|L84.548|
0000a8  6a60              LDR      r0,[r4,#0x24]         ;1744
0000aa  6401              STR      r1,[r0,#0x40]         ;1744
0000ac  495e              LDR      r1,|L84.552|
0000ae  6a60              LDR      r0,[r4,#0x24]         ;1747
0000b0  64c1              STR      r1,[r0,#0x4c]         ;1747
0000b2  6821              LDR      r1,[r4,#0]            ;1750
0000b4  f1010234          ADD      r2,r1,#0x34           ;1750
0000b8  463b              MOV      r3,r7                 ;1750
0000ba  4631              MOV      r1,r6                 ;1750
0000bc  6a60              LDR      r0,[r4,#0x24]         ;1750
0000be  f7fffffe          BL       HAL_DMA_Start_IT
0000c2  b108              CBZ      r0,|L84.200|
0000c4  2001              MOVS     r0,#1                 ;1754
0000c6  e7b5              B        |L84.52|
                  |L84.200|
0000c8  6820              LDR      r0,[r4,#0]            ;1758
0000ca  68c0              LDR      r0,[r0,#0xc]          ;1758
0000cc  f4407000          ORR      r0,r0,#0x200          ;1758
0000d0  6821              LDR      r1,[r4,#0]            ;1758
0000d2  60c8              STR      r0,[r1,#0xc]          ;1758
0000d4  e053              B        |L84.382|
                  |L84.214|
0000d6  4952              LDR      r1,|L84.544|
0000d8  6aa0              LDR      r0,[r4,#0x28]         ;1765
0000da  63c1              STR      r1,[r0,#0x3c]         ;1765
0000dc  4951              LDR      r1,|L84.548|
0000de  6aa0              LDR      r0,[r4,#0x28]         ;1766
0000e0  6401              STR      r1,[r0,#0x40]         ;1766
0000e2  4951              LDR      r1,|L84.552|
0000e4  6aa0              LDR      r0,[r4,#0x28]         ;1769
0000e6  64c1              STR      r1,[r0,#0x4c]         ;1769
0000e8  6821              LDR      r1,[r4,#0]            ;1772
0000ea  f1010238          ADD      r2,r1,#0x38           ;1772
0000ee  463b              MOV      r3,r7                 ;1772
0000f0  4631              MOV      r1,r6                 ;1772
0000f2  6aa0              LDR      r0,[r4,#0x28]         ;1772
0000f4  f7fffffe          BL       HAL_DMA_Start_IT
0000f8  b108              CBZ      r0,|L84.254|
0000fa  2001              MOVS     r0,#1                 ;1776
0000fc  e79a              B        |L84.52|
                  |L84.254|
0000fe  6820              LDR      r0,[r4,#0]            ;1779
000100  68c0              LDR      r0,[r0,#0xc]          ;1779
000102  f4406080          ORR      r0,r0,#0x400          ;1779
000106  6821              LDR      r1,[r4,#0]            ;1779
000108  60c8              STR      r0,[r1,#0xc]          ;1779
00010a  e038              B        |L84.382|
                  |L84.268|
00010c  4944              LDR      r1,|L84.544|
00010e  6ae0              LDR      r0,[r4,#0x2c]         ;1786
000110  63c1              STR      r1,[r0,#0x3c]         ;1786
000112  4944              LDR      r1,|L84.548|
000114  6ae0              LDR      r0,[r4,#0x2c]         ;1787
000116  6401              STR      r1,[r0,#0x40]         ;1787
000118  4943              LDR      r1,|L84.552|
00011a  6ae0              LDR      r0,[r4,#0x2c]         ;1790
00011c  64c1              STR      r1,[r0,#0x4c]         ;1790
00011e  6821              LDR      r1,[r4,#0]            ;1793
000120  f101023c          ADD      r2,r1,#0x3c           ;1793
000124  463b              MOV      r3,r7                 ;1793
000126  4631              MOV      r1,r6                 ;1793
000128  6ae0              LDR      r0,[r4,#0x2c]         ;1793
00012a  f7fffffe          BL       HAL_DMA_Start_IT
00012e  b108              CBZ      r0,|L84.308|
000130  2001              MOVS     r0,#1                 ;1797
000132  e77f              B        |L84.52|
                  |L84.308|
000134  6820              LDR      r0,[r4,#0]            ;1800
000136  68c0              LDR      r0,[r0,#0xc]          ;1800
000138  f4406000          ORR      r0,r0,#0x800          ;1800
00013c  6821              LDR      r1,[r4,#0]            ;1800
00013e  60c8              STR      r0,[r1,#0xc]          ;1800
000140  e01d              B        |L84.382|
                  |L84.322|
000142  4937              LDR      r1,|L84.544|
000144  6b20              LDR      r0,[r4,#0x30]         ;1807
000146  63c1              STR      r1,[r0,#0x3c]         ;1807
000148  4936              LDR      r1,|L84.548|
00014a  6b20              LDR      r0,[r4,#0x30]         ;1808
00014c  6401              STR      r1,[r0,#0x40]         ;1808
00014e  4936              LDR      r1,|L84.552|
000150  6b20              LDR      r0,[r4,#0x30]         ;1811
000152  64c1              STR      r1,[r0,#0x4c]         ;1811
000154  6821              LDR      r1,[r4,#0]            ;1814
000156  f1010240          ADD      r2,r1,#0x40           ;1814
00015a  463b              MOV      r3,r7                 ;1814
00015c  4631              MOV      r1,r6                 ;1814
00015e  6b20              LDR      r0,[r4,#0x30]         ;1814
000160  f7fffffe          BL       HAL_DMA_Start_IT
000164  b108              CBZ      r0,|L84.362|
000166  2001              MOVS     r0,#1                 ;1818
000168  e764              B        |L84.52|
                  |L84.362|
00016a  6820              LDR      r0,[r4,#0]            ;1821
00016c  68c0              LDR      r0,[r0,#0xc]          ;1821
00016e  f4405080          ORR      r0,r0,#0x1000         ;1821
000172  6821              LDR      r1,[r4,#0]            ;1821
000174  60c8              STR      r0,[r1,#0xc]          ;1821
000176  e002              B        |L84.382|
                  |L84.376|
000178  f04f0801          MOV      r8,#1                 ;1826
00017c  bf00              NOP                            ;1827
                  |L84.382|
00017e  bf00              NOP                            ;1759
000180  f1b80f00          CMP      r8,#0                 ;1830
000184  d14a              BNE      |L84.540|
000186  2201              MOVS     r2,#1                 ;1833
000188  4629              MOV      r1,r5                 ;1833
00018a  6820              LDR      r0,[r4,#0]            ;1833
00018c  f7fffffe          BL       TIM_CCxChannelCmd
000190  4926              LDR      r1,|L84.556|
000192  6820              LDR      r0,[r4,#0]            ;1835
000194  4288              CMP      r0,r1                 ;1835
000196  d003              BEQ      |L84.416|
000198  4925              LDR      r1,|L84.560|
00019a  6820              LDR      r0,[r4,#0]            ;1835
00019c  4288              CMP      r0,r1                 ;1835
00019e  d101              BNE      |L84.420|
                  |L84.416|
0001a0  2001              MOVS     r0,#1                 ;1835
0001a2  e000              B        |L84.422|
                  |L84.420|
0001a4  2000              MOVS     r0,#0                 ;1835
                  |L84.422|
0001a6  b128              CBZ      r0,|L84.436|
0001a8  6820              LDR      r0,[r4,#0]            ;1838
0001aa  6c40              LDR      r0,[r0,#0x44]         ;1838
0001ac  f4404000          ORR      r0,r0,#0x8000         ;1838
0001b0  6821              LDR      r1,[r4,#0]            ;1838
0001b2  6448              STR      r0,[r1,#0x44]         ;1838
                  |L84.436|
0001b4  491d              LDR      r1,|L84.556|
0001b6  6820              LDR      r0,[r4,#0]            ;1842
0001b8  4288              CMP      r0,r1                 ;1842
0001ba  d01b              BEQ      |L84.500|
0001bc  6820              LDR      r0,[r4,#0]            ;1842
0001be  f1b04f80          CMP      r0,#0x40000000        ;1842
0001c2  d017              BEQ      |L84.500|
0001c4  491b              LDR      r1,|L84.564|
0001c6  6820              LDR      r0,[r4,#0]            ;1842
0001c8  4288              CMP      r0,r1                 ;1842
0001ca  d013              BEQ      |L84.500|
0001cc  491a              LDR      r1,|L84.568|
0001ce  6820              LDR      r0,[r4,#0]            ;1842
0001d0  4288              CMP      r0,r1                 ;1842
0001d2  d00f              BEQ      |L84.500|
0001d4  4919              LDR      r1,|L84.572|
0001d6  6820              LDR      r0,[r4,#0]            ;1842
0001d8  4288              CMP      r0,r1                 ;1842
0001da  d00b              BEQ      |L84.500|
0001dc  4914              LDR      r1,|L84.560|
0001de  6820              LDR      r0,[r4,#0]            ;1842
0001e0  4288              CMP      r0,r1                 ;1842
0001e2  d007              BEQ      |L84.500|
0001e4  4916              LDR      r1,|L84.576|
0001e6  6820              LDR      r0,[r4,#0]            ;1842
0001e8  4288              CMP      r0,r1                 ;1842
0001ea  d003              BEQ      |L84.500|
0001ec  4915              LDR      r1,|L84.580|
0001ee  6820              LDR      r0,[r4,#0]            ;1842
0001f0  4288              CMP      r0,r1                 ;1842
0001f2  d10d              BNE      |L84.528|
                  |L84.500|
0001f4  6820              LDR      r0,[r4,#0]            ;1844
0001f6  6880              LDR      r0,[r0,#8]            ;1844
0001f8  f0000907          AND      r9,r0,#7              ;1844
0001fc  f1b90f06          CMP      r9,#6                 ;1845
000200  d00c              BEQ      |L84.540|
000202  6820              LDR      r0,[r4,#0]            ;1847
000204  6800              LDR      r0,[r0,#0]            ;1847
000206  f0400001          ORR      r0,r0,#1              ;1847
00020a  6821              LDR      r1,[r4,#0]            ;1847
00020c  6008              STR      r0,[r1,#0]            ;1847
00020e  e005              B        |L84.540|
                  |L84.528|
000210  6820              LDR      r0,[r4,#0]            ;1852
000212  6800              LDR      r0,[r0,#0]            ;1852
000214  f0400001          ORR      r0,r0,#1              ;1852
000218  6821              LDR      r1,[r4,#0]            ;1852
00021a  6008              STR      r0,[r1,#0]            ;1852
                  |L84.540|
00021c  4640              MOV      r0,r8                 ;1857
00021e  e709              B        |L84.52|
;;;1859   
                          ENDP

                  |L84.544|
                          DCD      TIM_DMADelayPulseCplt
                  |L84.548|
                          DCD      TIM_DMADelayPulseHalfCplt
                  |L84.552|
                          DCD      TIM_DMAError
                  |L84.556|
                          DCD      0x40010000
                  |L84.560|
                          DCD      0x40010400
                  |L84.564|
                          DCD      0x40000400
                  |L84.568|
                          DCD      0x40000800
                  |L84.572|
                          DCD      0x40000c00
                  |L84.576|
                          DCD      0x40014000
                  |L84.580|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_PWM_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Start_IT PROC
;;;1538     */
;;;1539   HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1540   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1541     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;1542     uint32_t tmpsmcr;
;;;1543   
;;;1544     /* Check the parameters */
;;;1545     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1546   
;;;1547     /* Check the TIM channel state */
;;;1548     if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
000008  b915              CBNZ     r5,|L85.16|
00000a  f894003e          LDRB     r0,[r4,#0x3e]
00000e  e00b              B        |L85.40|
                  |L85.16|
000010  2d04              CMP      r5,#4
000012  d102              BNE      |L85.26|
000014  203f              MOVS     r0,#0x3f
000016  5d00              LDRB     r0,[r0,r4]
000018  e006              B        |L85.40|
                  |L85.26|
00001a  2d08              CMP      r5,#8
00001c  d102              BNE      |L85.36|
00001e  2040              MOVS     r0,#0x40
000020  5d00              LDRB     r0,[r0,r4]
000022  e001              B        |L85.40|
                  |L85.36|
000024  2041              MOVS     r0,#0x41
000026  5d00              LDRB     r0,[r0,r4]
                  |L85.40|
000028  2801              CMP      r0,#1
00002a  d001              BEQ      |L85.48|
;;;1549     {
;;;1550       return HAL_ERROR;
00002c  2001              MOVS     r0,#1
                  |L85.46|
;;;1551     }
;;;1552   
;;;1553     /* Set the TIM channel state */
;;;1554     TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1555   
;;;1556     switch (Channel)
;;;1557     {
;;;1558       case TIM_CHANNEL_1:
;;;1559       {
;;;1560         /* Enable the TIM Capture/Compare 1 interrupt */
;;;1561         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;1562         break;
;;;1563       }
;;;1564   
;;;1565       case TIM_CHANNEL_2:
;;;1566       {
;;;1567         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1568         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;1569         break;
;;;1570       }
;;;1571   
;;;1572       case TIM_CHANNEL_3:
;;;1573       {
;;;1574         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1575         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
;;;1576         break;
;;;1577       }
;;;1578   
;;;1579       case TIM_CHANNEL_4:
;;;1580       {
;;;1581         /* Enable the TIM Capture/Compare 4 interrupt */
;;;1582         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
;;;1583         break;
;;;1584       }
;;;1585   
;;;1586       default:
;;;1587         status = HAL_ERROR;
;;;1588         break;
;;;1589     }
;;;1590   
;;;1591     if (status == HAL_OK)
;;;1592     {
;;;1593       /* Enable the Capture compare channel */
;;;1594       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
;;;1595   
;;;1596       if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
;;;1597       {
;;;1598         /* Enable the main output */
;;;1599         __HAL_TIM_MOE_ENABLE(htim);
;;;1600       }
;;;1601   
;;;1602       /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;1603       if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;1604       {
;;;1605         tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;1606         if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;1607         {
;;;1608           __HAL_TIM_ENABLE(htim);
;;;1609         }
;;;1610       }
;;;1611       else
;;;1612       {
;;;1613         __HAL_TIM_ENABLE(htim);
;;;1614       }
;;;1615     }
;;;1616   
;;;1617     /* Return function status */
;;;1618     return status;
;;;1619   }
00002e  bdf0              POP      {r4-r7,pc}
                  |L85.48|
000030  b91d              CBNZ     r5,|L85.58|
000032  2002              MOVS     r0,#2                 ;1554
000034  f884003e          STRB     r0,[r4,#0x3e]         ;1554
000038  e00e              B        |L85.88|
                  |L85.58|
00003a  2d04              CMP      r5,#4                 ;1554
00003c  d103              BNE      |L85.70|
00003e  2102              MOVS     r1,#2                 ;1554
000040  203f              MOVS     r0,#0x3f              ;1554
000042  5501              STRB     r1,[r0,r4]            ;1554
000044  e008              B        |L85.88|
                  |L85.70|
000046  2d08              CMP      r5,#8                 ;1554
000048  d103              BNE      |L85.82|
00004a  2102              MOVS     r1,#2                 ;1554
00004c  2040              MOVS     r0,#0x40              ;1554
00004e  5501              STRB     r1,[r0,r4]            ;1554
000050  e002              B        |L85.88|
                  |L85.82|
000052  2102              MOVS     r1,#2                 ;1554
000054  2041              MOVS     r0,#0x41              ;1554
000056  5501              STRB     r1,[r0,r4]            ;1554
                  |L85.88|
000058  b135              CBZ      r5,|L85.104|
00005a  2d04              CMP      r5,#4                 ;1556
00005c  d00b              BEQ      |L85.118|
00005e  2d08              CMP      r5,#8                 ;1556
000060  d010              BEQ      |L85.132|
000062  2d0c              CMP      r5,#0xc               ;1556
000064  d11c              BNE      |L85.160|
000066  e014              B        |L85.146|
                  |L85.104|
000068  6820              LDR      r0,[r4,#0]            ;1561
00006a  68c0              LDR      r0,[r0,#0xc]          ;1561
00006c  f0400002          ORR      r0,r0,#2              ;1561
000070  6821              LDR      r1,[r4,#0]            ;1561
000072  60c8              STR      r0,[r1,#0xc]          ;1561
000074  e016              B        |L85.164|
                  |L85.118|
000076  6820              LDR      r0,[r4,#0]            ;1568
000078  68c0              LDR      r0,[r0,#0xc]          ;1568
00007a  f0400004          ORR      r0,r0,#4              ;1568
00007e  6821              LDR      r1,[r4,#0]            ;1568
000080  60c8              STR      r0,[r1,#0xc]          ;1568
000082  e00f              B        |L85.164|
                  |L85.132|
000084  6820              LDR      r0,[r4,#0]            ;1575
000086  68c0              LDR      r0,[r0,#0xc]          ;1575
000088  f0400008          ORR      r0,r0,#8              ;1575
00008c  6821              LDR      r1,[r4,#0]            ;1575
00008e  60c8              STR      r0,[r1,#0xc]          ;1575
000090  e008              B        |L85.164|
                  |L85.146|
000092  6820              LDR      r0,[r4,#0]            ;1582
000094  68c0              LDR      r0,[r0,#0xc]          ;1582
000096  f0400010          ORR      r0,r0,#0x10           ;1582
00009a  6821              LDR      r1,[r4,#0]            ;1582
00009c  60c8              STR      r0,[r1,#0xc]          ;1582
00009e  e001              B        |L85.164|
                  |L85.160|
0000a0  2601              MOVS     r6,#1                 ;1587
0000a2  bf00              NOP                            ;1588
                  |L85.164|
0000a4  bf00              NOP                            ;1562
0000a6  bbee              CBNZ     r6,|L85.292|
0000a8  2201              MOVS     r2,#1                 ;1594
0000aa  4629              MOV      r1,r5                 ;1594
0000ac  6820              LDR      r0,[r4,#0]            ;1594
0000ae  f7fffffe          BL       TIM_CCxChannelCmd
0000b2  4924              LDR      r1,|L85.324|
0000b4  6820              LDR      r0,[r4,#0]            ;1596
0000b6  4288              CMP      r0,r1                 ;1596
0000b8  d003              BEQ      |L85.194|
0000ba  4923              LDR      r1,|L85.328|
0000bc  6820              LDR      r0,[r4,#0]            ;1596
0000be  4288              CMP      r0,r1                 ;1596
0000c0  d101              BNE      |L85.198|
                  |L85.194|
0000c2  2001              MOVS     r0,#1                 ;1596
0000c4  e000              B        |L85.200|
                  |L85.198|
0000c6  2000              MOVS     r0,#0                 ;1596
                  |L85.200|
0000c8  b128              CBZ      r0,|L85.214|
0000ca  6820              LDR      r0,[r4,#0]            ;1599
0000cc  6c40              LDR      r0,[r0,#0x44]         ;1599
0000ce  f4404000          ORR      r0,r0,#0x8000         ;1599
0000d2  6821              LDR      r1,[r4,#0]            ;1599
0000d4  6448              STR      r0,[r1,#0x44]         ;1599
                  |L85.214|
0000d6  491b              LDR      r1,|L85.324|
0000d8  6820              LDR      r0,[r4,#0]            ;1603
0000da  4288              CMP      r0,r1                 ;1603
0000dc  d01b              BEQ      |L85.278|
0000de  6820              LDR      r0,[r4,#0]            ;1603
0000e0  f1b04f80          CMP      r0,#0x40000000        ;1603
0000e4  d017              BEQ      |L85.278|
0000e6  4919              LDR      r1,|L85.332|
0000e8  6820              LDR      r0,[r4,#0]            ;1603
0000ea  4288              CMP      r0,r1                 ;1603
0000ec  d013              BEQ      |L85.278|
0000ee  4918              LDR      r1,|L85.336|
0000f0  6820              LDR      r0,[r4,#0]            ;1603
0000f2  4288              CMP      r0,r1                 ;1603
0000f4  d00f              BEQ      |L85.278|
0000f6  4917              LDR      r1,|L85.340|
0000f8  6820              LDR      r0,[r4,#0]            ;1603
0000fa  4288              CMP      r0,r1                 ;1603
0000fc  d00b              BEQ      |L85.278|
0000fe  4912              LDR      r1,|L85.328|
000100  6820              LDR      r0,[r4,#0]            ;1603
000102  4288              CMP      r0,r1                 ;1603
000104  d007              BEQ      |L85.278|
000106  4914              LDR      r1,|L85.344|
000108  6820              LDR      r0,[r4,#0]            ;1603
00010a  4288              CMP      r0,r1                 ;1603
00010c  d003              BEQ      |L85.278|
00010e  4913              LDR      r1,|L85.348|
000110  6820              LDR      r0,[r4,#0]            ;1603
000112  4288              CMP      r0,r1                 ;1603
000114  d10e              BNE      |L85.308|
                  |L85.278|
000116  6820              LDR      r0,[r4,#0]            ;1605
000118  6880              LDR      r0,[r0,#8]            ;1605
00011a  f0000707          AND      r7,r0,#7              ;1605
00011e  2f06              CMP      r7,#6                 ;1606
000120  d00e              BEQ      |L85.320|
000122  e000              B        |L85.294|
                  |L85.292|
000124  e00c              B        |L85.320|
                  |L85.294|
000126  6820              LDR      r0,[r4,#0]            ;1608
000128  6800              LDR      r0,[r0,#0]            ;1608
00012a  f0400001          ORR      r0,r0,#1              ;1608
00012e  6821              LDR      r1,[r4,#0]            ;1608
000130  6008              STR      r0,[r1,#0]            ;1608
000132  e005              B        |L85.320|
                  |L85.308|
000134  6820              LDR      r0,[r4,#0]            ;1613
000136  6800              LDR      r0,[r0,#0]            ;1613
000138  f0400001          ORR      r0,r0,#1              ;1613
00013c  6821              LDR      r1,[r4,#0]            ;1613
00013e  6008              STR      r0,[r1,#0]            ;1613
                  |L85.320|
000140  4630              MOV      r0,r6                 ;1618
000142  e774              B        |L85.46|
;;;1620   
                          ENDP

                  |L85.324|
                          DCD      0x40010000
                  |L85.328|
                          DCD      0x40010400
                  |L85.332|
                          DCD      0x40000400
                  |L85.336|
                          DCD      0x40000800
                  |L85.340|
                          DCD      0x40000c00
                  |L85.344|
                          DCD      0x40014000
                  |L85.348|
                          DCD      0x40001800

                          AREA ||i.HAL_TIM_PWM_Stop||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Stop PROC
;;;1503     */
;;;1504   HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b530              PUSH     {r4,r5,lr}
;;;1505   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1506     /* Check the parameters */
;;;1507     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1508   
;;;1509     /* Disable the Capture compare channel */
;;;1510     TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxChannelCmd
;;;1511   
;;;1512     if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
000010  4923              LDR      r1,|L86.160|
000012  6820              LDR      r0,[r4,#0]
000014  4288              CMP      r0,r1
000016  d003              BEQ      |L86.32|
000018  4922              LDR      r1,|L86.164|
00001a  6820              LDR      r0,[r4,#0]
00001c  4288              CMP      r0,r1
00001e  d101              BNE      |L86.36|
                  |L86.32|
000020  2001              MOVS     r0,#1
000022  e000              B        |L86.38|
                  |L86.36|
000024  2000              MOVS     r0,#0
                  |L86.38|
000026  b190              CBZ      r0,|L86.78|
;;;1513     {
;;;1514       /* Disable the Main Output */
;;;1515       __HAL_TIM_MOE_DISABLE(htim);
000028  bf00              NOP      
00002a  6820              LDR      r0,[r4,#0]
00002c  6a00              LDR      r0,[r0,#0x20]
00002e  f2411111          MOV      r1,#0x1111
000032  4008              ANDS     r0,r0,r1
000034  b950              CBNZ     r0,|L86.76|
000036  6820              LDR      r0,[r4,#0]
000038  6a00              LDR      r0,[r0,#0x20]
00003a  1089              ASRS     r1,r1,#2
00003c  4008              ANDS     r0,r0,r1
00003e  b928              CBNZ     r0,|L86.76|
000040  6820              LDR      r0,[r4,#0]
000042  6c40              LDR      r0,[r0,#0x44]
000044  f4204000          BIC      r0,r0,#0x8000
000048  6821              LDR      r1,[r4,#0]
00004a  6448              STR      r0,[r1,#0x44]
                  |L86.76|
00004c  bf00              NOP      
                  |L86.78|
;;;1516     }
;;;1517   
;;;1518     /* Disable the Peripheral */
;;;1519     __HAL_TIM_DISABLE(htim);
00004e  bf00              NOP      
000050  6820              LDR      r0,[r4,#0]
000052  6a00              LDR      r0,[r0,#0x20]
000054  f2411111          MOV      r1,#0x1111
000058  4008              ANDS     r0,r0,r1
00005a  b950              CBNZ     r0,|L86.114|
00005c  6820              LDR      r0,[r4,#0]
00005e  6a00              LDR      r0,[r0,#0x20]
000060  1089              ASRS     r1,r1,#2
000062  4008              ANDS     r0,r0,r1
000064  b928              CBNZ     r0,|L86.114|
000066  6820              LDR      r0,[r4,#0]
000068  6800              LDR      r0,[r0,#0]
00006a  f0200001          BIC      r0,r0,#1
00006e  6821              LDR      r1,[r4,#0]
000070  6008              STR      r0,[r1,#0]
                  |L86.114|
000072  bf00              NOP      
;;;1520   
;;;1521     /* Set the TIM channel state */
;;;1522     TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
000074  b91d              CBNZ     r5,|L86.126|
000076  2001              MOVS     r0,#1
000078  f884003e          STRB     r0,[r4,#0x3e]
00007c  e00e              B        |L86.156|
                  |L86.126|
00007e  2d04              CMP      r5,#4
000080  d103              BNE      |L86.138|
000082  2101              MOVS     r1,#1
000084  203f              MOVS     r0,#0x3f
000086  5501              STRB     r1,[r0,r4]
000088  e008              B        |L86.156|
                  |L86.138|
00008a  2d08              CMP      r5,#8
00008c  d103              BNE      |L86.150|
00008e  2101              MOVS     r1,#1
000090  2040              MOVS     r0,#0x40
000092  5501              STRB     r1,[r0,r4]
000094  e002              B        |L86.156|
                  |L86.150|
000096  2101              MOVS     r1,#1
000098  2041              MOVS     r0,#0x41
00009a  5501              STRB     r1,[r0,r4]
                  |L86.156|
;;;1523   
;;;1524     /* Return function status */
;;;1525     return HAL_OK;
00009c  2000              MOVS     r0,#0
;;;1526   }
00009e  bd30              POP      {r4,r5,pc}
;;;1527   
                          ENDP

                  |L86.160|
                          DCD      0x40010000
                  |L86.164|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_PWM_Stop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Stop_DMA PROC
;;;1870     */
;;;1871   HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1872   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1873     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;1874   
;;;1875     /* Check the parameters */
;;;1876     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1877   
;;;1878     switch (Channel)
000008  b135              CBZ      r5,|L87.24|
00000a  2d04              CMP      r5,#4
00000c  d00e              BEQ      |L87.44|
00000e  2d08              CMP      r5,#8
000010  d016              BEQ      |L87.64|
000012  2d0c              CMP      r5,#0xc
000014  d128              BNE      |L87.104|
000016  e01d              B        |L87.84|
                  |L87.24|
;;;1879     {
;;;1880       case TIM_CHANNEL_1:
;;;1881       {
;;;1882         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1883         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f4207000          BIC      r0,r0,#0x200
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;1884         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
000024  6a60              LDR      r0,[r4,#0x24]
000026  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1885         break;
00002a  e01f              B        |L87.108|
                  |L87.44|
;;;1886       }
;;;1887   
;;;1888       case TIM_CHANNEL_2:
;;;1889       {
;;;1890         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1891         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
00002c  6820              LDR      r0,[r4,#0]
00002e  68c0              LDR      r0,[r0,#0xc]
000030  f4206080          BIC      r0,r0,#0x400
000034  6821              LDR      r1,[r4,#0]
000036  60c8              STR      r0,[r1,#0xc]
;;;1892         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
000038  6aa0              LDR      r0,[r4,#0x28]
00003a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1893         break;
00003e  e015              B        |L87.108|
                  |L87.64|
;;;1894       }
;;;1895   
;;;1896       case TIM_CHANNEL_3:
;;;1897       {
;;;1898         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1899         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
000040  6820              LDR      r0,[r4,#0]
000042  68c0              LDR      r0,[r0,#0xc]
000044  f4206000          BIC      r0,r0,#0x800
000048  6821              LDR      r1,[r4,#0]
00004a  60c8              STR      r0,[r1,#0xc]
;;;1900         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
00004c  6ae0              LDR      r0,[r4,#0x2c]
00004e  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1901         break;
000052  e00b              B        |L87.108|
                  |L87.84|
;;;1902       }
;;;1903   
;;;1904       case TIM_CHANNEL_4:
;;;1905       {
;;;1906         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1907         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
000054  6820              LDR      r0,[r4,#0]
000056  68c0              LDR      r0,[r0,#0xc]
000058  f4205080          BIC      r0,r0,#0x1000
00005c  6821              LDR      r1,[r4,#0]
00005e  60c8              STR      r0,[r1,#0xc]
;;;1908         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
000060  6b20              LDR      r0,[r4,#0x30]
000062  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1909         break;
000066  e001              B        |L87.108|
                  |L87.104|
;;;1910       }
;;;1911   
;;;1912       default:
;;;1913         status = HAL_ERROR;
000068  2601              MOVS     r6,#1
;;;1914         break;
00006a  bf00              NOP      
                  |L87.108|
00006c  bf00              NOP                            ;1885
;;;1915     }
;;;1916   
;;;1917     if (status == HAL_OK)
00006e  2e00              CMP      r6,#0
000070  d14a              BNE      |L87.264|
;;;1918     {
;;;1919       /* Disable the Capture compare channel */
;;;1920       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
000072  2200              MOVS     r2,#0
000074  4629              MOV      r1,r5
000076  6820              LDR      r0,[r4,#0]
000078  f7fffffe          BL       TIM_CCxChannelCmd
;;;1921   
;;;1922       if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
00007c  4923              LDR      r1,|L87.268|
00007e  6820              LDR      r0,[r4,#0]
000080  4288              CMP      r0,r1
000082  d003              BEQ      |L87.140|
000084  4922              LDR      r1,|L87.272|
000086  6820              LDR      r0,[r4,#0]
000088  4288              CMP      r0,r1
00008a  d101              BNE      |L87.144|
                  |L87.140|
00008c  2001              MOVS     r0,#1
00008e  e000              B        |L87.146|
                  |L87.144|
000090  2000              MOVS     r0,#0
                  |L87.146|
000092  b190              CBZ      r0,|L87.186|
;;;1923       {
;;;1924         /* Disable the Main Output */
;;;1925         __HAL_TIM_MOE_DISABLE(htim);
000094  bf00              NOP      
000096  6820              LDR      r0,[r4,#0]
000098  6a00              LDR      r0,[r0,#0x20]
00009a  f2411111          MOV      r1,#0x1111
00009e  4008              ANDS     r0,r0,r1
0000a0  b950              CBNZ     r0,|L87.184|
0000a2  6820              LDR      r0,[r4,#0]
0000a4  6a00              LDR      r0,[r0,#0x20]
0000a6  1089              ASRS     r1,r1,#2
0000a8  4008              ANDS     r0,r0,r1
0000aa  b928              CBNZ     r0,|L87.184|
0000ac  6820              LDR      r0,[r4,#0]
0000ae  6c40              LDR      r0,[r0,#0x44]
0000b0  f4204000          BIC      r0,r0,#0x8000
0000b4  6821              LDR      r1,[r4,#0]
0000b6  6448              STR      r0,[r1,#0x44]
                  |L87.184|
0000b8  bf00              NOP      
                  |L87.186|
;;;1926       }
;;;1927   
;;;1928       /* Disable the Peripheral */
;;;1929       __HAL_TIM_DISABLE(htim);
0000ba  bf00              NOP      
0000bc  6820              LDR      r0,[r4,#0]
0000be  6a00              LDR      r0,[r0,#0x20]
0000c0  f2411111          MOV      r1,#0x1111
0000c4  4008              ANDS     r0,r0,r1
0000c6  b950              CBNZ     r0,|L87.222|
0000c8  6820              LDR      r0,[r4,#0]
0000ca  6a00              LDR      r0,[r0,#0x20]
0000cc  1089              ASRS     r1,r1,#2
0000ce  4008              ANDS     r0,r0,r1
0000d0  b928              CBNZ     r0,|L87.222|
0000d2  6820              LDR      r0,[r4,#0]
0000d4  6800              LDR      r0,[r0,#0]
0000d6  f0200001          BIC      r0,r0,#1
0000da  6821              LDR      r1,[r4,#0]
0000dc  6008              STR      r0,[r1,#0]
                  |L87.222|
0000de  bf00              NOP      
;;;1930   
;;;1931       /* Set the TIM channel state */
;;;1932       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000e0  b91d              CBNZ     r5,|L87.234|
0000e2  2001              MOVS     r0,#1
0000e4  f884003e          STRB     r0,[r4,#0x3e]
0000e8  e00e              B        |L87.264|
                  |L87.234|
0000ea  2d04              CMP      r5,#4
0000ec  d103              BNE      |L87.246|
0000ee  2101              MOVS     r1,#1
0000f0  203f              MOVS     r0,#0x3f
0000f2  5501              STRB     r1,[r0,r4]
0000f4  e008              B        |L87.264|
                  |L87.246|
0000f6  2d08              CMP      r5,#8
0000f8  d103              BNE      |L87.258|
0000fa  2101              MOVS     r1,#1
0000fc  2040              MOVS     r0,#0x40
0000fe  5501              STRB     r1,[r0,r4]
000100  e002              B        |L87.264|
                  |L87.258|
000102  2101              MOVS     r1,#1
000104  2041              MOVS     r0,#0x41
000106  5501              STRB     r1,[r0,r4]
                  |L87.264|
;;;1933     }
;;;1934   
;;;1935     /* Return function status */
;;;1936     return status;
000108  4630              MOV      r0,r6
;;;1937   }
00010a  bd70              POP      {r4-r6,pc}
;;;1938   
                          ENDP

                  |L87.268|
                          DCD      0x40010000
                  |L87.272|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_PWM_Stop_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_Stop_IT PROC
;;;1631     */
;;;1632   HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1633   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1634     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;1635   
;;;1636     /* Check the parameters */
;;;1637     assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
;;;1638   
;;;1639     switch (Channel)
000008  b135              CBZ      r5,|L88.24|
00000a  2d04              CMP      r5,#4
00000c  d00b              BEQ      |L88.38|
00000e  2d08              CMP      r5,#8
000010  d010              BEQ      |L88.52|
000012  2d0c              CMP      r5,#0xc
000014  d11c              BNE      |L88.80|
000016  e014              B        |L88.66|
                  |L88.24|
;;;1640     {
;;;1641       case TIM_CHANNEL_1:
;;;1642       {
;;;1643         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1644         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000018  6820              LDR      r0,[r4,#0]
00001a  68c0              LDR      r0,[r0,#0xc]
00001c  f0200002          BIC      r0,r0,#2
000020  6821              LDR      r1,[r4,#0]
000022  60c8              STR      r0,[r1,#0xc]
;;;1645         break;
000024  e016              B        |L88.84|
                  |L88.38|
;;;1646       }
;;;1647   
;;;1648       case TIM_CHANNEL_2:
;;;1649       {
;;;1650         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1651         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000026  6820              LDR      r0,[r4,#0]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f0200004          BIC      r0,r0,#4
00002e  6821              LDR      r1,[r4,#0]
000030  60c8              STR      r0,[r1,#0xc]
;;;1652         break;
000032  e00f              B        |L88.84|
                  |L88.52|
;;;1653       }
;;;1654   
;;;1655       case TIM_CHANNEL_3:
;;;1656       {
;;;1657         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1658         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000034  6820              LDR      r0,[r4,#0]
000036  68c0              LDR      r0,[r0,#0xc]
000038  f0200008          BIC      r0,r0,#8
00003c  6821              LDR      r1,[r4,#0]
00003e  60c8              STR      r0,[r1,#0xc]
;;;1659         break;
000040  e008              B        |L88.84|
                  |L88.66|
;;;1660       }
;;;1661   
;;;1662       case TIM_CHANNEL_4:
;;;1663       {
;;;1664         /* Disable the TIM Capture/Compare 4 interrupt */
;;;1665         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
000042  6820              LDR      r0,[r4,#0]
000044  68c0              LDR      r0,[r0,#0xc]
000046  f0200010          BIC      r0,r0,#0x10
00004a  6821              LDR      r1,[r4,#0]
00004c  60c8              STR      r0,[r1,#0xc]
;;;1666         break;
00004e  e001              B        |L88.84|
                  |L88.80|
;;;1667       }
;;;1668   
;;;1669       default:
;;;1670         status = HAL_ERROR;
000050  2601              MOVS     r6,#1
;;;1671         break;
000052  bf00              NOP      
                  |L88.84|
000054  bf00              NOP                            ;1645
;;;1672     }
;;;1673   
;;;1674     if (status == HAL_OK)
000056  2e00              CMP      r6,#0
000058  d14a              BNE      |L88.240|
;;;1675     {
;;;1676       /* Disable the Capture compare channel */
;;;1677       TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
00005a  2200              MOVS     r2,#0
00005c  4629              MOV      r1,r5
00005e  6820              LDR      r0,[r4,#0]
000060  f7fffffe          BL       TIM_CCxChannelCmd
;;;1678   
;;;1679       if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
000064  4923              LDR      r1,|L88.244|
000066  6820              LDR      r0,[r4,#0]
000068  4288              CMP      r0,r1
00006a  d003              BEQ      |L88.116|
00006c  4922              LDR      r1,|L88.248|
00006e  6820              LDR      r0,[r4,#0]
000070  4288              CMP      r0,r1
000072  d101              BNE      |L88.120|
                  |L88.116|
000074  2001              MOVS     r0,#1
000076  e000              B        |L88.122|
                  |L88.120|
000078  2000              MOVS     r0,#0
                  |L88.122|
00007a  b190              CBZ      r0,|L88.162|
;;;1680       {
;;;1681         /* Disable the Main Output */
;;;1682         __HAL_TIM_MOE_DISABLE(htim);
00007c  bf00              NOP      
00007e  6820              LDR      r0,[r4,#0]
000080  6a00              LDR      r0,[r0,#0x20]
000082  f2411111          MOV      r1,#0x1111
000086  4008              ANDS     r0,r0,r1
000088  b950              CBNZ     r0,|L88.160|
00008a  6820              LDR      r0,[r4,#0]
00008c  6a00              LDR      r0,[r0,#0x20]
00008e  1089              ASRS     r1,r1,#2
000090  4008              ANDS     r0,r0,r1
000092  b928              CBNZ     r0,|L88.160|
000094  6820              LDR      r0,[r4,#0]
000096  6c40              LDR      r0,[r0,#0x44]
000098  f4204000          BIC      r0,r0,#0x8000
00009c  6821              LDR      r1,[r4,#0]
00009e  6448              STR      r0,[r1,#0x44]
                  |L88.160|
0000a0  bf00              NOP      
                  |L88.162|
;;;1683       }
;;;1684   
;;;1685       /* Disable the Peripheral */
;;;1686       __HAL_TIM_DISABLE(htim);
0000a2  bf00              NOP      
0000a4  6820              LDR      r0,[r4,#0]
0000a6  6a00              LDR      r0,[r0,#0x20]
0000a8  f2411111          MOV      r1,#0x1111
0000ac  4008              ANDS     r0,r0,r1
0000ae  b950              CBNZ     r0,|L88.198|
0000b0  6820              LDR      r0,[r4,#0]
0000b2  6a00              LDR      r0,[r0,#0x20]
0000b4  1089              ASRS     r1,r1,#2
0000b6  4008              ANDS     r0,r0,r1
0000b8  b928              CBNZ     r0,|L88.198|
0000ba  6820              LDR      r0,[r4,#0]
0000bc  6800              LDR      r0,[r0,#0]
0000be  f0200001          BIC      r0,r0,#1
0000c2  6821              LDR      r1,[r4,#0]
0000c4  6008              STR      r0,[r1,#0]
                  |L88.198|
0000c6  bf00              NOP      
;;;1687   
;;;1688       /* Set the TIM channel state */
;;;1689       TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000c8  b91d              CBNZ     r5,|L88.210|
0000ca  2001              MOVS     r0,#1
0000cc  f884003e          STRB     r0,[r4,#0x3e]
0000d0  e00e              B        |L88.240|
                  |L88.210|
0000d2  2d04              CMP      r5,#4
0000d4  d103              BNE      |L88.222|
0000d6  2101              MOVS     r1,#1
0000d8  203f              MOVS     r0,#0x3f
0000da  5501              STRB     r1,[r0,r4]
0000dc  e008              B        |L88.240|
                  |L88.222|
0000de  2d08              CMP      r5,#8
0000e0  d103              BNE      |L88.234|
0000e2  2101              MOVS     r1,#1
0000e4  2040              MOVS     r0,#0x40
0000e6  5501              STRB     r1,[r0,r4]
0000e8  e002              B        |L88.240|
                  |L88.234|
0000ea  2101              MOVS     r1,#1
0000ec  2041              MOVS     r0,#0x41
0000ee  5501              STRB     r1,[r0,r4]
                  |L88.240|
;;;1690     }
;;;1691   
;;;1692     /* Return function status */
;;;1693     return status;
0000f0  4630              MOV      r0,r6
;;;1694   }
0000f2  bd70              POP      {r4-r6,pc}
;;;1695   
                          ENDP

                  |L88.244|
                          DCD      0x40010000
                  |L88.248|
                          DCD      0x40010400

                          AREA ||i.HAL_TIM_PeriodElapsedCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PeriodElapsedCallback PROC
;;;5644     */
;;;5645   __weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5646   {
;;;5647     /* Prevent unused argument(s) compilation warning */
;;;5648     UNUSED(htim);
;;;5649   
;;;5650     /* NOTE : This function should not be modified, when the callback is needed,
;;;5651               the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
;;;5652      */
;;;5653   }
;;;5654   
                          ENDP


                          AREA ||i.HAL_TIM_PeriodElapsedHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_PeriodElapsedHalfCpltCallback PROC
;;;5659     */
;;;5660   __weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5661   {
;;;5662     /* Prevent unused argument(s) compilation warning */
;;;5663     UNUSED(htim);
;;;5664   
;;;5665     /* NOTE : This function should not be modified, when the callback is needed,
;;;5666               the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
;;;5667      */
;;;5668   }
;;;5669   
                          ENDP


                          AREA ||i.HAL_TIM_ReadCapturedValue||, CODE, READONLY, ALIGN=1

                  HAL_TIM_ReadCapturedValue PROC
;;;5560     */
;;;5561   uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  4602              MOV      r2,r0
;;;5562   {
;;;5563     uint32_t tmpreg = 0U;
000002  2000              MOVS     r0,#0
;;;5564   
;;;5565     switch (Channel)
000004  b131              CBZ      r1,|L91.20|
000006  2904              CMP      r1,#4
000008  d007              BEQ      |L91.26|
00000a  2908              CMP      r1,#8
00000c  d008              BEQ      |L91.32|
00000e  290c              CMP      r1,#0xc
000010  d10c              BNE      |L91.44|
000012  e008              B        |L91.38|
                  |L91.20|
;;;5566     {
;;;5567       case TIM_CHANNEL_1:
;;;5568       {
;;;5569         /* Check the parameters */
;;;5570         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;5571   
;;;5572         /* Return the capture 1 value */
;;;5573         tmpreg =  htim->Instance->CCR1;
000014  6813              LDR      r3,[r2,#0]
000016  6b58              LDR      r0,[r3,#0x34]
;;;5574   
;;;5575         break;
000018  e009              B        |L91.46|
                  |L91.26|
;;;5576       }
;;;5577       case TIM_CHANNEL_2:
;;;5578       {
;;;5579         /* Check the parameters */
;;;5580         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;5581   
;;;5582         /* Return the capture 2 value */
;;;5583         tmpreg =   htim->Instance->CCR2;
00001a  6813              LDR      r3,[r2,#0]
00001c  6b98              LDR      r0,[r3,#0x38]
;;;5584   
;;;5585         break;
00001e  e006              B        |L91.46|
                  |L91.32|
;;;5586       }
;;;5587   
;;;5588       case TIM_CHANNEL_3:
;;;5589       {
;;;5590         /* Check the parameters */
;;;5591         assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
;;;5592   
;;;5593         /* Return the capture 3 value */
;;;5594         tmpreg =   htim->Instance->CCR3;
000020  6813              LDR      r3,[r2,#0]
000022  6bd8              LDR      r0,[r3,#0x3c]
;;;5595   
;;;5596         break;
000024  e003              B        |L91.46|
                  |L91.38|
;;;5597       }
;;;5598   
;;;5599       case TIM_CHANNEL_4:
;;;5600       {
;;;5601         /* Check the parameters */
;;;5602         assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
;;;5603   
;;;5604         /* Return the capture 4 value */
;;;5605         tmpreg =   htim->Instance->CCR4;
000026  6813              LDR      r3,[r2,#0]
000028  6c18              LDR      r0,[r3,#0x40]
;;;5606   
;;;5607         break;
00002a  e000              B        |L91.46|
                  |L91.44|
;;;5608       }
;;;5609   
;;;5610       default:
;;;5611         break;
00002c  bf00              NOP      
                  |L91.46|
00002e  bf00              NOP                            ;5575
;;;5612     }
;;;5613   
;;;5614     return tmpreg;
;;;5615   }
000030  4770              BX       lr
;;;5616   
                          ENDP


                          AREA ||i.HAL_TIM_SlaveConfigSynchro||, CODE, READONLY, ALIGN=1

                  HAL_TIM_SlaveConfigSynchro PROC
;;;5477     */
;;;5478   HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;5479   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;5480     /* Check the parameters */
;;;5481     assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
;;;5482     assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
;;;5483     assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
;;;5484   
;;;5485     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  f894003c          LDRB     r0,[r4,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L92.20|
000010  2002              MOVS     r0,#2
                  |L92.18|
;;;5486   
;;;5487     htim->State = HAL_TIM_STATE_BUSY;
;;;5488   
;;;5489     if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
;;;5490     {
;;;5491       htim->State = HAL_TIM_STATE_READY;
;;;5492       __HAL_UNLOCK(htim);
;;;5493       return HAL_ERROR;
;;;5494     }
;;;5495   
;;;5496     /* Disable Trigger Interrupt */
;;;5497     __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
;;;5498   
;;;5499     /* Disable Trigger DMA request */
;;;5500     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
;;;5501   
;;;5502     htim->State = HAL_TIM_STATE_READY;
;;;5503   
;;;5504     __HAL_UNLOCK(htim);
;;;5505   
;;;5506     return HAL_OK;
;;;5507   }
000012  bd70              POP      {r4-r6,pc}
                  |L92.20|
000014  2001              MOVS     r0,#1                 ;5485
000016  f884003c          STRB     r0,[r4,#0x3c]         ;5485
00001a  bf00              NOP                            ;5485
00001c  2002              MOVS     r0,#2                 ;5487
00001e  f884003d          STRB     r0,[r4,#0x3d]         ;5487
000022  4629              MOV      r1,r5                 ;5489
000024  4620              MOV      r0,r4                 ;5489
000026  f7fffffe          BL       TIM_SlaveTimer_SetConfig
00002a  b148              CBZ      r0,|L92.64|
00002c  2001              MOVS     r0,#1                 ;5491
00002e  f884003d          STRB     r0,[r4,#0x3d]         ;5491
000032  bf00              NOP                            ;5492
000034  2000              MOVS     r0,#0                 ;5492
000036  f884003c          STRB     r0,[r4,#0x3c]         ;5492
00003a  bf00              NOP                            ;5492
00003c  2001              MOVS     r0,#1                 ;5493
00003e  e7e8              B        |L92.18|
                  |L92.64|
000040  6820              LDR      r0,[r4,#0]            ;5497
000042  68c0              LDR      r0,[r0,#0xc]          ;5497
000044  f0200040          BIC      r0,r0,#0x40           ;5497
000048  6821              LDR      r1,[r4,#0]            ;5497
00004a  60c8              STR      r0,[r1,#0xc]          ;5497
00004c  6820              LDR      r0,[r4,#0]            ;5500
00004e  68c0              LDR      r0,[r0,#0xc]          ;5500
000050  f4204080          BIC      r0,r0,#0x4000         ;5500
000054  6821              LDR      r1,[r4,#0]            ;5500
000056  60c8              STR      r0,[r1,#0xc]          ;5500
000058  2001              MOVS     r0,#1                 ;5502
00005a  f884003d          STRB     r0,[r4,#0x3d]         ;5502
00005e  bf00              NOP                            ;5504
000060  2000              MOVS     r0,#0                 ;5504
000062  f884003c          STRB     r0,[r4,#0x3c]         ;5504
000066  bf00              NOP                            ;5504
000068  bf00              NOP                            ;5506
00006a  e7d2              B        |L92.18|
;;;5508   
                          ENDP


                          AREA ||i.HAL_TIM_SlaveConfigSynchro_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIM_SlaveConfigSynchro_IT PROC
;;;5517     */
;;;5518   HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
000000  b570              PUSH     {r4-r6,lr}
;;;5519                                                   TIM_SlaveConfigTypeDef *sSlaveConfig)
;;;5520   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;5521     /* Check the parameters */
;;;5522     assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
;;;5523     assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
;;;5524     assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
;;;5525   
;;;5526     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  f894003c          LDRB     r0,[r4,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L93.20|
000010  2002              MOVS     r0,#2
                  |L93.18|
;;;5527   
;;;5528     htim->State = HAL_TIM_STATE_BUSY;
;;;5529   
;;;5530     if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
;;;5531     {
;;;5532       htim->State = HAL_TIM_STATE_READY;
;;;5533       __HAL_UNLOCK(htim);
;;;5534       return HAL_ERROR;
;;;5535     }
;;;5536   
;;;5537     /* Enable Trigger Interrupt */
;;;5538     __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
;;;5539   
;;;5540     /* Disable Trigger DMA request */
;;;5541     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
;;;5542   
;;;5543     htim->State = HAL_TIM_STATE_READY;
;;;5544   
;;;5545     __HAL_UNLOCK(htim);
;;;5546   
;;;5547     return HAL_OK;
;;;5548   }
000012  bd70              POP      {r4-r6,pc}
                  |L93.20|
000014  2001              MOVS     r0,#1                 ;5526
000016  f884003c          STRB     r0,[r4,#0x3c]         ;5526
00001a  bf00              NOP                            ;5526
00001c  2002              MOVS     r0,#2                 ;5528
00001e  f884003d          STRB     r0,[r4,#0x3d]         ;5528
000022  4629              MOV      r1,r5                 ;5530
000024  4620              MOV      r0,r4                 ;5530
000026  f7fffffe          BL       TIM_SlaveTimer_SetConfig
00002a  b148              CBZ      r0,|L93.64|
00002c  2001              MOVS     r0,#1                 ;5532
00002e  f884003d          STRB     r0,[r4,#0x3d]         ;5532
000032  bf00              NOP                            ;5533
000034  2000              MOVS     r0,#0                 ;5533
000036  f884003c          STRB     r0,[r4,#0x3c]         ;5533
00003a  bf00              NOP                            ;5533
00003c  2001              MOVS     r0,#1                 ;5534
00003e  e7e8              B        |L93.18|
                  |L93.64|
000040  6820              LDR      r0,[r4,#0]            ;5538
000042  68c0              LDR      r0,[r0,#0xc]          ;5538
000044  f0400040          ORR      r0,r0,#0x40           ;5538
000048  6821              LDR      r1,[r4,#0]            ;5538
00004a  60c8              STR      r0,[r1,#0xc]          ;5538
00004c  6820              LDR      r0,[r4,#0]            ;5541
00004e  68c0              LDR      r0,[r0,#0xc]          ;5541
000050  f4204080          BIC      r0,r0,#0x4000         ;5541
000054  6821              LDR      r1,[r4,#0]            ;5541
000056  60c8              STR      r0,[r1,#0xc]          ;5541
000058  2001              MOVS     r0,#1                 ;5543
00005a  f884003d          STRB     r0,[r4,#0x3d]         ;5543
00005e  bf00              NOP                            ;5545
000060  2000              MOVS     r0,#0                 ;5545
000062  f884003c          STRB     r0,[r4,#0x3c]         ;5545
000066  bf00              NOP                            ;5545
000068  bf00              NOP                            ;5547
00006a  e7d2              B        |L93.18|
;;;5549   
                          ENDP


                          AREA ||i.HAL_TIM_TriggerCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_TriggerCallback PROC
;;;5749     */
;;;5750   __weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5751   {
;;;5752     /* Prevent unused argument(s) compilation warning */
;;;5753     UNUSED(htim);
;;;5754   
;;;5755     /* NOTE : This function should not be modified, when the callback is needed,
;;;5756               the HAL_TIM_TriggerCallback could be implemented in the user file
;;;5757      */
;;;5758   }
;;;5759   
                          ENDP


                          AREA ||i.HAL_TIM_TriggerHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIM_TriggerHalfCpltCallback PROC
;;;5764     */
;;;5765   __weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;5766   {
;;;5767     /* Prevent unused argument(s) compilation warning */
;;;5768     UNUSED(htim);
;;;5769   
;;;5770     /* NOTE : This function should not be modified, when the callback is needed,
;;;5771               the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
;;;5772      */
;;;5773   }
;;;5774   
                          ENDP


                          AREA ||i.TIM_Base_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_Base_SetConfig PROC
;;;6775     */
;;;6776   void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
000000  b510              PUSH     {r4,lr}
;;;6777   {
;;;6778     uint32_t tmpcr1;
;;;6779     tmpcr1 = TIMx->CR1;
000002  6802              LDR      r2,[r0,#0]
;;;6780   
;;;6781     /* Set TIM Time Base Unit parameters ---------------------------------------*/
;;;6782     if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
000004  4b29              LDR      r3,|L96.172|
000006  4298              CMP      r0,r3
000008  d00e              BEQ      |L96.40|
00000a  f1b04f80          CMP      r0,#0x40000000
00000e  d00b              BEQ      |L96.40|
000010  4b27              LDR      r3,|L96.176|
000012  4298              CMP      r0,r3
000014  d008              BEQ      |L96.40|
000016  4b27              LDR      r3,|L96.180|
000018  4298              CMP      r0,r3
00001a  d005              BEQ      |L96.40|
00001c  4b26              LDR      r3,|L96.184|
00001e  4298              CMP      r0,r3
000020  d002              BEQ      |L96.40|
000022  4b26              LDR      r3,|L96.188|
000024  4298              CMP      r0,r3
000026  d103              BNE      |L96.48|
                  |L96.40|
;;;6783     {
;;;6784       /* Select the Counter Mode */
;;;6785       tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
000028  f0220270          BIC      r2,r2,#0x70
;;;6786       tmpcr1 |= Structure->CounterMode;
00002c  684b              LDR      r3,[r1,#4]
00002e  431a              ORRS     r2,r2,r3
                  |L96.48|
;;;6787     }
;;;6788   
;;;6789     if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
000030  4b1e              LDR      r3,|L96.172|
000032  4298              CMP      r0,r3
000034  d020              BEQ      |L96.120|
000036  f1b04f80          CMP      r0,#0x40000000
00003a  d01d              BEQ      |L96.120|
00003c  4b1c              LDR      r3,|L96.176|
00003e  4298              CMP      r0,r3
000040  d01a              BEQ      |L96.120|
000042  4b1c              LDR      r3,|L96.180|
000044  4298              CMP      r0,r3
000046  d017              BEQ      |L96.120|
000048  4b1b              LDR      r3,|L96.184|
00004a  4298              CMP      r0,r3
00004c  d014              BEQ      |L96.120|
00004e  4b1b              LDR      r3,|L96.188|
000050  4298              CMP      r0,r3
000052  d011              BEQ      |L96.120|
000054  4b1a              LDR      r3,|L96.192|
000056  4298              CMP      r0,r3
000058  d00e              BEQ      |L96.120|
00005a  4b1a              LDR      r3,|L96.196|
00005c  4298              CMP      r0,r3
00005e  d00b              BEQ      |L96.120|
000060  4b19              LDR      r3,|L96.200|
000062  4298              CMP      r0,r3
000064  d008              BEQ      |L96.120|
000066  4b19              LDR      r3,|L96.204|
000068  4298              CMP      r0,r3
00006a  d005              BEQ      |L96.120|
00006c  4b18              LDR      r3,|L96.208|
00006e  4298              CMP      r0,r3
000070  d002              BEQ      |L96.120|
000072  4b18              LDR      r3,|L96.212|
000074  4298              CMP      r0,r3
000076  d103              BNE      |L96.128|
                  |L96.120|
;;;6790     {
;;;6791       /* Set the clock division */
;;;6792       tmpcr1 &= ~TIM_CR1_CKD;
000078  f4227240          BIC      r2,r2,#0x300
;;;6793       tmpcr1 |= (uint32_t)Structure->ClockDivision;
00007c  68cb              LDR      r3,[r1,#0xc]
00007e  431a              ORRS     r2,r2,r3
                  |L96.128|
;;;6794     }
;;;6795   
;;;6796     /* Set the auto-reload preload */
;;;6797     MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
000080  f0220380          BIC      r3,r2,#0x80
000084  694c              LDR      r4,[r1,#0x14]
000086  ea430204          ORR      r2,r3,r4
;;;6798   
;;;6799     TIMx->CR1 = tmpcr1;
00008a  6002              STR      r2,[r0,#0]
;;;6800   
;;;6801     /* Set the Autoreload value */
;;;6802     TIMx->ARR = (uint32_t)Structure->Period ;
00008c  688b              LDR      r3,[r1,#8]
00008e  62c3              STR      r3,[r0,#0x2c]
;;;6803   
;;;6804     /* Set the Prescaler value */
;;;6805     TIMx->PSC = Structure->Prescaler;
000090  680b              LDR      r3,[r1,#0]
000092  6283              STR      r3,[r0,#0x28]
;;;6806   
;;;6807     if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
000094  4b05              LDR      r3,|L96.172|
000096  4298              CMP      r0,r3
000098  d002              BEQ      |L96.160|
00009a  4b08              LDR      r3,|L96.188|
00009c  4298              CMP      r0,r3
00009e  d101              BNE      |L96.164|
                  |L96.160|
;;;6808     {
;;;6809       /* Set the Repetition Counter value */
;;;6810       TIMx->RCR = Structure->RepetitionCounter;
0000a0  690b              LDR      r3,[r1,#0x10]
0000a2  6303              STR      r3,[r0,#0x30]
                  |L96.164|
;;;6811     }
;;;6812   
;;;6813     /* Generate an update event to reload the Prescaler
;;;6814        and the repetition counter (only for advanced timer) value immediately */
;;;6815     TIMx->EGR = TIM_EGR_UG;
0000a4  2301              MOVS     r3,#1
0000a6  6143              STR      r3,[r0,#0x14]
;;;6816   }
0000a8  bd10              POP      {r4,pc}
;;;6817   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L96.172|
                          DCD      0x40010000
                  |L96.176|
                          DCD      0x40000400
                  |L96.180|
                          DCD      0x40000800
                  |L96.184|
                          DCD      0x40000c00
                  |L96.188|
                          DCD      0x40010400
                  |L96.192|
                          DCD      0x40014000
                  |L96.196|
                          DCD      0x40014400
                  |L96.200|
                          DCD      0x40014800
                  |L96.204|
                          DCD      0x40001800
                  |L96.208|
                          DCD      0x40001c00
                  |L96.212|
                          DCD      0x40002000

                          AREA ||i.TIM_CCxChannelCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxChannelCmd PROC
;;;7566     */
;;;7567   void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
000000  b530              PUSH     {r4,r5,lr}
;;;7568   {
;;;7569     uint32_t tmp;
;;;7570   
;;;7571     /* Check the parameters */
;;;7572     assert_param(IS_TIM_CC1_INSTANCE(TIMx));
;;;7573     assert_param(IS_TIM_CHANNELS(Channel));
;;;7574   
;;;7575     tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
000002  f001051f          AND      r5,r1,#0x1f
000006  2401              MOVS     r4,#1
000008  fa04f305          LSL      r3,r4,r5
;;;7576   
;;;7577     /* Reset the CCxE Bit */
;;;7578     TIMx->CCER &= ~tmp;
00000c  6a04              LDR      r4,[r0,#0x20]
00000e  439c              BICS     r4,r4,r3
000010  6204              STR      r4,[r0,#0x20]
;;;7579   
;;;7580     /* Set or reset the CCxE Bit */
;;;7581     TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
000012  6a04              LDR      r4,[r0,#0x20]
000014  f001051f          AND      r5,r1,#0x1f
000018  fa02f505          LSL      r5,r2,r5
00001c  432c              ORRS     r4,r4,r5
00001e  6204              STR      r4,[r0,#0x20]
;;;7582   }
000020  bd30              POP      {r4,r5,pc}
;;;7583   
                          ENDP


                          AREA ||i.TIM_DMACaptureCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMACaptureCplt PROC
;;;6598     */
;;;6599   void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6600   {
000002  4605              MOV      r5,r0
;;;6601     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;6602   
;;;6603     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000006  6a60              LDR      r0,[r4,#0x24]
000008  42a8              CMP      r0,r5
00000a  d10a              BNE      |L98.34|
;;;6604     {
;;;6605       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  2001              MOVS     r0,#1
00000e  7720              STRB     r0,[r4,#0x1c]
;;;6606   
;;;6607       if (hdma->Init.Mode == DMA_NORMAL)
000010  69e8              LDR      r0,[r5,#0x1c]
000012  2800              CMP      r0,#0
000014  d12b              BNE      |L98.110|
;;;6608       {
;;;6609         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000016  2001              MOVS     r0,#1
000018  f884003e          STRB     r0,[r4,#0x3e]
;;;6610         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
00001c  f8840042          STRB     r0,[r4,#0x42]
000020  e025              B        |L98.110|
                  |L98.34|
;;;6611       }
;;;6612     }
;;;6613     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000022  6aa0              LDR      r0,[r4,#0x28]
000024  42a8              CMP      r0,r5
000026  d109              BNE      |L98.60|
;;;6614     {
;;;6615       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000028  2002              MOVS     r0,#2
00002a  7720              STRB     r0,[r4,#0x1c]
;;;6616   
;;;6617       if (hdma->Init.Mode == DMA_NORMAL)
00002c  69e8              LDR      r0,[r5,#0x1c]
00002e  b9f0              CBNZ     r0,|L98.110|
;;;6618       {
;;;6619         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000030  2101              MOVS     r1,#1
000032  203f              MOVS     r0,#0x3f
000034  5501              STRB     r1,[r0,r4]
;;;6620         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000036  2043              MOVS     r0,#0x43
000038  5501              STRB     r1,[r0,r4]
00003a  e018              B        |L98.110|
                  |L98.60|
;;;6621       }
;;;6622     }
;;;6623     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
00003c  6ae0              LDR      r0,[r4,#0x2c]
00003e  42a8              CMP      r0,r5
000040  d109              BNE      |L98.86|
;;;6624     {
;;;6625       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000042  2004              MOVS     r0,#4
000044  7720              STRB     r0,[r4,#0x1c]
;;;6626   
;;;6627       if (hdma->Init.Mode == DMA_NORMAL)
000046  69e8              LDR      r0,[r5,#0x1c]
000048  b988              CBNZ     r0,|L98.110|
;;;6628       {
;;;6629         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
00004a  2101              MOVS     r1,#1
00004c  2040              MOVS     r0,#0x40
00004e  5501              STRB     r1,[r0,r4]
;;;6630         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
000050  2044              MOVS     r0,#0x44
000052  5501              STRB     r1,[r0,r4]
000054  e00b              B        |L98.110|
                  |L98.86|
;;;6631       }
;;;6632     }
;;;6633     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
000056  6b20              LDR      r0,[r4,#0x30]
000058  42a8              CMP      r0,r5
00005a  d108              BNE      |L98.110|
;;;6634     {
;;;6635       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
00005c  2008              MOVS     r0,#8
00005e  7720              STRB     r0,[r4,#0x1c]
;;;6636   
;;;6637       if (hdma->Init.Mode == DMA_NORMAL)
000060  69e8              LDR      r0,[r5,#0x1c]
000062  b920              CBNZ     r0,|L98.110|
;;;6638       {
;;;6639         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
000064  2101              MOVS     r1,#1
000066  2041              MOVS     r0,#0x41
000068  5501              STRB     r1,[r0,r4]
;;;6640         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
00006a  2045              MOVS     r0,#0x45
00006c  5501              STRB     r1,[r0,r4]
                  |L98.110|
;;;6641       }
;;;6642     }
;;;6643     else
;;;6644     {
;;;6645       /* nothing to do */
;;;6646     }
;;;6647   
;;;6648   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6649     htim->IC_CaptureCallback(htim);
;;;6650   #else
;;;6651     HAL_TIM_IC_CaptureCallback(htim);
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       HAL_TIM_IC_CaptureCallback
;;;6652   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6653   
;;;6654     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000074  2000              MOVS     r0,#0
000076  7720              STRB     r0,[r4,#0x1c]
;;;6655   }
000078  bd70              POP      {r4-r6,pc}
;;;6656   
                          ENDP


                          AREA ||i.TIM_DMACaptureHalfCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMACaptureHalfCplt PROC
;;;6661     */
;;;6662   void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6663   {
000002  4605              MOV      r5,r0
;;;6664     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;6665   
;;;6666     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000006  6a60              LDR      r0,[r4,#0x24]
000008  42a8              CMP      r0,r5
00000a  d102              BNE      |L99.18|
;;;6667     {
;;;6668       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  2001              MOVS     r0,#1
00000e  7720              STRB     r0,[r4,#0x1c]
000010  e010              B        |L99.52|
                  |L99.18|
;;;6669     }
;;;6670     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000012  6aa0              LDR      r0,[r4,#0x28]
000014  42a8              CMP      r0,r5
000016  d102              BNE      |L99.30|
;;;6671     {
;;;6672       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000018  2002              MOVS     r0,#2
00001a  7720              STRB     r0,[r4,#0x1c]
00001c  e00a              B        |L99.52|
                  |L99.30|
;;;6673     }
;;;6674     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
00001e  6ae0              LDR      r0,[r4,#0x2c]
000020  42a8              CMP      r0,r5
000022  d102              BNE      |L99.42|
;;;6675     {
;;;6676       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000024  2004              MOVS     r0,#4
000026  7720              STRB     r0,[r4,#0x1c]
000028  e004              B        |L99.52|
                  |L99.42|
;;;6677     }
;;;6678     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
00002a  6b20              LDR      r0,[r4,#0x30]
00002c  42a8              CMP      r0,r5
00002e  d101              BNE      |L99.52|
;;;6679     {
;;;6680       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
000030  2008              MOVS     r0,#8
000032  7720              STRB     r0,[r4,#0x1c]
                  |L99.52|
;;;6681     }
;;;6682     else
;;;6683     {
;;;6684       /* nothing to do */
;;;6685     }
;;;6686   
;;;6687   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6688     htim->IC_CaptureHalfCpltCallback(htim);
;;;6689   #else
;;;6690     HAL_TIM_IC_CaptureHalfCpltCallback(htim);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       HAL_TIM_IC_CaptureHalfCpltCallback
;;;6691   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6692   
;;;6693     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
00003a  2000              MOVS     r0,#0
00003c  7720              STRB     r0,[r4,#0x1c]
;;;6694   }
00003e  bd70              POP      {r4-r6,pc}
;;;6695   
                          ENDP


                          AREA ||i.TIM_DMADelayPulseCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMADelayPulseCplt PROC
;;;6500     */
;;;6501   static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6502   {
000002  4605              MOV      r5,r0
;;;6503     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;6504   
;;;6505     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000006  6a60              LDR      r0,[r4,#0x24]
000008  42a8              CMP      r0,r5
00000a  d107              BNE      |L100.28|
;;;6506     {
;;;6507       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  2001              MOVS     r0,#1
00000e  7720              STRB     r0,[r4,#0x1c]
;;;6508   
;;;6509       if (hdma->Init.Mode == DMA_NORMAL)
000010  69e8              LDR      r0,[r5,#0x1c]
000012  bb18              CBNZ     r0,|L100.92|
;;;6510       {
;;;6511         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000014  2001              MOVS     r0,#1
000016  f884003e          STRB     r0,[r4,#0x3e]
00001a  e01f              B        |L100.92|
                  |L100.28|
;;;6512       }
;;;6513     }
;;;6514     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
00001c  6aa0              LDR      r0,[r4,#0x28]
00001e  42a8              CMP      r0,r5
000020  d107              BNE      |L100.50|
;;;6515     {
;;;6516       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000022  2002              MOVS     r0,#2
000024  7720              STRB     r0,[r4,#0x1c]
;;;6517   
;;;6518       if (hdma->Init.Mode == DMA_NORMAL)
000026  69e8              LDR      r0,[r5,#0x1c]
000028  b9c0              CBNZ     r0,|L100.92|
;;;6519       {
;;;6520         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
00002a  2101              MOVS     r1,#1
00002c  203f              MOVS     r0,#0x3f
00002e  5501              STRB     r1,[r0,r4]
000030  e014              B        |L100.92|
                  |L100.50|
;;;6521       }
;;;6522     }
;;;6523     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
000032  6ae0              LDR      r0,[r4,#0x2c]
000034  42a8              CMP      r0,r5
000036  d107              BNE      |L100.72|
;;;6524     {
;;;6525       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000038  2004              MOVS     r0,#4
00003a  7720              STRB     r0,[r4,#0x1c]
;;;6526   
;;;6527       if (hdma->Init.Mode == DMA_NORMAL)
00003c  69e8              LDR      r0,[r5,#0x1c]
00003e  b968              CBNZ     r0,|L100.92|
;;;6528       {
;;;6529         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
000040  2101              MOVS     r1,#1
000042  2040              MOVS     r0,#0x40
000044  5501              STRB     r1,[r0,r4]
000046  e009              B        |L100.92|
                  |L100.72|
;;;6530       }
;;;6531     }
;;;6532     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
000048  6b20              LDR      r0,[r4,#0x30]
00004a  42a8              CMP      r0,r5
00004c  d106              BNE      |L100.92|
;;;6533     {
;;;6534       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
00004e  2008              MOVS     r0,#8
000050  7720              STRB     r0,[r4,#0x1c]
;;;6535   
;;;6536       if (hdma->Init.Mode == DMA_NORMAL)
000052  69e8              LDR      r0,[r5,#0x1c]
000054  b910              CBNZ     r0,|L100.92|
;;;6537       {
;;;6538         TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
000056  2101              MOVS     r1,#1
000058  2041              MOVS     r0,#0x41
00005a  5501              STRB     r1,[r0,r4]
                  |L100.92|
;;;6539       }
;;;6540     }
;;;6541     else
;;;6542     {
;;;6543       /* nothing to do */
;;;6544     }
;;;6545   
;;;6546   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6547     htim->PWM_PulseFinishedCallback(htim);
;;;6548   #else
;;;6549     HAL_TIM_PWM_PulseFinishedCallback(htim);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
;;;6550   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6551   
;;;6552     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000062  2000              MOVS     r0,#0
000064  7720              STRB     r0,[r4,#0x1c]
;;;6553   }
000066  bd70              POP      {r4-r6,pc}
;;;6554   
                          ENDP


                          AREA ||i.TIM_DMADelayPulseHalfCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMADelayPulseHalfCplt PROC
;;;6559     */
;;;6560   void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6561   {
000002  4605              MOV      r5,r0
;;;6562     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;6563   
;;;6564     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000006  6a60              LDR      r0,[r4,#0x24]
000008  42a8              CMP      r0,r5
00000a  d102              BNE      |L101.18|
;;;6565     {
;;;6566       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  2001              MOVS     r0,#1
00000e  7720              STRB     r0,[r4,#0x1c]
000010  e010              B        |L101.52|
                  |L101.18|
;;;6567     }
;;;6568     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000012  6aa0              LDR      r0,[r4,#0x28]
000014  42a8              CMP      r0,r5
000016  d102              BNE      |L101.30|
;;;6569     {
;;;6570       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000018  2002              MOVS     r0,#2
00001a  7720              STRB     r0,[r4,#0x1c]
00001c  e00a              B        |L101.52|
                  |L101.30|
;;;6571     }
;;;6572     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
00001e  6ae0              LDR      r0,[r4,#0x2c]
000020  42a8              CMP      r0,r5
000022  d102              BNE      |L101.42|
;;;6573     {
;;;6574       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000024  2004              MOVS     r0,#4
000026  7720              STRB     r0,[r4,#0x1c]
000028  e004              B        |L101.52|
                  |L101.42|
;;;6575     }
;;;6576     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
00002a  6b20              LDR      r0,[r4,#0x30]
00002c  42a8              CMP      r0,r5
00002e  d101              BNE      |L101.52|
;;;6577     {
;;;6578       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
000030  2008              MOVS     r0,#8
000032  7720              STRB     r0,[r4,#0x1c]
                  |L101.52|
;;;6579     }
;;;6580     else
;;;6581     {
;;;6582       /* nothing to do */
;;;6583     }
;;;6584   
;;;6585   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6586     htim->PWM_PulseFinishedHalfCpltCallback(htim);
;;;6587   #else
;;;6588     HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedHalfCpltCallback
;;;6589   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6590   
;;;6591     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
00003a  2000              MOVS     r0,#0
00003c  7720              STRB     r0,[r4,#0x1c]
;;;6592   }
00003e  bd70              POP      {r4-r6,pc}
;;;6593   
                          ENDP


                          AREA ||i.TIM_DMAError||, CODE, READONLY, ALIGN=1

                  TIM_DMAError PROC
;;;6457     */
;;;6458   void TIM_DMAError(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6459   {
000002  4605              MOV      r5,r0
;;;6460     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;6461   
;;;6462     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000006  6a60              LDR      r0,[r4,#0x24]
000008  42a8              CMP      r0,r5
00000a  d104              BNE      |L102.22|
;;;6463     {
;;;6464       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  2001              MOVS     r0,#1
00000e  7720              STRB     r0,[r4,#0x1c]
;;;6465       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000010  f884003e          STRB     r0,[r4,#0x3e]
000014  e01d              B        |L102.82|
                  |L102.22|
;;;6466     }
;;;6467     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000016  6aa0              LDR      r0,[r4,#0x28]
000018  42a8              CMP      r0,r5
00001a  d105              BNE      |L102.40|
;;;6468     {
;;;6469       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
00001c  2002              MOVS     r0,#2
00001e  7720              STRB     r0,[r4,#0x1c]
;;;6470       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000020  2101              MOVS     r1,#1
000022  203f              MOVS     r0,#0x3f
000024  5501              STRB     r1,[r0,r4]
000026  e014              B        |L102.82|
                  |L102.40|
;;;6471     }
;;;6472     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
000028  6ae0              LDR      r0,[r4,#0x2c]
00002a  42a8              CMP      r0,r5
00002c  d105              BNE      |L102.58|
;;;6473     {
;;;6474       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
00002e  2004              MOVS     r0,#4
000030  7720              STRB     r0,[r4,#0x1c]
;;;6475       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
000032  2101              MOVS     r1,#1
000034  2040              MOVS     r0,#0x40
000036  5501              STRB     r1,[r0,r4]
000038  e00b              B        |L102.82|
                  |L102.58|
;;;6476     }
;;;6477     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
00003a  6b20              LDR      r0,[r4,#0x30]
00003c  42a8              CMP      r0,r5
00003e  d105              BNE      |L102.76|
;;;6478     {
;;;6479       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
000040  2008              MOVS     r0,#8
000042  7720              STRB     r0,[r4,#0x1c]
;;;6480       TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
000044  2101              MOVS     r1,#1
000046  2041              MOVS     r0,#0x41
000048  5501              STRB     r1,[r0,r4]
00004a  e002              B        |L102.82|
                  |L102.76|
;;;6481     }
;;;6482     else
;;;6483     {
;;;6484       htim->State = HAL_TIM_STATE_READY;
00004c  2001              MOVS     r0,#1
00004e  f884003d          STRB     r0,[r4,#0x3d]
                  |L102.82|
;;;6485     }
;;;6486   
;;;6487   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6488     htim->ErrorCallback(htim);
;;;6489   #else
;;;6490     HAL_TIM_ErrorCallback(htim);
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       HAL_TIM_ErrorCallback
;;;6491   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6492   
;;;6493     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000058  2000              MOVS     r0,#0
00005a  7720              STRB     r0,[r4,#0x1c]
;;;6494   }
00005c  bd70              POP      {r4-r6,pc}
;;;6495   
                          ENDP


                          AREA ||i.TIM_DMAPeriodElapsedCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMAPeriodElapsedCplt PROC
;;;6700     */
;;;6701   static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6702   {
000002  4605              MOV      r5,r0
;;;6703     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;6704   
;;;6705     if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
000006  6a20              LDR      r0,[r4,#0x20]
000008  69c0              LDR      r0,[r0,#0x1c]
00000a  b910              CBNZ     r0,|L103.18|
;;;6706     {
;;;6707       htim->State = HAL_TIM_STATE_READY;
00000c  2001              MOVS     r0,#1
00000e  f884003d          STRB     r0,[r4,#0x3d]
                  |L103.18|
;;;6708     }
;;;6709   
;;;6710   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6711     htim->PeriodElapsedCallback(htim);
;;;6712   #else
;;;6713     HAL_TIM_PeriodElapsedCallback(htim);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       HAL_TIM_PeriodElapsedCallback
;;;6714   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6715   }
000018  bd70              POP      {r4-r6,pc}
;;;6716   
                          ENDP


                          AREA ||i.TIM_DMAPeriodElapsedHalfCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMAPeriodElapsedHalfCplt PROC
;;;6721     */
;;;6722   static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6723   {
000002  4604              MOV      r4,r0
;;;6724     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;6725   
;;;6726   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6727     htim->PeriodElapsedHalfCpltCallback(htim);
;;;6728   #else
;;;6729     HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_TIM_PeriodElapsedHalfCpltCallback
;;;6730   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6731   }
00000c  bd70              POP      {r4-r6,pc}
;;;6732   
                          ENDP


                          AREA ||i.TIM_DMATriggerCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMATriggerCplt PROC
;;;6737     */
;;;6738   static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6739   {
000002  4605              MOV      r5,r0
;;;6740     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;6741   
;;;6742     if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
000006  6ba0              LDR      r0,[r4,#0x38]
000008  69c0              LDR      r0,[r0,#0x1c]
00000a  b910              CBNZ     r0,|L105.18|
;;;6743     {
;;;6744       htim->State = HAL_TIM_STATE_READY;
00000c  2001              MOVS     r0,#1
00000e  f884003d          STRB     r0,[r4,#0x3d]
                  |L105.18|
;;;6745     }
;;;6746   
;;;6747   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6748     htim->TriggerCallback(htim);
;;;6749   #else
;;;6750     HAL_TIM_TriggerCallback(htim);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       HAL_TIM_TriggerCallback
;;;6751   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6752   }
000018  bd70              POP      {r4-r6,pc}
;;;6753   
                          ENDP


                          AREA ||i.TIM_DMATriggerHalfCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMATriggerHalfCplt PROC
;;;6758     */
;;;6759   static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;6760   {
000002  4604              MOV      r4,r0
;;;6761     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;6762   
;;;6763   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;6764     htim->TriggerHalfCpltCallback(htim);
;;;6765   #else
;;;6766     HAL_TIM_TriggerHalfCpltCallback(htim);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_TIM_TriggerHalfCpltCallback
;;;6767   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;6768   }
00000c  bd70              POP      {r4-r6,pc}
;;;6769   
                          ENDP


                          AREA ||i.TIM_ETR_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_ETR_SetConfig PROC
;;;7536     */
;;;7537   void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
000000  b530              PUSH     {r4,r5,lr}
;;;7538                          uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
;;;7539   {
000002  460c              MOV      r4,r1
;;;7540     uint32_t tmpsmcr;
;;;7541   
;;;7542     tmpsmcr = TIMx->SMCR;
000004  6881              LDR      r1,[r0,#8]
;;;7543   
;;;7544     /* Reset the ETR Bits */
;;;7545     tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
000006  f421417f          BIC      r1,r1,#0xff00
;;;7546   
;;;7547     /* Set the Prescaler, the Filter value and the Polarity */
;;;7548     tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
00000a  ea422503          ORR      r5,r2,r3,LSL #8
00000e  4325              ORRS     r5,r5,r4
000010  4329              ORRS     r1,r1,r5
;;;7549   
;;;7550     /* Write to TIMx SMCR */
;;;7551     TIMx->SMCR = tmpsmcr;
000012  6081              STR      r1,[r0,#8]
;;;7552   }
000014  bd30              POP      {r4,r5,pc}
;;;7553   
                          ENDP


                          AREA ||i.TIM_ITRx_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_ITRx_SetConfig PROC
;;;7506     */
;;;7507   static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
000000  460a              MOV      r2,r1
;;;7508   {
;;;7509     uint32_t tmpsmcr;
;;;7510   
;;;7511     /* Get the TIMx SMCR register value */
;;;7512     tmpsmcr = TIMx->SMCR;
000002  6881              LDR      r1,[r0,#8]
;;;7513     /* Reset the TS Bits */
;;;7514     tmpsmcr &= ~TIM_SMCR_TS;
000004  f0210170          BIC      r1,r1,#0x70
;;;7515     /* Set the Input Trigger source and the slave mode*/
;;;7516     tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
000008  f0420307          ORR      r3,r2,#7
00000c  4319              ORRS     r1,r1,r3
;;;7517     /* Write to TIMx SMCR */
;;;7518     TIMx->SMCR = tmpsmcr;
00000e  6081              STR      r1,[r0,#8]
;;;7519   }
000010  4770              BX       lr
;;;7520   /**
                          ENDP


                          AREA ||i.TIM_OC1_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC1_SetConfig PROC
;;;6823     */
;;;6824   static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b530              PUSH     {r4,r5,lr}
;;;6825   {
;;;6826     uint32_t tmpccmrx;
;;;6827     uint32_t tmpccer;
;;;6828     uint32_t tmpcr2;
;;;6829   
;;;6830     /* Disable the Channel 1: Reset the CC1E Bit */
;;;6831     TIMx->CCER &= ~TIM_CCER_CC1E;
000002  6a05              LDR      r5,[r0,#0x20]
000004  f0250501          BIC      r5,r5,#1
000008  6205              STR      r5,[r0,#0x20]
;;;6832   
;;;6833     /* Get the TIMx CCER register value */
;;;6834     tmpccer = TIMx->CCER;
00000a  6a02              LDR      r2,[r0,#0x20]
;;;6835     /* Get the TIMx CR2 register value */
;;;6836     tmpcr2 =  TIMx->CR2;
00000c  6843              LDR      r3,[r0,#4]
;;;6837   
;;;6838     /* Get the TIMx CCMR1 register value */
;;;6839     tmpccmrx = TIMx->CCMR1;
00000e  6984              LDR      r4,[r0,#0x18]
;;;6840   
;;;6841     /* Reset the Output Compare Mode Bits */
;;;6842     tmpccmrx &= ~TIM_CCMR1_OC1M;
000010  f0240470          BIC      r4,r4,#0x70
;;;6843     tmpccmrx &= ~TIM_CCMR1_CC1S;
000014  f0240403          BIC      r4,r4,#3
;;;6844     /* Select the Output Compare Mode */
;;;6845     tmpccmrx |= OC_Config->OCMode;
000018  680d              LDR      r5,[r1,#0]
00001a  432c              ORRS     r4,r4,r5
;;;6846   
;;;6847     /* Reset the Output Polarity level */
;;;6848     tmpccer &= ~TIM_CCER_CC1P;
00001c  f0220202          BIC      r2,r2,#2
;;;6849     /* Set the Output Compare Polarity */
;;;6850     tmpccer |= OC_Config->OCPolarity;
000020  688d              LDR      r5,[r1,#8]
000022  432a              ORRS     r2,r2,r5
;;;6851   
;;;6852     if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
000024  4d10              LDR      r5,|L109.104|
000026  42a8              CMP      r0,r5
000028  d100              BNE      |L109.44|
00002a  e003              B        |L109.52|
                  |L109.44|
00002c  4d0f              LDR      r5,|L109.108|
00002e  42a8              CMP      r0,r5
000030  d106              BNE      |L109.64|
000032  bf00              NOP      
                  |L109.52|
;;;6853     {
;;;6854       /* Check parameters */
;;;6855       assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
;;;6856   
;;;6857       /* Reset the Output N Polarity level */
;;;6858       tmpccer &= ~TIM_CCER_CC1NP;
000034  f0220208          BIC      r2,r2,#8
;;;6859       /* Set the Output N Polarity */
;;;6860       tmpccer |= OC_Config->OCNPolarity;
000038  68cd              LDR      r5,[r1,#0xc]
00003a  432a              ORRS     r2,r2,r5
;;;6861       /* Reset the Output N State */
;;;6862       tmpccer &= ~TIM_CCER_CC1NE;
00003c  f0220204          BIC      r2,r2,#4
                  |L109.64|
;;;6863     }
;;;6864   
;;;6865     if (IS_TIM_BREAK_INSTANCE(TIMx))
000040  4d09              LDR      r5,|L109.104|
000042  42a8              CMP      r0,r5
000044  d002              BEQ      |L109.76|
000046  4d09              LDR      r5,|L109.108|
000048  42a8              CMP      r0,r5
00004a  d107              BNE      |L109.92|
                  |L109.76|
;;;6866     {
;;;6867       /* Check parameters */
;;;6868       assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
;;;6869       assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
;;;6870   
;;;6871       /* Reset the Output Compare and Output Compare N IDLE State */
;;;6872       tmpcr2 &= ~TIM_CR2_OIS1;
00004c  f4237380          BIC      r3,r3,#0x100
;;;6873       tmpcr2 &= ~TIM_CR2_OIS1N;
000050  f4237300          BIC      r3,r3,#0x200
;;;6874       /* Set the Output Idle state */
;;;6875       tmpcr2 |= OC_Config->OCIdleState;
000054  694d              LDR      r5,[r1,#0x14]
000056  432b              ORRS     r3,r3,r5
;;;6876       /* Set the Output N Idle state */
;;;6877       tmpcr2 |= OC_Config->OCNIdleState;
000058  698d              LDR      r5,[r1,#0x18]
00005a  432b              ORRS     r3,r3,r5
                  |L109.92|
;;;6878     }
;;;6879   
;;;6880     /* Write to TIMx CR2 */
;;;6881     TIMx->CR2 = tmpcr2;
00005c  6043              STR      r3,[r0,#4]
;;;6882   
;;;6883     /* Write to TIMx CCMR1 */
;;;6884     TIMx->CCMR1 = tmpccmrx;
00005e  6184              STR      r4,[r0,#0x18]
;;;6885   
;;;6886     /* Set the Capture Compare Register value */
;;;6887     TIMx->CCR1 = OC_Config->Pulse;
000060  684d              LDR      r5,[r1,#4]
000062  6345              STR      r5,[r0,#0x34]
;;;6888   
;;;6889     /* Write to TIMx CCER */
;;;6890     TIMx->CCER = tmpccer;
000064  6202              STR      r2,[r0,#0x20]
;;;6891   }
000066  bd30              POP      {r4,r5,pc}
;;;6892   
                          ENDP

                  |L109.104|
                          DCD      0x40010000
                  |L109.108|
                          DCD      0x40010400

                          AREA ||i.TIM_OC2_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC2_SetConfig PROC
;;;6898     */
;;;6899   void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b530              PUSH     {r4,r5,lr}
;;;6900   {
;;;6901     uint32_t tmpccmrx;
;;;6902     uint32_t tmpccer;
;;;6903     uint32_t tmpcr2;
;;;6904   
;;;6905     /* Disable the Channel 2: Reset the CC2E Bit */
;;;6906     TIMx->CCER &= ~TIM_CCER_CC2E;
000002  6a05              LDR      r5,[r0,#0x20]
000004  f0250510          BIC      r5,r5,#0x10
000008  6205              STR      r5,[r0,#0x20]
;;;6907   
;;;6908     /* Get the TIMx CCER register value */
;;;6909     tmpccer = TIMx->CCER;
00000a  6a02              LDR      r2,[r0,#0x20]
;;;6910     /* Get the TIMx CR2 register value */
;;;6911     tmpcr2 =  TIMx->CR2;
00000c  6843              LDR      r3,[r0,#4]
;;;6912   
;;;6913     /* Get the TIMx CCMR1 register value */
;;;6914     tmpccmrx = TIMx->CCMR1;
00000e  6984              LDR      r4,[r0,#0x18]
;;;6915   
;;;6916     /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;6917     tmpccmrx &= ~TIM_CCMR1_OC2M;
000010  f42444e0          BIC      r4,r4,#0x7000
;;;6918     tmpccmrx &= ~TIM_CCMR1_CC2S;
000014  f4247440          BIC      r4,r4,#0x300
;;;6919   
;;;6920     /* Select the Output Compare Mode */
;;;6921     tmpccmrx |= (OC_Config->OCMode << 8U);
000018  680d              LDR      r5,[r1,#0]
00001a  ea442405          ORR      r4,r4,r5,LSL #8
;;;6922   
;;;6923     /* Reset the Output Polarity level */
;;;6924     tmpccer &= ~TIM_CCER_CC2P;
00001e  f0220220          BIC      r2,r2,#0x20
;;;6925     /* Set the Output Compare Polarity */
;;;6926     tmpccer |= (OC_Config->OCPolarity << 4U);
000022  688d              LDR      r5,[r1,#8]
000024  ea421205          ORR      r2,r2,r5,LSL #4
;;;6927   
;;;6928     if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
000028  4d12              LDR      r5,|L110.116|
00002a  42a8              CMP      r0,r5
00002c  d100              BNE      |L110.48|
00002e  e003              B        |L110.56|
                  |L110.48|
000030  4d11              LDR      r5,|L110.120|
000032  42a8              CMP      r0,r5
000034  d107              BNE      |L110.70|
000036  bf00              NOP      
                  |L110.56|
;;;6929     {
;;;6930       assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
;;;6931   
;;;6932       /* Reset the Output N Polarity level */
;;;6933       tmpccer &= ~TIM_CCER_CC2NP;
000038  f0220280          BIC      r2,r2,#0x80
;;;6934       /* Set the Output N Polarity */
;;;6935       tmpccer |= (OC_Config->OCNPolarity << 4U);
00003c  68cd              LDR      r5,[r1,#0xc]
00003e  ea421205          ORR      r2,r2,r5,LSL #4
;;;6936       /* Reset the Output N State */
;;;6937       tmpccer &= ~TIM_CCER_CC2NE;
000042  f0220240          BIC      r2,r2,#0x40
                  |L110.70|
;;;6938   
;;;6939     }
;;;6940   
;;;6941     if (IS_TIM_BREAK_INSTANCE(TIMx))
000046  4d0b              LDR      r5,|L110.116|
000048  42a8              CMP      r0,r5
00004a  d002              BEQ      |L110.82|
00004c  4d0a              LDR      r5,|L110.120|
00004e  42a8              CMP      r0,r5
000050  d109              BNE      |L110.102|
                  |L110.82|
;;;6942     {
;;;6943       /* Check parameters */
;;;6944       assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
;;;6945       assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
;;;6946   
;;;6947       /* Reset the Output Compare and Output Compare N IDLE State */
;;;6948       tmpcr2 &= ~TIM_CR2_OIS2;
000052  f4236380          BIC      r3,r3,#0x400
;;;6949       tmpcr2 &= ~TIM_CR2_OIS2N;
000056  f4236300          BIC      r3,r3,#0x800
;;;6950       /* Set the Output Idle state */
;;;6951       tmpcr2 |= (OC_Config->OCIdleState << 2U);
00005a  694d              LDR      r5,[r1,#0x14]
00005c  ea430385          ORR      r3,r3,r5,LSL #2
;;;6952       /* Set the Output N Idle state */
;;;6953       tmpcr2 |= (OC_Config->OCNIdleState << 2U);
000060  698d              LDR      r5,[r1,#0x18]
000062  ea430385          ORR      r3,r3,r5,LSL #2
                  |L110.102|
;;;6954     }
;;;6955   
;;;6956     /* Write to TIMx CR2 */
;;;6957     TIMx->CR2 = tmpcr2;
000066  6043              STR      r3,[r0,#4]
;;;6958   
;;;6959     /* Write to TIMx CCMR1 */
;;;6960     TIMx->CCMR1 = tmpccmrx;
000068  6184              STR      r4,[r0,#0x18]
;;;6961   
;;;6962     /* Set the Capture Compare Register value */
;;;6963     TIMx->CCR2 = OC_Config->Pulse;
00006a  684d              LDR      r5,[r1,#4]
00006c  6385              STR      r5,[r0,#0x38]
;;;6964   
;;;6965     /* Write to TIMx CCER */
;;;6966     TIMx->CCER = tmpccer;
00006e  6202              STR      r2,[r0,#0x20]
;;;6967   }
000070  bd30              POP      {r4,r5,pc}
;;;6968   
                          ENDP

000072  0000              DCW      0x0000
                  |L110.116|
                          DCD      0x40010000
                  |L110.120|
                          DCD      0x40010400

                          AREA ||i.TIM_OC3_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC3_SetConfig PROC
;;;6974     */
;;;6975   static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b530              PUSH     {r4,r5,lr}
;;;6976   {
;;;6977     uint32_t tmpccmrx;
;;;6978     uint32_t tmpccer;
;;;6979     uint32_t tmpcr2;
;;;6980   
;;;6981     /* Disable the Channel 3: Reset the CC2E Bit */
;;;6982     TIMx->CCER &= ~TIM_CCER_CC3E;
000002  6a05              LDR      r5,[r0,#0x20]
000004  f4257580          BIC      r5,r5,#0x100
000008  6205              STR      r5,[r0,#0x20]
;;;6983   
;;;6984     /* Get the TIMx CCER register value */
;;;6985     tmpccer = TIMx->CCER;
00000a  6a02              LDR      r2,[r0,#0x20]
;;;6986     /* Get the TIMx CR2 register value */
;;;6987     tmpcr2 =  TIMx->CR2;
00000c  6843              LDR      r3,[r0,#4]
;;;6988   
;;;6989     /* Get the TIMx CCMR2 register value */
;;;6990     tmpccmrx = TIMx->CCMR2;
00000e  69c4              LDR      r4,[r0,#0x1c]
;;;6991   
;;;6992     /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;6993     tmpccmrx &= ~TIM_CCMR2_OC3M;
000010  f0240470          BIC      r4,r4,#0x70
;;;6994     tmpccmrx &= ~TIM_CCMR2_CC3S;
000014  f0240403          BIC      r4,r4,#3
;;;6995     /* Select the Output Compare Mode */
;;;6996     tmpccmrx |= OC_Config->OCMode;
000018  680d              LDR      r5,[r1,#0]
00001a  432c              ORRS     r4,r4,r5
;;;6997   
;;;6998     /* Reset the Output Polarity level */
;;;6999     tmpccer &= ~TIM_CCER_CC3P;
00001c  f4227200          BIC      r2,r2,#0x200
;;;7000     /* Set the Output Compare Polarity */
;;;7001     tmpccer |= (OC_Config->OCPolarity << 8U);
000020  688d              LDR      r5,[r1,#8]
000022  ea422205          ORR      r2,r2,r5,LSL #8
;;;7002   
;;;7003     if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
000026  4d12              LDR      r5,|L111.112|
000028  42a8              CMP      r0,r5
00002a  d100              BNE      |L111.46|
00002c  e003              B        |L111.54|
                  |L111.46|
00002e  4d11              LDR      r5,|L111.116|
000030  42a8              CMP      r0,r5
000032  d107              BNE      |L111.68|
000034  bf00              NOP      
                  |L111.54|
;;;7004     {
;;;7005       assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
;;;7006   
;;;7007       /* Reset the Output N Polarity level */
;;;7008       tmpccer &= ~TIM_CCER_CC3NP;
000036  f4226200          BIC      r2,r2,#0x800
;;;7009       /* Set the Output N Polarity */
;;;7010       tmpccer |= (OC_Config->OCNPolarity << 8U);
00003a  68cd              LDR      r5,[r1,#0xc]
00003c  ea422205          ORR      r2,r2,r5,LSL #8
;;;7011       /* Reset the Output N State */
;;;7012       tmpccer &= ~TIM_CCER_CC3NE;
000040  f4226280          BIC      r2,r2,#0x400
                  |L111.68|
;;;7013     }
;;;7014   
;;;7015     if (IS_TIM_BREAK_INSTANCE(TIMx))
000044  4d0a              LDR      r5,|L111.112|
000046  42a8              CMP      r0,r5
000048  d002              BEQ      |L111.80|
00004a  4d0a              LDR      r5,|L111.116|
00004c  42a8              CMP      r0,r5
00004e  d109              BNE      |L111.100|
                  |L111.80|
;;;7016     {
;;;7017       /* Check parameters */
;;;7018       assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
;;;7019       assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
;;;7020   
;;;7021       /* Reset the Output Compare and Output Compare N IDLE State */
;;;7022       tmpcr2 &= ~TIM_CR2_OIS3;
000050  f4235380          BIC      r3,r3,#0x1000
;;;7023       tmpcr2 &= ~TIM_CR2_OIS3N;
000054  f4235300          BIC      r3,r3,#0x2000
;;;7024       /* Set the Output Idle state */
;;;7025       tmpcr2 |= (OC_Config->OCIdleState << 4U);
000058  694d              LDR      r5,[r1,#0x14]
00005a  ea431305          ORR      r3,r3,r5,LSL #4
;;;7026       /* Set the Output N Idle state */
;;;7027       tmpcr2 |= (OC_Config->OCNIdleState << 4U);
00005e  698d              LDR      r5,[r1,#0x18]
000060  ea431305          ORR      r3,r3,r5,LSL #4
                  |L111.100|
;;;7028     }
;;;7029   
;;;7030     /* Write to TIMx CR2 */
;;;7031     TIMx->CR2 = tmpcr2;
000064  6043              STR      r3,[r0,#4]
;;;7032   
;;;7033     /* Write to TIMx CCMR2 */
;;;7034     TIMx->CCMR2 = tmpccmrx;
000066  61c4              STR      r4,[r0,#0x1c]
;;;7035   
;;;7036     /* Set the Capture Compare Register value */
;;;7037     TIMx->CCR3 = OC_Config->Pulse;
000068  684d              LDR      r5,[r1,#4]
00006a  63c5              STR      r5,[r0,#0x3c]
;;;7038   
;;;7039     /* Write to TIMx CCER */
;;;7040     TIMx->CCER = tmpccer;
00006c  6202              STR      r2,[r0,#0x20]
;;;7041   }
00006e  bd30              POP      {r4,r5,pc}
;;;7042   
                          ENDP

                  |L111.112|
                          DCD      0x40010000
                  |L111.116|
                          DCD      0x40010400

                          AREA ||i.TIM_OC4_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_OC4_SetConfig PROC
;;;7048     */
;;;7049   static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
000000  b530              PUSH     {r4,r5,lr}
;;;7050   {
;;;7051     uint32_t tmpccmrx;
;;;7052     uint32_t tmpccer;
;;;7053     uint32_t tmpcr2;
;;;7054   
;;;7055     /* Disable the Channel 4: Reset the CC4E Bit */
;;;7056     TIMx->CCER &= ~TIM_CCER_CC4E;
000002  6a05              LDR      r5,[r0,#0x20]
000004  f4255580          BIC      r5,r5,#0x1000
000008  6205              STR      r5,[r0,#0x20]
;;;7057   
;;;7058     /* Get the TIMx CCER register value */
;;;7059     tmpccer = TIMx->CCER;
00000a  6a03              LDR      r3,[r0,#0x20]
;;;7060     /* Get the TIMx CR2 register value */
;;;7061     tmpcr2 =  TIMx->CR2;
00000c  6844              LDR      r4,[r0,#4]
;;;7062   
;;;7063     /* Get the TIMx CCMR2 register value */
;;;7064     tmpccmrx = TIMx->CCMR2;
00000e  69c2              LDR      r2,[r0,#0x1c]
;;;7065   
;;;7066     /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;7067     tmpccmrx &= ~TIM_CCMR2_OC4M;
000010  f42242e0          BIC      r2,r2,#0x7000
;;;7068     tmpccmrx &= ~TIM_CCMR2_CC4S;
000014  f4227240          BIC      r2,r2,#0x300
;;;7069   
;;;7070     /* Select the Output Compare Mode */
;;;7071     tmpccmrx |= (OC_Config->OCMode << 8U);
000018  680d              LDR      r5,[r1,#0]
00001a  ea422205          ORR      r2,r2,r5,LSL #8
;;;7072   
;;;7073     /* Reset the Output Polarity level */
;;;7074     tmpccer &= ~TIM_CCER_CC4P;
00001e  f4235300          BIC      r3,r3,#0x2000
;;;7075     /* Set the Output Compare Polarity */
;;;7076     tmpccer |= (OC_Config->OCPolarity << 12U);
000022  688d              LDR      r5,[r1,#8]
000024  ea433305          ORR      r3,r3,r5,LSL #12
;;;7077   
;;;7078     if (IS_TIM_BREAK_INSTANCE(TIMx))
000028  4d08              LDR      r5,|L112.76|
00002a  42a8              CMP      r0,r5
00002c  d002              BEQ      |L112.52|
00002e  4d08              LDR      r5,|L112.80|
000030  42a8              CMP      r0,r5
000032  d104              BNE      |L112.62|
                  |L112.52|
;;;7079     {
;;;7080       /* Check parameters */
;;;7081       assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
;;;7082   
;;;7083       /* Reset the Output Compare IDLE State */
;;;7084       tmpcr2 &= ~TIM_CR2_OIS4;
000034  f4244480          BIC      r4,r4,#0x4000
;;;7085   
;;;7086       /* Set the Output Idle state */
;;;7087       tmpcr2 |= (OC_Config->OCIdleState << 6U);
000038  694d              LDR      r5,[r1,#0x14]
00003a  ea441485          ORR      r4,r4,r5,LSL #6
                  |L112.62|
;;;7088     }
;;;7089   
;;;7090     /* Write to TIMx CR2 */
;;;7091     TIMx->CR2 = tmpcr2;
00003e  6044              STR      r4,[r0,#4]
;;;7092   
;;;7093     /* Write to TIMx CCMR2 */
;;;7094     TIMx->CCMR2 = tmpccmrx;
000040  61c2              STR      r2,[r0,#0x1c]
;;;7095   
;;;7096     /* Set the Capture Compare Register value */
;;;7097     TIMx->CCR4 = OC_Config->Pulse;
000042  684d              LDR      r5,[r1,#4]
000044  6405              STR      r5,[r0,#0x40]
;;;7098   
;;;7099     /* Write to TIMx CCER */
;;;7100     TIMx->CCER = tmpccer;
000046  6203              STR      r3,[r0,#0x20]
;;;7101   }
000048  bd30              POP      {r4,r5,pc}
;;;7102   
                          ENDP

00004a  0000              DCW      0x0000
                  |L112.76|
                          DCD      0x40010000
                  |L112.80|
                          DCD      0x40010400

                          AREA ||i.TIM_SlaveTimer_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_SlaveTimer_SetConfig PROC
;;;7108     */
;;;7109   static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;7110                                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
;;;7111   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;7112     HAL_StatusTypeDef status = HAL_OK;
000008  f04f0900          MOV      r9,#0
;;;7113     uint32_t tmpsmcr;
;;;7114     uint32_t tmpccmr1;
;;;7115     uint32_t tmpccer;
;;;7116   
;;;7117     /* Get the TIMx SMCR register value */
;;;7118     tmpsmcr = htim->Instance->SMCR;
00000c  6828              LDR      r0,[r5,#0]
00000e  6886              LDR      r6,[r0,#8]
;;;7119   
;;;7120     /* Reset the Trigger Selection Bits */
;;;7121     tmpsmcr &= ~TIM_SMCR_TS;
000010  f0260670          BIC      r6,r6,#0x70
;;;7122     /* Set the Input Trigger source */
;;;7123     tmpsmcr |= sSlaveConfig->InputTrigger;
000014  6860              LDR      r0,[r4,#4]
000016  4306              ORRS     r6,r6,r0
;;;7124   
;;;7125     /* Reset the slave mode Bits */
;;;7126     tmpsmcr &= ~TIM_SMCR_SMS;
000018  f0260607          BIC      r6,r6,#7
;;;7127     /* Set the slave mode */
;;;7128     tmpsmcr |= sSlaveConfig->SlaveMode;
00001c  6820              LDR      r0,[r4,#0]
00001e  4306              ORRS     r6,r6,r0
;;;7129   
;;;7130     /* Write to TIMx SMCR */
;;;7131     htim->Instance->SMCR = tmpsmcr;
000020  6828              LDR      r0,[r5,#0]
000022  6086              STR      r6,[r0,#8]
;;;7132   
;;;7133     /* Configure the trigger prescaler, filter, and polarity */
;;;7134     switch (sSlaveConfig->InputTrigger)
000024  6860              LDR      r0,[r4,#4]
000026  f000010f          AND      r1,r0,#0xf
00002a  2900              CMP      r1,#0
00002c  d13b              BNE      |L113.166|
00002e  1100              ASRS     r0,r0,#4
000030  2808              CMP      r0,#8
000032  d238              BCS      |L113.166|
000034  e8dff000          TBB      [pc,r0]
000038  33343536          DCB      0x33,0x34,0x35,0x36
00003c  0b272d04          DCB      0x0b,0x27,0x2d,0x04
;;;7135     {
;;;7136       case TIM_TS_ETRF:
;;;7137       {
;;;7138         /* Check the parameters */
;;;7139         assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
;;;7140         assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
;;;7141         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;7142         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;7143         /* Configure the ETR Trigger source */
;;;7144         TIM_ETR_SetConfig(htim->Instance,
000040  e9d41303          LDRD     r1,r3,[r4,#0xc]
000044  68a2              LDR      r2,[r4,#8]
000046  6828              LDR      r0,[r5,#0]
000048  f7fffffe          BL       TIM_ETR_SetConfig
;;;7145                           sSlaveConfig->TriggerPrescaler,
;;;7146                           sSlaveConfig->TriggerPolarity,
;;;7147                           sSlaveConfig->TriggerFilter);
;;;7148         break;
00004c  e02e              B        |L113.172|
;;;7149       }
;;;7150   
;;;7151       case TIM_TS_TI1F_ED:
;;;7152       {
;;;7153         /* Check the parameters */
;;;7154         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;7155         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;7156   
;;;7157         if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
00004e  6820              LDR      r0,[r4,#0]
000050  2805              CMP      r0,#5
000052  d102              BNE      |L113.90|
;;;7158         {
;;;7159           return HAL_ERROR;
000054  2001              MOVS     r0,#1
                  |L113.86|
;;;7160         }
;;;7161   
;;;7162         /* Disable the Channel 1: Reset the CC1E Bit */
;;;7163         tmpccer = htim->Instance->CCER;
;;;7164         htim->Instance->CCER &= ~TIM_CCER_CC1E;
;;;7165         tmpccmr1 = htim->Instance->CCMR1;
;;;7166   
;;;7167         /* Set the filter */
;;;7168         tmpccmr1 &= ~TIM_CCMR1_IC1F;
;;;7169         tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
;;;7170   
;;;7171         /* Write to TIMx CCMR1 and CCER registers */
;;;7172         htim->Instance->CCMR1 = tmpccmr1;
;;;7173         htim->Instance->CCER = tmpccer;
;;;7174         break;
;;;7175       }
;;;7176   
;;;7177       case TIM_TS_TI1FP1:
;;;7178       {
;;;7179         /* Check the parameters */
;;;7180         assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
;;;7181         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;7182         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;7183   
;;;7184         /* Configure TI1 Filter and Polarity */
;;;7185         TIM_TI1_ConfigInputStage(htim->Instance,
;;;7186                                  sSlaveConfig->TriggerPolarity,
;;;7187                                  sSlaveConfig->TriggerFilter);
;;;7188         break;
;;;7189       }
;;;7190   
;;;7191       case TIM_TS_TI2FP2:
;;;7192       {
;;;7193         /* Check the parameters */
;;;7194         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;7195         assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
;;;7196         assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
;;;7197   
;;;7198         /* Configure TI2 Filter and Polarity */
;;;7199         TIM_TI2_ConfigInputStage(htim->Instance,
;;;7200                                  sSlaveConfig->TriggerPolarity,
;;;7201                                  sSlaveConfig->TriggerFilter);
;;;7202         break;
;;;7203       }
;;;7204   
;;;7205       case TIM_TS_ITR0:
;;;7206       case TIM_TS_ITR1:
;;;7207       case TIM_TS_ITR2:
;;;7208       case TIM_TS_ITR3:
;;;7209       {
;;;7210         /* Check the parameter */
;;;7211         assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
;;;7212         break;
;;;7213       }
;;;7214   
;;;7215       default:
;;;7216         status = HAL_ERROR;
;;;7217         break;
;;;7218     }
;;;7219   
;;;7220     return status;
;;;7221   }
000056  e8bd87f0          POP      {r4-r10,pc}
                  |L113.90|
00005a  6828              LDR      r0,[r5,#0]            ;7163
00005c  f8d08020          LDR      r8,[r0,#0x20]         ;7163
000060  6828              LDR      r0,[r5,#0]            ;7164
000062  6a00              LDR      r0,[r0,#0x20]         ;7164
000064  f0200001          BIC      r0,r0,#1              ;7164
000068  6829              LDR      r1,[r5,#0]            ;7164
00006a  6208              STR      r0,[r1,#0x20]         ;7164
00006c  6828              LDR      r0,[r5,#0]            ;7165
00006e  6987              LDR      r7,[r0,#0x18]         ;7165
000070  f02707f0          BIC      r7,r7,#0xf0           ;7168
000074  6920              LDR      r0,[r4,#0x10]         ;7169
000076  ea471700          ORR      r7,r7,r0,LSL #4       ;7169
00007a  6828              LDR      r0,[r5,#0]            ;7172
00007c  6187              STR      r7,[r0,#0x18]         ;7172
00007e  6828              LDR      r0,[r5,#0]            ;7173
000080  f8c08020          STR      r8,[r0,#0x20]         ;7173
000084  e012              B        |L113.172|
000086  6922              LDR      r2,[r4,#0x10]         ;7185
000088  68a1              LDR      r1,[r4,#8]            ;7185
00008a  6828              LDR      r0,[r5,#0]            ;7185
00008c  f7fffffe          BL       TIM_TI1_ConfigInputStage
000090  e00c              B        |L113.172|
000092  6922              LDR      r2,[r4,#0x10]         ;7199
000094  68a1              LDR      r1,[r4,#8]            ;7199
000096  6828              LDR      r0,[r5,#0]            ;7199
000098  f7fffffe          BL       TIM_TI2_ConfigInputStage
00009c  e006              B        |L113.172|
00009e  bf00              NOP                            ;7206
0000a0  bf00              NOP                            ;7207
0000a2  bf00              NOP                            ;7208
0000a4  e002              B        |L113.172|
                  |L113.166|
0000a6  f04f0901          MOV      r9,#1                 ;7216
0000aa  bf00              NOP                            ;7217
                  |L113.172|
0000ac  bf00              NOP                            ;7148
0000ae  4648              MOV      r0,r9                 ;7220
0000b0  e7d1              B        |L113.86|
;;;7222   
                          ENDP


                          AREA ||i.TIM_TI1_ConfigInputStage||, CODE, READONLY, ALIGN=1

                  TIM_TI1_ConfigInputStage PROC
;;;7289     */
;;;7290   static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
000000  b530              PUSH     {r4,r5,lr}
;;;7291   {
000002  460b              MOV      r3,r1
000004  4614              MOV      r4,r2
;;;7292     uint32_t tmpccmr1;
;;;7293     uint32_t tmpccer;
;;;7294   
;;;7295     /* Disable the Channel 1: Reset the CC1E Bit */
;;;7296     tmpccer = TIMx->CCER;
000006  6a02              LDR      r2,[r0,#0x20]
;;;7297     TIMx->CCER &= ~TIM_CCER_CC1E;
000008  6a05              LDR      r5,[r0,#0x20]
00000a  f0250501          BIC      r5,r5,#1
00000e  6205              STR      r5,[r0,#0x20]
;;;7298     tmpccmr1 = TIMx->CCMR1;
000010  6981              LDR      r1,[r0,#0x18]
;;;7299   
;;;7300     /* Set the filter */
;;;7301     tmpccmr1 &= ~TIM_CCMR1_IC1F;
000012  f02101f0          BIC      r1,r1,#0xf0
;;;7302     tmpccmr1 |= (TIM_ICFilter << 4U);
000016  ea411104          ORR      r1,r1,r4,LSL #4
;;;7303   
;;;7304     /* Select the Polarity and set the CC1E Bit */
;;;7305     tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
00001a  f022020a          BIC      r2,r2,#0xa
;;;7306     tmpccer |= TIM_ICPolarity;
00001e  431a              ORRS     r2,r2,r3
;;;7307   
;;;7308     /* Write to TIMx CCMR1 and CCER registers */
;;;7309     TIMx->CCMR1 = tmpccmr1;
000020  6181              STR      r1,[r0,#0x18]
;;;7310     TIMx->CCER = tmpccer;
000022  6202              STR      r2,[r0,#0x20]
;;;7311   }
000024  bd30              POP      {r4,r5,pc}
;;;7312   
                          ENDP


                          AREA ||i.TIM_TI1_SetConfig||, CODE, READONLY, ALIGN=2

                  TIM_TI1_SetConfig PROC
;;;7242     */
;;;7243   void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
000000  b570              PUSH     {r4-r6,lr}
;;;7244                          uint32_t TIM_ICFilter)
;;;7245   {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;7246     uint32_t tmpccmr1;
;;;7247     uint32_t tmpccer;
;;;7248   
;;;7249     /* Disable the Channel 1: Reset the CC1E Bit */
;;;7250     TIMx->CCER &= ~TIM_CCER_CC1E;
000006  6a06              LDR      r6,[r0,#0x20]
000008  f0260601          BIC      r6,r6,#1
00000c  6206              STR      r6,[r0,#0x20]
;;;7251     tmpccmr1 = TIMx->CCMR1;
00000e  6981              LDR      r1,[r0,#0x18]
;;;7252     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;7253   
;;;7254     /* Select the Input */
;;;7255     if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
000012  4e18              LDR      r6,|L115.116|
000014  42b0              CMP      r0,r6
000016  d014              BEQ      |L115.66|
000018  f1b04f80          CMP      r0,#0x40000000
00001c  d011              BEQ      |L115.66|
00001e  4e16              LDR      r6,|L115.120|
000020  42b0              CMP      r0,r6
000022  d00e              BEQ      |L115.66|
000024  4e15              LDR      r6,|L115.124|
000026  42b0              CMP      r0,r6
000028  d00b              BEQ      |L115.66|
00002a  4e15              LDR      r6,|L115.128|
00002c  42b0              CMP      r0,r6
00002e  d008              BEQ      |L115.66|
000030  4e14              LDR      r6,|L115.132|
000032  42b0              CMP      r0,r6
000034  d005              BEQ      |L115.66|
000036  4e14              LDR      r6,|L115.136|
000038  42b0              CMP      r0,r6
00003a  d002              BEQ      |L115.66|
00003c  4e13              LDR      r6,|L115.140|
00003e  42b0              CMP      r0,r6
000040  d101              BNE      |L115.70|
                  |L115.66|
000042  2601              MOVS     r6,#1
000044  e000              B        |L115.72|
                  |L115.70|
000046  2600              MOVS     r6,#0
                  |L115.72|
000048  b11e              CBZ      r6,|L115.82|
;;;7256     {
;;;7257       tmpccmr1 &= ~TIM_CCMR1_CC1S;
00004a  f0210103          BIC      r1,r1,#3
;;;7258       tmpccmr1 |= TIM_ICSelection;
00004e  4329              ORRS     r1,r1,r5
000050  e001              B        |L115.86|
                  |L115.82|
;;;7259     }
;;;7260     else
;;;7261     {
;;;7262       tmpccmr1 |= TIM_CCMR1_CC1S_0;
000052  f0410101          ORR      r1,r1,#1
                  |L115.86|
;;;7263     }
;;;7264   
;;;7265     /* Set the filter */
;;;7266     tmpccmr1 &= ~TIM_CCMR1_IC1F;
000056  f02101f0          BIC      r1,r1,#0xf0
;;;7267     tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
00005a  26f0              MOVS     r6,#0xf0
00005c  ea061603          AND      r6,r6,r3,LSL #4
000060  4331              ORRS     r1,r1,r6
;;;7268   
;;;7269     /* Select the Polarity and set the CC1E Bit */
;;;7270     tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
000062  f022020a          BIC      r2,r2,#0xa
;;;7271     tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
000066  f004060a          AND      r6,r4,#0xa
00006a  4332              ORRS     r2,r2,r6
;;;7272   
;;;7273     /* Write to TIMx CCMR1 and CCER registers */
;;;7274     TIMx->CCMR1 = tmpccmr1;
00006c  6181              STR      r1,[r0,#0x18]
;;;7275     TIMx->CCER = tmpccer;
00006e  6202              STR      r2,[r0,#0x20]
;;;7276   }
000070  bd70              POP      {r4-r6,pc}
;;;7277   
                          ENDP

000072  0000              DCW      0x0000
                  |L115.116|
                          DCD      0x40010000
                  |L115.120|
                          DCD      0x40000400
                  |L115.124|
                          DCD      0x40000800
                  |L115.128|
                          DCD      0x40000c00
                  |L115.132|
                          DCD      0x40010400
                  |L115.136|
                          DCD      0x40014000
                  |L115.140|
                          DCD      0x40001800

                          AREA ||i.TIM_TI2_ConfigInputStage||, CODE, READONLY, ALIGN=1

                  TIM_TI2_ConfigInputStage PROC
;;;7372     */
;;;7373   static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
000000  b530              PUSH     {r4,r5,lr}
;;;7374   {
000002  460b              MOV      r3,r1
000004  4614              MOV      r4,r2
;;;7375     uint32_t tmpccmr1;
;;;7376     uint32_t tmpccer;
;;;7377   
;;;7378     /* Disable the Channel 2: Reset the CC2E Bit */
;;;7379     TIMx->CCER &= ~TIM_CCER_CC2E;
000006  6a05              LDR      r5,[r0,#0x20]
000008  f0250510          BIC      r5,r5,#0x10
00000c  6205              STR      r5,[r0,#0x20]
;;;7380     tmpccmr1 = TIMx->CCMR1;
00000e  6981              LDR      r1,[r0,#0x18]
;;;7381     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;7382   
;;;7383     /* Set the filter */
;;;7384     tmpccmr1 &= ~TIM_CCMR1_IC2F;
000012  f4214170          BIC      r1,r1,#0xf000
;;;7385     tmpccmr1 |= (TIM_ICFilter << 12U);
000016  ea413104          ORR      r1,r1,r4,LSL #12
;;;7386   
;;;7387     /* Select the Polarity and set the CC2E Bit */
;;;7388     tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
00001a  f02202a0          BIC      r2,r2,#0xa0
;;;7389     tmpccer |= (TIM_ICPolarity << 4U);
00001e  ea421203          ORR      r2,r2,r3,LSL #4
;;;7390   
;;;7391     /* Write to TIMx CCMR1 and CCER registers */
;;;7392     TIMx->CCMR1 = tmpccmr1 ;
000022  6181              STR      r1,[r0,#0x18]
;;;7393     TIMx->CCER = tmpccer;
000024  6202              STR      r2,[r0,#0x20]
;;;7394   }
000026  bd30              POP      {r4,r5,pc}
;;;7395   
                          ENDP


                          AREA ||i.TIM_TI2_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_TI2_SetConfig PROC
;;;7332     */
;;;7333   static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
000000  b570              PUSH     {r4-r6,lr}
;;;7334                                 uint32_t TIM_ICFilter)
;;;7335   {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;7336     uint32_t tmpccmr1;
;;;7337     uint32_t tmpccer;
;;;7338   
;;;7339     /* Disable the Channel 2: Reset the CC2E Bit */
;;;7340     TIMx->CCER &= ~TIM_CCER_CC2E;
000006  6a06              LDR      r6,[r0,#0x20]
000008  f0260610          BIC      r6,r6,#0x10
00000c  6206              STR      r6,[r0,#0x20]
;;;7341     tmpccmr1 = TIMx->CCMR1;
00000e  6981              LDR      r1,[r0,#0x18]
;;;7342     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;7343   
;;;7344     /* Select the Input */
;;;7345     tmpccmr1 &= ~TIM_CCMR1_CC2S;
000012  f4217140          BIC      r1,r1,#0x300
;;;7346     tmpccmr1 |= (TIM_ICSelection << 8U);
000016  ea412105          ORR      r1,r1,r5,LSL #8
;;;7347   
;;;7348     /* Set the filter */
;;;7349     tmpccmr1 &= ~TIM_CCMR1_IC2F;
00001a  f4214170          BIC      r1,r1,#0xf000
;;;7350     tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
00001e  f44f4670          MOV      r6,#0xf000
000022  ea063603          AND      r6,r6,r3,LSL #12
000026  4331              ORRS     r1,r1,r6
;;;7351   
;;;7352     /* Select the Polarity and set the CC2E Bit */
;;;7353     tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
000028  f02202a0          BIC      r2,r2,#0xa0
;;;7354     tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
00002c  26a0              MOVS     r6,#0xa0
00002e  ea061604          AND      r6,r6,r4,LSL #4
000032  4332              ORRS     r2,r2,r6
;;;7355   
;;;7356     /* Write to TIMx CCMR1 and CCER registers */
;;;7357     TIMx->CCMR1 = tmpccmr1 ;
000034  6181              STR      r1,[r0,#0x18]
;;;7358     TIMx->CCER = tmpccer;
000036  6202              STR      r2,[r0,#0x20]
;;;7359   }
000038  bd70              POP      {r4-r6,pc}
;;;7360   
                          ENDP


                          AREA ||i.TIM_TI3_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_TI3_SetConfig PROC
;;;7415     */
;;;7416   static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
000000  b570              PUSH     {r4-r6,lr}
;;;7417                                 uint32_t TIM_ICFilter)
;;;7418   {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;7419     uint32_t tmpccmr2;
;;;7420     uint32_t tmpccer;
;;;7421   
;;;7422     /* Disable the Channel 3: Reset the CC3E Bit */
;;;7423     TIMx->CCER &= ~TIM_CCER_CC3E;
000006  6a06              LDR      r6,[r0,#0x20]
000008  f4267680          BIC      r6,r6,#0x100
00000c  6206              STR      r6,[r0,#0x20]
;;;7424     tmpccmr2 = TIMx->CCMR2;
00000e  69c1              LDR      r1,[r0,#0x1c]
;;;7425     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;7426   
;;;7427     /* Select the Input */
;;;7428     tmpccmr2 &= ~TIM_CCMR2_CC3S;
000012  f0210103          BIC      r1,r1,#3
;;;7429     tmpccmr2 |= TIM_ICSelection;
000016  4329              ORRS     r1,r1,r5
;;;7430   
;;;7431     /* Set the filter */
;;;7432     tmpccmr2 &= ~TIM_CCMR2_IC3F;
000018  f02101f0          BIC      r1,r1,#0xf0
;;;7433     tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
00001c  26f0              MOVS     r6,#0xf0
00001e  ea061603          AND      r6,r6,r3,LSL #4
000022  4331              ORRS     r1,r1,r6
;;;7434   
;;;7435     /* Select the Polarity and set the CC3E Bit */
;;;7436     tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
000024  f4226220          BIC      r2,r2,#0xa00
;;;7437     tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
000028  f44f6620          MOV      r6,#0xa00
00002c  ea062604          AND      r6,r6,r4,LSL #8
000030  4332              ORRS     r2,r2,r6
;;;7438   
;;;7439     /* Write to TIMx CCMR2 and CCER registers */
;;;7440     TIMx->CCMR2 = tmpccmr2;
000032  61c1              STR      r1,[r0,#0x1c]
;;;7441     TIMx->CCER = tmpccer;
000034  6202              STR      r2,[r0,#0x20]
;;;7442   }
000036  bd70              POP      {r4-r6,pc}
;;;7443   
                          ENDP


                          AREA ||i.TIM_TI4_SetConfig||, CODE, READONLY, ALIGN=1

                  TIM_TI4_SetConfig PROC
;;;7463     */
;;;7464   static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
000000  b570              PUSH     {r4-r6,lr}
;;;7465                                 uint32_t TIM_ICFilter)
;;;7466   {
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
;;;7467     uint32_t tmpccmr2;
;;;7468     uint32_t tmpccer;
;;;7469   
;;;7470     /* Disable the Channel 4: Reset the CC4E Bit */
;;;7471     TIMx->CCER &= ~TIM_CCER_CC4E;
000006  6a06              LDR      r6,[r0,#0x20]
000008  f4265680          BIC      r6,r6,#0x1000
00000c  6206              STR      r6,[r0,#0x20]
;;;7472     tmpccmr2 = TIMx->CCMR2;
00000e  69c1              LDR      r1,[r0,#0x1c]
;;;7473     tmpccer = TIMx->CCER;
000010  6a02              LDR      r2,[r0,#0x20]
;;;7474   
;;;7475     /* Select the Input */
;;;7476     tmpccmr2 &= ~TIM_CCMR2_CC4S;
000012  f4217140          BIC      r1,r1,#0x300
;;;7477     tmpccmr2 |= (TIM_ICSelection << 8U);
000016  ea412105          ORR      r1,r1,r5,LSL #8
;;;7478   
;;;7479     /* Set the filter */
;;;7480     tmpccmr2 &= ~TIM_CCMR2_IC4F;
00001a  f4214170          BIC      r1,r1,#0xf000
;;;7481     tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
00001e  f44f4670          MOV      r6,#0xf000
000022  ea063603          AND      r6,r6,r3,LSL #12
000026  4331              ORRS     r1,r1,r6
;;;7482   
;;;7483     /* Select the Polarity and set the CC4E Bit */
;;;7484     tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
000028  f4224220          BIC      r2,r2,#0xa000
;;;7485     tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
00002c  f44f4620          MOV      r6,#0xa000
000030  ea063604          AND      r6,r6,r4,LSL #12
000034  4332              ORRS     r2,r2,r6
;;;7486   
;;;7487     /* Write to TIMx CCMR2 and CCER registers */
;;;7488     TIMx->CCMR2 = tmpccmr2;
000036  61c1              STR      r1,[r0,#0x1c]
;;;7489     TIMx->CCER = tmpccer ;
000038  6202              STR      r2,[r0,#0x20]
;;;7490   }
00003a  bd70              POP      {r4-r6,pc}
;;;7491   
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_tim_c_a9d95b52____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_tim_c_a9d95b52____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_tim_c_a9d95b52____REVSH|
#line 478
|__asm___19_stm32f4xx_hal_tim_c_a9d95b52____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_tim_c_a9d95b52____RRX|
#line 665
|__asm___19_stm32f4xx_hal_tim_c_a9d95b52____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
