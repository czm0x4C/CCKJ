; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\usbd_ctlreq.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\usbd_ctlreq.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\usbd_ctlreq.crf ../Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c]
                          THUMB

                          AREA ||i.SWAPBYTE||, CODE, READONLY, ALIGN=1

                  SWAPBYTE PROC
;;;416      */
;;;417    __STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
000000  b530              PUSH     {r4,r5,lr}
;;;418    {
000002  4601              MOV      r1,r0
;;;419      uint16_t _SwapVal, _Byte1, _Byte2;
;;;420      uint8_t *_pbuff = addr;
000004  460a              MOV      r2,r1
;;;421    
;;;422      _Byte1 = *(uint8_t *)_pbuff;
000006  7813              LDRB     r3,[r2,#0]
;;;423      _pbuff++;
000008  1c52              ADDS     r2,r2,#1
;;;424      _Byte2 = *(uint8_t *)_pbuff;
00000a  7814              LDRB     r4,[r2,#0]
;;;425    
;;;426      _SwapVal = (_Byte2 << 8) | _Byte1;
00000c  ea432004          ORR      r0,r3,r4,LSL #8
;;;427    
;;;428      return _SwapVal;
;;;429    }
000010  bd30              POP      {r4,r5,pc}
;;;430    
                          ENDP


                          AREA ||i.USBD_ClrFeature||, CODE, READONLY, ALIGN=1

                  USBD_ClrFeature PROC
;;;914      */
;;;915    static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b570              PUSH     {r4-r6,lr}
;;;916    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;917      switch (pdev->dev_state)
000006  f894029c          LDRB     r0,[r4,#0x29c]
00000a  2801              CMP      r0,#1
00000c  d004              BEQ      |L2.24|
00000e  2802              CMP      r0,#2
000010  d003              BEQ      |L2.26|
000012  2803              CMP      r0,#3
000014  d10c              BNE      |L2.48|
000016  e001              B        |L2.28|
                  |L2.24|
;;;918      {
;;;919        case USBD_STATE_DEFAULT:
;;;920        case USBD_STATE_ADDRESSED:
000018  bf00              NOP      
                  |L2.26|
;;;921        case USBD_STATE_CONFIGURED:
00001a  bf00              NOP      
                  |L2.28|
;;;922          if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
00001c  8868              LDRH     r0,[r5,#2]
00001e  2801              CMP      r0,#1
000020  d105              BNE      |L2.46|
;;;923          {
;;;924            pdev->dev_remote_wakeup = 0U;
000022  2000              MOVS     r0,#0
000024  f8c402a4          STR      r0,[r4,#0x2a4]
;;;925            (void)USBD_CtlSendStatus(pdev);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       USBD_CtlSendStatus
                  |L2.46|
;;;926          }
;;;927          break;
00002e  e004              B        |L2.58|
                  |L2.48|
;;;928    
;;;929        default:
;;;930          USBD_CtlError(pdev, req);
000030  4629              MOV      r1,r5
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       USBD_CtlError
;;;931          break;
000038  bf00              NOP      
                  |L2.58|
00003a  bf00              NOP                            ;927
;;;932      }
;;;933    }
00003c  bd70              POP      {r4-r6,pc}
;;;934    
                          ENDP


                          AREA ||i.USBD_CtlError||, CODE, READONLY, ALIGN=1

                  USBD_CtlError PROC
;;;971      */
;;;972    void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b570              PUSH     {r4-r6,lr}
;;;973    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;974      UNUSED(req);
;;;975    
;;;976      (void)USBD_LL_StallEP(pdev, 0x80U);
000006  2180              MOVS     r1,#0x80
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USBD_LL_StallEP
;;;977      (void)USBD_LL_StallEP(pdev, 0U);
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USBD_LL_StallEP
;;;978    }
000016  bd70              POP      {r4-r6,pc}
;;;979    
                          ENDP


                          AREA ||i.USBD_GetConfig||, CODE, READONLY, ALIGN=1

                  USBD_GetConfig PROC
;;;813      */
;;;814    static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b570              PUSH     {r4-r6,lr}
;;;815    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;816      if (req->wLength != 1U)
000006  88e8              LDRH     r0,[r5,#6]
000008  2801              CMP      r0,#1
00000a  d004              BEQ      |L4.22|
;;;817      {
;;;818        USBD_CtlError(pdev, req);
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       USBD_CtlError
000014  e01e              B        |L4.84|
                  |L4.22|
;;;819      }
;;;820      else
;;;821      {
;;;822        switch (pdev->dev_state)
000016  f894029c          LDRB     r0,[r4,#0x29c]
00001a  2801              CMP      r0,#1
00001c  d004              BEQ      |L4.40|
00001e  2802              CMP      r0,#2
000020  d003              BEQ      |L4.42|
000022  2803              CMP      r0,#3
000024  d110              BNE      |L4.72|
000026  e009              B        |L4.60|
                  |L4.40|
;;;823        {
;;;824          case USBD_STATE_DEFAULT:
;;;825          case USBD_STATE_ADDRESSED:
000028  bf00              NOP      
                  |L4.42|
;;;826            pdev->dev_default_config = 0U;
00002a  2000              MOVS     r0,#0
00002c  60a0              STR      r0,[r4,#8]
;;;827            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
00002e  2201              MOVS     r2,#1
000030  f1040108          ADD      r1,r4,#8
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       USBD_CtlSendData
;;;828            break;
00003a  e00a              B        |L4.82|
                  |L4.60|
;;;829    
;;;830          case USBD_STATE_CONFIGURED:
;;;831            (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
00003c  2201              MOVS     r2,#1
00003e  1d21              ADDS     r1,r4,#4
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       USBD_CtlSendData
;;;832            break;
000046  e004              B        |L4.82|
                  |L4.72|
;;;833    
;;;834          default:
;;;835            USBD_CtlError(pdev, req);
000048  4629              MOV      r1,r5
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       USBD_CtlError
;;;836            break;
000050  bf00              NOP      
                  |L4.82|
000052  bf00              NOP                            ;828
                  |L4.84|
;;;837        }
;;;838      }
;;;839    }
000054  bd70              POP      {r4-r6,pc}
;;;840    
                          ENDP


                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=1

                  USBD_GetDescriptor PROC
;;;425      */
;;;426    static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b5f8              PUSH     {r3-r7,lr}
;;;427    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;428      uint16_t len = 0U;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;429      uint8_t *pbuf = NULL;
00000a  2700              MOVS     r7,#0
;;;430      uint8_t err = 0U;
00000c  2500              MOVS     r5,#0
;;;431    
;;;432      switch (req->wValue >> 8)
00000e  8870              LDRH     r0,[r6,#2]
000010  1200              ASRS     r0,r0,#8
000012  2808              CMP      r0,#8
000014  d275              BCS      |L5.258|
000016  e8dff000          TBB      [pc,r0]
00001a  c704              DCB      0xc7,0x04
00001c  0c20c7c7          DCB      0x0c,0x20,0xc7,0xc7
000020  a5b5              DCB      0xa5,0xb5
;;;433      {
;;;434    #if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
;;;435        case USB_DESC_TYPE_BOS:
;;;436          if (pdev->pDesc->GetBOSDescriptor != NULL)
;;;437          {
;;;438            pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
;;;439          }
;;;440          else
;;;441          {
;;;442            USBD_CtlError(pdev, req);
;;;443            err++;
;;;444          }
;;;445          break;
;;;446    #endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
;;;447        case USB_DESC_TYPE_DEVICE:
;;;448          pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
000022  7c20              LDRB     r0,[r4,#0x10]
000024  f8d412b4          LDR      r1,[r4,#0x2b4]
000028  680a              LDR      r2,[r1,#0]
00002a  4669              MOV      r1,sp
00002c  4790              BLX      r2
00002e  4607              MOV      r7,r0
;;;449          break;
000030  e0c1              B        |L5.438|
;;;450    
;;;451        case USB_DESC_TYPE_CONFIGURATION:
;;;452          if (pdev->dev_speed == USBD_SPEED_HIGH)
000032  7c20              LDRB     r0,[r4,#0x10]
000034  b940              CBNZ     r0,|L5.72|
;;;453          {
;;;454    #ifdef USE_USBD_COMPOSITE
;;;455            if ((uint8_t)(pdev->NumClasses) > 0U)
;;;456            {
;;;457              pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
;;;458            }
;;;459            else
;;;460    #endif /* USE_USBD_COMPOSITE */
;;;461            {
;;;462              pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
000036  f8d402b8          LDR      r0,[r4,#0x2b8]
00003a  6a81              LDR      r1,[r0,#0x28]
00003c  4668              MOV      r0,sp
00003e  4788              BLX      r1
000040  4607              MOV      r7,r0
;;;463            }
;;;464            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
000042  2002              MOVS     r0,#2
000044  7078              STRB     r0,[r7,#1]
000046  e007              B        |L5.88|
                  |L5.72|
;;;465          }
;;;466          else
;;;467          {
;;;468    #ifdef USE_USBD_COMPOSITE
;;;469            if ((uint8_t)(pdev->NumClasses) > 0U)
;;;470            {
;;;471              pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
;;;472            }
;;;473            else
;;;474    #endif /* USE_USBD_COMPOSITE */
;;;475            {
;;;476              pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
000048  f8d402b8          LDR      r0,[r4,#0x2b8]
00004c  6ac1              LDR      r1,[r0,#0x2c]
00004e  4668              MOV      r0,sp
000050  4788              BLX      r1
000052  4607              MOV      r7,r0
;;;477            }
;;;478            pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
000054  2002              MOVS     r0,#2
000056  7078              STRB     r0,[r7,#1]
                  |L5.88|
;;;479          }
;;;480          break;
000058  e0ad              B        |L5.438|
;;;481    
;;;482        case USB_DESC_TYPE_STRING:
;;;483          switch ((uint8_t)(req->wValue))
00005a  78b0              LDRB     r0,[r6,#2]
00005c  2806              CMP      r0,#6
00005e  d278              BCS      |L5.338|
000060  e8dff000          TBB      [pc,r0]
000064  0316293c          DCB      0x03,0x16,0x29,0x3c
000068  5063              DCB      0x50,0x63
;;;484          {
;;;485            case USBD_IDX_LANGID_STR:
;;;486              if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
00006a  f8d402b4          LDR      r0,[r4,#0x2b4]
00006e  6840              LDR      r0,[r0,#4]
000070  b138              CBZ      r0,|L5.130|
;;;487              {
;;;488                pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
000072  7c20              LDRB     r0,[r4,#0x10]
000074  f8d412b4          LDR      r1,[r4,#0x2b4]
000078  684a              LDR      r2,[r1,#4]
00007a  4669              MOV      r1,sp
00007c  4790              BLX      r2
00007e  4607              MOV      r7,r0
000080  e005              B        |L5.142|
                  |L5.130|
;;;489              }
;;;490              else
;;;491              {
;;;492                USBD_CtlError(pdev, req);
000082  4631              MOV      r1,r6
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       USBD_CtlError
;;;493                err++;
00008a  1c68              ADDS     r0,r5,#1
00008c  b2c5              UXTB     r5,r0
                  |L5.142|
;;;494              }
;;;495              break;
00008e  e067              B        |L5.352|
;;;496    
;;;497            case USBD_IDX_MFC_STR:
;;;498              if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
000090  f8d402b4          LDR      r0,[r4,#0x2b4]
000094  6880              LDR      r0,[r0,#8]
000096  b138              CBZ      r0,|L5.168|
;;;499              {
;;;500                pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
000098  7c20              LDRB     r0,[r4,#0x10]
00009a  f8d412b4          LDR      r1,[r4,#0x2b4]
00009e  688a              LDR      r2,[r1,#8]
0000a0  4669              MOV      r1,sp
0000a2  4790              BLX      r2
0000a4  4607              MOV      r7,r0
0000a6  e005              B        |L5.180|
                  |L5.168|
;;;501              }
;;;502              else
;;;503              {
;;;504                USBD_CtlError(pdev, req);
0000a8  4631              MOV      r1,r6
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       USBD_CtlError
;;;505                err++;
0000b0  1c68              ADDS     r0,r5,#1
0000b2  b2c5              UXTB     r5,r0
                  |L5.180|
;;;506              }
;;;507              break;
0000b4  e054              B        |L5.352|
;;;508    
;;;509            case USBD_IDX_PRODUCT_STR:
;;;510              if (pdev->pDesc->GetProductStrDescriptor != NULL)
0000b6  f8d402b4          LDR      r0,[r4,#0x2b4]
0000ba  68c0              LDR      r0,[r0,#0xc]
0000bc  b138              CBZ      r0,|L5.206|
;;;511              {
;;;512                pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
0000be  7c20              LDRB     r0,[r4,#0x10]
0000c0  f8d412b4          LDR      r1,[r4,#0x2b4]
0000c4  68ca              LDR      r2,[r1,#0xc]
0000c6  4669              MOV      r1,sp
0000c8  4790              BLX      r2
0000ca  4607              MOV      r7,r0
0000cc  e005              B        |L5.218|
                  |L5.206|
;;;513              }
;;;514              else
;;;515              {
;;;516                USBD_CtlError(pdev, req);
0000ce  4631              MOV      r1,r6
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       USBD_CtlError
;;;517                err++;
0000d6  1c68              ADDS     r0,r5,#1
0000d8  b2c5              UXTB     r5,r0
                  |L5.218|
;;;518              }
;;;519              break;
0000da  e041              B        |L5.352|
;;;520    
;;;521            case USBD_IDX_SERIAL_STR:
;;;522              if (pdev->pDesc->GetSerialStrDescriptor != NULL)
0000dc  f8d402b4          LDR      r0,[r4,#0x2b4]
0000e0  6900              LDR      r0,[r0,#0x10]
0000e2  b138              CBZ      r0,|L5.244|
;;;523              {
;;;524                pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
0000e4  7c20              LDRB     r0,[r4,#0x10]
0000e6  f8d412b4          LDR      r1,[r4,#0x2b4]
0000ea  690a              LDR      r2,[r1,#0x10]
0000ec  4669              MOV      r1,sp
0000ee  4790              BLX      r2
0000f0  4607              MOV      r7,r0
0000f2  e005              B        |L5.256|
                  |L5.244|
;;;525              }
;;;526              else
;;;527              {
;;;528                USBD_CtlError(pdev, req);
0000f4  4631              MOV      r1,r6
0000f6  4620              MOV      r0,r4
0000f8  f7fffffe          BL       USBD_CtlError
;;;529                err++;
0000fc  1c68              ADDS     r0,r5,#1
0000fe  b2c5              UXTB     r5,r0
                  |L5.256|
;;;530              }
;;;531              break;
000100  e02e              B        |L5.352|
                  |L5.258|
000102  e051              B        |L5.424|
;;;532    
;;;533            case USBD_IDX_CONFIG_STR:
;;;534              if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
000104  f8d402b4          LDR      r0,[r4,#0x2b4]
000108  6940              LDR      r0,[r0,#0x14]
00010a  b138              CBZ      r0,|L5.284|
;;;535              {
;;;536                pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
00010c  7c20              LDRB     r0,[r4,#0x10]
00010e  f8d412b4          LDR      r1,[r4,#0x2b4]
000112  694a              LDR      r2,[r1,#0x14]
000114  4669              MOV      r1,sp
000116  4790              BLX      r2
000118  4607              MOV      r7,r0
00011a  e005              B        |L5.296|
                  |L5.284|
;;;537              }
;;;538              else
;;;539              {
;;;540                USBD_CtlError(pdev, req);
00011c  4631              MOV      r1,r6
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       USBD_CtlError
;;;541                err++;
000124  1c68              ADDS     r0,r5,#1
000126  b2c5              UXTB     r5,r0
                  |L5.296|
;;;542              }
;;;543              break;
000128  e01a              B        |L5.352|
;;;544    
;;;545            case USBD_IDX_INTERFACE_STR:
;;;546              if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
00012a  f8d402b4          LDR      r0,[r4,#0x2b4]
00012e  6980              LDR      r0,[r0,#0x18]
000130  b140              CBZ      r0,|L5.324|
;;;547              {
;;;548                pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
000132  7c20              LDRB     r0,[r4,#0x10]
000134  f8d412b4          LDR      r1,[r4,#0x2b4]
000138  698a              LDR      r2,[r1,#0x18]
00013a  4669              MOV      r1,sp
00013c  4790              BLX      r2
00013e  4607              MOV      r7,r0
000140  e006              B        |L5.336|
000142  e006              B        |L5.338|
                  |L5.324|
;;;549              }
;;;550              else
;;;551              {
;;;552                USBD_CtlError(pdev, req);
000144  4631              MOV      r1,r6
000146  4620              MOV      r0,r4
000148  f7fffffe          BL       USBD_CtlError
;;;553                err++;
00014c  1c68              ADDS     r0,r5,#1
00014e  b2c5              UXTB     r5,r0
                  |L5.336|
;;;554              }
;;;555              break;
000150  e006              B        |L5.352|
                  |L5.338|
;;;556    
;;;557            default:
;;;558    #if (USBD_SUPPORT_USER_STRING_DESC == 1U)
;;;559              pbuf = NULL;
;;;560    
;;;561    
;;;562              for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
;;;563              {
;;;564                if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
;;;565                {
;;;566                  pdev->classId = idx;
;;;567                  pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
;;;568    
;;;569                  if (pbuf == NULL) /* This means that no class recognized the string index */
;;;570                  {
;;;571                    continue;
;;;572                  }
;;;573                  else
;;;574                  {
;;;575                    break;
;;;576                  }
;;;577                }
;;;578              }
;;;579    
;;;580    #endif /* USBD_SUPPORT_USER_STRING_DESC  */
;;;581    
;;;582    #if (USBD_CLASS_USER_STRING_DESC == 1U)
;;;583              if (pdev->pDesc->GetUserStrDescriptor != NULL)
;;;584              {
;;;585                pbuf = pdev->pDesc->GetUserStrDescriptor(pdev->dev_speed, (req->wValue), &len);
;;;586              }
;;;587              else
;;;588              {
;;;589                USBD_CtlError(pdev, req);
;;;590                err++;
;;;591              }
;;;592    #endif /* USBD_SUPPORT_USER_STRING_DESC  */
;;;593    
;;;594    #if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
;;;595              USBD_CtlError(pdev, req);
000152  4631              MOV      r1,r6
000154  4620              MOV      r0,r4
000156  f7fffffe          BL       USBD_CtlError
;;;596              err++;
00015a  1c68              ADDS     r0,r5,#1
00015c  b2c5              UXTB     r5,r0
;;;597    #endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
;;;598              break;
00015e  bf00              NOP      
                  |L5.352|
000160  bf00              NOP                            ;495
;;;599          }
;;;600          break;
000162  e028              B        |L5.438|
;;;601    
;;;602        case USB_DESC_TYPE_DEVICE_QUALIFIER:
;;;603          if (pdev->dev_speed == USBD_SPEED_HIGH)
000164  7c20              LDRB     r0,[r4,#0x10]
000166  b930              CBNZ     r0,|L5.374|
;;;604          {
;;;605    #ifdef USE_USBD_COMPOSITE
;;;606            if ((uint8_t)(pdev->NumClasses) > 0U)
;;;607            {
;;;608              pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
;;;609            }
;;;610            else
;;;611    #endif /* USE_USBD_COMPOSITE */
;;;612            {
;;;613              pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
000168  f8d402b8          LDR      r0,[r4,#0x2b8]
00016c  6b41              LDR      r1,[r0,#0x34]
00016e  4668              MOV      r0,sp
000170  4788              BLX      r1
000172  4607              MOV      r7,r0
000174  e005              B        |L5.386|
                  |L5.374|
;;;614            }
;;;615          }
;;;616          else
;;;617          {
;;;618            USBD_CtlError(pdev, req);
000176  4631              MOV      r1,r6
000178  4620              MOV      r0,r4
00017a  f7fffffe          BL       USBD_CtlError
;;;619            err++;
00017e  1c68              ADDS     r0,r5,#1
000180  b2c5              UXTB     r5,r0
                  |L5.386|
;;;620          }
;;;621          break;
000182  e018              B        |L5.438|
;;;622    
;;;623        case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
;;;624          if (pdev->dev_speed == USBD_SPEED_HIGH)
000184  7c20              LDRB     r0,[r4,#0x10]
000186  b940              CBNZ     r0,|L5.410|
;;;625          {
;;;626    #ifdef USE_USBD_COMPOSITE
;;;627            if ((uint8_t)(pdev->NumClasses) > 0U)
;;;628            {
;;;629              pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
;;;630            }
;;;631            else
;;;632    #endif /* USE_USBD_COMPOSITE */
;;;633            {
;;;634              pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
000188  f8d402b8          LDR      r0,[r4,#0x2b8]
00018c  6b01              LDR      r1,[r0,#0x30]
00018e  4668              MOV      r0,sp
000190  4788              BLX      r1
000192  4607              MOV      r7,r0
;;;635            }
;;;636            pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
000194  2007              MOVS     r0,#7
000196  7078              STRB     r0,[r7,#1]
000198  e005              B        |L5.422|
                  |L5.410|
;;;637          }
;;;638          else
;;;639          {
;;;640            USBD_CtlError(pdev, req);
00019a  4631              MOV      r1,r6
00019c  4620              MOV      r0,r4
00019e  f7fffffe          BL       USBD_CtlError
;;;641            err++;
0001a2  1c68              ADDS     r0,r5,#1
0001a4  b2c5              UXTB     r5,r0
                  |L5.422|
;;;642          }
;;;643          break;
0001a6  e006              B        |L5.438|
                  |L5.424|
;;;644    
;;;645        default:
;;;646          USBD_CtlError(pdev, req);
0001a8  4631              MOV      r1,r6
0001aa  4620              MOV      r0,r4
0001ac  f7fffffe          BL       USBD_CtlError
;;;647          err++;
0001b0  1c68              ADDS     r0,r5,#1
0001b2  b2c5              UXTB     r5,r0
;;;648          break;
0001b4  bf00              NOP      
                  |L5.438|
0001b6  bf00              NOP                            ;449
;;;649      }
;;;650    
;;;651      if (err != 0U)
0001b8  b105              CBZ      r5,|L5.444|
                  |L5.442|
;;;652      {
;;;653        return;
;;;654      }
;;;655    
;;;656      if (req->wLength != 0U)
;;;657      {
;;;658        if (len != 0U)
;;;659        {
;;;660          len = MIN(len, req->wLength);
;;;661          (void)USBD_CtlSendData(pdev, pbuf, len);
;;;662        }
;;;663        else
;;;664        {
;;;665          USBD_CtlError(pdev, req);
;;;666        }
;;;667      }
;;;668      else
;;;669      {
;;;670        (void)USBD_CtlSendStatus(pdev);
;;;671      }
;;;672    }
0001ba  bdf8              POP      {r3-r7,pc}
                  |L5.444|
0001bc  88f0              LDRH     r0,[r6,#6]            ;656
0001be  b1c0              CBZ      r0,|L5.498|
0001c0  f8bd0000          LDRH     r0,[sp,#0]            ;658
0001c4  b180              CBZ      r0,|L5.488|
0001c6  88f0              LDRH     r0,[r6,#6]            ;660
0001c8  f8bd1000          LDRH     r1,[sp,#0]            ;660
0001cc  4288              CMP      r0,r1                 ;660
0001ce  dd02              BLE      |L5.470|
0001d0  f8bd0000          LDRH     r0,[sp,#0]            ;660
0001d4  e000              B        |L5.472|
                  |L5.470|
0001d6  88f0              LDRH     r0,[r6,#6]            ;660
                  |L5.472|
0001d8  9000              STR      r0,[sp,#0]            ;660
0001da  f8bd2000          LDRH     r2,[sp,#0]            ;661
0001de  4639              MOV      r1,r7                 ;661
0001e0  4620              MOV      r0,r4                 ;661
0001e2  f7fffffe          BL       USBD_CtlSendData
0001e6  e007              B        |L5.504|
                  |L5.488|
0001e8  4631              MOV      r1,r6                 ;665
0001ea  4620              MOV      r0,r4                 ;665
0001ec  f7fffffe          BL       USBD_CtlError
0001f0  e002              B        |L5.504|
                  |L5.498|
0001f2  4620              MOV      r0,r4                 ;670
0001f4  f7fffffe          BL       USBD_CtlSendStatus
                  |L5.504|
0001f8  bf00              NOP      
0001fa  e7de              B        |L5.442|
;;;673    
                          ENDP


                          AREA ||i.USBD_GetLen||, CODE, READONLY, ALIGN=1

                  USBD_GetLen PROC
;;;1024     */
;;;1025   static uint8_t USBD_GetLen(uint8_t *buf)
000000  4601              MOV      r1,r0
;;;1026   {
;;;1027     uint8_t  len = 0U;
000002  2000              MOVS     r0,#0
;;;1028     uint8_t *pbuff = buf;
000004  460a              MOV      r2,r1
;;;1029   
;;;1030     while (*pbuff != (uint8_t)'\0')
000006  e002              B        |L6.14|
                  |L6.8|
;;;1031     {
;;;1032       len++;
000008  1c43              ADDS     r3,r0,#1
00000a  b2d8              UXTB     r0,r3
;;;1033       pbuff++;
00000c  1c52              ADDS     r2,r2,#1
                  |L6.14|
00000e  7813              LDRB     r3,[r2,#0]            ;1030
000010  2b00              CMP      r3,#0                 ;1030
000012  d1f9              BNE      |L6.8|
;;;1034     }
;;;1035   
;;;1036     return len;
;;;1037   }
000014  4770              BX       lr
;;;1038   /**
                          ENDP


                          AREA ||i.USBD_GetStatus||, CODE, READONLY, ALIGN=1

                  USBD_GetStatus PROC
;;;847      */
;;;848    static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b570              PUSH     {r4-r6,lr}
;;;849    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;850      switch (pdev->dev_state)
000006  f894029c          LDRB     r0,[r4,#0x29c]
00000a  2801              CMP      r0,#1
00000c  d004              BEQ      |L7.24|
00000e  2802              CMP      r0,#2
000010  d003              BEQ      |L7.26|
000012  2803              CMP      r0,#3
000014  d11a              BNE      |L7.76|
000016  e001              B        |L7.28|
                  |L7.24|
;;;851      {
;;;852        case USBD_STATE_DEFAULT:
;;;853        case USBD_STATE_ADDRESSED:
000018  bf00              NOP      
                  |L7.26|
;;;854        case USBD_STATE_CONFIGURED:
00001a  bf00              NOP      
                  |L7.28|
;;;855          if (req->wLength != 0x2U)
00001c  88e8              LDRH     r0,[r5,#6]
00001e  2802              CMP      r0,#2
000020  d004              BEQ      |L7.44|
;;;856          {
;;;857            USBD_CtlError(pdev, req);
000022  4629              MOV      r1,r5
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       USBD_CtlError
;;;858            break;
00002a  e014              B        |L7.86|
                  |L7.44|
;;;859          }
;;;860    
;;;861    #if (USBD_SELF_POWERED == 1U)
;;;862          pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
00002c  2001              MOVS     r0,#1
00002e  60e0              STR      r0,[r4,#0xc]
;;;863    #else
;;;864          pdev->dev_config_status = 0U;
;;;865    #endif /* USBD_SELF_POWERED */
;;;866    
;;;867          if (pdev->dev_remote_wakeup != 0U)
000030  f8d402a4          LDR      r0,[r4,#0x2a4]
000034  b118              CBZ      r0,|L7.62|
;;;868          {
;;;869            pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
000036  68e0              LDR      r0,[r4,#0xc]
000038  f0400002          ORR      r0,r0,#2
00003c  60e0              STR      r0,[r4,#0xc]
                  |L7.62|
;;;870          }
;;;871    
;;;872          (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
00003e  2202              MOVS     r2,#2
000040  f104010c          ADD      r1,r4,#0xc
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       USBD_CtlSendData
;;;873          break;
00004a  e004              B        |L7.86|
                  |L7.76|
;;;874    
;;;875        default:
;;;876          USBD_CtlError(pdev, req);
00004c  4629              MOV      r1,r5
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       USBD_CtlError
;;;877          break;
000054  bf00              NOP      
                  |L7.86|
000056  bf00              NOP                            ;858
;;;878      }
;;;879    }
000058  bd70              POP      {r4-r6,pc}
;;;880    
                          ENDP


                          AREA ||i.USBD_GetString||, CODE, READONLY, ALIGN=1

                  USBD_GetString PROC
;;;988      */
;;;989    void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;990    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;991      uint8_t idx = 0U;
00000a  2400              MOVS     r4,#0
;;;992      uint8_t *pdesc;
;;;993    
;;;994      if (desc == NULL)
00000c  b90f              CBNZ     r7,|L8.18|
                  |L8.14|
;;;995      {
;;;996        return;
;;;997      }
;;;998    
;;;999      pdesc = desc;
;;;1000     *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
;;;1001   
;;;1002     unicode[idx] = *(uint8_t *)len;
;;;1003     idx++;
;;;1004     unicode[idx] = USB_DESC_TYPE_STRING;
;;;1005     idx++;
;;;1006   
;;;1007     while (*pdesc != (uint8_t)'\0')
;;;1008     {
;;;1009       unicode[idx] = *pdesc;
;;;1010       pdesc++;
;;;1011       idx++;
;;;1012   
;;;1013       unicode[idx] = 0U;
;;;1014       idx++;
;;;1015     }
;;;1016   }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L8.18|
000012  463e              MOV      r6,r7                 ;999
000014  4630              MOV      r0,r6                 ;1000
000016  f7fffffe          BL       USBD_GetLen
00001a  2102              MOVS     r1,#2                 ;1000
00001c  eb010040          ADD      r0,r1,r0,LSL #1       ;1000
000020  f8a80000          STRH     r0,[r8,#0]            ;1000
000024  f8980000          LDRB     r0,[r8,#0]            ;1002
000028  5528              STRB     r0,[r5,r4]            ;1002
00002a  1c60              ADDS     r0,r4,#1              ;1003
00002c  b2c4              UXTB     r4,r0                 ;1003
00002e  2003              MOVS     r0,#3                 ;1004
000030  5528              STRB     r0,[r5,r4]            ;1004
000032  1c60              ADDS     r0,r4,#1              ;1005
000034  b2c4              UXTB     r4,r0                 ;1005
000036  e008              B        |L8.74|
                  |L8.56|
000038  7830              LDRB     r0,[r6,#0]            ;1009
00003a  5528              STRB     r0,[r5,r4]            ;1009
00003c  1c76              ADDS     r6,r6,#1              ;1010
00003e  1c60              ADDS     r0,r4,#1              ;1011
000040  b2c4              UXTB     r4,r0                 ;1011
000042  2000              MOVS     r0,#0                 ;1013
000044  5528              STRB     r0,[r5,r4]            ;1013
000046  1c60              ADDS     r0,r4,#1              ;1014
000048  b2c4              UXTB     r4,r0                 ;1014
                  |L8.74|
00004a  7830              LDRB     r0,[r6,#0]            ;1007
00004c  2800              CMP      r0,#0                 ;1007
00004e  d1f3              BNE      |L8.56|
000050  bf00              NOP      
000052  e7dc              B        |L8.14|
;;;1017   
                          ENDP


                          AREA ||i.USBD_ParseSetupRequest||, CODE, READONLY, ALIGN=1

                  USBD_ParseSetupRequest PROC
;;;942      */
;;;943    void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
000000  b570              PUSH     {r4-r6,lr}
;;;944    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;945      uint8_t *pbuff = pdata;
000006  4634              MOV      r4,r6
;;;946    
;;;947      req->bmRequest = *(uint8_t *)(pbuff);
000008  7820              LDRB     r0,[r4,#0]
00000a  7028              STRB     r0,[r5,#0]
;;;948    
;;;949      pbuff++;
00000c  1c64              ADDS     r4,r4,#1
;;;950      req->bRequest = *(uint8_t *)(pbuff);
00000e  7820              LDRB     r0,[r4,#0]
000010  7068              STRB     r0,[r5,#1]
;;;951    
;;;952      pbuff++;
000012  1c64              ADDS     r4,r4,#1
;;;953      req->wValue = SWAPBYTE(pbuff);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       SWAPBYTE
00001a  8068              STRH     r0,[r5,#2]
;;;954    
;;;955      pbuff++;
00001c  1c64              ADDS     r4,r4,#1
;;;956      pbuff++;
00001e  1c64              ADDS     r4,r4,#1
;;;957      req->wIndex = SWAPBYTE(pbuff);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SWAPBYTE
000026  80a8              STRH     r0,[r5,#4]
;;;958    
;;;959      pbuff++;
000028  1c64              ADDS     r4,r4,#1
;;;960      pbuff++;
00002a  1c64              ADDS     r4,r4,#1
;;;961      req->wLength = SWAPBYTE(pbuff);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       SWAPBYTE
000032  80e8              STRH     r0,[r5,#6]
;;;962    }
000034  bd70              POP      {r4-r6,pc}
;;;963    
                          ENDP


                          AREA ||i.USBD_SetAddress||, CODE, READONLY, ALIGN=1

                  USBD_SetAddress PROC
;;;681      */
;;;682    static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b570              PUSH     {r4-r6,lr}
;;;683    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;684      uint8_t  dev_addr;
;;;685    
;;;686      if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
000006  88a8              LDRH     r0,[r5,#4]
000008  bb10              CBNZ     r0,|L10.80|
00000a  88e8              LDRH     r0,[r5,#6]
00000c  bb00              CBNZ     r0,|L10.80|
00000e  8868              LDRH     r0,[r5,#2]
000010  2880              CMP      r0,#0x80
000012  d21d              BCS      |L10.80|
;;;687      {
;;;688        dev_addr = (uint8_t)(req->wValue) & 0x7FU;
000014  78a8              LDRB     r0,[r5,#2]
000016  f000067f          AND      r6,r0,#0x7f
;;;689    
;;;690        if (pdev->dev_state == USBD_STATE_CONFIGURED)
00001a  f894029c          LDRB     r0,[r4,#0x29c]
00001e  2803              CMP      r0,#3
000020  d104              BNE      |L10.44|
;;;691        {
;;;692          USBD_CtlError(pdev, req);
000022  4629              MOV      r1,r5
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       USBD_CtlError
00002a  e015              B        |L10.88|
                  |L10.44|
;;;693        }
;;;694        else
;;;695        {
;;;696          pdev->dev_address = dev_addr;
00002c  f884629e          STRB     r6,[r4,#0x29e]
;;;697          (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
000030  4631              MOV      r1,r6
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       USBD_LL_SetUSBAddress
;;;698          (void)USBD_CtlSendStatus(pdev);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       USBD_CtlSendStatus
;;;699    
;;;700          if (dev_addr != 0U)
00003e  b11e              CBZ      r6,|L10.72|
;;;701          {
;;;702            pdev->dev_state = USBD_STATE_ADDRESSED;
000040  2002              MOVS     r0,#2
000042  f884029c          STRB     r0,[r4,#0x29c]
000046  e007              B        |L10.88|
                  |L10.72|
;;;703          }
;;;704          else
;;;705          {
;;;706            pdev->dev_state = USBD_STATE_DEFAULT;
000048  2001              MOVS     r0,#1
00004a  f884029c          STRB     r0,[r4,#0x29c]
00004e  e003              B        |L10.88|
                  |L10.80|
;;;707          }
;;;708        }
;;;709      }
;;;710      else
;;;711      {
;;;712        USBD_CtlError(pdev, req);
000050  4629              MOV      r1,r5
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       USBD_CtlError
                  |L10.88|
;;;713      }
;;;714    }
000058  bd70              POP      {r4-r6,pc}
;;;715    
                          ENDP


                          AREA ||i.USBD_SetConfig||, CODE, READONLY, ALIGN=2

                  USBD_SetConfig PROC
;;;722      */
;;;723    static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b570              PUSH     {r4-r6,lr}
;;;724    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;725      USBD_StatusTypeDef ret = USBD_OK;
000006  2500              MOVS     r5,#0
;;;726      static uint8_t cfgidx;
;;;727    
;;;728      cfgidx = (uint8_t)(req->wValue);
000008  78b0              LDRB     r0,[r6,#2]
00000a  493d              LDR      r1,|L11.256|
00000c  7008              STRB     r0,[r1,#0]
;;;729    
;;;730      if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
00000e  4608              MOV      r0,r1
000010  7800              LDRB     r0,[r0,#0]  ; cfgidx
000012  2801              CMP      r0,#1
000014  d905              BLS      |L11.34|
;;;731      {
;;;732        USBD_CtlError(pdev, req);
000016  4631              MOV      r1,r6
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       USBD_CtlError
;;;733        return USBD_FAIL;
00001e  2003              MOVS     r0,#3
                  |L11.32|
;;;734      }
;;;735    
;;;736      switch (pdev->dev_state)
;;;737      {
;;;738        case USBD_STATE_ADDRESSED:
;;;739          if (cfgidx != 0U)
;;;740          {
;;;741            pdev->dev_config = cfgidx;
;;;742    
;;;743            ret = USBD_SetClassConfig(pdev, cfgidx);
;;;744    
;;;745            if (ret != USBD_OK)
;;;746            {
;;;747              USBD_CtlError(pdev, req);
;;;748              pdev->dev_state = USBD_STATE_ADDRESSED;
;;;749            }
;;;750            else
;;;751            {
;;;752              (void)USBD_CtlSendStatus(pdev);
;;;753              pdev->dev_state = USBD_STATE_CONFIGURED;
;;;754            }
;;;755          }
;;;756          else
;;;757          {
;;;758            (void)USBD_CtlSendStatus(pdev);
;;;759          }
;;;760          break;
;;;761    
;;;762        case USBD_STATE_CONFIGURED:
;;;763          if (cfgidx == 0U)
;;;764          {
;;;765            pdev->dev_state = USBD_STATE_ADDRESSED;
;;;766            pdev->dev_config = cfgidx;
;;;767            (void)USBD_ClrClassConfig(pdev, cfgidx);
;;;768            (void)USBD_CtlSendStatus(pdev);
;;;769          }
;;;770          else if (cfgidx != pdev->dev_config)
;;;771          {
;;;772            /* Clear old configuration */
;;;773            (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
;;;774    
;;;775            /* set new configuration */
;;;776            pdev->dev_config = cfgidx;
;;;777    
;;;778            ret = USBD_SetClassConfig(pdev, cfgidx);
;;;779    
;;;780            if (ret != USBD_OK)
;;;781            {
;;;782              USBD_CtlError(pdev, req);
;;;783              (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
;;;784              pdev->dev_state = USBD_STATE_ADDRESSED;
;;;785            }
;;;786            else
;;;787            {
;;;788              (void)USBD_CtlSendStatus(pdev);
;;;789            }
;;;790          }
;;;791          else
;;;792          {
;;;793            (void)USBD_CtlSendStatus(pdev);
;;;794          }
;;;795          break;
;;;796    
;;;797        default:
;;;798          USBD_CtlError(pdev, req);
;;;799          (void)USBD_ClrClassConfig(pdev, cfgidx);
;;;800          ret = USBD_FAIL;
;;;801          break;
;;;802      }
;;;803    
;;;804      return ret;
;;;805    }
000020  bd70              POP      {r4-r6,pc}
                  |L11.34|
000022  f894029c          LDRB     r0,[r4,#0x29c]        ;736
000026  2802              CMP      r0,#2                 ;736
000028  d002              BEQ      |L11.48|
00002a  2803              CMP      r0,#3                 ;736
00002c  d159              BNE      |L11.226|
00002e  e01f              B        |L11.112|
                  |L11.48|
000030  4833              LDR      r0,|L11.256|
000032  7800              LDRB     r0,[r0,#0]            ;739  ; cfgidx
000034  b1c0              CBZ      r0,|L11.104|
000036  4832              LDR      r0,|L11.256|
000038  7800              LDRB     r0,[r0,#0]            ;741  ; cfgidx
00003a  6060              STR      r0,[r4,#4]            ;741
00003c  4830              LDR      r0,|L11.256|
00003e  7801              LDRB     r1,[r0,#0]            ;743  ; cfgidx
000040  4620              MOV      r0,r4                 ;743
000042  f7fffffe          BL       USBD_SetClassConfig
000046  4605              MOV      r5,r0                 ;743
000048  b13d              CBZ      r5,|L11.90|
00004a  4631              MOV      r1,r6                 ;747
00004c  4620              MOV      r0,r4                 ;747
00004e  f7fffffe          BL       USBD_CtlError
000052  2002              MOVS     r0,#2                 ;748
000054  f884029c          STRB     r0,[r4,#0x29c]        ;748
000058  e009              B        |L11.110|
                  |L11.90|
00005a  4620              MOV      r0,r4                 ;752
00005c  f7fffffe          BL       USBD_CtlSendStatus
000060  2003              MOVS     r0,#3                 ;753
000062  f884029c          STRB     r0,[r4,#0x29c]        ;753
000066  e002              B        |L11.110|
                  |L11.104|
000068  4620              MOV      r0,r4                 ;758
00006a  f7fffffe          BL       USBD_CtlSendStatus
                  |L11.110|
00006e  e043              B        |L11.248|
                  |L11.112|
000070  4823              LDR      r0,|L11.256|
000072  7800              LDRB     r0,[r0,#0]            ;763  ; cfgidx
000074  b970              CBNZ     r0,|L11.148|
000076  2002              MOVS     r0,#2                 ;765
000078  f884029c          STRB     r0,[r4,#0x29c]        ;765
00007c  4820              LDR      r0,|L11.256|
00007e  7800              LDRB     r0,[r0,#0]            ;766  ; cfgidx
000080  6060              STR      r0,[r4,#4]            ;766
000082  481f              LDR      r0,|L11.256|
000084  7801              LDRB     r1,[r0,#0]            ;767  ; cfgidx
000086  4620              MOV      r0,r4                 ;767
000088  f7fffffe          BL       USBD_ClrClassConfig
00008c  4620              MOV      r0,r4                 ;768
00008e  f7fffffe          BL       USBD_CtlSendStatus
000092  e025              B        |L11.224|
                  |L11.148|
000094  491a              LDR      r1,|L11.256|
000096  7809              LDRB     r1,[r1,#0]            ;770  ; cfgidx
000098  6860              LDR      r0,[r4,#4]            ;770
00009a  4288              CMP      r0,r1                 ;770
00009c  d01d              BEQ      |L11.218|
00009e  7921              LDRB     r1,[r4,#4]            ;773
0000a0  4620              MOV      r0,r4                 ;773
0000a2  f7fffffe          BL       USBD_ClrClassConfig
0000a6  4816              LDR      r0,|L11.256|
0000a8  7800              LDRB     r0,[r0,#0]            ;776  ; cfgidx
0000aa  6060              STR      r0,[r4,#4]            ;776
0000ac  4814              LDR      r0,|L11.256|
0000ae  7801              LDRB     r1,[r0,#0]            ;778  ; cfgidx
0000b0  4620              MOV      r0,r4                 ;778
0000b2  f7fffffe          BL       USBD_SetClassConfig
0000b6  4605              MOV      r5,r0                 ;778
0000b8  b15d              CBZ      r5,|L11.210|
0000ba  4631              MOV      r1,r6                 ;782
0000bc  4620              MOV      r0,r4                 ;782
0000be  f7fffffe          BL       USBD_CtlError
0000c2  7921              LDRB     r1,[r4,#4]            ;783
0000c4  4620              MOV      r0,r4                 ;783
0000c6  f7fffffe          BL       USBD_ClrClassConfig
0000ca  2002              MOVS     r0,#2                 ;784
0000cc  f884029c          STRB     r0,[r4,#0x29c]        ;784
0000d0  e006              B        |L11.224|
                  |L11.210|
0000d2  4620              MOV      r0,r4                 ;788
0000d4  f7fffffe          BL       USBD_CtlSendStatus
0000d8  e002              B        |L11.224|
                  |L11.218|
0000da  4620              MOV      r0,r4                 ;793
0000dc  f7fffffe          BL       USBD_CtlSendStatus
                  |L11.224|
0000e0  e00a              B        |L11.248|
                  |L11.226|
0000e2  4631              MOV      r1,r6                 ;798
0000e4  4620              MOV      r0,r4                 ;798
0000e6  f7fffffe          BL       USBD_CtlError
0000ea  4805              LDR      r0,|L11.256|
0000ec  7801              LDRB     r1,[r0,#0]            ;799  ; cfgidx
0000ee  4620              MOV      r0,r4                 ;799
0000f0  f7fffffe          BL       USBD_ClrClassConfig
0000f4  2503              MOVS     r5,#3                 ;800
0000f6  bf00              NOP                            ;801
                  |L11.248|
0000f8  bf00              NOP                            ;760
0000fa  4628              MOV      r0,r5                 ;804
0000fc  e790              B        |L11.32|
;;;806    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L11.256|
                          DCD      cfgidx

                          AREA ||i.USBD_SetFeature||, CODE, READONLY, ALIGN=1

                  USBD_SetFeature PROC
;;;888      */
;;;889    static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b570              PUSH     {r4-r6,lr}
;;;890    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;891      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
000006  8860              LDRH     r0,[r4,#2]
000008  2801              CMP      r0,#1
00000a  d105              BNE      |L12.24|
;;;892      {
;;;893        pdev->dev_remote_wakeup = 1U;
00000c  f8c502a4          STR      r0,[r5,#0x2a4]
;;;894        (void)USBD_CtlSendStatus(pdev);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       USBD_CtlSendStatus
000016  e00e              B        |L12.54|
                  |L12.24|
;;;895      }
;;;896      else if (req->wValue == USB_FEATURE_TEST_MODE)
000018  8860              LDRH     r0,[r4,#2]
00001a  2802              CMP      r0,#2
00001c  d107              BNE      |L12.46|
;;;897      {
;;;898        pdev->dev_test_mode = req->wIndex >> 8;
00001e  88a0              LDRH     r0,[r4,#4]
000020  1200              ASRS     r0,r0,#8
000022  f88502a0          STRB     r0,[r5,#0x2a0]
;;;899        (void)USBD_CtlSendStatus(pdev);
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       USBD_CtlSendStatus
00002c  e003              B        |L12.54|
                  |L12.46|
;;;900      }
;;;901      else
;;;902      {
;;;903        USBD_CtlError(pdev, req);
00002e  4621              MOV      r1,r4
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       USBD_CtlError
                  |L12.54|
;;;904      }
;;;905    }
000036  bd70              POP      {r4-r6,pc}
;;;906    
                          ENDP


                          AREA ||i.USBD_StdDevReq||, CODE, READONLY, ALIGN=1

                  USBD_StdDevReq PROC
;;;101      */
;;;102    USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;104      USBD_StatusTypeDef ret = USBD_OK;
000006  2600              MOVS     r6,#0
;;;105    
;;;106      switch (req->bmRequest & USB_REQ_TYPE_MASK)
000008  7828              LDRB     r0,[r5,#0]
00000a  f0000060          AND      r0,r0,#0x60
00000e  b188              CBZ      r0,|L13.52|
000010  2820              CMP      r0,#0x20
000012  d002              BEQ      |L13.26|
000014  2840              CMP      r0,#0x40
000016  d142              BNE      |L13.158|
000018  e000              B        |L13.28|
                  |L13.26|
;;;107      {
;;;108        case USB_REQ_TYPE_CLASS:
;;;109        case USB_REQ_TYPE_VENDOR:
00001a  bf00              NOP      
                  |L13.28|
;;;110          ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
00001c  f504702e          ADD      r0,r4,#0x2b8
000020  f8d412d4          LDR      r1,[r4,#0x2d4]
000024  f8500021          LDR      r0,[r0,r1,LSL #2]
000028  4629              MOV      r1,r5
00002a  6882              LDR      r2,[r0,#8]
00002c  4620              MOV      r0,r4
00002e  4790              BLX      r2
000030  4606              MOV      r6,r0
;;;111          break;
000032  e039              B        |L13.168|
                  |L13.52|
;;;112    
;;;113        case USB_REQ_TYPE_STANDARD:
;;;114          switch (req->bRequest)
000034  7868              LDRB     r0,[r5,#1]
000036  280a              CMP      r0,#0xa
000038  d22a              BCS      |L13.144|
00003a  e8dff000          TBB      [pc,r0]
00003e  1a24              DCB      0x1a,0x24
000040  291f290a          DCB      0x29,0x1f,0x29,0x0a
000044  0529150f          DCB      0x05,0x29,0x15,0x0f
;;;115          {
;;;116            case USB_REQ_GET_DESCRIPTOR:
;;;117              USBD_GetDescriptor(pdev, req);
000048  4629              MOV      r1,r5
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       USBD_GetDescriptor
;;;118              break;
000050  e023              B        |L13.154|
;;;119    
;;;120            case USB_REQ_SET_ADDRESS:
;;;121              USBD_SetAddress(pdev, req);
000052  4629              MOV      r1,r5
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       USBD_SetAddress
;;;122              break;
00005a  e01e              B        |L13.154|
;;;123    
;;;124            case USB_REQ_SET_CONFIGURATION:
;;;125              ret = USBD_SetConfig(pdev, req);
00005c  4629              MOV      r1,r5
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       USBD_SetConfig
000064  4606              MOV      r6,r0
;;;126              break;
000066  e018              B        |L13.154|
;;;127    
;;;128            case USB_REQ_GET_CONFIGURATION:
;;;129              USBD_GetConfig(pdev, req);
000068  4629              MOV      r1,r5
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       USBD_GetConfig
;;;130              break;
000070  e013              B        |L13.154|
;;;131    
;;;132            case USB_REQ_GET_STATUS:
;;;133              USBD_GetStatus(pdev, req);
000072  4629              MOV      r1,r5
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       USBD_GetStatus
;;;134              break;
00007a  e00e              B        |L13.154|
;;;135    
;;;136            case USB_REQ_SET_FEATURE:
;;;137              USBD_SetFeature(pdev, req);
00007c  4629              MOV      r1,r5
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       USBD_SetFeature
;;;138              break;
000084  e009              B        |L13.154|
;;;139    
;;;140            case USB_REQ_CLEAR_FEATURE:
;;;141              USBD_ClrFeature(pdev, req);
000086  4629              MOV      r1,r5
000088  4620              MOV      r0,r4
00008a  f7fffffe          BL       USBD_ClrFeature
;;;142              break;
00008e  e004              B        |L13.154|
                  |L13.144|
;;;143    
;;;144            default:
;;;145              USBD_CtlError(pdev, req);
000090  4629              MOV      r1,r5
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       USBD_CtlError
;;;146              break;
000098  bf00              NOP      
                  |L13.154|
00009a  bf00              NOP                            ;118
;;;147          }
;;;148          break;
00009c  e004              B        |L13.168|
                  |L13.158|
;;;149    
;;;150        default:
;;;151          USBD_CtlError(pdev, req);
00009e  4629              MOV      r1,r5
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       USBD_CtlError
;;;152          break;
0000a6  bf00              NOP      
                  |L13.168|
0000a8  bf00              NOP                            ;111
;;;153      }
;;;154    
;;;155      return ret;
0000aa  4630              MOV      r0,r6
;;;156    }
0000ac  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP


                          AREA ||i.USBD_StdEPReq||, CODE, READONLY, ALIGN=1

                  USBD_StdEPReq PROC
;;;236      */
;;;237    USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;238    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;239      USBD_EndpointTypeDef *pep;
;;;240      uint8_t ep_addr;
;;;241      uint8_t idx;
;;;242      USBD_StatusTypeDef ret = USBD_OK;
000008  f04f0900          MOV      r9,#0
;;;243    
;;;244      ep_addr = LOBYTE(req->wIndex);
00000c  793c              LDRB     r4,[r7,#4]
;;;245    
;;;246      switch (req->bmRequest & USB_REQ_TYPE_MASK)
00000e  7838              LDRB     r0,[r7,#0]
000010  f0000060          AND      r0,r0,#0x60
000014  b1f8              CBZ      r0,|L14.86|
000016  2820              CMP      r0,#0x20
000018  d002              BEQ      |L14.32|
00001a  2840              CMP      r0,#0x40
00001c  d17d              BNE      |L14.282|
00001e  e000              B        |L14.34|
                  |L14.32|
;;;247      {
;;;248        case USB_REQ_TYPE_CLASS:
;;;249        case USB_REQ_TYPE_VENDOR:
000020  bf00              NOP      
                  |L14.34|
;;;250          /* Get the class index relative to this endpoint */
;;;251          idx = USBD_CoreFindEP(pdev, ep_addr);
000022  4621              MOV      r1,r4
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       USBD_CoreFindEP
00002a  4606              MOV      r6,r0
;;;252          if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
00002c  2eff              CMP      r6,#0xff
00002e  d011              BEQ      |L14.84|
000030  b986              CBNZ     r6,|L14.84|
;;;253          {
;;;254            pdev->classId = idx;
000032  f8c562d4          STR      r6,[r5,#0x2d4]
;;;255            /* Call the class data out function to manage the request */
;;;256            if (pdev->pClass[idx]->Setup != NULL)
000036  f505702e          ADD      r0,r5,#0x2b8
00003a  f8500026          LDR      r0,[r0,r6,LSL #2]
00003e  6880              LDR      r0,[r0,#8]
000040  b140              CBZ      r0,|L14.84|
;;;257            {
;;;258              ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
000042  f505702e          ADD      r0,r5,#0x2b8
000046  f8500026          LDR      r0,[r0,r6,LSL #2]
00004a  4639              MOV      r1,r7
00004c  6882              LDR      r2,[r0,#8]
00004e  4628              MOV      r0,r5
000050  4790              BLX      r2
000052  4681              MOV      r9,r0
                  |L14.84|
;;;259            }
;;;260          }
;;;261          break;
000054  e110              B        |L14.632|
                  |L14.86|
;;;262    
;;;263        case USB_REQ_TYPE_STANDARD:
;;;264          switch (req->bRequest)
000056  7878              LDRB     r0,[r7,#1]
000058  2800              CMP      r0,#0
00005a  d07a              BEQ      |L14.338|
00005c  2801              CMP      r0,#1
00005e  d02f              BEQ      |L14.192|
000060  2803              CMP      r0,#3
000062  d16e              BNE      |L14.322|
;;;265          {
;;;266            case USB_REQ_SET_FEATURE:
;;;267              switch (pdev->dev_state)
000064  f895029c          LDRB     r0,[r5,#0x29c]
000068  2802              CMP      r0,#2
00006a  d002              BEQ      |L14.114|
00006c  2803              CMP      r0,#3
00006e  d120              BNE      |L14.178|
000070  e010              B        |L14.148|
                  |L14.114|
;;;268              {
;;;269                case USBD_STATE_ADDRESSED:
;;;270                  if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
000072  b154              CBZ      r4,|L14.138|
000074  2c80              CMP      r4,#0x80
000076  d008              BEQ      |L14.138|
;;;271                  {
;;;272                    (void)USBD_LL_StallEP(pdev, ep_addr);
000078  4621              MOV      r1,r4
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       USBD_LL_StallEP
;;;273                    (void)USBD_LL_StallEP(pdev, 0x80U);
000080  2180              MOVS     r1,#0x80
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       USBD_LL_StallEP
000088  e003              B        |L14.146|
                  |L14.138|
;;;274                  }
;;;275                  else
;;;276                  {
;;;277                    USBD_CtlError(pdev, req);
00008a  4639              MOV      r1,r7
00008c  4628              MOV      r0,r5
00008e  f7fffffe          BL       USBD_CtlError
                  |L14.146|
;;;278                  }
;;;279                  break;
000092  e013              B        |L14.188|
                  |L14.148|
;;;280    
;;;281                case USBD_STATE_CONFIGURED:
;;;282                  if (req->wValue == USB_FEATURE_EP_HALT)
000094  8878              LDRH     r0,[r7,#2]
000096  b940              CBNZ     r0,|L14.170|
;;;283                  {
;;;284                    if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
000098  b13c              CBZ      r4,|L14.170|
00009a  2c80              CMP      r4,#0x80
00009c  d005              BEQ      |L14.170|
00009e  88f8              LDRH     r0,[r7,#6]
0000a0  b918              CBNZ     r0,|L14.170|
;;;285                    {
;;;286                      (void)USBD_LL_StallEP(pdev, ep_addr);
0000a2  4621              MOV      r1,r4
0000a4  4628              MOV      r0,r5
0000a6  f7fffffe          BL       USBD_LL_StallEP
                  |L14.170|
;;;287                    }
;;;288                  }
;;;289                  (void)USBD_CtlSendStatus(pdev);
0000aa  4628              MOV      r0,r5
0000ac  f7fffffe          BL       USBD_CtlSendStatus
;;;290    
;;;291                  break;
0000b0  e004              B        |L14.188|
                  |L14.178|
;;;292    
;;;293                default:
;;;294                  USBD_CtlError(pdev, req);
0000b2  4639              MOV      r1,r7
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       USBD_CtlError
;;;295                  break;
0000ba  bf00              NOP      
                  |L14.188|
0000bc  bf00              NOP                            ;279
;;;296              }
;;;297              break;
0000be  e0d4              B        |L14.618|
                  |L14.192|
;;;298    
;;;299            case USB_REQ_CLEAR_FEATURE:
;;;300    
;;;301              switch (pdev->dev_state)
0000c0  f895029c          LDRB     r0,[r5,#0x29c]
0000c4  2802              CMP      r0,#2
0000c6  d002              BEQ      |L14.206|
0000c8  2803              CMP      r0,#3
0000ca  d13b              BNE      |L14.324|
0000cc  e010              B        |L14.240|
                  |L14.206|
;;;302              {
;;;303                case USBD_STATE_ADDRESSED:
;;;304                  if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
0000ce  b154              CBZ      r4,|L14.230|
0000d0  2c80              CMP      r4,#0x80
0000d2  d008              BEQ      |L14.230|
;;;305                  {
;;;306                    (void)USBD_LL_StallEP(pdev, ep_addr);
0000d4  4621              MOV      r1,r4
0000d6  4628              MOV      r0,r5
0000d8  f7fffffe          BL       USBD_LL_StallEP
;;;307                    (void)USBD_LL_StallEP(pdev, 0x80U);
0000dc  2180              MOVS     r1,#0x80
0000de  4628              MOV      r0,r5
0000e0  f7fffffe          BL       USBD_LL_StallEP
0000e4  e003              B        |L14.238|
                  |L14.230|
;;;308                  }
;;;309                  else
;;;310                  {
;;;311                    USBD_CtlError(pdev, req);
0000e6  4639              MOV      r1,r7
0000e8  4628              MOV      r0,r5
0000ea  f7fffffe          BL       USBD_CtlError
                  |L14.238|
;;;312                  }
;;;313                  break;
0000ee  e02e              B        |L14.334|
                  |L14.240|
;;;314    
;;;315                case USBD_STATE_CONFIGURED:
;;;316                  if (req->wValue == USB_FEATURE_EP_HALT)
0000f0  8878              LDRH     r0,[r7,#2]
0000f2  bb20              CBNZ     r0,|L14.318|
;;;317                  {
;;;318                    if ((ep_addr & 0x7FU) != 0x00U)
0000f4  f004007f          AND      r0,r4,#0x7f
0000f8  b118              CBZ      r0,|L14.258|
;;;319                    {
;;;320                      (void)USBD_LL_ClearStallEP(pdev, ep_addr);
0000fa  4621              MOV      r1,r4
0000fc  4628              MOV      r0,r5
0000fe  f7fffffe          BL       USBD_LL_ClearStallEP
                  |L14.258|
;;;321                    }
;;;322                    (void)USBD_CtlSendStatus(pdev);
000102  4628              MOV      r0,r5
000104  f7fffffe          BL       USBD_CtlSendStatus
;;;323    
;;;324                    /* Get the class index relative to this interface */
;;;325                    idx = USBD_CoreFindEP(pdev, ep_addr);
000108  4621              MOV      r1,r4
00010a  4628              MOV      r0,r5
00010c  f7fffffe          BL       USBD_CoreFindEP
000110  4606              MOV      r6,r0
;;;326                    if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
000112  2eff              CMP      r6,#0xff
000114  d013              BEQ      |L14.318|
000116  b996              CBNZ     r6,|L14.318|
;;;327                    {
;;;328                      pdev->classId = idx;
000118  e000              B        |L14.284|
                  |L14.282|
00011a  e0a8              B        |L14.622|
                  |L14.284|
00011c  f8c562d4          STR      r6,[r5,#0x2d4]
;;;329                      /* Call the class data out function to manage the request */
;;;330                      if (pdev->pClass[idx]->Setup != NULL)
000120  f505702e          ADD      r0,r5,#0x2b8
000124  f8500026          LDR      r0,[r0,r6,LSL #2]
000128  6880              LDR      r0,[r0,#8]
00012a  b140              CBZ      r0,|L14.318|
;;;331                      {
;;;332                        ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
00012c  f505702e          ADD      r0,r5,#0x2b8
000130  f8500026          LDR      r0,[r0,r6,LSL #2]
000134  4639              MOV      r1,r7
000136  6882              LDR      r2,[r0,#8]
000138  4628              MOV      r0,r5
00013a  4790              BLX      r2
00013c  4681              MOV      r9,r0
                  |L14.318|
;;;333                      }
;;;334                    }
;;;335                  }
;;;336                  break;
00013e  e006              B        |L14.334|
000140  e007              B        |L14.338|
                  |L14.322|
000142  e08d              B        |L14.608|
                  |L14.324|
;;;337    
;;;338                default:
;;;339                  USBD_CtlError(pdev, req);
000144  4639              MOV      r1,r7
000146  4628              MOV      r0,r5
000148  f7fffffe          BL       USBD_CtlError
;;;340                  break;
00014c  bf00              NOP      
                  |L14.334|
00014e  bf00              NOP                            ;313
;;;341              }
;;;342              break;
000150  e08b              B        |L14.618|
                  |L14.338|
;;;343    
;;;344            case USB_REQ_GET_STATUS:
;;;345              switch (pdev->dev_state)
000152  f895029c          LDRB     r0,[r5,#0x29c]
000156  2802              CMP      r0,#2
000158  d002              BEQ      |L14.352|
00015a  2803              CMP      r0,#3
00015c  d179              BNE      |L14.594|
00015e  e026              B        |L14.430|
                  |L14.352|
;;;346              {
;;;347                case USBD_STATE_ADDRESSED:
;;;348                  if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
000160  b134              CBZ      r4,|L14.368|
000162  2c80              CMP      r4,#0x80
000164  d004              BEQ      |L14.368|
;;;349                  {
;;;350                    USBD_CtlError(pdev, req);
000166  4639              MOV      r1,r7
000168  4628              MOV      r0,r5
00016a  f7fffffe          BL       USBD_CtlError
;;;351                    break;
00016e  e075              B        |L14.604|
                  |L14.368|
;;;352                  }
;;;353                  pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
000170  f0040080          AND      r0,r4,#0x80
000174  2880              CMP      r0,#0x80
000176  d108              BNE      |L14.394|
000178  f004007f          AND      r0,r4,#0x7f
00017c  eb000180          ADD      r1,r0,r0,LSL #2
000180  f1050014          ADD      r0,r5,#0x14
000184  eb000081          ADD      r0,r0,r1,LSL #2
000188  e007              B        |L14.410|
                  |L14.394|
;;;354                        &pdev->ep_out[ep_addr & 0x7FU];
00018a  f004007f          AND      r0,r4,#0x7f
00018e  eb000180          ADD      r1,r0,r0,LSL #2
000192  f50570aa          ADD      r0,r5,#0x154
000196  eb000081          ADD      r0,r0,r1,LSL #2
                  |L14.410|
00019a  4680              MOV      r8,r0
;;;355    
;;;356                  pep->status = 0x0000U;
00019c  2000              MOVS     r0,#0
00019e  f8c80000          STR      r0,[r8,#0]
;;;357    
;;;358                  (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
0001a2  2202              MOVS     r2,#2
0001a4  4641              MOV      r1,r8
0001a6  4628              MOV      r0,r5
0001a8  f7fffffe          BL       USBD_CtlSendData
;;;359                  break;
0001ac  e056              B        |L14.604|
                  |L14.430|
;;;360    
;;;361                case USBD_STATE_CONFIGURED:
;;;362                  if ((ep_addr & 0x80U) == 0x80U)
0001ae  f0040080          AND      r0,r4,#0x80
0001b2  2880              CMP      r0,#0x80
0001b4  d10e              BNE      |L14.468|
;;;363                  {
;;;364                    if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
0001b6  f004000f          AND      r0,r4,#0xf
0001ba  eb000180          ADD      r1,r0,r0,LSL #2
0001be  f1050014          ADD      r0,r5,#0x14
0001c2  eb000081          ADD      r0,r0,r1,LSL #2
0001c6  8a00              LDRH     r0,[r0,#0x10]
0001c8  b998              CBNZ     r0,|L14.498|
;;;365                    {
;;;366                      USBD_CtlError(pdev, req);
0001ca  4639              MOV      r1,r7
0001cc  4628              MOV      r0,r5
0001ce  f7fffffe          BL       USBD_CtlError
;;;367                      break;
0001d2  e043              B        |L14.604|
                  |L14.468|
;;;368                    }
;;;369                  }
;;;370                  else
;;;371                  {
;;;372                    if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
0001d4  f004000f          AND      r0,r4,#0xf
0001d8  eb000180          ADD      r1,r0,r0,LSL #2
0001dc  f50570aa          ADD      r0,r5,#0x154
0001e0  eb000081          ADD      r0,r0,r1,LSL #2
0001e4  8a00              LDRH     r0,[r0,#0x10]
0001e6  b920              CBNZ     r0,|L14.498|
;;;373                    {
;;;374                      USBD_CtlError(pdev, req);
0001e8  4639              MOV      r1,r7
0001ea  4628              MOV      r0,r5
0001ec  f7fffffe          BL       USBD_CtlError
;;;375                      break;
0001f0  e034              B        |L14.604|
                  |L14.498|
;;;376                    }
;;;377                  }
;;;378    
;;;379                  pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
0001f2  f0040080          AND      r0,r4,#0x80
0001f6  2880              CMP      r0,#0x80
0001f8  d108              BNE      |L14.524|
0001fa  f004007f          AND      r0,r4,#0x7f
0001fe  eb000180          ADD      r1,r0,r0,LSL #2
000202  f1050014          ADD      r0,r5,#0x14
000206  eb000081          ADD      r0,r0,r1,LSL #2
00020a  e007              B        |L14.540|
                  |L14.524|
;;;380                        &pdev->ep_out[ep_addr & 0x7FU];
00020c  f004007f          AND      r0,r4,#0x7f
000210  eb000180          ADD      r1,r0,r0,LSL #2
000214  f50570aa          ADD      r0,r5,#0x154
000218  eb000081          ADD      r0,r0,r1,LSL #2
                  |L14.540|
00021c  4680              MOV      r8,r0
;;;381    
;;;382                  if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
00021e  b10c              CBZ      r4,|L14.548|
000220  2c80              CMP      r4,#0x80
000222  d103              BNE      |L14.556|
                  |L14.548|
;;;383                  {
;;;384                    pep->status = 0x0000U;
000224  2000              MOVS     r0,#0
000226  f8c80000          STR      r0,[r8,#0]
00022a  e00c              B        |L14.582|
                  |L14.556|
;;;385                  }
;;;386                  else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
00022c  4621              MOV      r1,r4
00022e  4628              MOV      r0,r5
000230  f7fffffe          BL       USBD_LL_IsStallEP
000234  b120              CBZ      r0,|L14.576|
;;;387                  {
;;;388                    pep->status = 0x0001U;
000236  2001              MOVS     r0,#1
000238  f8c80000          STR      r0,[r8,#0]
00023c  e003              B        |L14.582|
00023e  e008              B        |L14.594|
                  |L14.576|
;;;389                  }
;;;390                  else
;;;391                  {
;;;392                    pep->status = 0x0000U;
000240  2000              MOVS     r0,#0
000242  f8c80000          STR      r0,[r8,#0]
                  |L14.582|
;;;393                  }
;;;394    
;;;395                  (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
000246  2202              MOVS     r2,#2
000248  4641              MOV      r1,r8
00024a  4628              MOV      r0,r5
00024c  f7fffffe          BL       USBD_CtlSendData
;;;396                  break;
000250  e004              B        |L14.604|
                  |L14.594|
;;;397    
;;;398                default:
;;;399                  USBD_CtlError(pdev, req);
000252  4639              MOV      r1,r7
000254  4628              MOV      r0,r5
000256  f7fffffe          BL       USBD_CtlError
;;;400                  break;
00025a  bf00              NOP      
                  |L14.604|
00025c  bf00              NOP                            ;351
;;;401              }
;;;402              break;
00025e  e004              B        |L14.618|
                  |L14.608|
;;;403    
;;;404            default:
;;;405              USBD_CtlError(pdev, req);
000260  4639              MOV      r1,r7
000262  4628              MOV      r0,r5
000264  f7fffffe          BL       USBD_CtlError
;;;406              break;
000268  bf00              NOP      
                  |L14.618|
00026a  bf00              NOP                            ;297
;;;407          }
;;;408          break;
00026c  e004              B        |L14.632|
                  |L14.622|
;;;409    
;;;410        default:
;;;411          USBD_CtlError(pdev, req);
00026e  4639              MOV      r1,r7
000270  4628              MOV      r0,r5
000272  f7fffffe          BL       USBD_CtlError
;;;412          break;
000276  bf00              NOP      
                  |L14.632|
000278  bf00              NOP                            ;261
;;;413      }
;;;414    
;;;415      return ret;
00027a  4648              MOV      r0,r9
;;;416    }
00027c  e8bd87f0          POP      {r4-r10,pc}
;;;417    
                          ENDP


                          AREA ||i.USBD_StdItfReq||, CODE, READONLY, ALIGN=1

                  USBD_StdItfReq PROC
;;;164      */
;;;165    USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;166    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;167      USBD_StatusTypeDef ret = USBD_OK;
000008  2700              MOVS     r7,#0
;;;168      uint8_t idx;
;;;169    
;;;170      switch (req->bmRequest & USB_REQ_TYPE_MASK)
00000a  7830              LDRB     r0,[r6,#0]
00000c  f0000060          AND      r0,r0,#0x60
000010  b130              CBZ      r0,|L15.32|
000012  2820              CMP      r0,#0x20
000014  d002              BEQ      |L15.28|
000016  2840              CMP      r0,#0x40
000018  d140              BNE      |L15.156|
00001a  e000              B        |L15.30|
                  |L15.28|
;;;171      {
;;;172        case USB_REQ_TYPE_CLASS:
;;;173        case USB_REQ_TYPE_VENDOR:
00001c  bf00              NOP      
                  |L15.30|
;;;174        case USB_REQ_TYPE_STANDARD:
00001e  bf00              NOP      
                  |L15.32|
;;;175          switch (pdev->dev_state)
000020  f895029c          LDRB     r0,[r5,#0x29c]
000024  2801              CMP      r0,#1
000026  d004              BEQ      |L15.50|
000028  2802              CMP      r0,#2
00002a  d003              BEQ      |L15.52|
00002c  2803              CMP      r0,#3
00002e  d12e              BNE      |L15.142|
000030  e001              B        |L15.54|
                  |L15.50|
;;;176          {
;;;177            case USBD_STATE_DEFAULT:
;;;178            case USBD_STATE_ADDRESSED:
000032  bf00              NOP      
                  |L15.52|
;;;179            case USBD_STATE_CONFIGURED:
000034  bf00              NOP      
                  |L15.54|
;;;180    
;;;181              if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
000036  7930              LDRB     r0,[r6,#4]
000038  2801              CMP      r0,#1
00003a  d823              BHI      |L15.132|
;;;182              {
;;;183                /* Get the class index relative to this interface */
;;;184                idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
00003c  7931              LDRB     r1,[r6,#4]
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       USBD_CoreFindIF
000044  4604              MOV      r4,r0
;;;185                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
000046  2cff              CMP      r4,#0xff
000048  d014              BEQ      |L15.116|
00004a  b99c              CBNZ     r4,|L15.116|
;;;186                {
;;;187                  /* Call the class data out function to manage the request */
;;;188                  if (pdev->pClass[idx]->Setup != NULL)
00004c  f505702e          ADD      r0,r5,#0x2b8
000050  f8500024          LDR      r0,[r0,r4,LSL #2]
000054  6880              LDR      r0,[r0,#8]
000056  b158              CBZ      r0,|L15.112|
;;;189                  {
;;;190                    pdev->classId = idx;
000058  f8c542d4          STR      r4,[r5,#0x2d4]
;;;191                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
00005c  f505702e          ADD      r0,r5,#0x2b8
000060  f8500024          LDR      r0,[r0,r4,LSL #2]
000064  4631              MOV      r1,r6
000066  6882              LDR      r2,[r0,#8]
000068  4628              MOV      r0,r5
00006a  4790              BLX      r2
00006c  4607              MOV      r7,r0
00006e  e002              B        |L15.118|
                  |L15.112|
;;;192                  }
;;;193                  else
;;;194                  {
;;;195                    /* should never reach this condition */
;;;196                    ret = USBD_FAIL;
000070  2703              MOVS     r7,#3
000072  e000              B        |L15.118|
                  |L15.116|
;;;197                  }
;;;198                }
;;;199                else
;;;200                {
;;;201                  /* No relative interface found */
;;;202                  ret = USBD_FAIL;
000074  2703              MOVS     r7,#3
                  |L15.118|
;;;203                }
;;;204    
;;;205                if ((req->wLength == 0U) && (ret == USBD_OK))
000076  88f0              LDRH     r0,[r6,#6]
000078  b940              CBNZ     r0,|L15.140|
00007a  b93f              CBNZ     r7,|L15.140|
;;;206                {
;;;207                  (void)USBD_CtlSendStatus(pdev);
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       USBD_CtlSendStatus
000082  e003              B        |L15.140|
                  |L15.132|
;;;208                }
;;;209              }
;;;210              else
;;;211              {
;;;212                USBD_CtlError(pdev, req);
000084  4631              MOV      r1,r6
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       USBD_CtlError
                  |L15.140|
;;;213              }
;;;214              break;
00008c  e004              B        |L15.152|
                  |L15.142|
;;;215    
;;;216            default:
;;;217              USBD_CtlError(pdev, req);
00008e  4631              MOV      r1,r6
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       USBD_CtlError
;;;218              break;
000096  bf00              NOP      
                  |L15.152|
000098  bf00              NOP                            ;214
;;;219          }
;;;220          break;
00009a  e004              B        |L15.166|
                  |L15.156|
;;;221    
;;;222        default:
;;;223          USBD_CtlError(pdev, req);
00009c  4631              MOV      r1,r6
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       USBD_CtlError
;;;224          break;
0000a4  bf00              NOP      
                  |L15.166|
0000a6  bf00              NOP                            ;220
;;;225      }
;;;226    
;;;227      return ret;
0000a8  4638              MOV      r0,r7
;;;228    }
0000aa  e8bd81f0          POP      {r4-r8,pc}
;;;229    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  cfgidx
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "../Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_usbd_ctlreq_c_f346f8f1____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___13_usbd_ctlreq_c_f346f8f1____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_usbd_ctlreq_c_f346f8f1____REVSH|
#line 478
|__asm___13_usbd_ctlreq_c_f346f8f1____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_usbd_ctlreq_c_f346f8f1____RRX|
#line 665
|__asm___13_usbd_ctlreq_c_f346f8f1____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
