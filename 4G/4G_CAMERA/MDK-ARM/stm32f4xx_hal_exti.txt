; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_exti.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_exti.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_exti.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c]
                          THUMB

                          AREA ||i.HAL_EXTI_ClearConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_ClearConfigLine PROC
;;;315      */
;;;316    HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
000000  b530              PUSH     {r4,r5,lr}
;;;317    {
000002  4601              MOV      r1,r0
;;;318      uint32_t regval;
;;;319      uint32_t linepos;
;;;320      uint32_t maskline;
;;;321    
;;;322      /* Check null pointer */
;;;323      if (hexti == NULL)
000004  b909              CBNZ     r1,|L1.10|
;;;324      {
;;;325        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L1.8|
;;;326      }
;;;327    
;;;328      /* Check the parameter */
;;;329      assert_param(IS_EXTI_LINE(hexti->Line));
;;;330    
;;;331      /* compute line mask */
;;;332      linepos = (hexti->Line & EXTI_PIN_MASK);
;;;333      maskline = (1uL << linepos);
;;;334    
;;;335      /* 1] Clear interrupt mode */
;;;336      EXTI->IMR = (EXTI->IMR & ~maskline);
;;;337    
;;;338      /* 2] Clear event mode */
;;;339      EXTI->EMR = (EXTI->EMR & ~maskline);
;;;340    
;;;341      /* 3] Clear triggers in case of configurable lines */
;;;342      if ((hexti->Line & EXTI_CONFIG) != 0x00u)
;;;343      {
;;;344        EXTI->RTSR = (EXTI->RTSR & ~maskline);
;;;345        EXTI->FTSR = (EXTI->FTSR & ~maskline);
;;;346    
;;;347        /* Get Gpio port selection for gpio lines */
;;;348        if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
;;;349        {
;;;350          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;351    
;;;352          regval = SYSCFG->EXTICR[linepos >> 2u];
;;;353          regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;354          SYSCFG->EXTICR[linepos >> 2u] = regval;
;;;355        }
;;;356      }
;;;357    
;;;358      return HAL_OK;
;;;359    }
000008  bd30              POP      {r4,r5,pc}
                  |L1.10|
00000a  7808              LDRB     r0,[r1,#0]            ;332
00000c  f000021f          AND      r2,r0,#0x1f           ;332
000010  2001              MOVS     r0,#1                 ;333
000012  fa00f302          LSL      r3,r0,r2              ;333
000016  4816              LDR      r0,|L1.112|
000018  6800              LDR      r0,[r0,#0]            ;336
00001a  4398              BICS     r0,r0,r3              ;336
00001c  4d14              LDR      r5,|L1.112|
00001e  6028              STR      r0,[r5,#0]            ;336
000020  1d28              ADDS     r0,r5,#4              ;339
000022  6800              LDR      r0,[r0,#0]            ;339
000024  4398              BICS     r0,r0,r3              ;339
000026  1d2d              ADDS     r5,r5,#4              ;339
000028  6028              STR      r0,[r5,#0]            ;339
00002a  6808              LDR      r0,[r1,#0]            ;342
00002c  f0007000          AND      r0,r0,#0x2000000      ;342
000030  b1e0              CBZ      r0,|L1.108|
000032  1d28              ADDS     r0,r5,#4              ;344
000034  6800              LDR      r0,[r0,#0]            ;344
000036  4398              BICS     r0,r0,r3              ;344
000038  1d2d              ADDS     r5,r5,#4              ;344
00003a  6028              STR      r0,[r5,#0]            ;344
00003c  1d28              ADDS     r0,r5,#4              ;345
00003e  6800              LDR      r0,[r0,#0]            ;345
000040  4398              BICS     r0,r0,r3              ;345
000042  1d2d              ADDS     r5,r5,#4              ;345
000044  6028              STR      r0,[r5,#0]            ;345
000046  6808              LDR      r0,[r1,#0]            ;348
000048  f00060c0          AND      r0,r0,#0x6000000      ;348
00004c  f1b06fc0          CMP      r0,#0x6000000         ;348
000050  d10c              BNE      |L1.108|
000052  4808              LDR      r0,|L1.116|
000054  0895              LSRS     r5,r2,#2              ;352
000056  f8504025          LDR      r4,[r0,r5,LSL #2]     ;352
00005a  0790              LSLS     r0,r2,#30             ;353
00005c  0f05              LSRS     r5,r0,#28             ;353
00005e  200f              MOVS     r0,#0xf               ;353
000060  40a8              LSLS     r0,r0,r5              ;353
000062  4384              BICS     r4,r4,r0              ;353
000064  4803              LDR      r0,|L1.116|
000066  0895              LSRS     r5,r2,#2              ;354
000068  f8404025          STR      r4,[r0,r5,LSL #2]     ;354
                  |L1.108|
00006c  2000              MOVS     r0,#0                 ;358
00006e  e7cb              B        |L1.8|
;;;360    
                          ENDP

                  |L1.112|
                          DCD      0x40013c00
                  |L1.116|
                          DCD      0x40013808

                          AREA ||i.HAL_EXTI_ClearPending||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_ClearPending PROC
;;;494      */
;;;495    void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
000000  b510              PUSH     {r4,lr}
;;;496    {
000002  460a              MOV      r2,r1
;;;497      uint32_t maskline;
;;;498    
;;;499      /* Check parameters */
;;;500      assert_param(IS_EXTI_LINE(hexti->Line));
;;;501      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;502      assert_param(IS_EXTI_PENDING_EDGE(Edge));
;;;503    
;;;504      /* Compute line mask */
;;;505      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000004  7803              LDRB     r3,[r0,#0]
000006  f003041f          AND      r4,r3,#0x1f
00000a  2301              MOVS     r3,#1
00000c  fa03f104          LSL      r1,r3,r4
;;;506    
;;;507      /* Clear Pending bit */
;;;508      EXTI->PR =  maskline;
000010  4b01              LDR      r3,|L2.24|
000012  6019              STR      r1,[r3,#0]
;;;509    }
000014  bd10              POP      {r4,pc}
;;;510    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40013c14

                          AREA ||i.HAL_EXTI_GenerateSWI||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GenerateSWI PROC
;;;515      */
;;;516    void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
000000  7802              LDRB     r2,[r0,#0]
;;;517    {
;;;518      uint32_t maskline;
;;;519    
;;;520      /* Check parameters */
;;;521      assert_param(IS_EXTI_LINE(hexti->Line));
;;;522      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;523    
;;;524      /* Compute line mask */
;;;525      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000002  f002031f          AND      r3,r2,#0x1f
000006  2201              MOVS     r2,#1
000008  fa02f103          LSL      r1,r2,r3
;;;526    
;;;527      /* Generate Software interrupt */
;;;528      EXTI->SWIER = maskline;
00000c  4a01              LDR      r2,|L3.20|
00000e  6011              STR      r1,[r2,#0]
;;;529    }
000010  4770              BX       lr
;;;530    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x40013c10

                          AREA ||i.HAL_EXTI_GetConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetConfigLine PROC
;;;236      */
;;;237    HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;238    {
000002  4604              MOV      r4,r0
;;;239      uint32_t regval;
;;;240      uint32_t linepos;
;;;241      uint32_t maskline;
;;;242    
;;;243      /* Check null pointer */
;;;244      if ((hexti == NULL) || (pExtiConfig == NULL))
000004  b104              CBZ      r4,|L4.8|
000006  b909              CBNZ     r1,|L4.12|
                  |L4.8|
;;;245      {
;;;246        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L4.10|
;;;247      }
;;;248    
;;;249      /* Check the parameter */
;;;250      assert_param(IS_EXTI_LINE(hexti->Line));
;;;251    
;;;252      /* Store handle line number to configuration structure */
;;;253      pExtiConfig->Line = hexti->Line;
;;;254    
;;;255      /* Compute line mask */
;;;256      linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
;;;257      maskline = (1uL << linepos);
;;;258    
;;;259      /* 1] Get core mode : interrupt */
;;;260    
;;;261      /* Check if selected line is enable */
;;;262      if ((EXTI->IMR & maskline) != 0x00u)
;;;263      {
;;;264        pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
;;;265      }
;;;266      else
;;;267      {
;;;268        pExtiConfig->Mode = EXTI_MODE_NONE;
;;;269      }
;;;270    
;;;271      /* Get event mode */
;;;272      /* Check if selected line is enable */
;;;273      if ((EXTI->EMR & maskline) != 0x00u)
;;;274      {
;;;275        pExtiConfig->Mode |= EXTI_MODE_EVENT;
;;;276      }
;;;277    
;;;278      /* Get default Trigger and GPIOSel configuration */
;;;279      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
;;;280      pExtiConfig->GPIOSel = 0x00u;
;;;281    
;;;282      /* 2] Get trigger for configurable lines : rising */
;;;283      if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
;;;284      {
;;;285        /* Check if configuration of selected line is enable */
;;;286        if ((EXTI->RTSR & maskline) != 0x00u)
;;;287        {
;;;288          pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
;;;289        }
;;;290    
;;;291        /* Get falling configuration */
;;;292        /* Check if configuration of selected line is enable */
;;;293        if ((EXTI->FTSR & maskline) != 0x00u)
;;;294        {
;;;295          pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
;;;296        }
;;;297    
;;;298        /* Get Gpio port selection for gpio lines */
;;;299        if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
;;;300        {
;;;301          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;302    
;;;303          regval = (SYSCFG->EXTICR[linepos >> 2u] << 16u );
;;;304          pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 28u);
;;;305        }
;;;306      }
;;;307    
;;;308      return HAL_OK;
;;;309    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  6820              LDR      r0,[r4,#0]            ;253
00000e  6008              STR      r0,[r1,#0]            ;253
000010  7808              LDRB     r0,[r1,#0]            ;256
000012  f000031f          AND      r3,r0,#0x1f           ;256
000016  2001              MOVS     r0,#1                 ;257
000018  fa00f203          LSL      r2,r0,r3              ;257
00001c  481f              LDR      r0,|L4.156|
00001e  6800              LDR      r0,[r0,#0]            ;262
000020  4010              ANDS     r0,r0,r2              ;262
000022  b110              CBZ      r0,|L4.42|
000024  2001              MOVS     r0,#1                 ;264
000026  6048              STR      r0,[r1,#4]            ;264
000028  e001              B        |L4.46|
                  |L4.42|
00002a  2000              MOVS     r0,#0                 ;268
00002c  6048              STR      r0,[r1,#4]            ;268
                  |L4.46|
00002e  481b              LDR      r0,|L4.156|
000030  1d00              ADDS     r0,r0,#4              ;273
000032  6800              LDR      r0,[r0,#0]            ;273
000034  4010              ANDS     r0,r0,r2              ;273
000036  b118              CBZ      r0,|L4.64|
000038  6848              LDR      r0,[r1,#4]            ;275
00003a  f0400002          ORR      r0,r0,#2              ;275
00003e  6048              STR      r0,[r1,#4]            ;275
                  |L4.64|
000040  2000              MOVS     r0,#0                 ;279
000042  6088              STR      r0,[r1,#8]            ;279
000044  60c8              STR      r0,[r1,#0xc]          ;280
000046  6808              LDR      r0,[r1,#0]            ;283
000048  f0007000          AND      r0,r0,#0x2000000      ;283
00004c  b318              CBZ      r0,|L4.150|
00004e  4813              LDR      r0,|L4.156|
000050  3008              ADDS     r0,r0,#8              ;286
000052  6800              LDR      r0,[r0,#0]            ;286
000054  4010              ANDS     r0,r0,r2              ;286
000056  b108              CBZ      r0,|L4.92|
000058  2001              MOVS     r0,#1                 ;288
00005a  6088              STR      r0,[r1,#8]            ;288
                  |L4.92|
00005c  480f              LDR      r0,|L4.156|
00005e  300c              ADDS     r0,r0,#0xc            ;293
000060  6800              LDR      r0,[r0,#0]            ;293
000062  4010              ANDS     r0,r0,r2              ;293
000064  b118              CBZ      r0,|L4.110|
000066  6888              LDR      r0,[r1,#8]            ;295
000068  f0400002          ORR      r0,r0,#2              ;295
00006c  6088              STR      r0,[r1,#8]            ;295
                  |L4.110|
00006e  6808              LDR      r0,[r1,#0]            ;299
000070  f00060c0          AND      r0,r0,#0x6000000      ;299
000074  f1b06fc0          CMP      r0,#0x6000000         ;299
000078  d10d              BNE      |L4.150|
00007a  4809              LDR      r0,|L4.160|
00007c  089e              LSRS     r6,r3,#2              ;303
00007e  f8500026          LDR      r0,[r0,r6,LSL #2]     ;303
000082  0405              LSLS     r5,r0,#16             ;303
000084  f0030003          AND      r0,r3,#3              ;304
000088  f1c00003          RSB      r0,r0,#3              ;304
00008c  0080              LSLS     r0,r0,#2              ;304
00008e  fa05f000          LSL      r0,r5,r0              ;304
000092  0f00              LSRS     r0,r0,#28             ;304
000094  60c8              STR      r0,[r1,#0xc]          ;304
                  |L4.150|
000096  2000              MOVS     r0,#0                 ;308
000098  e7b7              B        |L4.10|
;;;310    
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      0x40013c00
                  |L4.160|
                          DCD      0x40013808

                          AREA ||i.HAL_EXTI_GetHandle||, CODE, READONLY, ALIGN=1

                  HAL_EXTI_GetHandle PROC
;;;393      */
;;;394    HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
000000  4602              MOV      r2,r0
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_EXTI_LINE(ExtiLine));
;;;398    
;;;399      /* Check null pointer */
;;;400      if (hexti == NULL)
000002  b90a              CBNZ     r2,|L5.8|
;;;401      {
;;;402        return HAL_ERROR;
000004  2001              MOVS     r0,#1
                  |L5.6|
;;;403      }
;;;404      else
;;;405      {
;;;406        /* Store line number as handle private field */
;;;407        hexti->Line = ExtiLine;
;;;408    
;;;409        return HAL_OK;
;;;410      }
;;;411    }
000006  4770              BX       lr
                  |L5.8|
000008  6011              STR      r1,[r2,#0]            ;407
00000a  2000              MOVS     r0,#0                 ;409
00000c  e7fb              B        |L5.6|
;;;412    
                          ENDP


                          AREA ||i.HAL_EXTI_GetPending||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_GetPending PROC
;;;465      */
;;;466    uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
000000  b530              PUSH     {r4,r5,lr}
;;;467    {
000002  4602              MOV      r2,r0
000004  460d              MOV      r5,r1
;;;468      uint32_t regval;
;;;469      uint32_t linepos;
;;;470      uint32_t maskline;
;;;471    
;;;472      /* Check parameters */
;;;473      assert_param(IS_EXTI_LINE(hexti->Line));
;;;474      assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
;;;475      assert_param(IS_EXTI_PENDING_EDGE(Edge));
;;;476    
;;;477      /* Compute line mask */
;;;478      linepos = (hexti->Line & EXTI_PIN_MASK);
000006  7814              LDRB     r4,[r2,#0]
000008  f004011f          AND      r1,r4,#0x1f
;;;479      maskline = (1uL << linepos);
00000c  2401              MOVS     r4,#1
00000e  fa04f301          LSL      r3,r4,r1
;;;480    
;;;481      /* return 1 if bit is set else 0 */
;;;482      regval = ((EXTI->PR & maskline) >> linepos);
000012  4c03              LDR      r4,|L6.32|
000014  6824              LDR      r4,[r4,#0]
000016  401c              ANDS     r4,r4,r3
000018  fa24f001          LSR      r0,r4,r1
;;;483      return regval;
;;;484    }
00001c  bd30              POP      {r4,r5,pc}
;;;485    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0x40013c14

                          AREA ||i.HAL_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_IRQHandler PROC
;;;433      */
;;;434    void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
000000  b570              PUSH     {r4-r6,lr}
;;;435    {
000002  4604              MOV      r4,r0
;;;436      uint32_t regval;
;;;437      uint32_t maskline;
;;;438    
;;;439      /* Compute line mask */
;;;440      maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
000004  7820              LDRB     r0,[r4,#0]
000006  f000011f          AND      r1,r0,#0x1f
00000a  2001              MOVS     r0,#1
00000c  fa00f501          LSL      r5,r0,r1
;;;441    
;;;442      /* Get pending bit  */
;;;443      regval = (EXTI->PR & maskline);
000010  4805              LDR      r0,|L7.40|
000012  6800              LDR      r0,[r0,#0]
000014  ea000605          AND      r6,r0,r5
;;;444      if (regval != 0x00u)
000018  b12e              CBZ      r6,|L7.38|
;;;445      {
;;;446        /* Clear pending bit */
;;;447        EXTI->PR = maskline;
00001a  4803              LDR      r0,|L7.40|
00001c  6005              STR      r5,[r0,#0]
;;;448    
;;;449        /* Call callback */
;;;450        if (hexti->PendingCallback != NULL)
00001e  6860              LDR      r0,[r4,#4]
000020  b108              CBZ      r0,|L7.38|
;;;451        {
;;;452          hexti->PendingCallback();
000022  6860              LDR      r0,[r4,#4]
000024  4780              BLX      r0
                  |L7.38|
;;;453        }
;;;454      }
;;;455    }
000026  bd70              POP      {r4-r6,pc}
;;;456    
                          ENDP

                  |L7.40|
                          DCD      0x40013c14

                          AREA ||i.HAL_EXTI_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_EXTI_RegisterCallback PROC
;;;368      */
;;;369    HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
000000  b510              PUSH     {r4,lr}
;;;370    {
000002  4603              MOV      r3,r0
;;;371      HAL_StatusTypeDef status = HAL_OK;
000004  2000              MOVS     r0,#0
;;;372    
;;;373      switch (CallbackID)
000006  b909              CBNZ     r1,|L8.12|
;;;374      {
;;;375        case  HAL_EXTI_COMMON_CB_ID:
;;;376          hexti->PendingCallback = pPendingCbfn;
000008  605a              STR      r2,[r3,#4]
;;;377          break;
00000a  e001              B        |L8.16|
                  |L8.12|
;;;378    
;;;379        default:
;;;380          status = HAL_ERROR;
00000c  2001              MOVS     r0,#1
;;;381          break;
00000e  bf00              NOP      
                  |L8.16|
000010  bf00              NOP                            ;377
;;;382      }
;;;383    
;;;384      return status;
;;;385    }
000012  bd10              POP      {r4,pc}
;;;386    
                          ENDP


                          AREA ||i.HAL_EXTI_SetConfigLine||, CODE, READONLY, ALIGN=2

                  HAL_EXTI_SetConfigLine PROC
;;;141      */
;;;142    HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
000000  b570              PUSH     {r4-r6,lr}
;;;143    {
000002  4604              MOV      r4,r0
;;;144      uint32_t regval;
;;;145      uint32_t linepos;
;;;146      uint32_t maskline;
;;;147    
;;;148      /* Check null pointer */
;;;149      if ((hexti == NULL) || (pExtiConfig == NULL))
000004  b104              CBZ      r4,|L9.8|
000006  b909              CBNZ     r1,|L9.12|
                  |L9.8|
;;;150      {
;;;151        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L9.10|
;;;152      }
;;;153    
;;;154      /* Check parameters */
;;;155      assert_param(IS_EXTI_LINE(pExtiConfig->Line));
;;;156      assert_param(IS_EXTI_MODE(pExtiConfig->Mode));
;;;157    
;;;158      /* Assign line number to handle */
;;;159      hexti->Line = pExtiConfig->Line;
;;;160    
;;;161      /* Compute line mask */
;;;162      linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
;;;163      maskline = (1uL << linepos);
;;;164    
;;;165      /* Configure triggers for configurable lines */
;;;166      if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
;;;167      {
;;;168        assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));
;;;169    
;;;170        /* Configure rising trigger */
;;;171        /* Mask or set line */
;;;172        if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
;;;173        {
;;;174          EXTI->RTSR |= maskline;
;;;175        }
;;;176        else
;;;177        {
;;;178          EXTI->RTSR &= ~maskline;
;;;179        }
;;;180    
;;;181        /* Configure falling trigger */
;;;182        /* Mask or set line */
;;;183        if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
;;;184        {
;;;185          EXTI->FTSR |= maskline;
;;;186        }
;;;187        else
;;;188        {
;;;189          EXTI->FTSR &= ~maskline;
;;;190        }
;;;191    
;;;192    
;;;193        /* Configure gpio port selection in case of gpio exti line */
;;;194        if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
;;;195        {
;;;196          assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
;;;197          assert_param(IS_EXTI_GPIO_PIN(linepos));
;;;198    
;;;199          regval = SYSCFG->EXTICR[linepos >> 2u];
;;;200          regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;201          regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
;;;202          SYSCFG->EXTICR[linepos >> 2u] = regval;
;;;203        }
;;;204      }
;;;205    
;;;206      /* Configure interrupt mode : read current mode */
;;;207      /* Mask or set line */
;;;208      if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
;;;209      {
;;;210        EXTI->IMR |= maskline;
;;;211      }
;;;212      else
;;;213      {
;;;214        EXTI->IMR &= ~maskline;
;;;215      }
;;;216    
;;;217      /* Configure event mode : read current mode */
;;;218      /* Mask or set line */
;;;219      if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
;;;220      {
;;;221        EXTI->EMR |= maskline;
;;;222      }
;;;223      else
;;;224      {
;;;225        EXTI->EMR &= ~maskline;
;;;226      }
;;;227    
;;;228      return HAL_OK;
;;;229    }
00000a  bd70              POP      {r4-r6,pc}
                  |L9.12|
00000c  6808              LDR      r0,[r1,#0]            ;159
00000e  6020              STR      r0,[r4,#0]            ;159
000010  7808              LDRB     r0,[r1,#0]            ;162
000012  f000031f          AND      r3,r0,#0x1f           ;162
000016  2001              MOVS     r0,#1                 ;163
000018  fa00f203          LSL      r2,r0,r3              ;163
00001c  6808              LDR      r0,[r1,#0]            ;166
00001e  f0007000          AND      r0,r0,#0x2000000      ;166
000022  b3c8              CBZ      r0,|L9.152|
000024  7a08              LDRB     r0,[r1,#8]            ;172
000026  f0000001          AND      r0,r0,#1              ;172
00002a  b128              CBZ      r0,|L9.56|
00002c  482e              LDR      r0,|L9.232|
00002e  6800              LDR      r0,[r0,#0]            ;174
000030  4310              ORRS     r0,r0,r2              ;174
000032  4e2d              LDR      r6,|L9.232|
000034  6030              STR      r0,[r6,#0]            ;174
000036  e004              B        |L9.66|
                  |L9.56|
000038  482b              LDR      r0,|L9.232|
00003a  6800              LDR      r0,[r0,#0]            ;178
00003c  4390              BICS     r0,r0,r2              ;178
00003e  4e2a              LDR      r6,|L9.232|
000040  6030              STR      r0,[r6,#0]            ;178
                  |L9.66|
000042  7a08              LDRB     r0,[r1,#8]            ;183
000044  f0000002          AND      r0,r0,#2              ;183
000048  b138              CBZ      r0,|L9.90|
00004a  4827              LDR      r0,|L9.232|
00004c  1d00              ADDS     r0,r0,#4              ;185
00004e  6800              LDR      r0,[r0,#0]            ;185
000050  4310              ORRS     r0,r0,r2              ;185
000052  4e25              LDR      r6,|L9.232|
000054  1d36              ADDS     r6,r6,#4              ;185
000056  6030              STR      r0,[r6,#0]            ;185
000058  e006              B        |L9.104|
                  |L9.90|
00005a  4823              LDR      r0,|L9.232|
00005c  1d00              ADDS     r0,r0,#4              ;189
00005e  6800              LDR      r0,[r0,#0]            ;189
000060  4390              BICS     r0,r0,r2              ;189
000062  4e21              LDR      r6,|L9.232|
000064  1d36              ADDS     r6,r6,#4              ;189
000066  6030              STR      r0,[r6,#0]            ;189
                  |L9.104|
000068  6808              LDR      r0,[r1,#0]            ;194
00006a  f00060c0          AND      r0,r0,#0x6000000      ;194
00006e  f1b06fc0          CMP      r0,#0x6000000         ;194
000072  d111              BNE      |L9.152|
000074  481d              LDR      r0,|L9.236|
000076  089e              LSRS     r6,r3,#2              ;199
000078  f8505026          LDR      r5,[r0,r6,LSL #2]     ;199
00007c  0798              LSLS     r0,r3,#30             ;200
00007e  0f06              LSRS     r6,r0,#28             ;200
000080  200f              MOVS     r0,#0xf               ;200
000082  40b0              LSLS     r0,r0,r6              ;200
000084  4385              BICS     r5,r5,r0              ;200
000086  079e              LSLS     r6,r3,#30             ;201
000088  0f36              LSRS     r6,r6,#28             ;201
00008a  68c8              LDR      r0,[r1,#0xc]          ;201
00008c  40b0              LSLS     r0,r0,r6              ;201
00008e  4305              ORRS     r5,r5,r0              ;201
000090  4816              LDR      r0,|L9.236|
000092  089e              LSRS     r6,r3,#2              ;202
000094  f8405026          STR      r5,[r0,r6,LSL #2]     ;202
                  |L9.152|
000098  7908              LDRB     r0,[r1,#4]            ;208
00009a  f0000001          AND      r0,r0,#1              ;208
00009e  b138              CBZ      r0,|L9.176|
0000a0  4811              LDR      r0,|L9.232|
0000a2  3808              SUBS     r0,r0,#8              ;210
0000a4  6800              LDR      r0,[r0,#0]            ;210
0000a6  4310              ORRS     r0,r0,r2              ;210
0000a8  4e0f              LDR      r6,|L9.232|
0000aa  3e08              SUBS     r6,r6,#8              ;210
0000ac  6030              STR      r0,[r6,#0]            ;210
0000ae  e006              B        |L9.190|
                  |L9.176|
0000b0  480d              LDR      r0,|L9.232|
0000b2  3808              SUBS     r0,r0,#8              ;214
0000b4  6800              LDR      r0,[r0,#0]            ;214
0000b6  4390              BICS     r0,r0,r2              ;214
0000b8  4e0b              LDR      r6,|L9.232|
0000ba  3e08              SUBS     r6,r6,#8              ;214
0000bc  6030              STR      r0,[r6,#0]            ;214
                  |L9.190|
0000be  7908              LDRB     r0,[r1,#4]            ;219
0000c0  f0000002          AND      r0,r0,#2              ;219
0000c4  b138              CBZ      r0,|L9.214|
0000c6  4808              LDR      r0,|L9.232|
0000c8  1f00              SUBS     r0,r0,#4              ;221
0000ca  6800              LDR      r0,[r0,#0]            ;221
0000cc  4310              ORRS     r0,r0,r2              ;221
0000ce  4e06              LDR      r6,|L9.232|
0000d0  1f36              SUBS     r6,r6,#4              ;221
0000d2  6030              STR      r0,[r6,#0]            ;221
0000d4  e006              B        |L9.228|
                  |L9.214|
0000d6  4804              LDR      r0,|L9.232|
0000d8  1f00              SUBS     r0,r0,#4              ;225
0000da  6800              LDR      r0,[r0,#0]            ;225
0000dc  4390              BICS     r0,r0,r2              ;225
0000de  4e02              LDR      r6,|L9.232|
0000e0  1f36              SUBS     r6,r6,#4              ;225
0000e2  6030              STR      r0,[r6,#0]            ;225
                  |L9.228|
0000e4  2000              MOVS     r0,#0                 ;228
0000e6  e790              B        |L9.10|
;;;230    
                          ENDP

                  |L9.232|
                          DCD      0x40013c08
                  |L9.236|
                          DCD      0x40013808

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____REVSH|
#line 478
|__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____RRX|
#line 665
|__asm___20_stm32f4xx_hal_exti_c_ad9bfa1e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
