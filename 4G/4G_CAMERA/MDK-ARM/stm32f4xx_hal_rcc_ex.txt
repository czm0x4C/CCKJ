; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_rcc_ex.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_rcc_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_rcc_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_DisablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLI2S PROC
;;;2885     */
;;;2886   HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
000000  b510              PUSH     {r4,lr}
;;;2887   {
;;;2888     uint32_t tickstart;
;;;2889   
;;;2890     /* Disable the PLLI2S */
;;;2891     __HAL_RCC_PLLI2S_DISABLE();
000002  2000              MOVS     r0,#0
000004  490a              LDR      r1,|L1.48|
000006  6688              STR      r0,[r1,#0x68]
;;;2892   
;;;2893     /* Wait till PLLI2S is disabled */
;;;2894     tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4604              MOV      r4,r0
;;;2895     while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
00000e  e006              B        |L1.30|
                  |L1.16|
;;;2896     {
;;;2897       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
000010  f7fffffe          BL       HAL_GetTick
000014  1b00              SUBS     r0,r0,r4
000016  2802              CMP      r0,#2
000018  d901              BLS      |L1.30|
;;;2898       {
;;;2899         /* return in case of Timeout detected */
;;;2900         return HAL_TIMEOUT;
00001a  2003              MOVS     r0,#3
                  |L1.28|
;;;2901       }
;;;2902     }
;;;2903   
;;;2904     return HAL_OK;
;;;2905   }
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  4805              LDR      r0,|L1.52|
000020  6800              LDR      r0,[r0,#0]            ;2895
000022  f0006000          AND      r0,r0,#0x8000000      ;2895
000026  2800              CMP      r0,#0                 ;2895
000028  d1f2              BNE      |L1.16|
00002a  bf00              NOP                            ;2904
00002c  e7f6              B        |L1.28|
;;;2906   
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      0x42470000
                  |L1.52|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLI2S PROC
;;;2802     */
;;;2803   HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
000000  b570              PUSH     {r4-r6,lr}
;;;2804   {
000002  4604              MOV      r4,r0
;;;2805     uint32_t tickstart;
;;;2806   
;;;2807     /* Check for parameters */
;;;2808     assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
;;;2809     assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
;;;2810   #if defined(RCC_PLLI2SCFGR_PLLI2SM)
;;;2811     assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SInit->PLLI2SM));
;;;2812   #endif /* RCC_PLLI2SCFGR_PLLI2SM */
;;;2813   #if defined(RCC_PLLI2SCFGR_PLLI2SP)
;;;2814     assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
;;;2815   #endif /* RCC_PLLI2SCFGR_PLLI2SP */
;;;2816   #if defined(RCC_PLLI2SCFGR_PLLI2SQ)
;;;2817     assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
;;;2818   #endif /* RCC_PLLI2SCFGR_PLLI2SQ */
;;;2819   
;;;2820     /* Disable the PLLI2S */
;;;2821     __HAL_RCC_PLLI2S_DISABLE();
000004  2000              MOVS     r0,#0
000006  4918              LDR      r1,|L2.104|
000008  6688              STR      r0,[r1,#0x68]
;;;2822   
;;;2823     /* Wait till PLLI2S is disabled */
;;;2824     tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
00000e  4605              MOV      r5,r0
;;;2825     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
000010  e006              B        |L2.32|
                  |L2.18|
;;;2826     {
;;;2827       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000012  f7fffffe          BL       HAL_GetTick
000016  1b40              SUBS     r0,r0,r5
000018  2802              CMP      r0,#2
00001a  d901              BLS      |L2.32|
;;;2828       {
;;;2829         /* return in case of Timeout detected */
;;;2830         return HAL_TIMEOUT;
00001c  2003              MOVS     r0,#3
                  |L2.30|
;;;2831       }
;;;2832     }
;;;2833   
;;;2834     /* Configure the PLLI2S division factors */
;;;2835   #if defined(STM32F446xx)
;;;2836     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2837     /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
;;;2838     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2839     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2840     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
;;;2841                             PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2842   #elif defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) ||\
;;;2843         defined(STM32F413xx) || defined(STM32F423xx)
;;;2844     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
;;;2845     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2846     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2847     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
;;;2848                             PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2849   #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||\
;;;2850         defined(STM32F469xx) || defined(STM32F479xx)
;;;2851     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
;;;2852     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2853     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2854     __HAL_RCC_PLLI2S_SAICLK_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2855   #elif defined(STM32F411xE)
;;;2856     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2857     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2858     __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
;;;2859   #else
;;;2860     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
;;;2861     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2862     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
;;;2863   #endif /* STM32F446xx */
;;;2864   
;;;2865     /* Enable the PLLI2S */
;;;2866     __HAL_RCC_PLLI2S_ENABLE();
;;;2867   
;;;2868     /* Wait till PLLI2S is ready */
;;;2869     tickstart = HAL_GetTick();
;;;2870     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
;;;2871     {
;;;2872       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;2873       {
;;;2874         /* return in case of Timeout detected */
;;;2875         return HAL_TIMEOUT;
;;;2876       }
;;;2877     }
;;;2878   
;;;2879    return HAL_OK;
;;;2880   }
00001e  bd70              POP      {r4-r6,pc}
                  |L2.32|
000020  4812              LDR      r0,|L2.108|
000022  6800              LDR      r0,[r0,#0]            ;2825
000024  f3c060c0          UBFX     r0,r0,#27,#1          ;2825
000028  2800              CMP      r0,#0                 ;2825
00002a  d1f2              BNE      |L2.18|
00002c  6820              LDR      r0,[r4,#0]            ;2862
00002e  0180              LSLS     r0,r0,#6              ;2862
000030  7921              LDRB     r1,[r4,#4]            ;2862
000032  ea407001          ORR      r0,r0,r1,LSL #28      ;2862
000036  490d              LDR      r1,|L2.108|
000038  3184              ADDS     r1,r1,#0x84           ;2862
00003a  6008              STR      r0,[r1,#0]            ;2862
00003c  2001              MOVS     r0,#1                 ;2866
00003e  490a              LDR      r1,|L2.104|
000040  6688              STR      r0,[r1,#0x68]         ;2866
000042  f7fffffe          BL       HAL_GetTick
000046  4605              MOV      r5,r0                 ;2869
000048  e006              B        |L2.88|
                  |L2.74|
00004a  f7fffffe          BL       HAL_GetTick
00004e  1b40              SUBS     r0,r0,r5              ;2872
000050  2802              CMP      r0,#2                 ;2872
000052  d901              BLS      |L2.88|
000054  2003              MOVS     r0,#3                 ;2875
000056  e7e2              B        |L2.30|
                  |L2.88|
000058  4804              LDR      r0,|L2.108|
00005a  6800              LDR      r0,[r0,#0]            ;2870
00005c  f3c060c0          UBFX     r0,r0,#27,#1          ;2870
000060  2800              CMP      r0,#0                 ;2870
000062  d0f2              BEQ      |L2.74|
000064  2000              MOVS     r0,#0                 ;2879
000066  e7da              B        |L2.30|
;;;2881   
                          ENDP

                  |L2.104|
                          DCD      0x42470000
                  |L2.108|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;2640     */
;;;2641   void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  2203              MOVS     r2,#3
;;;2642   {
;;;2643     uint32_t tempreg;
;;;2644   
;;;2645     /* Set all possible values for the extended clock type parameter------------*/
;;;2646     PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
000002  6002              STR      r2,[r0,#0]
;;;2647   
;;;2648     /* Get the PLLI2S Clock configuration --------------------------------------*/
;;;2649     PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
000004  4a0b              LDR      r2,|L3.52|
000006  6812              LDR      r2,[r2,#0]
000008  f3c21288          UBFX     r2,r2,#6,#9
00000c  6042              STR      r2,[r0,#4]
;;;2650     PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
00000e  4a09              LDR      r2,|L3.52|
000010  6812              LDR      r2,[r2,#0]
000012  f3c27302          UBFX     r3,r2,#28,#3
000016  6083              STR      r3,[r0,#8]
;;;2651   #if defined(STM32F411xE)
;;;2652     PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
;;;2653   #endif /* STM32F411xE */
;;;2654     /* Get the RTC Clock configuration -----------------------------------------*/
;;;2655     tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
000018  4a06              LDR      r2,|L3.52|
00001a  3a7c              SUBS     r2,r2,#0x7c
00001c  6812              LDR      r2,[r2,#0]
00001e  f40211f8          AND      r1,r2,#0x1f0000
;;;2656     PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
000022  4a04              LDR      r2,|L3.52|
000024  3a14              SUBS     r2,r2,#0x14
000026  6812              LDR      r2,[r2,#0]
000028  f4027240          AND      r2,r2,#0x300
00002c  430a              ORRS     r2,r2,r1
00002e  60c2              STR      r2,[r0,#0xc]
;;;2657   
;;;2658   #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
;;;2659     /* Get the TIM Prescaler configuration -------------------------------------*/
;;;2660     if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
;;;2661     {
;;;2662       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
;;;2663     }
;;;2664     else
;;;2665     {
;;;2666       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
;;;2667     }
;;;2668   #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
;;;2669   }
000030  4770              BX       lr
;;;2670   
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_GetPeriphCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKFreq PROC
;;;2678     */
;;;2679   uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
000000  b570              PUSH     {r4-r6,lr}
;;;2680   {
000002  4601              MOV      r1,r0
;;;2681     /* This variable used to store the I2S clock frequency (value in Hz) */
;;;2682     uint32_t frequency = 0U;
000004  2000              MOVS     r0,#0
;;;2683     /* This variable used to store the VCO Input (value in Hz) */
;;;2684     uint32_t vcoinput = 0U;
000006  2200              MOVS     r2,#0
;;;2685     uint32_t srcclk = 0U;
000008  2300              MOVS     r3,#0
;;;2686     /* This variable used to store the VCO Output (value in Hz) */
;;;2687     uint32_t vcooutput = 0U;
00000a  2400              MOVS     r4,#0
;;;2688     switch (PeriphClk)
00000c  2901              CMP      r1,#1
00000e  d134              BNE      |L4.122|
;;;2689     {
;;;2690     case RCC_PERIPHCLK_I2S:
;;;2691       {
;;;2692         /* Get the current I2S source */
;;;2693         srcclk = __HAL_RCC_GET_I2S_SOURCE();
000010  4d1b              LDR      r5,|L4.128|
000012  682d              LDR      r5,[r5,#0]
000014  f4050300          AND      r3,r5,#0x800000
;;;2694         switch (srcclk)
000018  b11b              CBZ      r3,|L4.34|
00001a  2b01              CMP      r3,#1
00001c  d129              BNE      |L4.114|
;;;2695         {
;;;2696         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
;;;2697         case RCC_I2SCLKSOURCE_EXT:
;;;2698           {
;;;2699             /* Set the I2S clock to the external clock  value */
;;;2700             frequency = EXTERNAL_CLOCK_VALUE;
00001e  4819              LDR      r0,|L4.132|
;;;2701             break;
000020  e029              B        |L4.118|
                  |L4.34|
;;;2702           }
;;;2703         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
;;;2704         case RCC_I2SCLKSOURCE_PLLI2S:
;;;2705           {
;;;2706   #if defined(STM32F411xE)
;;;2707             /* Configure the PLLI2S division factor */
;;;2708             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
;;;2709             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
;;;2710             {
;;;2711               /* Get the I2S source clock value */
;;;2712               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
;;;2713             }
;;;2714             else
;;;2715             {
;;;2716               /* Get the I2S source clock value */
;;;2717               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
;;;2718             }
;;;2719   #else
;;;2720             /* Configure the PLLI2S division factor */
;;;2721             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
;;;2722             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
000022  4d17              LDR      r5,|L4.128|
000024  1f2d              SUBS     r5,r5,#4
000026  682d              LDR      r5,[r5,#0]
000028  f4050580          AND      r5,r5,#0x400000
00002c  f5b50f80          CMP      r5,#0x400000
000030  d108              BNE      |L4.68|
;;;2723             {
;;;2724               /* Get the I2S source clock value */
;;;2725               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000032  4d13              LDR      r5,|L4.128|
000034  1f2d              SUBS     r5,r5,#4
000036  682d              LDR      r5,[r5,#0]
000038  f005053f          AND      r5,r5,#0x3f
00003c  4e12              LDR      r6,|L4.136|
00003e  fbb6f2f5          UDIV     r2,r6,r5
000042  e007              B        |L4.84|
                  |L4.68|
;;;2726             }
;;;2727             else
;;;2728             {
;;;2729               /* Get the I2S source clock value */
;;;2730               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000044  4d0e              LDR      r5,|L4.128|
000046  1f2d              SUBS     r5,r5,#4
000048  682d              LDR      r5,[r5,#0]
00004a  f005053f          AND      r5,r5,#0x3f
00004e  4e0f              LDR      r6,|L4.140|
000050  fbb6f2f5          UDIV     r2,r6,r5
                  |L4.84|
;;;2731             }
;;;2732   #endif /* STM32F411xE */
;;;2733             /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;2734             vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
000054  4d0a              LDR      r5,|L4.128|
000056  357c              ADDS     r5,r5,#0x7c
000058  682d              LDR      r5,[r5,#0]
00005a  f3c51588          UBFX     r5,r5,#6,#9
00005e  fb05f402          MUL      r4,r5,r2
;;;2735             /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
;;;2736             frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
000062  4d07              LDR      r5,|L4.128|
000064  357c              ADDS     r5,r5,#0x7c
000066  682d              LDR      r5,[r5,#0]
000068  f3c57502          UBFX     r5,r5,#28,#3
00006c  fbb4f0f5          UDIV     r0,r4,r5
;;;2737             break;
000070  e001              B        |L4.118|
                  |L4.114|
;;;2738           }
;;;2739           /* Clock not enabled for I2S*/
;;;2740         default:
;;;2741           {
;;;2742             frequency = 0U;
000072  2000              MOVS     r0,#0
;;;2743             break;
000074  bf00              NOP      
                  |L4.118|
000076  bf00              NOP                            ;2701
;;;2744           }
;;;2745         }
;;;2746         break;
000078  bf00              NOP      
                  |L4.122|
00007a  bf00              NOP      
;;;2747       }
;;;2748     }
;;;2749     return frequency;
;;;2750   }
00007c  bd70              POP      {r4-r6,pc}
;;;2751   #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F401xC || STM32F401xE  || STM32F411xE */
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      0x40023808
                  |L4.132|
                          DCD      0x00bb8000
                  |L4.136|
                          DCD      0x00b71b00
                  |L4.140|
                          DCD      0x00f42400

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;2512     */
;;;2513   HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2514   {
000002  4604              MOV      r4,r0
;;;2515     uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;2516     uint32_t tmpreg1 = 0U;
000006  2600              MOVS     r6,#0
;;;2517   
;;;2518     /* Check the parameters */
;;;2519     assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;2520   
;;;2521     /*---------------------------- I2S configuration ---------------------------*/
;;;2522     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
000008  7820              LDRB     r0,[r4,#0]
00000a  f0000001          AND      r0,r0,#1
00000e  b920              CBNZ     r0,|L5.26|
;;;2523        (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
000010  7820              LDRB     r0,[r4,#0]
000012  f0000004          AND      r0,r0,#4
000016  2804              CMP      r0,#4
000018  d12f              BNE      |L5.122|
                  |L5.26|
;;;2524     {
;;;2525       /* check for Parameters */
;;;2526       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;2527       assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;2528   #if defined(STM32F411xE)
;;;2529       assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
;;;2530   #endif /* STM32F411xE */
;;;2531       /* Disable the PLLI2S */
;;;2532       __HAL_RCC_PLLI2S_DISABLE();
00001a  2000              MOVS     r0,#0
00001c  495b              LDR      r1,|L5.396|
00001e  6688              STR      r0,[r1,#0x68]
;;;2533       /* Get tick */
;;;2534       tickstart = HAL_GetTick();
000020  f7fffffe          BL       HAL_GetTick
000024  4605              MOV      r5,r0
;;;2535       /* Wait till PLLI2S is disabled */
;;;2536       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
000026  e006              B        |L5.54|
                  |L5.40|
;;;2537       {
;;;2538         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000028  f7fffffe          BL       HAL_GetTick
00002c  1b40              SUBS     r0,r0,r5
00002e  2802              CMP      r0,#2
000030  d901              BLS      |L5.54|
;;;2539         {
;;;2540           /* return in case of Timeout detected */
;;;2541           return HAL_TIMEOUT;
000032  2003              MOVS     r0,#3
                  |L5.52|
;;;2542         }
;;;2543       }
;;;2544   
;;;2545   #if defined(STM32F411xE)
;;;2546       /* Configure the PLLI2S division factors */
;;;2547       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2548       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;2549       __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
;;;2550   #else
;;;2551       /* Configure the PLLI2S division factors */
;;;2552       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
;;;2553       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;2554       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
;;;2555   #endif /* STM32F411xE */
;;;2556   
;;;2557       /* Enable the PLLI2S */
;;;2558       __HAL_RCC_PLLI2S_ENABLE();
;;;2559       /* Get tick */
;;;2560       tickstart = HAL_GetTick();
;;;2561       /* Wait till PLLI2S is ready */
;;;2562       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;2563       {
;;;2564         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;2565         {
;;;2566           /* return in case of Timeout detected */
;;;2567           return HAL_TIMEOUT;
;;;2568         }
;;;2569       }
;;;2570     }
;;;2571   
;;;2572     /*---------------------------- RTC configuration ---------------------------*/
;;;2573     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
;;;2574     {
;;;2575       /* Check for RTC Parameters used to output RTCCLK */
;;;2576       assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
;;;2577   
;;;2578       /* Enable Power Clock*/
;;;2579       __HAL_RCC_PWR_CLK_ENABLE();
;;;2580   
;;;2581       /* Enable write access to Backup domain */
;;;2582       PWR->CR |= PWR_CR_DBP;
;;;2583   
;;;2584       /* Get tick */
;;;2585       tickstart = HAL_GetTick();
;;;2586   
;;;2587       while((PWR->CR & PWR_CR_DBP) == RESET)
;;;2588       {
;;;2589         if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;2590         {
;;;2591           return HAL_TIMEOUT;
;;;2592         }
;;;2593       }
;;;2594       /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
;;;2595       tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
;;;2596       if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
;;;2597       {
;;;2598         /* Store the content of BDCR register before the reset of Backup Domain */
;;;2599         tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;2600         /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;2601         __HAL_RCC_BACKUPRESET_FORCE();
;;;2602         __HAL_RCC_BACKUPRESET_RELEASE();
;;;2603         /* Restore the Content of BDCR register */
;;;2604         RCC->BDCR = tmpreg1;
;;;2605   
;;;2606         /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
;;;2607         if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
;;;2608         {
;;;2609           /* Get tick */
;;;2610           tickstart = HAL_GetTick();
;;;2611   
;;;2612           /* Wait till LSE is ready */
;;;2613           while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;2614           {
;;;2615             if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;2616             {
;;;2617               return HAL_TIMEOUT;
;;;2618             }
;;;2619           }
;;;2620         }
;;;2621       }
;;;2622       __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
;;;2623     }
;;;2624   #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
;;;2625     /*---------------------------- TIM configuration ---------------------------*/
;;;2626     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
;;;2627     {
;;;2628       __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
;;;2629     }
;;;2630   #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
;;;2631     return HAL_OK;
;;;2632   }
000034  bdf8              POP      {r3-r7,pc}
                  |L5.54|
000036  4856              LDR      r0,|L5.400|
000038  6800              LDR      r0,[r0,#0]            ;2536
00003a  f3c060c0          UBFX     r0,r0,#27,#1          ;2536
00003e  2800              CMP      r0,#0                 ;2536
000040  d1f2              BNE      |L5.40|
000042  6860              LDR      r0,[r4,#4]            ;2554
000044  0181              LSLS     r1,r0,#6              ;2554
000046  7a20              LDRB     r0,[r4,#8]            ;2554
000048  ea417000          ORR      r0,r1,r0,LSL #28      ;2554
00004c  4950              LDR      r1,|L5.400|
00004e  3184              ADDS     r1,r1,#0x84           ;2554
000050  6008              STR      r0,[r1,#0]            ;2554
000052  2001              MOVS     r0,#1                 ;2558
000054  494d              LDR      r1,|L5.396|
000056  6688              STR      r0,[r1,#0x68]         ;2558
000058  f7fffffe          BL       HAL_GetTick
00005c  4605              MOV      r5,r0                 ;2560
00005e  e006              B        |L5.110|
                  |L5.96|
000060  f7fffffe          BL       HAL_GetTick
000064  1b40              SUBS     r0,r0,r5              ;2564
000066  2802              CMP      r0,#2                 ;2564
000068  d901              BLS      |L5.110|
00006a  2003              MOVS     r0,#3                 ;2567
00006c  e7e2              B        |L5.52|
                  |L5.110|
00006e  4848              LDR      r0,|L5.400|
000070  6800              LDR      r0,[r0,#0]            ;2562
000072  f3c060c0          UBFX     r0,r0,#27,#1          ;2562
000076  2800              CMP      r0,#0                 ;2562
000078  d0f2              BEQ      |L5.96|
                  |L5.122|
00007a  7820              LDRB     r0,[r4,#0]            ;2573
00007c  f0000002          AND      r0,r0,#2              ;2573
000080  2802              CMP      r0,#2                 ;2573
000082  d17d              BNE      |L5.384|
000084  bf00              NOP                            ;2579
000086  2000              MOVS     r0,#0                 ;2579
000088  9000              STR      r0,[sp,#0]            ;2579
00008a  4841              LDR      r0,|L5.400|
00008c  3040              ADDS     r0,r0,#0x40           ;2579
00008e  6800              LDR      r0,[r0,#0]            ;2579
000090  f0405080          ORR      r0,r0,#0x10000000     ;2579
000094  493e              LDR      r1,|L5.400|
000096  3140              ADDS     r1,r1,#0x40           ;2579
000098  6008              STR      r0,[r1,#0]            ;2579
00009a  4608              MOV      r0,r1                 ;2579
00009c  6800              LDR      r0,[r0,#0]            ;2579
00009e  f0005080          AND      r0,r0,#0x10000000     ;2579
0000a2  9000              STR      r0,[sp,#0]            ;2579
0000a4  bf00              NOP                            ;2579
0000a6  bf00              NOP                            ;2579
0000a8  483a              LDR      r0,|L5.404|
0000aa  6800              LDR      r0,[r0,#0]            ;2582
0000ac  f4407080          ORR      r0,r0,#0x100          ;2582
0000b0  4938              LDR      r1,|L5.404|
0000b2  6008              STR      r0,[r1,#0]            ;2582
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  4605              MOV      r5,r0                 ;2585
0000ba  e006              B        |L5.202|
                  |L5.188|
0000bc  f7fffffe          BL       HAL_GetTick
0000c0  1b40              SUBS     r0,r0,r5              ;2589
0000c2  2802              CMP      r0,#2                 ;2589
0000c4  d901              BLS      |L5.202|
0000c6  2003              MOVS     r0,#3                 ;2591
0000c8  e7b4              B        |L5.52|
                  |L5.202|
0000ca  4832              LDR      r0,|L5.404|
0000cc  6800              LDR      r0,[r0,#0]            ;2587
0000ce  f4007080          AND      r0,r0,#0x100          ;2587
0000d2  2800              CMP      r0,#0                 ;2587
0000d4  d0f2              BEQ      |L5.188|
0000d6  482e              LDR      r0,|L5.400|
0000d8  3070              ADDS     r0,r0,#0x70           ;2595
0000da  6800              LDR      r0,[r0,#0]            ;2595
0000dc  f4007640          AND      r6,r0,#0x300          ;2595
0000e0  b34e              CBZ      r6,|L5.310|
0000e2  89a0              LDRH     r0,[r4,#0xc]          ;2596
0000e4  f4007040          AND      r0,r0,#0x300          ;2596
0000e8  42b0              CMP      r0,r6                 ;2596
0000ea  d024              BEQ      |L5.310|
0000ec  4828              LDR      r0,|L5.400|
0000ee  3070              ADDS     r0,r0,#0x70           ;2599
0000f0  6800              LDR      r0,[r0,#0]            ;2599
0000f2  f4207640          BIC      r6,r0,#0x300          ;2599
0000f6  2001              MOVS     r0,#1                 ;2601
0000f8  4927              LDR      r1,|L5.408|
0000fa  6008              STR      r0,[r1,#0]            ;2601
0000fc  2000              MOVS     r0,#0                 ;2602
0000fe  6008              STR      r0,[r1,#0]            ;2602
000100  4823              LDR      r0,|L5.400|
000102  3070              ADDS     r0,r0,#0x70           ;2604
000104  6006              STR      r6,[r0,#0]            ;2604
000106  6800              LDR      r0,[r0,#0]            ;2607
000108  f0000001          AND      r0,r0,#1              ;2607
00010c  b198              CBZ      r0,|L5.310|
00010e  f7fffffe          BL       HAL_GetTick
000112  4605              MOV      r5,r0                 ;2610
000114  e008              B        |L5.296|
                  |L5.278|
000116  f7fffffe          BL       HAL_GetTick
00011a  1b40              SUBS     r0,r0,r5              ;2615
00011c  f2413188          MOV      r1,#0x1388            ;2615
000120  4288              CMP      r0,r1                 ;2615
000122  d901              BLS      |L5.296|
000124  2003              MOVS     r0,#3                 ;2617
000126  e785              B        |L5.52|
                  |L5.296|
000128  4819              LDR      r0,|L5.400|
00012a  3070              ADDS     r0,r0,#0x70           ;2613
00012c  6800              LDR      r0,[r0,#0]            ;2613
00012e  f3c00040          UBFX     r0,r0,#1,#1           ;2613
000132  2800              CMP      r0,#0                 ;2613
000134  d0ef              BEQ      |L5.278|
                  |L5.310|
000136  bf00              NOP                            ;2622
000138  89a0              LDRH     r0,[r4,#0xc]          ;2622
00013a  f4007040          AND      r0,r0,#0x300          ;2622
00013e  f5b07f40          CMP      r0,#0x300             ;2622
000142  d10c              BNE      |L5.350|
000144  4812              LDR      r0,|L5.400|
000146  3008              ADDS     r0,r0,#8              ;2622
000148  6800              LDR      r0,[r0,#0]            ;2622
00014a  f42010f8          BIC      r0,r0,#0x1f0000       ;2622
00014e  4a13              LDR      r2,|L5.412|
000150  68e1              LDR      r1,[r4,#0xc]          ;2622
000152  4011              ANDS     r1,r1,r2              ;2622
000154  4308              ORRS     r0,r0,r1              ;2622
000156  490e              LDR      r1,|L5.400|
000158  3108              ADDS     r1,r1,#8              ;2622
00015a  6008              STR      r0,[r1,#0]            ;2622
00015c  e007              B        |L5.366|
                  |L5.350|
00015e  480c              LDR      r0,|L5.400|
000160  3008              ADDS     r0,r0,#8              ;2622
000162  6800              LDR      r0,[r0,#0]            ;2622
000164  f42010f8          BIC      r0,r0,#0x1f0000       ;2622
000168  4909              LDR      r1,|L5.400|
00016a  3108              ADDS     r1,r1,#8              ;2622
00016c  6008              STR      r0,[r1,#0]            ;2622
                  |L5.366|
00016e  4808              LDR      r0,|L5.400|
000170  3070              ADDS     r0,r0,#0x70           ;2622
000172  6800              LDR      r0,[r0,#0]            ;2622
000174  89a1              LDRH     r1,[r4,#0xc]          ;2622
000176  f3c1010b          UBFX     r1,r1,#0,#12          ;2622
00017a  4308              ORRS     r0,r0,r1              ;2622
00017c  4904              LDR      r1,|L5.400|
00017e  e000              B        |L5.386|
                  |L5.384|
000180  e002              B        |L5.392|
                  |L5.386|
000182  3170              ADDS     r1,r1,#0x70           ;2622
000184  6008              STR      r0,[r1,#0]            ;2622
000186  bf00              NOP                            ;2622
                  |L5.392|
000188  2000              MOVS     r0,#0                 ;2631
00018a  e753              B        |L5.52|
;;;2633   
                          ENDP

                  |L5.396|
                          DCD      0x42470000
                  |L5.400|
                          DCD      0x40023800
                  |L5.404|
                          DCD      0x40007000
                  |L5.408|
                          DCD      0x42470e40
                  |L5.412|
                          DCD      0x0ffffcff

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;3142     */
;;;3143   HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;3144   {
;;;3145     uint32_t tickstart;
;;;3146   
;;;3147     /* Get Start Tick */
;;;3148     tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
;;;3149   
;;;3150     /* Set HSION bit to the reset value */
;;;3151     SET_BIT(RCC->CR, RCC_CR_HSION);
000008  4857              LDR      r0,|L6.360|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  4955              LDR      r1,|L6.360|
000012  6008              STR      r0,[r1,#0]
;;;3152   
;;;3153     /* Wait till HSI is ready */
;;;3154     while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e006              B        |L6.36|
                  |L6.22|
;;;3155     {
;;;3156       if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2802              CMP      r0,#2
00001e  d901              BLS      |L6.36|
;;;3157       {
;;;3158         return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L6.34|
;;;3159       }
;;;3160     }
;;;3161   
;;;3162     /* Set HSITRIM[4:0] bits to the reset value */
;;;3163     SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
;;;3164   
;;;3165     /* Get Start Tick */
;;;3166     tickstart = HAL_GetTick();
;;;3167   
;;;3168     /* Reset CFGR register */
;;;3169     CLEAR_REG(RCC->CFGR);
;;;3170   
;;;3171     /* Wait till clock switch is ready */
;;;3172     while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;3173     {
;;;3174       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;3175       {
;;;3176         return HAL_TIMEOUT;
;;;3177       }
;;;3178     }
;;;3179   
;;;3180     /* Get Start Tick */
;;;3181     tickstart = HAL_GetTick();
;;;3182   
;;;3183     /* Clear HSEON, HSEBYP and CSSON bits */
;;;3184     CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
;;;3185   
;;;3186     /* Wait till HSE is disabled */
;;;3187     while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;3188     {
;;;3189       if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;3190       {
;;;3191         return HAL_TIMEOUT;
;;;3192       }
;;;3193     }
;;;3194   
;;;3195     /* Get Start Tick */
;;;3196     tickstart = HAL_GetTick();
;;;3197   
;;;3198     /* Clear PLLON bit */
;;;3199     CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;3200   
;;;3201     /* Wait till PLL is disabled */
;;;3202     while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;3203     {
;;;3204       if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;3205       {
;;;3206         return HAL_TIMEOUT;
;;;3207       }
;;;3208     }
;;;3209   
;;;3210   #if defined(RCC_PLLI2S_SUPPORT)
;;;3211     /* Get Start Tick */
;;;3212     tickstart = HAL_GetTick();
;;;3213   
;;;3214     /* Reset PLLI2SON bit */
;;;3215     CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
;;;3216   
;;;3217     /* Wait till PLLI2S is disabled */
;;;3218     while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
;;;3219     {
;;;3220       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;3221       {
;;;3222         return HAL_TIMEOUT;
;;;3223       }
;;;3224     }
;;;3225   #endif /* RCC_PLLI2S_SUPPORT */
;;;3226   
;;;3227   #if defined(RCC_PLLSAI_SUPPORT)
;;;3228     /* Get Start Tick */
;;;3229     tickstart = HAL_GetTick();
;;;3230   
;;;3231     /* Reset PLLSAI bit */
;;;3232     CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
;;;3233   
;;;3234     /* Wait till PLLSAI is disabled */
;;;3235     while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
;;;3236     {
;;;3237       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;3238       {
;;;3239         return HAL_TIMEOUT;
;;;3240       }
;;;3241     }
;;;3242   #endif /* RCC_PLLSAI_SUPPORT */
;;;3243   
;;;3244     /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
;;;3245   #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
;;;3246       defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3247     RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
;;;3248   #elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
;;;3249     RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
;;;3250   #else
;;;3251     RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
;;;3252   #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */
;;;3253   
;;;3254     /* Reset PLLI2SCFGR register to default value */
;;;3255   #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
;;;3256       defined(STM32F423xx) || defined(STM32F446xx)
;;;3257     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3258   #elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
;;;3259     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3260   #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3261     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3262   #elif defined(STM32F411xE)
;;;3263     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3264   #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */
;;;3265   
;;;3266     /* Reset PLLSAICFGR register */
;;;3267   #if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3268     RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
;;;3269   #elif defined(STM32F446xx)
;;;3270     RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
;;;3271   #endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */
;;;3272   
;;;3273     /* Disable all interrupts */
;;;3274     CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
;;;3275   
;;;3276   #if defined(RCC_CIR_PLLI2SRDYIE)
;;;3277     CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
;;;3278   #endif /* RCC_CIR_PLLI2SRDYIE */
;;;3279   
;;;3280   #if defined(RCC_CIR_PLLSAIRDYIE)
;;;3281     CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
;;;3282   #endif /* RCC_CIR_PLLSAIRDYIE */
;;;3283   
;;;3284     /* Clear all interrupt flags */
;;;3285     SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
;;;3286   
;;;3287   #if defined(RCC_CIR_PLLI2SRDYC)
;;;3288     SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
;;;3289   #endif /* RCC_CIR_PLLI2SRDYC */
;;;3290   
;;;3291   #if defined(RCC_CIR_PLLSAIRDYC)
;;;3292     SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
;;;3293   #endif /* RCC_CIR_PLLSAIRDYC */
;;;3294   
;;;3295     /* Clear LSION bit */
;;;3296     CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
;;;3297   
;;;3298     /* Reset all CSR flags */
;;;3299     SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;3300   
;;;3301     /* Update the SystemCoreClock global variable */
;;;3302     SystemCoreClock = HSI_VALUE;
;;;3303   
;;;3304     /* Adapt Systick interrupt period */
;;;3305     if(HAL_InitTick(uwTickPrio) != HAL_OK)
;;;3306     {
;;;3307       return HAL_ERROR;
;;;3308     }
;;;3309     else
;;;3310     {
;;;3311       return HAL_OK;
;;;3312     }
;;;3313   }
000022  bd10              POP      {r4,pc}
                  |L6.36|
000024  4850              LDR      r0,|L6.360|
000026  6800              LDR      r0,[r0,#0]            ;3154
000028  f0000002          AND      r0,r0,#2              ;3154
00002c  2800              CMP      r0,#0                 ;3154
00002e  d0f2              BEQ      |L6.22|
000030  484d              LDR      r0,|L6.360|
000032  6800              LDR      r0,[r0,#0]            ;3163
000034  f0400080          ORR      r0,r0,#0x80           ;3163
000038  494b              LDR      r1,|L6.360|
00003a  6008              STR      r0,[r1,#0]            ;3163
00003c  f7fffffe          BL       HAL_GetTick
000040  4604              MOV      r4,r0                 ;3166
000042  2000              MOVS     r0,#0                 ;3169
000044  4948              LDR      r1,|L6.360|
000046  3108              ADDS     r1,r1,#8              ;3169
000048  6008              STR      r0,[r1,#0]            ;3169
00004a  e008              B        |L6.94|
                  |L6.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  1b00              SUBS     r0,r0,r4              ;3174
000052  f2413188          MOV      r1,#0x1388            ;3174
000056  4288              CMP      r0,r1                 ;3174
000058  d901              BLS      |L6.94|
00005a  2003              MOVS     r0,#3                 ;3176
00005c  e7e1              B        |L6.34|
                  |L6.94|
00005e  4842              LDR      r0,|L6.360|
000060  3008              ADDS     r0,r0,#8              ;3172
000062  6800              LDR      r0,[r0,#0]            ;3172
000064  f000000c          AND      r0,r0,#0xc            ;3172
000068  2800              CMP      r0,#0                 ;3172
00006a  d1ef              BNE      |L6.76|
00006c  f7fffffe          BL       HAL_GetTick
000070  4604              MOV      r4,r0                 ;3181
000072  483d              LDR      r0,|L6.360|
000074  6800              LDR      r0,[r0,#0]            ;3184
000076  f4202050          BIC      r0,r0,#0xd0000        ;3184
00007a  493b              LDR      r1,|L6.360|
00007c  6008              STR      r0,[r1,#0]            ;3184
00007e  e006              B        |L6.142|
                  |L6.128|
000080  f7fffffe          BL       HAL_GetTick
000084  1b00              SUBS     r0,r0,r4              ;3189
000086  2864              CMP      r0,#0x64              ;3189
000088  d901              BLS      |L6.142|
00008a  2003              MOVS     r0,#3                 ;3191
00008c  e7c9              B        |L6.34|
                  |L6.142|
00008e  4836              LDR      r0,|L6.360|
000090  6800              LDR      r0,[r0,#0]            ;3187
000092  f4003000          AND      r0,r0,#0x20000        ;3187
000096  2800              CMP      r0,#0                 ;3187
000098  d1f2              BNE      |L6.128|
00009a  f7fffffe          BL       HAL_GetTick
00009e  4604              MOV      r4,r0                 ;3196
0000a0  4831              LDR      r0,|L6.360|
0000a2  6800              LDR      r0,[r0,#0]            ;3199
0000a4  f0207080          BIC      r0,r0,#0x1000000      ;3199
0000a8  492f              LDR      r1,|L6.360|
0000aa  6008              STR      r0,[r1,#0]            ;3199
0000ac  e006              B        |L6.188|
                  |L6.174|
0000ae  f7fffffe          BL       HAL_GetTick
0000b2  1b00              SUBS     r0,r0,r4              ;3204
0000b4  2802              CMP      r0,#2                 ;3204
0000b6  d901              BLS      |L6.188|
0000b8  2003              MOVS     r0,#3                 ;3206
0000ba  e7b2              B        |L6.34|
                  |L6.188|
0000bc  482a              LDR      r0,|L6.360|
0000be  6800              LDR      r0,[r0,#0]            ;3202
0000c0  f0007000          AND      r0,r0,#0x2000000      ;3202
0000c4  2800              CMP      r0,#0                 ;3202
0000c6  d1f2              BNE      |L6.174|
0000c8  f7fffffe          BL       HAL_GetTick
0000cc  4604              MOV      r4,r0                 ;3212
0000ce  4826              LDR      r0,|L6.360|
0000d0  6800              LDR      r0,[r0,#0]            ;3215
0000d2  f0206080          BIC      r0,r0,#0x4000000      ;3215
0000d6  4924              LDR      r1,|L6.360|
0000d8  6008              STR      r0,[r1,#0]            ;3215
0000da  e006              B        |L6.234|
                  |L6.220|
0000dc  f7fffffe          BL       HAL_GetTick
0000e0  1b00              SUBS     r0,r0,r4              ;3220
0000e2  2802              CMP      r0,#2                 ;3220
0000e4  d901              BLS      |L6.234|
0000e6  2003              MOVS     r0,#3                 ;3222
0000e8  e79b              B        |L6.34|
                  |L6.234|
0000ea  481f              LDR      r0,|L6.360|
0000ec  6800              LDR      r0,[r0,#0]            ;3218
0000ee  f0006000          AND      r0,r0,#0x8000000      ;3218
0000f2  2800              CMP      r0,#0                 ;3218
0000f4  d1f2              BNE      |L6.220|
0000f6  481d              LDR      r0,|L6.364|
0000f8  491b              LDR      r1,|L6.360|
0000fa  1d09              ADDS     r1,r1,#4              ;3251
0000fc  6008              STR      r0,[r1,#0]            ;3251
0000fe  481c              LDR      r0,|L6.368|
000100  4919              LDR      r1,|L6.360|
000102  3184              ADDS     r1,r1,#0x84           ;3259
000104  6008              STR      r0,[r1,#0]            ;3259
000106  4818              LDR      r0,|L6.360|
000108  300c              ADDS     r0,r0,#0xc            ;3274
00010a  6800              LDR      r0,[r0,#0]            ;3274
00010c  f42050f8          BIC      r0,r0,#0x1f00         ;3274
000110  4915              LDR      r1,|L6.360|
000112  310c              ADDS     r1,r1,#0xc            ;3274
000114  6008              STR      r0,[r1,#0]            ;3274
000116  4608              MOV      r0,r1                 ;3277
000118  6800              LDR      r0,[r0,#0]            ;3277
00011a  f4205000          BIC      r0,r0,#0x2000         ;3277
00011e  6008              STR      r0,[r1,#0]            ;3277
000120  4608              MOV      r0,r1                 ;3285
000122  6800              LDR      r0,[r0,#0]            ;3285
000124  f440001f          ORR      r0,r0,#0x9f0000       ;3285
000128  6008              STR      r0,[r1,#0]            ;3285
00012a  4608              MOV      r0,r1                 ;3288
00012c  6800              LDR      r0,[r0,#0]            ;3288
00012e  f4401000          ORR      r0,r0,#0x200000       ;3288
000132  6008              STR      r0,[r1,#0]            ;3288
000134  480c              LDR      r0,|L6.360|
000136  3074              ADDS     r0,r0,#0x74           ;3296
000138  6800              LDR      r0,[r0,#0]            ;3296
00013a  f0200001          BIC      r0,r0,#1              ;3296
00013e  490a              LDR      r1,|L6.360|
000140  3174              ADDS     r1,r1,#0x74           ;3296
000142  6008              STR      r0,[r1,#0]            ;3296
000144  4608              MOV      r0,r1                 ;3299
000146  6800              LDR      r0,[r0,#0]            ;3299
000148  f0407080          ORR      r0,r0,#0x1000000      ;3299
00014c  6008              STR      r0,[r1,#0]            ;3299
00014e  4809              LDR      r0,|L6.372|
000150  4909              LDR      r1,|L6.376|
000152  6008              STR      r0,[r1,#0]            ;3302  ; SystemCoreClock
000154  4809              LDR      r0,|L6.380|
000156  6800              LDR      r0,[r0,#0]            ;3305  ; uwTickPrio
000158  f7fffffe          BL       HAL_InitTick
00015c  b108              CBZ      r0,|L6.354|
00015e  2001              MOVS     r0,#1                 ;3307
000160  e75f              B        |L6.34|
                  |L6.354|
000162  2000              MOVS     r0,#0                 ;3311
000164  e75d              B        |L6.34|
;;;3314   
                          ENDP

000166  0000              DCW      0x0000
                  |L6.360|
                          DCD      0x40023800
                  |L6.364|
                          DCD      0x04003010
                  |L6.368|
                          DCD      0x20003000
                  |L6.372|
                          DCD      0x00f42400
                  |L6.376|
                          DCD      SystemCoreClock
                  |L6.380|
                          DCD      uwTickPrio

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 478
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____RRX|
#line 665
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
