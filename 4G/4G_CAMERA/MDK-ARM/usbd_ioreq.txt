; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\usbd_ioreq.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\usbd_ioreq.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\usbd_ioreq.crf ../Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c]
                          THUMB

                          AREA ||i.USBD_CtlContinueRx||, CODE, READONLY, ALIGN=1

                  USBD_CtlContinueRx PROC
;;;156      */
;;;157    USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
000000  b570              PUSH     {r4-r6,lr}
;;;158                                          uint8_t *pbuf, uint32_t len)
;;;159    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;160      (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
000008  462b              MOV      r3,r5
00000a  4622              MOV      r2,r4
00000c  2100              MOVS     r1,#0
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       USBD_LL_PrepareReceive
;;;161    
;;;162      return USBD_OK;
000014  2000              MOVS     r0,#0
;;;163    }
000016  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.USBD_CtlContinueSendData||, CODE, READONLY, ALIGN=1

                  USBD_CtlContinueSendData PROC
;;;112      */
;;;113    USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
000000  b570              PUSH     {r4-r6,lr}
;;;114                                                uint8_t *pbuf, uint32_t len)
;;;115    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;116      /* Start the next transfer */
;;;117      (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
000008  462b              MOV      r3,r5
00000a  4622              MOV      r2,r4
00000c  2100              MOVS     r1,#0
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       USBD_LL_Transmit
;;;118    
;;;119      return USBD_OK;
000014  2000              MOVS     r0,#0
;;;120    }
000016  bd70              POP      {r4-r6,pc}
;;;121    
                          ENDP


                          AREA ||i.USBD_CtlPrepareRx||, CODE, READONLY, ALIGN=1

                  USBD_CtlPrepareRx PROC
;;;129      */
;;;130    USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
000000  b570              PUSH     {r4-r6,lr}
;;;131                                         uint8_t *pbuf, uint32_t len)
;;;132    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;133      /* Set EP0 State */
;;;134      pdev->ep0_state = USBD_EP0_DATA_OUT;
000008  2003              MOVS     r0,#3
00000a  f8c40294          STR      r0,[r4,#0x294]
;;;135      pdev->ep_out[0].total_length = len;
00000e  f44f70ac          MOV      r0,#0x158
000012  5105              STR      r5,[r0,r4]
;;;136    
;;;137    #ifdef USBD_AVOID_PACKET_SPLIT_MPS
;;;138      pdev->ep_out[0].rem_length = 0U;
;;;139    #else
;;;140      pdev->ep_out[0].rem_length = len;
000014  1d00              ADDS     r0,r0,#4
000016  5105              STR      r5,[r0,r4]
;;;141    #endif /* USBD_AVOID_PACKET_SPLIT_MPS */
;;;142    
;;;143      /* Start the transfer */
;;;144      (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
000018  462b              MOV      r3,r5
00001a  4632              MOV      r2,r6
00001c  2100              MOVS     r1,#0
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       USBD_LL_PrepareReceive
;;;145    
;;;146      return USBD_OK;
000024  2000              MOVS     r0,#0
;;;147    }
000026  bd70              POP      {r4-r6,pc}
;;;148    
                          ENDP


                          AREA ||i.USBD_CtlReceiveStatus||, CODE, READONLY, ALIGN=1

                  USBD_CtlReceiveStatus PROC
;;;187      */
;;;188    USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;189    {
000002  4604              MOV      r4,r0
;;;190      /* Set EP0 State */
;;;191      pdev->ep0_state = USBD_EP0_STATUS_OUT;
000004  2005              MOVS     r0,#5
000006  f8c40294          STR      r0,[r4,#0x294]
;;;192    
;;;193      /* Start the transfer */
;;;194      (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
00000a  2300              MOVS     r3,#0
00000c  461a              MOV      r2,r3
00000e  4619              MOV      r1,r3
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USBD_LL_PrepareReceive
;;;195    
;;;196      return USBD_OK;
000016  2000              MOVS     r0,#0
;;;197    }
000018  bd10              POP      {r4,pc}
;;;198    
                          ENDP


                          AREA ||i.USBD_CtlSendData||, CODE, READONLY, ALIGN=1

                  USBD_CtlSendData PROC
;;;85       */
;;;86     USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
000000  b570              PUSH     {r4-r6,lr}
;;;87                                         uint8_t *pbuf, uint32_t len)
;;;88     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;89       /* Set EP0 State */
;;;90       pdev->ep0_state = USBD_EP0_DATA_IN;
000008  2002              MOVS     r0,#2
00000a  f8c40294          STR      r0,[r4,#0x294]
;;;91       pdev->ep_in[0].total_length = len;
00000e  61a5              STR      r5,[r4,#0x18]
;;;92     
;;;93     #ifdef USBD_AVOID_PACKET_SPLIT_MPS
;;;94       pdev->ep_in[0].rem_length = 0U;
;;;95     #else
;;;96       pdev->ep_in[0].rem_length = len;
000010  61e5              STR      r5,[r4,#0x1c]
;;;97     #endif /* USBD_AVOID_PACKET_SPLIT_MPS */
;;;98     
;;;99       /* Start the transfer */
;;;100      (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
000012  462b              MOV      r3,r5
000014  4632              MOV      r2,r6
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       USBD_LL_Transmit
;;;101    
;;;102      return USBD_OK;
00001e  2000              MOVS     r0,#0
;;;103    }
000020  bd70              POP      {r4-r6,pc}
;;;104    
                          ENDP


                          AREA ||i.USBD_CtlSendStatus||, CODE, READONLY, ALIGN=1

                  USBD_CtlSendStatus PROC
;;;170      */
;;;171    USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
000000  b510              PUSH     {r4,lr}
;;;172    {
000002  4604              MOV      r4,r0
;;;173      /* Set EP0 State */
;;;174      pdev->ep0_state = USBD_EP0_STATUS_IN;
000004  2004              MOVS     r0,#4
000006  f8c40294          STR      r0,[r4,#0x294]
;;;175    
;;;176      /* Start the transfer */
;;;177      (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
00000a  2300              MOVS     r3,#0
00000c  461a              MOV      r2,r3
00000e  4619              MOV      r1,r3
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       USBD_LL_Transmit
;;;178    
;;;179      return USBD_OK;
000016  2000              MOVS     r0,#0
;;;180    }
000018  bd10              POP      {r4,pc}
;;;181    
                          ENDP


                          AREA ||i.USBD_GetRxCount||, CODE, READONLY, ALIGN=1

                  USBD_GetRxCount PROC
;;;205      */
;;;206    uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
000000  b570              PUSH     {r4-r6,lr}
;;;207    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;208      return USBD_LL_GetRxDataSize(pdev, ep_addr);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USBD_LL_GetRxDataSize
;;;209    }
00000e  bd70              POP      {r4-r6,pc}
;;;210    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___12_usbd_ioreq_c_28e25e4d____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____REVSH|
#line 478
|__asm___12_usbd_ioreq_c_28e25e4d____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_usbd_ioreq_c_28e25e4d____RRX|
#line 665
|__asm___12_usbd_ioreq_c_28e25e4d____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
