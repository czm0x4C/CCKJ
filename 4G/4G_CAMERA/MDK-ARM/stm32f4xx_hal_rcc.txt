; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_rcc.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_rcc.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_rcc.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1098     */
;;;1099   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1100   {
;;;1101     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1102               the HAL_RCC_CSSCallback could be implemented in the user file
;;;1103      */
;;;1104   }
;;;1105   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;590      */
;;;591    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;592    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;593      uint32_t tickstart;
;;;594    
;;;595      /* Check Null pointer */
;;;596      if(RCC_ClkInitStruct == NULL)
000006  b90c              CBNZ     r4,|L2.12|
;;;597      {
;;;598        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L2.10|
;;;599      }
;;;600    
;;;601      /* Check the parameters */
;;;602      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;603      assert_param(IS_FLASH_LATENCY(FLatency));
;;;604    
;;;605      /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;606        must be correctly programmed according to the frequency of the CPU clock
;;;607        (HCLK) and the supply voltage of the device. */
;;;608    
;;;609      /* Increasing the number of wait states because of higher CPU frequency */
;;;610      if(FLatency > __HAL_FLASH_GET_LATENCY())
;;;611      {
;;;612        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;613        __HAL_FLASH_SET_LATENCY(FLatency);
;;;614    
;;;615        /* Check that the new number of wait states is taken into account to access the Flash
;;;616        memory by reading the FLASH_ACR register */
;;;617        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;618        {
;;;619          return HAL_ERROR;
;;;620        }
;;;621      }
;;;622    
;;;623      /*-------------------------- HCLK Configuration --------------------------*/
;;;624      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;625      {
;;;626        /* Set the highest APBx dividers in order to ensure that we do not go through
;;;627           a non-spec phase whatever we decrease or increase HCLK. */
;;;628        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;629        {
;;;630          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
;;;631        }
;;;632    
;;;633        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;634        {
;;;635          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
;;;636        }
;;;637    
;;;638        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;639        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;640      }
;;;641    
;;;642      /*------------------------- SYSCLK Configuration ---------------------------*/
;;;643      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;644      {
;;;645        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;646    
;;;647        /* HSE is selected as System Clock Source */
;;;648        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;649        {
;;;650          /* Check the HSE ready flag */
;;;651          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;652          {
;;;653            return HAL_ERROR;
;;;654          }
;;;655        }
;;;656        /* PLL is selected as System Clock Source */
;;;657        else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
;;;658                (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
;;;659        {
;;;660          /* Check the PLL ready flag */
;;;661          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;662          {
;;;663            return HAL_ERROR;
;;;664          }
;;;665        }
;;;666        /* HSI is selected as System Clock Source */
;;;667        else
;;;668        {
;;;669          /* Check the HSI ready flag */
;;;670          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;671          {
;;;672            return HAL_ERROR;
;;;673          }
;;;674        }
;;;675    
;;;676        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;677    
;;;678        /* Get Start Tick */
;;;679        tickstart = HAL_GetTick();
;;;680    
;;;681        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
;;;682        {
;;;683          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;684          {
;;;685            return HAL_TIMEOUT;
;;;686          }
;;;687        }
;;;688      }
;;;689    
;;;690      /* Decreasing the number of wait states because of lower CPU frequency */
;;;691      if(FLatency < __HAL_FLASH_GET_LATENCY())
;;;692      {
;;;693         /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;694        __HAL_FLASH_SET_LATENCY(FLatency);
;;;695    
;;;696        /* Check that the new number of wait states is taken into account to access the Flash
;;;697        memory by reading the FLASH_ACR register */
;;;698        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;699        {
;;;700          return HAL_ERROR;
;;;701        }
;;;702      }
;;;703    
;;;704      /*-------------------------- PCLK1 Configuration ---------------------------*/
;;;705      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;706      {
;;;707        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;708        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;709      }
;;;710    
;;;711      /*-------------------------- PCLK2 Configuration ---------------------------*/
;;;712      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;713      {
;;;714        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;715        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
;;;716      }
;;;717    
;;;718      /* Update the SystemCoreClock global variable */
;;;719      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
;;;720    
;;;721      /* Configure the source of time base considering new system clocks settings */
;;;722      HAL_InitTick (uwTickPrio);
;;;723    
;;;724      return HAL_OK;
;;;725    }
00000a  bd70              POP      {r4-r6,pc}
                  |L2.12|
00000c  4858              LDR      r0,|L2.368|
00000e  6800              LDR      r0,[r0,#0]            ;610
000010  f0000007          AND      r0,r0,#7              ;610
000014  42a8              CMP      r0,r5                 ;610
000016  d209              BCS      |L2.44|
000018  4955              LDR      r1,|L2.368|
00001a  700d              STRB     r5,[r1,#0]            ;613
00001c  4608              MOV      r0,r1                 ;617
00001e  6800              LDR      r0,[r0,#0]            ;617
000020  f0000007          AND      r0,r0,#7              ;617
000024  42a8              CMP      r0,r5                 ;617
000026  d001              BEQ      |L2.44|
000028  2001              MOVS     r0,#1                 ;619
00002a  e7ee              B        |L2.10|
                  |L2.44|
00002c  7820              LDRB     r0,[r4,#0]            ;624
00002e  f0000002          AND      r0,r0,#2              ;624
000032  2802              CMP      r0,#2                 ;624
000034  d11d              BNE      |L2.114|
000036  7820              LDRB     r0,[r4,#0]            ;628
000038  f0000004          AND      r0,r0,#4              ;628
00003c  2804              CMP      r0,#4                 ;628
00003e  d105              BNE      |L2.76|
000040  484c              LDR      r0,|L2.372|
000042  6800              LDR      r0,[r0,#0]            ;630
000044  f44050e0          ORR      r0,r0,#0x1c00         ;630
000048  494a              LDR      r1,|L2.372|
00004a  6008              STR      r0,[r1,#0]            ;630
                  |L2.76|
00004c  7820              LDRB     r0,[r4,#0]            ;633
00004e  f0000008          AND      r0,r0,#8              ;633
000052  2808              CMP      r0,#8                 ;633
000054  d105              BNE      |L2.98|
000056  4847              LDR      r0,|L2.372|
000058  6800              LDR      r0,[r0,#0]            ;635
00005a  f4404060          ORR      r0,r0,#0xe000         ;635
00005e  4945              LDR      r1,|L2.372|
000060  6008              STR      r0,[r1,#0]            ;635
                  |L2.98|
000062  4844              LDR      r0,|L2.372|
000064  6800              LDR      r0,[r0,#0]            ;639
000066  f02000f0          BIC      r0,r0,#0xf0           ;639
00006a  68a1              LDR      r1,[r4,#8]            ;639
00006c  4308              ORRS     r0,r0,r1              ;639
00006e  4941              LDR      r1,|L2.372|
000070  6008              STR      r0,[r1,#0]            ;639
                  |L2.114|
000072  7820              LDRB     r0,[r4,#0]            ;643
000074  f0000001          AND      r0,r0,#1              ;643
000078  b3a8              CBZ      r0,|L2.230|
00007a  6860              LDR      r0,[r4,#4]            ;648
00007c  2801              CMP      r0,#1                 ;648
00007e  d107              BNE      |L2.144|
000080  483c              LDR      r0,|L2.372|
000082  3808              SUBS     r0,r0,#8              ;651
000084  6800              LDR      r0,[r0,#0]            ;651
000086  f3c04040          UBFX     r0,r0,#17,#1          ;651
00008a  b9b8              CBNZ     r0,|L2.188|
00008c  2001              MOVS     r0,#1                 ;653
00008e  e7bc              B        |L2.10|
                  |L2.144|
000090  6860              LDR      r0,[r4,#4]            ;657
000092  2802              CMP      r0,#2                 ;657
000094  d002              BEQ      |L2.156|
000096  6860              LDR      r0,[r4,#4]            ;658
000098  2803              CMP      r0,#3                 ;658
00009a  d107              BNE      |L2.172|
                  |L2.156|
00009c  4835              LDR      r0,|L2.372|
00009e  3808              SUBS     r0,r0,#8              ;661
0000a0  6800              LDR      r0,[r0,#0]            ;661
0000a2  f3c06040          UBFX     r0,r0,#25,#1          ;661
0000a6  b948              CBNZ     r0,|L2.188|
0000a8  2001              MOVS     r0,#1                 ;663
0000aa  e7ae              B        |L2.10|
                  |L2.172|
0000ac  4831              LDR      r0,|L2.372|
0000ae  3808              SUBS     r0,r0,#8              ;670
0000b0  6800              LDR      r0,[r0,#0]            ;670
0000b2  f3c00040          UBFX     r0,r0,#1,#1           ;670
0000b6  b908              CBNZ     r0,|L2.188|
0000b8  2001              MOVS     r0,#1                 ;672
0000ba  e7a6              B        |L2.10|
                  |L2.188|
0000bc  482d              LDR      r0,|L2.372|
0000be  6800              LDR      r0,[r0,#0]            ;676
0000c0  f0200003          BIC      r0,r0,#3              ;676
0000c4  6861              LDR      r1,[r4,#4]            ;676
0000c6  4308              ORRS     r0,r0,r1              ;676
0000c8  492a              LDR      r1,|L2.372|
0000ca  6008              STR      r0,[r1,#0]            ;676
0000cc  f7fffffe          BL       HAL_GetTick
0000d0  4606              MOV      r6,r0                 ;679
0000d2  e009              B        |L2.232|
                  |L2.212|
0000d4  f7fffffe          BL       HAL_GetTick
0000d8  1b80              SUBS     r0,r0,r6              ;683
0000da  f2413188          MOV      r1,#0x1388            ;683
0000de  4288              CMP      r0,r1                 ;683
0000e0  d902              BLS      |L2.232|
0000e2  2003              MOVS     r0,#3                 ;685
0000e4  e791              B        |L2.10|
                  |L2.230|
0000e6  e007              B        |L2.248|
                  |L2.232|
0000e8  4822              LDR      r0,|L2.372|
0000ea  6800              LDR      r0,[r0,#0]            ;681
0000ec  f000000c          AND      r0,r0,#0xc            ;681
0000f0  6861              LDR      r1,[r4,#4]            ;681
0000f2  ebb00f81          CMP      r0,r1,LSL #2          ;681
0000f6  d1ed              BNE      |L2.212|
                  |L2.248|
0000f8  481d              LDR      r0,|L2.368|
0000fa  6800              LDR      r0,[r0,#0]            ;691
0000fc  f0000007          AND      r0,r0,#7              ;691
000100  42a8              CMP      r0,r5                 ;691
000102  d909              BLS      |L2.280|
000104  491a              LDR      r1,|L2.368|
000106  700d              STRB     r5,[r1,#0]            ;694
000108  4608              MOV      r0,r1                 ;698
00010a  6800              LDR      r0,[r0,#0]            ;698
00010c  f0000007          AND      r0,r0,#7              ;698
000110  42a8              CMP      r0,r5                 ;698
000112  d001              BEQ      |L2.280|
000114  2001              MOVS     r0,#1                 ;700
000116  e778              B        |L2.10|
                  |L2.280|
000118  7820              LDRB     r0,[r4,#0]            ;705
00011a  f0000004          AND      r0,r0,#4              ;705
00011e  2804              CMP      r0,#4                 ;705
000120  d107              BNE      |L2.306|
000122  4814              LDR      r0,|L2.372|
000124  6800              LDR      r0,[r0,#0]            ;708
000126  f42050e0          BIC      r0,r0,#0x1c00         ;708
00012a  68e1              LDR      r1,[r4,#0xc]          ;708
00012c  4308              ORRS     r0,r0,r1              ;708
00012e  4911              LDR      r1,|L2.372|
000130  6008              STR      r0,[r1,#0]            ;708
                  |L2.306|
000132  7820              LDRB     r0,[r4,#0]            ;712
000134  f0000008          AND      r0,r0,#8              ;712
000138  2808              CMP      r0,#8                 ;712
00013a  d108              BNE      |L2.334|
00013c  480d              LDR      r0,|L2.372|
00013e  6800              LDR      r0,[r0,#0]            ;715
000140  f4204060          BIC      r0,r0,#0xe000         ;715
000144  6921              LDR      r1,[r4,#0x10]         ;715
000146  ea4000c1          ORR      r0,r0,r1,LSL #3       ;715
00014a  490a              LDR      r1,|L2.372|
00014c  6008              STR      r0,[r1,#0]            ;715
                  |L2.334|
00014e  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000152  4908              LDR      r1,|L2.372|
000154  6809              LDR      r1,[r1,#0]            ;719
000156  f3c11103          UBFX     r1,r1,#4,#4           ;719
00015a  4a07              LDR      r2,|L2.376|
00015c  5c51              LDRB     r1,[r2,r1]            ;719
00015e  40c8              LSRS     r0,r0,r1              ;719
000160  4906              LDR      r1,|L2.380|
000162  6008              STR      r0,[r1,#0]            ;719  ; SystemCoreClock
000164  4806              LDR      r0,|L2.384|
000166  6800              LDR      r0,[r0,#0]            ;722  ; uwTickPrio
000168  f7fffffe          BL       HAL_InitTick
00016c  2000              MOVS     r0,#0                 ;724
00016e  e74c              B        |L2.10|
;;;726    
                          ENDP

                  |L2.368|
                          DCD      0x40023c00
                  |L2.372|
                          DCD      0x40023808
                  |L2.376|
                          DCD      AHBPrescTable
                  |L2.380|
                          DCD      SystemCoreClock
                  |L2.384|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_RCC_DeInit PROC
;;;199      */
;;;200    __weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  2000              MOVS     r0,#0
;;;201    {
;;;202      return HAL_OK;
;;;203    }
000002  4770              BX       lr
;;;204    
                          ENDP


                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;849      */
;;;850    void HAL_RCC_DisableCSS(void)
000000  2000              MOVS     r0,#0
;;;851    {
;;;852      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L4.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;853    }
000006  4770              BX       lr
;;;854    
                          ENDP

                  |L4.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;840      */
;;;841    void HAL_RCC_EnableCSS(void)
000000  2001              MOVS     r0,#1
;;;842    {
;;;843      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L5.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;844    }
000006  4770              BX       lr
;;;845    
                          ENDP

                  |L5.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1055     */
;;;1056   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1057   {
;;;1058     /* Set all possible values for the Clock type parameter --------------------*/
;;;1059     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1060   
;;;1061     /* Get the SYSCLK configuration --------------------------------------------*/
;;;1062     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0d              LDR      r2,|L6.60|
000006  6812              LDR      r2,[r2,#0]
000008  f0020203          AND      r2,r2,#3
00000c  6042              STR      r2,[r0,#4]
;;;1063   
;;;1064     /* Get the HCLK configuration ----------------------------------------------*/
;;;1065     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
00000e  4a0b              LDR      r2,|L6.60|
000010  6812              LDR      r2,[r2,#0]
000012  f00202f0          AND      r2,r2,#0xf0
000016  6082              STR      r2,[r0,#8]
;;;1066   
;;;1067     /* Get the APB1 configuration ----------------------------------------------*/
;;;1068     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
000018  4a08              LDR      r2,|L6.60|
00001a  6812              LDR      r2,[r2,#0]
00001c  f40252e0          AND      r2,r2,#0x1c00
000020  60c2              STR      r2,[r0,#0xc]
;;;1069   
;;;1070     /* Get the APB2 configuration ----------------------------------------------*/
;;;1071     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
000022  4a06              LDR      r2,|L6.60|
000024  6812              LDR      r2,[r2,#0]
000026  f4024260          AND      r2,r2,#0xe000
00002a  08d2              LSRS     r2,r2,#3
00002c  6102              STR      r2,[r0,#0x10]
;;;1072   
;;;1073     /* Get the Flash Wait State (Latency) configuration ------------------------*/
;;;1074     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
00002e  4a04              LDR      r2,|L6.64|
000030  6812              LDR      r2,[r2,#0]
000032  f0020207          AND      r2,r2,#7
000036  600a              STR      r2,[r1,#0]
;;;1075   }
000038  4770              BX       lr
;;;1076   
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40023808
                  |L6.64|
                          DCD      0x40023c00

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;940      */
;;;941    uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;942    {
;;;943      return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;944    }
000004  4770              BX       lr
;;;945    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;976      */
;;;977    __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  210f              MOVS     r1,#0xf
;;;978    {
;;;979      /* Set all possible values for the Oscillator type parameter ---------------*/
;;;980      RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
000002  6001              STR      r1,[r0,#0]
;;;981    
;;;982      /* Get the HSE configuration -----------------------------------------------*/
;;;983      if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  493a              LDR      r1,|L8.240|
000006  6809              LDR      r1,[r1,#0]
000008  f4012180          AND      r1,r1,#0x40000
00000c  f5b12f80          CMP      r1,#0x40000
000010  d103              BNE      |L8.26|
;;;984      {
;;;985        RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  f44f21a0          MOV      r1,#0x50000
000016  6041              STR      r1,[r0,#4]
000018  e00c              B        |L8.52|
                  |L8.26|
;;;986      }
;;;987      else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
00001a  4935              LDR      r1,|L8.240|
00001c  6809              LDR      r1,[r1,#0]
00001e  f4013180          AND      r1,r1,#0x10000
000022  f5b13f80          CMP      r1,#0x10000
000026  d103              BNE      |L8.48|
;;;988      {
;;;989        RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000028  f44f3180          MOV      r1,#0x10000
00002c  6041              STR      r1,[r0,#4]
00002e  e001              B        |L8.52|
                  |L8.48|
;;;990      }
;;;991      else
;;;992      {
;;;993        RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000030  2100              MOVS     r1,#0
000032  6041              STR      r1,[r0,#4]
                  |L8.52|
;;;994      }
;;;995    
;;;996      /* Get the HSI configuration -----------------------------------------------*/
;;;997      if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000034  492e              LDR      r1,|L8.240|
000036  6809              LDR      r1,[r1,#0]
000038  f0010101          AND      r1,r1,#1
00003c  b111              CBZ      r1,|L8.68|
;;;998      {
;;;999        RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003e  2101              MOVS     r1,#1
000040  60c1              STR      r1,[r0,#0xc]
000042  e001              B        |L8.72|
                  |L8.68|
;;;1000     }
;;;1001     else
;;;1002     {
;;;1003       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000044  2100              MOVS     r1,#0
000046  60c1              STR      r1,[r0,#0xc]
                  |L8.72|
;;;1004     }
;;;1005   
;;;1006     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
000048  4929              LDR      r1,|L8.240|
00004a  6809              LDR      r1,[r1,#0]
00004c  f3c101c4          UBFX     r1,r1,#3,#5
000050  6101              STR      r1,[r0,#0x10]
;;;1007   
;;;1008     /* Get the LSE configuration -----------------------------------------------*/
;;;1009     if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
000052  4927              LDR      r1,|L8.240|
000054  3170              ADDS     r1,r1,#0x70
000056  6809              LDR      r1,[r1,#0]
000058  f0010104          AND      r1,r1,#4
00005c  2904              CMP      r1,#4
00005e  d102              BNE      |L8.102|
;;;1010     {
;;;1011       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000060  2105              MOVS     r1,#5
000062  6081              STR      r1,[r0,#8]
000064  e00a              B        |L8.124|
                  |L8.102|
;;;1012     }
;;;1013     else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000066  4922              LDR      r1,|L8.240|
000068  3170              ADDS     r1,r1,#0x70
00006a  6809              LDR      r1,[r1,#0]
00006c  f0010101          AND      r1,r1,#1
000070  b111              CBZ      r1,|L8.120|
;;;1014     {
;;;1015       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000072  2101              MOVS     r1,#1
000074  6081              STR      r1,[r0,#8]
000076  e001              B        |L8.124|
                  |L8.120|
;;;1016     }
;;;1017     else
;;;1018     {
;;;1019       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000078  2100              MOVS     r1,#0
00007a  6081              STR      r1,[r0,#8]
                  |L8.124|
;;;1020     }
;;;1021   
;;;1022     /* Get the LSI configuration -----------------------------------------------*/
;;;1023     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
00007c  491c              LDR      r1,|L8.240|
00007e  3174              ADDS     r1,r1,#0x74
000080  6809              LDR      r1,[r1,#0]
000082  f0010101          AND      r1,r1,#1
000086  b111              CBZ      r1,|L8.142|
;;;1024     {
;;;1025       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000088  2101              MOVS     r1,#1
00008a  6141              STR      r1,[r0,#0x14]
00008c  e001              B        |L8.146|
                  |L8.142|
;;;1026     }
;;;1027     else
;;;1028     {
;;;1029       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00008e  2100              MOVS     r1,#0
000090  6141              STR      r1,[r0,#0x14]
                  |L8.146|
;;;1030     }
;;;1031   
;;;1032     /* Get the PLL configuration -----------------------------------------------*/
;;;1033     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
000092  4917              LDR      r1,|L8.240|
000094  6809              LDR      r1,[r1,#0]
000096  f0017180          AND      r1,r1,#0x1000000
00009a  f1b17f80          CMP      r1,#0x1000000
00009e  d102              BNE      |L8.166|
;;;1034     {
;;;1035       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000a0  2102              MOVS     r1,#2
0000a2  6181              STR      r1,[r0,#0x18]
0000a4  e001              B        |L8.170|
                  |L8.166|
;;;1036     }
;;;1037     else
;;;1038     {
;;;1039       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000a6  2101              MOVS     r1,#1
0000a8  6181              STR      r1,[r0,#0x18]
                  |L8.170|
;;;1040     }
;;;1041     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
0000aa  4911              LDR      r1,|L8.240|
0000ac  1d09              ADDS     r1,r1,#4
0000ae  6809              LDR      r1,[r1,#0]
0000b0  f4010280          AND      r2,r1,#0x400000
0000b4  61c2              STR      r2,[r0,#0x1c]
;;;1042     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
0000b6  490e              LDR      r1,|L8.240|
0000b8  1d09              ADDS     r1,r1,#4
0000ba  6809              LDR      r1,[r1,#0]
0000bc  f001023f          AND      r2,r1,#0x3f
0000c0  6202              STR      r2,[r0,#0x20]
;;;1043     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
0000c2  490b              LDR      r1,|L8.240|
0000c4  1d09              ADDS     r1,r1,#4
0000c6  6809              LDR      r1,[r1,#0]
0000c8  f3c11288          UBFX     r2,r1,#6,#9
0000cc  6242              STR      r2,[r0,#0x24]
;;;1044     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
0000ce  4908              LDR      r1,|L8.240|
0000d0  1d09              ADDS     r1,r1,#4
0000d2  6809              LDR      r1,[r1,#0]
0000d4  f4013140          AND      r1,r1,#0x30000
0000d8  f5013180          ADD      r1,r1,#0x10000
0000dc  0bca              LSRS     r2,r1,#15
0000de  6282              STR      r2,[r0,#0x28]
;;;1045     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
0000e0  4903              LDR      r1,|L8.240|
0000e2  1d09              ADDS     r1,r1,#4
0000e4  6809              LDR      r1,[r1,#0]
0000e6  f3c16203          UBFX     r2,r1,#24,#4
0000ea  62c2              STR      r2,[r0,#0x2c]
;;;1046   }
0000ec  4770              BX       lr
;;;1047   
                          ENDP

0000ee  0000              DCW      0x0000
                  |L8.240|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;951      */
;;;952    uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;953    {
;;;954      /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;955      return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L9.24|
000008  6809              LDR      r1,[r1,#0]
00000a  f3c12182          UBFX     r1,r1,#10,#3
00000e  4a03              LDR      r2,|L9.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;956    }
000014  bd00              POP      {pc}
;;;957    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40023808
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;963      */
;;;964    uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;965    {
;;;966      /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;967      return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L10.24|
000008  6809              LDR      r1,[r1,#0]
00000a  f3c13142          UBFX     r1,r1,#13,#3
00000e  4a03              LDR      r2,|L10.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;968    }
000014  bd00              POP      {pc}
;;;969    
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40023808
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;884      */
;;;885    __weak uint32_t HAL_RCC_GetSysClockFreq(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;886    {
;;;887      uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
;;;888      uint32_t sysclockfreq = 0U;
00000a  46a1              MOV      r9,r4
;;;889    
;;;890      /* Get SYSCLK source -------------------------------------------------------*/
;;;891      switch (RCC->CFGR & RCC_CFGR_SWS)
00000c  4825              LDR      r0,|L11.164|
00000e  6800              LDR      r0,[r0,#0]
000010  f000000c          AND      r0,r0,#0xc
000014  b120              CBZ      r0,|L11.32|
000016  2804              CMP      r0,#4
000018  d005              BEQ      |L11.38|
00001a  2808              CMP      r0,#8
00001c  d13a              BNE      |L11.148|
00001e  e005              B        |L11.44|
                  |L11.32|
;;;892      {
;;;893        case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
;;;894        {
;;;895          sysclockfreq = HSI_VALUE;
000020  f8df9084          LDR      r9,|L11.168|
;;;896           break;
000024  e039              B        |L11.154|
                  |L11.38|
;;;897        }
;;;898        case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
;;;899        {
;;;900          sysclockfreq = HSE_VALUE;
000026  f8df9084          LDR      r9,|L11.172|
;;;901          break;
00002a  e036              B        |L11.154|
                  |L11.44|
;;;902        }
;;;903        case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
;;;904        {
;;;905          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;906          SYSCLK = PLL_VCO / PLLP */
;;;907          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  481d              LDR      r0,|L11.164|
00002e  1f00              SUBS     r0,r0,#4
000030  6800              LDR      r0,[r0,#0]
000032  f000043f          AND      r4,r0,#0x3f
;;;908          if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
000036  481b              LDR      r0,|L11.164|
000038  1f00              SUBS     r0,r0,#4
00003a  6800              LDR      r0,[r0,#0]
00003c  f4000080          AND      r0,r0,#0x400000
000040  b178              CBZ      r0,|L11.98|
;;;909          {
;;;910            /* HSE used as PLL clock source */
;;;911            pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
000042  481a              LDR      r0,|L11.172|
000044  4917              LDR      r1,|L11.164|
000046  1f09              SUBS     r1,r1,#4
000048  6809              LDR      r1,[r1,#0]
00004a  f3c11188          UBFX     r1,r1,#6,#9
00004e  fba07001          UMULL    r7,r0,r0,r1
000052  4601              MOV      r1,r0
000054  4622              MOV      r2,r4
000056  2300              MOVS     r3,#0
000058  4638              MOV      r0,r7
00005a  f7fffffe          BL       __aeabi_uldivmod
00005e  4605              MOV      r5,r0
000060  e00e              B        |L11.128|
                  |L11.98|
;;;912          }
;;;913          else
;;;914          {
;;;915            /* HSI used as PLL clock source */
;;;916            pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
000062  4811              LDR      r0,|L11.168|
000064  490f              LDR      r1,|L11.164|
000066  1f09              SUBS     r1,r1,#4
000068  6809              LDR      r1,[r1,#0]
00006a  f3c11188          UBFX     r1,r1,#6,#9
00006e  fba07001          UMULL    r7,r0,r0,r1
000072  4601              MOV      r1,r0
000074  4622              MOV      r2,r4
000076  2300              MOVS     r3,#0
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       __aeabi_uldivmod
00007e  4605              MOV      r5,r0
                  |L11.128|
;;;917          }
;;;918          pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
000080  4808              LDR      r0,|L11.164|
000082  1f00              SUBS     r0,r0,#4
000084  6800              LDR      r0,[r0,#0]
000086  f3c04001          UBFX     r0,r0,#16,#2
00008a  1c40              ADDS     r0,r0,#1
00008c  0046              LSLS     r6,r0,#1
;;;919    
;;;920          sysclockfreq = pllvco/pllp;
00008e  fbb5f9f6          UDIV     r9,r5,r6
;;;921          break;
000092  e002              B        |L11.154|
                  |L11.148|
;;;922        }
;;;923        default:
;;;924        {
;;;925          sysclockfreq = HSI_VALUE;
000094  f8df9010          LDR      r9,|L11.168|
;;;926          break;
000098  bf00              NOP      
                  |L11.154|
00009a  bf00              NOP                            ;896
;;;927        }
;;;928      }
;;;929      return sysclockfreq;
00009c  4648              MOV      r0,r9
;;;930    }
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;931    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      0x40023808
                  |L11.168|
                          DCD      0x00f42400
                  |L11.172|
                          DCD      0x00b71b00

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;774      */
;;;775    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;776    {
000002  b086              SUB      sp,sp,#0x18
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;777      GPIO_InitTypeDef GPIO_InitStruct;
;;;778      /* Check the parameters */
;;;779      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;780      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;781      /* RCC_MCO1 */
;;;782      if(RCC_MCOx == RCC_MCO1)
00000a  bb46              CBNZ     r6,|L12.94|
;;;783      {
;;;784        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;785    
;;;786        /* MCO1 Clock Enable */
;;;787        __MCO1_CLK_ENABLE();
00000c  bf00              NOP      
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  4828              LDR      r0,|L12.180|
000014  6800              LDR      r0,[r0,#0]
000016  f0400001          ORR      r0,r0,#1
00001a  4926              LDR      r1,|L12.180|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0000001          AND      r0,r0,#1
000026  9000              STR      r0,[sp,#0]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;788    
;;;789        /* Configure the MCO1 pin in alternate function mode */
;;;790        GPIO_InitStruct.Pin = MCO1_PIN;
00002c  1588              ASRS     r0,r1,#22
00002e  9001              STR      r0,[sp,#4]
;;;791        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000030  2002              MOVS     r0,#2
000032  9002              STR      r0,[sp,#8]
;;;792        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000034  2003              MOVS     r0,#3
000036  9004              STR      r0,[sp,#0x10]
;;;793        GPIO_InitStruct.Pull = GPIO_NOPULL;
000038  2000              MOVS     r0,#0
00003a  9003              STR      r0,[sp,#0xc]
;;;794        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
00003c  9005              STR      r0,[sp,#0x14]
;;;795        HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
00003e  a901              ADD      r1,sp,#4
000040  481d              LDR      r0,|L12.184|
000042  f7fffffe          BL       HAL_GPIO_Init
;;;796    
;;;797        /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
;;;798        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
000046  481b              LDR      r0,|L12.180|
000048  3828              SUBS     r0,r0,#0x28
00004a  6800              LDR      r0,[r0,#0]
00004c  f02060ec          BIC      r0,r0,#0x7600000
000050  ea440105          ORR      r1,r4,r5
000054  4308              ORRS     r0,r0,r1
000056  4917              LDR      r1,|L12.180|
000058  3928              SUBS     r1,r1,#0x28
00005a  6008              STR      r0,[r1,#0]
00005c  e027              B        |L12.174|
                  |L12.94|
;;;799    
;;;800       /* This RCC MCO1 enable feature is available only on STM32F410xx devices */
;;;801    #if defined(RCC_CFGR_MCO1EN)
;;;802        __HAL_RCC_MCO1_ENABLE();
;;;803    #endif /* RCC_CFGR_MCO1EN */
;;;804      }
;;;805    #if defined(RCC_CFGR_MCO2)
;;;806      else
;;;807      {
;;;808        assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
;;;809    
;;;810        /* MCO2 Clock Enable */
;;;811        __MCO2_CLK_ENABLE();
00005e  bf00              NOP      
000060  2000              MOVS     r0,#0
000062  9000              STR      r0,[sp,#0]
000064  4813              LDR      r0,|L12.180|
000066  6800              LDR      r0,[r0,#0]
000068  f0400004          ORR      r0,r0,#4
00006c  4911              LDR      r1,|L12.180|
00006e  6008              STR      r0,[r1,#0]
000070  4608              MOV      r0,r1
000072  6800              LDR      r0,[r0,#0]
000074  f0000004          AND      r0,r0,#4
000078  9000              STR      r0,[sp,#0]
00007a  bf00              NOP      
00007c  bf00              NOP      
;;;812    
;;;813        /* Configure the MCO2 pin in alternate function mode */
;;;814        GPIO_InitStruct.Pin = MCO2_PIN;
00007e  1548              ASRS     r0,r1,#21
000080  9001              STR      r0,[sp,#4]
;;;815        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000082  2002              MOVS     r0,#2
000084  9002              STR      r0,[sp,#8]
;;;816        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000086  2003              MOVS     r0,#3
000088  9004              STR      r0,[sp,#0x10]
;;;817        GPIO_InitStruct.Pull = GPIO_NOPULL;
00008a  2000              MOVS     r0,#0
00008c  9003              STR      r0,[sp,#0xc]
;;;818        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
00008e  9005              STR      r0,[sp,#0x14]
;;;819        HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
000090  a901              ADD      r1,sp,#4
000092  480a              LDR      r0,|L12.188|
000094  f7fffffe          BL       HAL_GPIO_Init
;;;820    
;;;821        /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
;;;822        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
000098  4806              LDR      r0,|L12.180|
00009a  3828              SUBS     r0,r0,#0x28
00009c  6800              LDR      r0,[r0,#0]
00009e  f0204078          BIC      r0,r0,#0xf8000000
0000a2  ea4401c5          ORR      r1,r4,r5,LSL #3
0000a6  4308              ORRS     r0,r0,r1
0000a8  4902              LDR      r1,|L12.180|
0000aa  3928              SUBS     r1,r1,#0x28
0000ac  6008              STR      r0,[r1,#0]
                  |L12.174|
;;;823    
;;;824       /* This RCC MCO2 enable feature is available only on STM32F410Rx devices */
;;;825    #if defined(RCC_CFGR_MCO2EN)
;;;826        __HAL_RCC_MCO2_ENABLE();
;;;827    #endif /* RCC_CFGR_MCO2EN */
;;;828      }
;;;829    #endif /* RCC_CFGR_MCO2 */
;;;830    }
0000ae  b006              ADD      sp,sp,#0x18
0000b0  bd70              POP      {r4-r6,pc}
;;;831    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L12.180|
                          DCD      0x40023830
                  |L12.184|
                          DCD      0x40020000
                  |L12.188|
                          DCD      0x40020800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1081     */
;;;1082   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1083   {
;;;1084     /* Check RCC CSSF flag  */
;;;1085     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L13.28|
000004  6800              LDR      r0,[r0,#0]
000006  f0000080          AND      r0,r0,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d105              BNE      |L13.26|
;;;1086     {
;;;1087       /* RCC Clock Security System interrupt user callback */
;;;1088       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1089   
;;;1090       /* Clear RCC CSS pending bit */
;;;1091       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L13.28|
000016  1c89              ADDS     r1,r1,#2
000018  7008              STRB     r0,[r1,#0]
                  |L13.26|
;;;1092     }
;;;1093   }
00001a  bd10              POP      {r4,pc}
;;;1094   
                          ENDP

                  |L13.28|
                          DCD      0x4002380c

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;218      */
;;;219    __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;220    {
000002  4604              MOV      r4,r0
;;;221      uint32_t tickstart, pll_config;
;;;222    
;;;223      /* Check Null pointer */
;;;224      if(RCC_OscInitStruct == NULL)
000004  b90c              CBNZ     r4,|L14.10|
;;;225      {
;;;226        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L14.8|
;;;227      }
;;;228    
;;;229      /* Check the parameters */
;;;230      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;231      /*------------------------------- HSE Configuration ------------------------*/
;;;232      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
;;;233      {
;;;234        /* Check the parameters */
;;;235        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;236        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
;;;237        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
;;;238          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
;;;239        {
;;;240          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
;;;241          {
;;;242            return HAL_ERROR;
;;;243          }
;;;244        }
;;;245        else
;;;246        {
;;;247          /* Set the new HSE configuration ---------------------------------------*/
;;;248          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;249    
;;;250          /* Check the HSE State */
;;;251          if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
;;;252          {
;;;253            /* Get Start Tick */
;;;254            tickstart = HAL_GetTick();
;;;255    
;;;256            /* Wait till HSE is ready */
;;;257            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;258            {
;;;259              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;260              {
;;;261                return HAL_TIMEOUT;
;;;262              }
;;;263            }
;;;264          }
;;;265          else
;;;266          {
;;;267            /* Get Start Tick */
;;;268            tickstart = HAL_GetTick();
;;;269    
;;;270            /* Wait till HSE is bypassed or disabled */
;;;271            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;272            {
;;;273              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;274              {
;;;275                return HAL_TIMEOUT;
;;;276              }
;;;277            }
;;;278          }
;;;279        }
;;;280      }
;;;281      /*----------------------------- HSI Configuration --------------------------*/
;;;282      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;283      {
;;;284        /* Check the parameters */
;;;285        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;286        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;287    
;;;288        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;289        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
;;;290          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;291        {
;;;292          /* When HSI is used as system clock it will not disabled */
;;;293          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;294          {
;;;295            return HAL_ERROR;
;;;296          }
;;;297          /* Otherwise, just the calibration is allowed */
;;;298          else
;;;299          {
;;;300            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;301            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;302          }
;;;303        }
;;;304        else
;;;305        {
;;;306          /* Check the HSI State */
;;;307          if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;308          {
;;;309            /* Enable the Internal High Speed oscillator (HSI). */
;;;310            __HAL_RCC_HSI_ENABLE();
;;;311    
;;;312            /* Get Start Tick*/
;;;313            tickstart = HAL_GetTick();
;;;314    
;;;315            /* Wait till HSI is ready */
;;;316            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;317            {
;;;318              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;319              {
;;;320                return HAL_TIMEOUT;
;;;321              }
;;;322            }
;;;323    
;;;324            /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
;;;325            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;326          }
;;;327          else
;;;328          {
;;;329            /* Disable the Internal High Speed oscillator (HSI). */
;;;330            __HAL_RCC_HSI_DISABLE();
;;;331    
;;;332            /* Get Start Tick*/
;;;333            tickstart = HAL_GetTick();
;;;334    
;;;335            /* Wait till HSI is ready */
;;;336            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;337            {
;;;338              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;339              {
;;;340                return HAL_TIMEOUT;
;;;341              }
;;;342            }
;;;343          }
;;;344        }
;;;345      }
;;;346      /*------------------------------ LSI Configuration -------------------------*/
;;;347      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;348      {
;;;349        /* Check the parameters */
;;;350        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;351    
;;;352        /* Check the LSI State */
;;;353        if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;354        {
;;;355          /* Enable the Internal Low Speed oscillator (LSI). */
;;;356          __HAL_RCC_LSI_ENABLE();
;;;357    
;;;358          /* Get Start Tick*/
;;;359          tickstart = HAL_GetTick();
;;;360    
;;;361          /* Wait till LSI is ready */
;;;362          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;363          {
;;;364            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;365            {
;;;366              return HAL_TIMEOUT;
;;;367            }
;;;368          }
;;;369        }
;;;370        else
;;;371        {
;;;372          /* Disable the Internal Low Speed oscillator (LSI). */
;;;373          __HAL_RCC_LSI_DISABLE();
;;;374    
;;;375          /* Get Start Tick */
;;;376          tickstart = HAL_GetTick();
;;;377    
;;;378          /* Wait till LSI is ready */
;;;379          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;380          {
;;;381            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;382            {
;;;383              return HAL_TIMEOUT;
;;;384            }
;;;385          }
;;;386        }
;;;387      }
;;;388      /*------------------------------ LSE Configuration -------------------------*/
;;;389      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;390      {
;;;391        FlagStatus       pwrclkchanged = RESET;
;;;392    
;;;393        /* Check the parameters */
;;;394        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;395    
;;;396        /* Update LSE configuration in Backup Domain control register    */
;;;397        /* Requires to enable write access to Backup Domain of necessary */
;;;398        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;399        {
;;;400          __HAL_RCC_PWR_CLK_ENABLE();
;;;401          pwrclkchanged = SET;
;;;402        }
;;;403    
;;;404        if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;405        {
;;;406          /* Enable write access to Backup domain */
;;;407          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;408    
;;;409          /* Wait for Backup domain Write protection disable */
;;;410          tickstart = HAL_GetTick();
;;;411    
;;;412          while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;413          {
;;;414            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;415            {
;;;416              return HAL_TIMEOUT;
;;;417            }
;;;418          }
;;;419        }
;;;420    
;;;421        /* Set the new LSE configuration -----------------------------------------*/
;;;422        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;423        /* Check the LSE State */
;;;424        if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;425        {
;;;426          /* Get Start Tick*/
;;;427          tickstart = HAL_GetTick();
;;;428    
;;;429          /* Wait till LSE is ready */
;;;430          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;431          {
;;;432            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;433            {
;;;434              return HAL_TIMEOUT;
;;;435            }
;;;436          }
;;;437        }
;;;438        else
;;;439        {
;;;440          /* Get Start Tick */
;;;441          tickstart = HAL_GetTick();
;;;442    
;;;443          /* Wait till LSE is ready */
;;;444          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;445          {
;;;446            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;447            {
;;;448              return HAL_TIMEOUT;
;;;449            }
;;;450          }
;;;451        }
;;;452    
;;;453        /* Restore clock configuration if changed */
;;;454        if(pwrclkchanged == SET)
;;;455        {
;;;456          __HAL_RCC_PWR_CLK_DISABLE();
;;;457        }
;;;458      }
;;;459      /*-------------------------------- PLL Configuration -----------------------*/
;;;460      /* Check the parameters */
;;;461      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;462      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;463      {
;;;464        /* Check if the PLL is used as system clock or not */
;;;465        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
;;;466        {
;;;467          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;468          {
;;;469            /* Check the parameters */
;;;470            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;471            assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;472            assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;473            assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;474            assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;475    
;;;476            /* Disable the main PLL. */
;;;477            __HAL_RCC_PLL_DISABLE();
;;;478    
;;;479            /* Get Start Tick */
;;;480            tickstart = HAL_GetTick();
;;;481    
;;;482            /* Wait till PLL is ready */
;;;483            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;484            {
;;;485              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;486              {
;;;487                return HAL_TIMEOUT;
;;;488              }
;;;489            }
;;;490    
;;;491            /* Configure the main PLL clock source, multiplication and division factors. */
;;;492            WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
;;;493                                     RCC_OscInitStruct->PLL.PLLM                                                 | \
;;;494                                     (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
;;;495                                     (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
;;;496                                     (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
;;;497            /* Enable the main PLL. */
;;;498            __HAL_RCC_PLL_ENABLE();
;;;499    
;;;500            /* Get Start Tick */
;;;501            tickstart = HAL_GetTick();
;;;502    
;;;503            /* Wait till PLL is ready */
;;;504            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;505            {
;;;506              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;507              {
;;;508                return HAL_TIMEOUT;
;;;509              }
;;;510            }
;;;511          }
;;;512          else
;;;513          {
;;;514            /* Disable the main PLL. */
;;;515            __HAL_RCC_PLL_DISABLE();
;;;516    
;;;517            /* Get Start Tick */
;;;518            tickstart = HAL_GetTick();
;;;519    
;;;520            /* Wait till PLL is ready */
;;;521            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;522            {
;;;523              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;524              {
;;;525                return HAL_TIMEOUT;
;;;526              }
;;;527            }
;;;528          }
;;;529        }
;;;530        else
;;;531        {
;;;532          /* Check if there is a request to disable the PLL used as System clock source */
;;;533          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
;;;534          {
;;;535            return HAL_ERROR;
;;;536          }
;;;537          else
;;;538          {
;;;539            /* Do not return HAL_ERROR if request repeats the current configuration */
;;;540            pll_config = RCC->PLLCFGR;
;;;541    #if defined (RCC_PLLCFGR_PLLR)
;;;542            if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
;;;543                (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
;;;544                (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
;;;545                (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
;;;546                (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
;;;547                (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
;;;548                (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
;;;549    #else
;;;550            if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
;;;551                (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
;;;552                (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
;;;553                (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
;;;554                (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
;;;555                (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
;;;556    #endif
;;;557            {
;;;558              return HAL_ERROR;
;;;559            }
;;;560          }
;;;561        }
;;;562      }
;;;563      return HAL_OK;
;;;564    }
000008  bdf8              POP      {r3-r7,pc}
                  |L14.10|
00000a  7820              LDRB     r0,[r4,#0]            ;232
00000c  f0000001          AND      r0,r0,#1              ;232
000010  2800              CMP      r0,#0                 ;232
000012  d074              BEQ      |L14.254|
000014  48f9              LDR      r0,|L14.1020|
000016  6800              LDR      r0,[r0,#0]            ;237
000018  f000000c          AND      r0,r0,#0xc            ;237
00001c  2804              CMP      r0,#4                 ;237
00001e  d00d              BEQ      |L14.60|
000020  48f6              LDR      r0,|L14.1020|
000022  6800              LDR      r0,[r0,#0]            ;238
000024  f000000c          AND      r0,r0,#0xc            ;238
000028  2808              CMP      r0,#8                 ;238
00002a  d113              BNE      |L14.84|
00002c  48f3              LDR      r0,|L14.1020|
00002e  1f00              SUBS     r0,r0,#4              ;238
000030  6800              LDR      r0,[r0,#0]            ;238
000032  f4000080          AND      r0,r0,#0x400000       ;238
000036  f5b00f80          CMP      r0,#0x400000          ;238
00003a  d10b              BNE      |L14.84|
                  |L14.60|
00003c  48ef              LDR      r0,|L14.1020|
00003e  3808              SUBS     r0,r0,#8              ;240
000040  6800              LDR      r0,[r0,#0]            ;240
000042  f3c04040          UBFX     r0,r0,#17,#1          ;240
000046  2800              CMP      r0,#0                 ;240
000048  d059              BEQ      |L14.254|
00004a  6860              LDR      r0,[r4,#4]            ;240
00004c  2800              CMP      r0,#0                 ;240
00004e  d156              BNE      |L14.254|
000050  2001              MOVS     r0,#1                 ;242
000052  e7d9              B        |L14.8|
                  |L14.84|
000054  bf00              NOP                            ;248
000056  6860              LDR      r0,[r4,#4]            ;248
000058  f5b03f80          CMP      r0,#0x10000           ;248
00005c  d108              BNE      |L14.112|
00005e  48e7              LDR      r0,|L14.1020|
000060  3808              SUBS     r0,r0,#8              ;248
000062  6800              LDR      r0,[r0,#0]            ;248
000064  f4403080          ORR      r0,r0,#0x10000        ;248
000068  49e4              LDR      r1,|L14.1020|
00006a  3908              SUBS     r1,r1,#8              ;248
00006c  6008              STR      r0,[r1,#0]            ;248
00006e  e01e              B        |L14.174|
                  |L14.112|
000070  6860              LDR      r0,[r4,#4]            ;248
000072  f5b02fa0          CMP      r0,#0x50000           ;248
000076  d10d              BNE      |L14.148|
000078  48e0              LDR      r0,|L14.1020|
00007a  3808              SUBS     r0,r0,#8              ;248
00007c  6800              LDR      r0,[r0,#0]            ;248
00007e  f4402080          ORR      r0,r0,#0x40000        ;248
000082  49de              LDR      r1,|L14.1020|
000084  3908              SUBS     r1,r1,#8              ;248
000086  6008              STR      r0,[r1,#0]            ;248
000088  4608              MOV      r0,r1                 ;248
00008a  6800              LDR      r0,[r0,#0]            ;248
00008c  f4403080          ORR      r0,r0,#0x10000        ;248
000090  6008              STR      r0,[r1,#0]            ;248
000092  e00c              B        |L14.174|
                  |L14.148|
000094  48d9              LDR      r0,|L14.1020|
000096  3808              SUBS     r0,r0,#8              ;248
000098  6800              LDR      r0,[r0,#0]            ;248
00009a  f4203080          BIC      r0,r0,#0x10000        ;248
00009e  49d7              LDR      r1,|L14.1020|
0000a0  3908              SUBS     r1,r1,#8              ;248
0000a2  6008              STR      r0,[r1,#0]            ;248
0000a4  4608              MOV      r0,r1                 ;248
0000a6  6800              LDR      r0,[r0,#0]            ;248
0000a8  f4202080          BIC      r0,r0,#0x40000        ;248
0000ac  6008              STR      r0,[r1,#0]            ;248
                  |L14.174|
0000ae  bf00              NOP                            ;248
0000b0  6860              LDR      r0,[r4,#4]            ;251
0000b2  b190              CBZ      r0,|L14.218|
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  4605              MOV      r5,r0                 ;254
0000ba  e006              B        |L14.202|
                  |L14.188|
0000bc  f7fffffe          BL       HAL_GetTick
0000c0  1b40              SUBS     r0,r0,r5              ;259
0000c2  2864              CMP      r0,#0x64              ;259
0000c4  d901              BLS      |L14.202|
0000c6  2003              MOVS     r0,#3                 ;261
0000c8  e79e              B        |L14.8|
                  |L14.202|
0000ca  48cc              LDR      r0,|L14.1020|
0000cc  3808              SUBS     r0,r0,#8              ;257
0000ce  6800              LDR      r0,[r0,#0]            ;257
0000d0  f3c04040          UBFX     r0,r0,#17,#1          ;257
0000d4  2800              CMP      r0,#0                 ;257
0000d6  d0f1              BEQ      |L14.188|
0000d8  e011              B        |L14.254|
                  |L14.218|
0000da  f7fffffe          BL       HAL_GetTick
0000de  4605              MOV      r5,r0                 ;268
0000e0  e006              B        |L14.240|
                  |L14.226|
0000e2  f7fffffe          BL       HAL_GetTick
0000e6  1b40              SUBS     r0,r0,r5              ;273
0000e8  2864              CMP      r0,#0x64              ;273
0000ea  d901              BLS      |L14.240|
0000ec  2003              MOVS     r0,#3                 ;275
0000ee  e78b              B        |L14.8|
                  |L14.240|
0000f0  48c2              LDR      r0,|L14.1020|
0000f2  3808              SUBS     r0,r0,#8              ;271
0000f4  6800              LDR      r0,[r0,#0]            ;271
0000f6  f3c04040          UBFX     r0,r0,#17,#1          ;271
0000fa  2800              CMP      r0,#0                 ;271
0000fc  d1f1              BNE      |L14.226|
                  |L14.254|
0000fe  7820              LDRB     r0,[r4,#0]            ;282
000100  f0000002          AND      r0,r0,#2              ;282
000104  2802              CMP      r0,#2                 ;282
000106  d15f              BNE      |L14.456|
000108  48bc              LDR      r0,|L14.1020|
00010a  6800              LDR      r0,[r0,#0]            ;289
00010c  f000000c          AND      r0,r0,#0xc            ;289
000110  b158              CBZ      r0,|L14.298|
000112  48ba              LDR      r0,|L14.1020|
000114  6800              LDR      r0,[r0,#0]            ;290
000116  f000000c          AND      r0,r0,#0xc            ;290
00011a  2808              CMP      r0,#8                 ;290
00011c  d11c              BNE      |L14.344|
00011e  48b7              LDR      r0,|L14.1020|
000120  1f00              SUBS     r0,r0,#4              ;290
000122  6800              LDR      r0,[r0,#0]            ;290
000124  f4000080          AND      r0,r0,#0x400000       ;290
000128  b9b0              CBNZ     r0,|L14.344|
                  |L14.298|
00012a  48b4              LDR      r0,|L14.1020|
00012c  3808              SUBS     r0,r0,#8              ;293
00012e  6800              LDR      r0,[r0,#0]            ;293
000130  f3c00040          UBFX     r0,r0,#1,#1           ;293
000134  b120              CBZ      r0,|L14.320|
000136  68e0              LDR      r0,[r4,#0xc]          ;293
000138  2801              CMP      r0,#1                 ;293
00013a  d001              BEQ      |L14.320|
00013c  2001              MOVS     r0,#1                 ;295
00013e  e763              B        |L14.8|
                  |L14.320|
000140  48ae              LDR      r0,|L14.1020|
000142  3808              SUBS     r0,r0,#8              ;301
000144  6800              LDR      r0,[r0,#0]            ;301
000146  f02000f8          BIC      r0,r0,#0xf8           ;301
00014a  6921              LDR      r1,[r4,#0x10]         ;301
00014c  ea4000c1          ORR      r0,r0,r1,LSL #3       ;301
000150  49aa              LDR      r1,|L14.1020|
000152  3908              SUBS     r1,r1,#8              ;301
000154  6008              STR      r0,[r1,#0]            ;301
000156  e037              B        |L14.456|
                  |L14.344|
000158  68e0              LDR      r0,[r4,#0xc]          ;307
00015a  b300              CBZ      r0,|L14.414|
00015c  2001              MOVS     r0,#1                 ;310
00015e  49a8              LDR      r1,|L14.1024|
000160  6008              STR      r0,[r1,#0]            ;310
000162  f7fffffe          BL       HAL_GetTick
000166  4605              MOV      r5,r0                 ;313
000168  e006              B        |L14.376|
                  |L14.362|
00016a  f7fffffe          BL       HAL_GetTick
00016e  1b40              SUBS     r0,r0,r5              ;318
000170  2802              CMP      r0,#2                 ;318
000172  d901              BLS      |L14.376|
000174  2003              MOVS     r0,#3                 ;320
000176  e747              B        |L14.8|
                  |L14.376|
000178  48a0              LDR      r0,|L14.1020|
00017a  3808              SUBS     r0,r0,#8              ;316
00017c  6800              LDR      r0,[r0,#0]            ;316
00017e  f3c00040          UBFX     r0,r0,#1,#1           ;316
000182  2800              CMP      r0,#0                 ;316
000184  d0f1              BEQ      |L14.362|
000186  489d              LDR      r0,|L14.1020|
000188  3808              SUBS     r0,r0,#8              ;325
00018a  6800              LDR      r0,[r0,#0]            ;325
00018c  f02000f8          BIC      r0,r0,#0xf8           ;325
000190  6921              LDR      r1,[r4,#0x10]         ;325
000192  ea4000c1          ORR      r0,r0,r1,LSL #3       ;325
000196  4999              LDR      r1,|L14.1020|
000198  3908              SUBS     r1,r1,#8              ;325
00019a  6008              STR      r0,[r1,#0]            ;325
00019c  e014              B        |L14.456|
                  |L14.414|
00019e  2000              MOVS     r0,#0                 ;330
0001a0  4997              LDR      r1,|L14.1024|
0001a2  6008              STR      r0,[r1,#0]            ;330
0001a4  f7fffffe          BL       HAL_GetTick
0001a8  4605              MOV      r5,r0                 ;333
0001aa  e006              B        |L14.442|
                  |L14.428|
0001ac  f7fffffe          BL       HAL_GetTick
0001b0  1b40              SUBS     r0,r0,r5              ;338
0001b2  2802              CMP      r0,#2                 ;338
0001b4  d901              BLS      |L14.442|
0001b6  2003              MOVS     r0,#3                 ;340
0001b8  e726              B        |L14.8|
                  |L14.442|
0001ba  4890              LDR      r0,|L14.1020|
0001bc  3808              SUBS     r0,r0,#8              ;336
0001be  6800              LDR      r0,[r0,#0]            ;336
0001c0  f3c00040          UBFX     r0,r0,#1,#1           ;336
0001c4  2800              CMP      r0,#0                 ;336
0001c6  d1f1              BNE      |L14.428|
                  |L14.456|
0001c8  7820              LDRB     r0,[r4,#0]            ;347
0001ca  f0000008          AND      r0,r0,#8              ;347
0001ce  2808              CMP      r0,#8                 ;347
0001d0  d12c              BNE      |L14.556|
0001d2  6960              LDR      r0,[r4,#0x14]         ;353
0001d4  b1a8              CBZ      r0,|L14.514|
0001d6  2001              MOVS     r0,#1                 ;356
0001d8  498a              LDR      r1,|L14.1028|
0001da  6008              STR      r0,[r1,#0]            ;356
0001dc  f7fffffe          BL       HAL_GetTick
0001e0  4605              MOV      r5,r0                 ;359
0001e2  e006              B        |L14.498|
                  |L14.484|
0001e4  f7fffffe          BL       HAL_GetTick
0001e8  1b40              SUBS     r0,r0,r5              ;364
0001ea  2802              CMP      r0,#2                 ;364
0001ec  d901              BLS      |L14.498|
0001ee  2003              MOVS     r0,#3                 ;366
0001f0  e70a              B        |L14.8|
                  |L14.498|
0001f2  4882              LDR      r0,|L14.1020|
0001f4  306c              ADDS     r0,r0,#0x6c           ;362
0001f6  6800              LDR      r0,[r0,#0]            ;362
0001f8  f3c00040          UBFX     r0,r0,#1,#1           ;362
0001fc  2800              CMP      r0,#0                 ;362
0001fe  d0f1              BEQ      |L14.484|
000200  e014              B        |L14.556|
                  |L14.514|
000202  2000              MOVS     r0,#0                 ;373
000204  497f              LDR      r1,|L14.1028|
000206  6008              STR      r0,[r1,#0]            ;373
000208  f7fffffe          BL       HAL_GetTick
00020c  4605              MOV      r5,r0                 ;376
00020e  e006              B        |L14.542|
                  |L14.528|
000210  f7fffffe          BL       HAL_GetTick
000214  1b40              SUBS     r0,r0,r5              ;381
000216  2802              CMP      r0,#2                 ;381
000218  d901              BLS      |L14.542|
00021a  2003              MOVS     r0,#3                 ;383
00021c  e6f4              B        |L14.8|
                  |L14.542|
00021e  4877              LDR      r0,|L14.1020|
000220  306c              ADDS     r0,r0,#0x6c           ;379
000222  6800              LDR      r0,[r0,#0]            ;379
000224  f3c00040          UBFX     r0,r0,#1,#1           ;379
000228  2800              CMP      r0,#0                 ;379
00022a  d1f1              BNE      |L14.528|
                  |L14.556|
00022c  7820              LDRB     r0,[r4,#0]            ;389
00022e  f0000004          AND      r0,r0,#4              ;389
000232  2804              CMP      r0,#4                 ;389
000234  d170              BNE      |L14.792|
000236  2700              MOVS     r7,#0                 ;391
000238  4870              LDR      r0,|L14.1020|
00023a  3038              ADDS     r0,r0,#0x38           ;398
00023c  6800              LDR      r0,[r0,#0]            ;398
00023e  f0005080          AND      r0,r0,#0x10000000     ;398
000242  b990              CBNZ     r0,|L14.618|
000244  bf00              NOP                            ;400
000246  2000              MOVS     r0,#0                 ;400
000248  9000              STR      r0,[sp,#0]            ;400
00024a  486c              LDR      r0,|L14.1020|
00024c  3038              ADDS     r0,r0,#0x38           ;400
00024e  6800              LDR      r0,[r0,#0]            ;400
000250  f0405080          ORR      r0,r0,#0x10000000     ;400
000254  4969              LDR      r1,|L14.1020|
000256  3138              ADDS     r1,r1,#0x38           ;400
000258  6008              STR      r0,[r1,#0]            ;400
00025a  4608              MOV      r0,r1                 ;400
00025c  6800              LDR      r0,[r0,#0]            ;400
00025e  f0005080          AND      r0,r0,#0x10000000     ;400
000262  9000              STR      r0,[sp,#0]            ;400
000264  bf00              NOP                            ;400
000266  bf00              NOP                            ;400
000268  2701              MOVS     r7,#1                 ;401
                  |L14.618|
00026a  4867              LDR      r0,|L14.1032|
00026c  6800              LDR      r0,[r0,#0]            ;404
00026e  f4007080          AND      r0,r0,#0x100          ;404
000272  b9b0              CBNZ     r0,|L14.674|
000274  4864              LDR      r0,|L14.1032|
000276  6800              LDR      r0,[r0,#0]            ;407
000278  f4407080          ORR      r0,r0,#0x100          ;407
00027c  4962              LDR      r1,|L14.1032|
00027e  6008              STR      r0,[r1,#0]            ;407
000280  f7fffffe          BL       HAL_GetTick
000284  4605              MOV      r5,r0                 ;410
000286  e006              B        |L14.662|
                  |L14.648|
000288  f7fffffe          BL       HAL_GetTick
00028c  1b40              SUBS     r0,r0,r5              ;414
00028e  2802              CMP      r0,#2                 ;414
000290  d901              BLS      |L14.662|
000292  2003              MOVS     r0,#3                 ;416
000294  e6b8              B        |L14.8|
                  |L14.662|
000296  485c              LDR      r0,|L14.1032|
000298  6800              LDR      r0,[r0,#0]            ;412
00029a  f4007080          AND      r0,r0,#0x100          ;412
00029e  2800              CMP      r0,#0                 ;412
0002a0  d0f2              BEQ      |L14.648|
                  |L14.674|
0002a2  bf00              NOP                            ;422
0002a4  68a0              LDR      r0,[r4,#8]            ;422
0002a6  2801              CMP      r0,#1                 ;422
0002a8  d108              BNE      |L14.700|
0002aa  4854              LDR      r0,|L14.1020|
0002ac  3068              ADDS     r0,r0,#0x68           ;422
0002ae  6800              LDR      r0,[r0,#0]            ;422
0002b0  f0400001          ORR      r0,r0,#1              ;422
0002b4  4951              LDR      r1,|L14.1020|
0002b6  3168              ADDS     r1,r1,#0x68           ;422
0002b8  6008              STR      r0,[r1,#0]            ;422
0002ba  e01d              B        |L14.760|
                  |L14.700|
0002bc  68a0              LDR      r0,[r4,#8]            ;422
0002be  2805              CMP      r0,#5                 ;422
0002c0  d10d              BNE      |L14.734|
0002c2  484e              LDR      r0,|L14.1020|
0002c4  3068              ADDS     r0,r0,#0x68           ;422
0002c6  6800              LDR      r0,[r0,#0]            ;422
0002c8  f0400004          ORR      r0,r0,#4              ;422
0002cc  494b              LDR      r1,|L14.1020|
0002ce  3168              ADDS     r1,r1,#0x68           ;422
0002d0  6008              STR      r0,[r1,#0]            ;422
0002d2  4608              MOV      r0,r1                 ;422
0002d4  6800              LDR      r0,[r0,#0]            ;422
0002d6  f0400001          ORR      r0,r0,#1              ;422
0002da  6008              STR      r0,[r1,#0]            ;422
0002dc  e00c              B        |L14.760|
                  |L14.734|
0002de  4847              LDR      r0,|L14.1020|
0002e0  3068              ADDS     r0,r0,#0x68           ;422
0002e2  6800              LDR      r0,[r0,#0]            ;422
0002e4  f0200001          BIC      r0,r0,#1              ;422
0002e8  4944              LDR      r1,|L14.1020|
0002ea  3168              ADDS     r1,r1,#0x68           ;422
0002ec  6008              STR      r0,[r1,#0]            ;422
0002ee  4608              MOV      r0,r1                 ;422
0002f0  6800              LDR      r0,[r0,#0]            ;422
0002f2  f0200004          BIC      r0,r0,#4              ;422
0002f6  6008              STR      r0,[r1,#0]            ;422
                  |L14.760|
0002f8  bf00              NOP                            ;422
0002fa  68a0              LDR      r0,[r4,#8]            ;424
0002fc  b1a8              CBZ      r0,|L14.810|
0002fe  f7fffffe          BL       HAL_GetTick
000302  4605              MOV      r5,r0                 ;427
000304  e009              B        |L14.794|
                  |L14.774|
000306  f7fffffe          BL       HAL_GetTick
00030a  1b40              SUBS     r0,r0,r5              ;432
00030c  f2413188          MOV      r1,#0x1388            ;432
000310  4288              CMP      r0,r1                 ;432
000312  d902              BLS      |L14.794|
000314  2003              MOVS     r0,#3                 ;434
000316  e677              B        |L14.8|
                  |L14.792|
000318  e026              B        |L14.872|
                  |L14.794|
00031a  4838              LDR      r0,|L14.1020|
00031c  3068              ADDS     r0,r0,#0x68           ;430
00031e  6800              LDR      r0,[r0,#0]            ;430
000320  f3c00040          UBFX     r0,r0,#1,#1           ;430
000324  2800              CMP      r0,#0                 ;430
000326  d0ee              BEQ      |L14.774|
000328  e013              B        |L14.850|
                  |L14.810|
00032a  f7fffffe          BL       HAL_GetTick
00032e  4605              MOV      r5,r0                 ;441
000330  e008              B        |L14.836|
                  |L14.818|
000332  f7fffffe          BL       HAL_GetTick
000336  1b40              SUBS     r0,r0,r5              ;446
000338  f2413188          MOV      r1,#0x1388            ;446
00033c  4288              CMP      r0,r1                 ;446
00033e  d901              BLS      |L14.836|
000340  2003              MOVS     r0,#3                 ;448
000342  e661              B        |L14.8|
                  |L14.836|
000344  482d              LDR      r0,|L14.1020|
000346  3068              ADDS     r0,r0,#0x68           ;444
000348  6800              LDR      r0,[r0,#0]            ;444
00034a  f3c00040          UBFX     r0,r0,#1,#1           ;444
00034e  2800              CMP      r0,#0                 ;444
000350  d1ef              BNE      |L14.818|
                  |L14.850|
000352  2f01              CMP      r7,#1                 ;454
000354  d107              BNE      |L14.870|
000356  4829              LDR      r0,|L14.1020|
000358  3038              ADDS     r0,r0,#0x38           ;456
00035a  6800              LDR      r0,[r0,#0]            ;456
00035c  f0205080          BIC      r0,r0,#0x10000000     ;456
000360  4926              LDR      r1,|L14.1020|
000362  3138              ADDS     r1,r1,#0x38           ;456
000364  6008              STR      r0,[r1,#0]            ;456
                  |L14.870|
000366  bf00              NOP                            ;458
                  |L14.872|
000368  69a0              LDR      r0,[r4,#0x18]         ;462
00036a  2800              CMP      r0,#0                 ;462
00036c  d045              BEQ      |L14.1018|
00036e  4823              LDR      r0,|L14.1020|
000370  6800              LDR      r0,[r0,#0]            ;465
000372  f000000c          AND      r0,r0,#0xc            ;465
000376  2808              CMP      r0,#8                 ;465
000378  d05d              BEQ      |L14.1078|
00037a  69a0              LDR      r0,[r4,#0x18]         ;467
00037c  2802              CMP      r0,#2                 ;467
00037e  d145              BNE      |L14.1036|
000380  2000              MOVS     r0,#0                 ;477
000382  491f              LDR      r1,|L14.1024|
000384  6608              STR      r0,[r1,#0x60]         ;477
000386  f7fffffe          BL       HAL_GetTick
00038a  4605              MOV      r5,r0                 ;480
00038c  e006              B        |L14.924|
                  |L14.910|
00038e  f7fffffe          BL       HAL_GetTick
000392  1b40              SUBS     r0,r0,r5              ;485
000394  2802              CMP      r0,#2                 ;485
000396  d901              BLS      |L14.924|
000398  2003              MOVS     r0,#3                 ;487
00039a  e635              B        |L14.8|
                  |L14.924|
00039c  4817              LDR      r0,|L14.1020|
00039e  3808              SUBS     r0,r0,#8              ;483
0003a0  6800              LDR      r0,[r0,#0]            ;483
0003a2  f3c06040          UBFX     r0,r0,#25,#1          ;483
0003a6  2800              CMP      r0,#0                 ;483
0003a8  d1f1              BNE      |L14.910|
0003aa  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;492
0003ae  4308              ORRS     r0,r0,r1              ;492
0003b0  6a61              LDR      r1,[r4,#0x24]         ;492
0003b2  ea401181          ORR      r1,r0,r1,LSL #6       ;492
0003b6  2201              MOVS     r2,#1                 ;492
0003b8  6aa0              LDR      r0,[r4,#0x28]         ;492
0003ba  ebc20050          RSB      r0,r2,r0,LSR #1       ;492
0003be  ea414100          ORR      r1,r1,r0,LSL #16      ;492
0003c2  202c              MOVS     r0,#0x2c              ;492
0003c4  5d00              LDRB     r0,[r0,r4]            ;492
0003c6  ea416000          ORR      r0,r1,r0,LSL #24      ;492
0003ca  490c              LDR      r1,|L14.1020|
0003cc  1f09              SUBS     r1,r1,#4              ;492
0003ce  6008              STR      r0,[r1,#0]            ;492
0003d0  2001              MOVS     r0,#1                 ;498
0003d2  490b              LDR      r1,|L14.1024|
0003d4  6608              STR      r0,[r1,#0x60]         ;498
0003d6  f7fffffe          BL       HAL_GetTick
0003da  4605              MOV      r5,r0                 ;501
0003dc  e006              B        |L14.1004|
                  |L14.990|
0003de  f7fffffe          BL       HAL_GetTick
0003e2  1b40              SUBS     r0,r0,r5              ;506
0003e4  2802              CMP      r0,#2                 ;506
0003e6  d901              BLS      |L14.1004|
0003e8  2003              MOVS     r0,#3                 ;508
0003ea  e60d              B        |L14.8|
                  |L14.1004|
0003ec  4803              LDR      r0,|L14.1020|
0003ee  3808              SUBS     r0,r0,#8              ;504
0003f0  6800              LDR      r0,[r0,#0]            ;504
0003f2  f3c06040          UBFX     r0,r0,#25,#1          ;504
0003f6  2800              CMP      r0,#0                 ;504
0003f8  d0f1              BEQ      |L14.990|
                  |L14.1018|
0003fa  e049              B        |L14.1168|
                  |L14.1020|
                          DCD      0x40023808
                  |L14.1024|
                          DCD      0x42470000
                  |L14.1028|
                          DCD      0x42470e80
                  |L14.1032|
                          DCD      0x40007000
                  |L14.1036|
00040c  2000              MOVS     r0,#0                 ;515
00040e  4921              LDR      r1,|L14.1172|
000410  6608              STR      r0,[r1,#0x60]         ;515
000412  f7fffffe          BL       HAL_GetTick
000416  4605              MOV      r5,r0                 ;518
000418  e006              B        |L14.1064|
                  |L14.1050|
00041a  f7fffffe          BL       HAL_GetTick
00041e  1b40              SUBS     r0,r0,r5              ;523
000420  2802              CMP      r0,#2                 ;523
000422  d901              BLS      |L14.1064|
000424  2003              MOVS     r0,#3                 ;525
000426  e5ef              B        |L14.8|
                  |L14.1064|
000428  481b              LDR      r0,|L14.1176|
00042a  6800              LDR      r0,[r0,#0]            ;521
00042c  f3c06040          UBFX     r0,r0,#25,#1          ;521
000430  2800              CMP      r0,#0                 ;521
000432  d1f2              BNE      |L14.1050|
000434  e02c              B        |L14.1168|
                  |L14.1078|
000436  69a0              LDR      r0,[r4,#0x18]         ;533
000438  2801              CMP      r0,#1                 ;533
00043a  d100              BNE      |L14.1086|
00043c  e5e4              B        |L14.8|
                  |L14.1086|
00043e  4816              LDR      r0,|L14.1176|
000440  1d00              ADDS     r0,r0,#4              ;540
000442  6806              LDR      r6,[r0,#0]            ;540
000444  69a0              LDR      r0,[r4,#0x18]         ;550
000446  2801              CMP      r0,#1                 ;550
000448  d020              BEQ      |L14.1164|
00044a  f4060180          AND      r1,r6,#0x400000       ;551
00044e  69e0              LDR      r0,[r4,#0x1c]         ;551
000450  4281              CMP      r1,r0                 ;551
000452  d11b              BNE      |L14.1164|
000454  f006013f          AND      r1,r6,#0x3f           ;552
000458  6a20              LDR      r0,[r4,#0x20]         ;552
00045a  4281              CMP      r1,r0                 ;552
00045c  d116              BNE      |L14.1164|
00045e  f64770c0          MOV      r0,#0x7fc0            ;553
000462  4030              ANDS     r0,r0,r6              ;553
000464  6a61              LDR      r1,[r4,#0x24]         ;553
000466  ebb01f81          CMP      r0,r1,LSL #6          ;553
00046a  d10f              BNE      |L14.1164|
00046c  f4063140          AND      r1,r6,#0x30000        ;554
000470  2201              MOVS     r2,#1                 ;554
000472  6aa0              LDR      r0,[r4,#0x28]         ;554
000474  ebc20050          RSB      r0,r2,r0,LSR #1       ;554
000478  ebb14f00          CMP      r1,r0,LSL #16         ;554
00047c  d106              BNE      |L14.1164|
00047e  f0066170          AND      r1,r6,#0xf000000      ;555
000482  202c              MOVS     r0,#0x2c              ;555
000484  5d00              LDRB     r0,[r0,r4]            ;555
000486  ebb16f00          CMP      r1,r0,LSL #24         ;555
00048a  d001              BEQ      |L14.1168|
                  |L14.1164|
00048c  2001              MOVS     r0,#1                 ;558
00048e  e5bb              B        |L14.8|
                  |L14.1168|
000490  2000              MOVS     r0,#0                 ;563
000492  e5b9              B        |L14.8|
;;;565    
                          ENDP

                  |L14.1172|
                          DCD      0x42470000
                  |L14.1176|
                          DCD      0x40023800

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REVSH|
#line 478
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____RRX|
#line 665
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
