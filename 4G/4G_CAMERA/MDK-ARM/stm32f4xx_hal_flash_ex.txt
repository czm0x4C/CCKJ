; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_flash_ex.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_flash_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_flash_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_Erase_Sector||, CODE, READONLY, ALIGN=2

                  FLASH_Erase_Sector PROC
;;;979      */
;;;980    void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
000000  b510              PUSH     {r4,lr}
;;;981    {
;;;982      uint32_t tmp_psize = 0U;
000002  2200              MOVS     r2,#0
;;;983    
;;;984      /* Check the parameters */
;;;985      assert_param(IS_FLASH_SECTOR(Sector));
;;;986      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;987    
;;;988      if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
000004  b901              CBNZ     r1,|L1.8|
;;;989      {
;;;990        tmp_psize = FLASH_PSIZE_BYTE;
000006  e009              B        |L1.28|
                  |L1.8|
;;;991      }
;;;992      else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
000008  2901              CMP      r1,#1
00000a  d101              BNE      |L1.16|
;;;993      {
;;;994        tmp_psize = FLASH_PSIZE_HALF_WORD;
00000c  020a              LSLS     r2,r1,#8
00000e  e005              B        |L1.28|
                  |L1.16|
;;;995      }
;;;996      else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
000010  2902              CMP      r1,#2
000012  d101              BNE      |L1.24|
;;;997      {
;;;998        tmp_psize = FLASH_PSIZE_WORD;
000014  020a              LSLS     r2,r1,#8
000016  e001              B        |L1.28|
                  |L1.24|
;;;999      }
;;;1000     else
;;;1001     {
;;;1002       tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000018  f44f7240          MOV      r2,#0x300
                  |L1.28|
;;;1003     }
;;;1004   
;;;1005     /* If the previous operation is completed, proceed to erase the sector */
;;;1006     CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
00001c  4b0e              LDR      r3,|L1.88|
00001e  681b              LDR      r3,[r3,#0]
000020  f4237340          BIC      r3,r3,#0x300
000024  4c0c              LDR      r4,|L1.88|
000026  6023              STR      r3,[r4,#0]
;;;1007     FLASH->CR |= tmp_psize;
000028  4623              MOV      r3,r4
00002a  681b              LDR      r3,[r3,#0]
00002c  4313              ORRS     r3,r3,r2
00002e  6023              STR      r3,[r4,#0]
;;;1008     CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
000030  4623              MOV      r3,r4
000032  681b              LDR      r3,[r3,#0]
000034  f02303f8          BIC      r3,r3,#0xf8
000038  6023              STR      r3,[r4,#0]
;;;1009     FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
00003a  4623              MOV      r3,r4
00003c  681b              LDR      r3,[r3,#0]
00003e  2402              MOVS     r4,#2
000040  ea4404c0          ORR      r4,r4,r0,LSL #3
000044  4323              ORRS     r3,r3,r4
000046  4c04              LDR      r4,|L1.88|
000048  6023              STR      r3,[r4,#0]
;;;1010     FLASH->CR |= FLASH_CR_STRT;
00004a  4623              MOV      r3,r4
00004c  681b              LDR      r3,[r3,#0]
00004e  f4433380          ORR      r3,r3,#0x10000
000052  6023              STR      r3,[r4,#0]
;;;1011   }
000054  bd10              POP      {r4,pc}
;;;1012   
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      0x40023c10

                          AREA ||i.FLASH_FlushCaches||, CODE, READONLY, ALIGN=2

                  FLASH_FlushCaches PROC
;;;1308     */
;;;1309   void FLASH_FlushCaches(void)
000000  481c              LDR      r0,|L2.116|
;;;1310   {
;;;1311     /* Flush instruction cache  */
;;;1312     if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f4007000          AND      r0,r0,#0x200
000008  b1b0              CBZ      r0,|L2.56|
;;;1313     {
;;;1314       /* Disable instruction cache  */
;;;1315       __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
00000a  481a              LDR      r0,|L2.116|
00000c  6800              LDR      r0,[r0,#0]
00000e  f4207000          BIC      r0,r0,#0x200
000012  4918              LDR      r1,|L2.116|
000014  6008              STR      r0,[r1,#0]
;;;1316       /* Reset instruction cache */
;;;1317       __HAL_FLASH_INSTRUCTION_CACHE_RESET();
000016  bf00              NOP      
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f4406000          ORR      r0,r0,#0x800
000020  6008              STR      r0,[r1,#0]
000022  4608              MOV      r0,r1
000024  6800              LDR      r0,[r0,#0]
000026  f4206000          BIC      r0,r0,#0x800
00002a  6008              STR      r0,[r1,#0]
00002c  bf00              NOP      
;;;1318       /* Enable instruction cache */
;;;1319       __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
00002e  4608              MOV      r0,r1
000030  6800              LDR      r0,[r0,#0]
000032  f4407000          ORR      r0,r0,#0x200
000036  6008              STR      r0,[r1,#0]
                  |L2.56|
;;;1320     }
;;;1321   
;;;1322     /* Flush data cache */
;;;1323     if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
000038  480e              LDR      r0,|L2.116|
00003a  6800              LDR      r0,[r0,#0]
00003c  f4006080          AND      r0,r0,#0x400
000040  b1b0              CBZ      r0,|L2.112|
;;;1324     {
;;;1325       /* Disable data cache  */
;;;1326       __HAL_FLASH_DATA_CACHE_DISABLE();
000042  480c              LDR      r0,|L2.116|
000044  6800              LDR      r0,[r0,#0]
000046  f4206080          BIC      r0,r0,#0x400
00004a  490a              LDR      r1,|L2.116|
00004c  6008              STR      r0,[r1,#0]
;;;1327       /* Reset data cache */
;;;1328       __HAL_FLASH_DATA_CACHE_RESET();
00004e  bf00              NOP      
000050  4608              MOV      r0,r1
000052  6800              LDR      r0,[r0,#0]
000054  f4405080          ORR      r0,r0,#0x1000
000058  6008              STR      r0,[r1,#0]
00005a  4608              MOV      r0,r1
00005c  6800              LDR      r0,[r0,#0]
00005e  f4205080          BIC      r0,r0,#0x1000
000062  6008              STR      r0,[r1,#0]
000064  bf00              NOP      
;;;1329       /* Enable data cache */
;;;1330       __HAL_FLASH_DATA_CACHE_ENABLE();
000066  4608              MOV      r0,r1
000068  6800              LDR      r0,[r0,#0]
00006a  f4406080          ORR      r0,r0,#0x400
00006e  6008              STR      r0,[r1,#0]
                  |L2.112|
;;;1331     }
;;;1332   }
000070  4770              BX       lr
;;;1333   
                          ENDP

000072  0000              DCW      0x0000
                  |L2.116|
                          DCD      0x40023c00

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;950      */
;;;951    static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
000000  4a0a              LDR      r2,|L3.44|
;;;952    {
;;;953      /* Check the parameters */
;;;954      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;955      assert_param(IS_FLASH_BANK(Banks));
;;;956    
;;;957      /* If the previous operation is completed, proceed to erase all sectors */
;;;958      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b08              LDR      r3,|L3.44|
00000a  601a              STR      r2,[r3,#0]
;;;959      FLASH->CR |= FLASH_CR_MER;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f0420204          ORR      r2,r2,#4
000014  601a              STR      r2,[r3,#0]
;;;960      FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f44f3380          MOV      r3,#0x10000
00001e  ea432300          ORR      r3,r3,r0,LSL #8
000022  431a              ORRS     r2,r2,r3
000024  4b01              LDR      r3,|L3.44|
000026  601a              STR      r2,[r3,#0]
;;;961    }
000028  4770              BX       lr
;;;962    
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      0x40023c10

                          AREA ||i.FLASH_OB_BOR_LevelConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BOR_LevelConfig PROC
;;;1228     */
;;;1229   static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
000000  4601              MOV      r1,r0
;;;1230   {
;;;1231     /* Check the parameters */
;;;1232     assert_param(IS_OB_BOR_LEVEL(Level));
;;;1233   
;;;1234     /* Set the BOR Level */
;;;1235     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
000002  4806              LDR      r0,|L4.28|
000004  7800              LDRB     r0,[r0,#0]
000006  f020000c          BIC      r0,r0,#0xc
00000a  4a04              LDR      r2,|L4.28|
00000c  7010              STRB     r0,[r2,#0]
;;;1236     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
00000e  4610              MOV      r0,r2
000010  7800              LDRB     r0,[r0,#0]
000012  4308              ORRS     r0,r0,r1
000014  7010              STRB     r0,[r2,#0]
;;;1237   
;;;1238     return HAL_OK;
000016  2000              MOVS     r0,#0
;;;1239   
;;;1240   }
000018  4770              BX       lr
;;;1241   
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_DisableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_DisableWRP PROC
;;;1065     */
;;;1066   static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
000000  b570              PUSH     {r4-r6,lr}
;;;1067   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;1068     HAL_StatusTypeDef status = HAL_OK;
000006  2500              MOVS     r5,#0
;;;1069   
;;;1070     /* Check the parameters */
;;;1071     assert_param(IS_OB_WRP_SECTOR(WRPSector));
;;;1072     assert_param(IS_FLASH_BANK(Banks));
;;;1073   
;;;1074     /* Wait for last operation to be completed */
;;;1075     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000008  f24c3050          MOV      r0,#0xc350
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
000010  4605              MOV      r5,r0
;;;1076   
;;;1077     if (status == HAL_OK)
000012  b92d              CBNZ     r5,|L5.32|
;;;1078     {
;;;1079       *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
000014  4803              LDR      r0,|L5.36|
000016  8800              LDRH     r0,[r0,#0]
000018  b2a1              UXTH     r1,r4
00001a  4308              ORRS     r0,r0,r1
00001c  4901              LDR      r1,|L5.36|
00001e  8008              STRH     r0,[r1,#0]
                  |L5.32|
;;;1080     }
;;;1081   
;;;1082     return status;
000020  4628              MOV      r0,r5
;;;1083   }
000022  bd70              POP      {r4-r6,pc}
;;;1084   #endif /* STM32F40xxx || STM32F41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx
                          ENDP

                  |L5.36|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_EnableWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_EnableWRP PROC
;;;1029     */
;;;1030   static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
000000  b570              PUSH     {r4-r6,lr}
;;;1031   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;1032     HAL_StatusTypeDef status = HAL_OK;
000006  2500              MOVS     r5,#0
;;;1033   
;;;1034     /* Check the parameters */
;;;1035     assert_param(IS_OB_WRP_SECTOR(WRPSector));
;;;1036     assert_param(IS_FLASH_BANK(Banks));
;;;1037   
;;;1038     /* Wait for last operation to be completed */
;;;1039     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000008  f24c3050          MOV      r0,#0xc350
00000c  f7fffffe          BL       FLASH_WaitForLastOperation
000010  4605              MOV      r5,r0
;;;1040   
;;;1041     if (status == HAL_OK)
000012  b925              CBNZ     r5,|L6.30|
;;;1042     {
;;;1043       *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
000014  4803              LDR      r0,|L6.36|
000016  8800              LDRH     r0,[r0,#0]
000018  43a0              BICS     r0,r0,r4
00001a  4902              LDR      r1,|L6.36|
00001c  8008              STRH     r0,[r1,#0]
                  |L6.30|
;;;1044     }
;;;1045   
;;;1046     return status;
00001e  4628              MOV      r0,r5
;;;1047   }
000020  bd70              POP      {r4-r6,pc}
;;;1048   
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_GetBOR||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetBOR PROC
;;;1298     */
;;;1299   static uint8_t FLASH_OB_GetBOR(void)
000000  4802              LDR      r0,|L7.12|
;;;1300   {
;;;1301     /* Return the FLASH BOR level */
;;;1302     return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
000002  7800              LDRB     r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;1303   }
000008  4770              BX       lr
;;;1304   
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1270     */
;;;1271   static uint8_t FLASH_OB_GetRDP(void)
000000  20aa              MOVS     r0,#0xaa
;;;1272   {
;;;1273     uint8_t readstatus = OB_RDP_LEVEL_0;
;;;1274   
;;;1275     if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
000002  4907              LDR      r1,|L8.32|
000004  7809              LDRB     r1,[r1,#0]
000006  29cc              CMP      r1,#0xcc
000008  d101              BNE      |L8.14|
;;;1276     {
;;;1277       readstatus = OB_RDP_LEVEL_2;
00000a  20cc              MOVS     r0,#0xcc
00000c  e006              B        |L8.28|
                  |L8.14|
;;;1278     }
;;;1279     else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
00000e  4904              LDR      r1,|L8.32|
000010  7809              LDRB     r1,[r1,#0]
000012  29aa              CMP      r1,#0xaa
000014  d101              BNE      |L8.26|
;;;1280     {
;;;1281       readstatus = OB_RDP_LEVEL_0;
000016  20aa              MOVS     r0,#0xaa
000018  e000              B        |L8.28|
                  |L8.26|
;;;1282     }
;;;1283     else
;;;1284     {
;;;1285       readstatus = OB_RDP_LEVEL_1;
00001a  2055              MOVS     r0,#0x55
                  |L8.28|
;;;1286     }
;;;1287   
;;;1288     return readstatus;
;;;1289   }
00001c  4770              BX       lr
;;;1290   
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      0x40023c15

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;1246     */
;;;1247   static uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L9.12|
;;;1248   {
;;;1249     /* Return the User Option Byte */
;;;1250     return ((uint8_t)(FLASH->OPTCR & 0xE0));
000002  6800              LDR      r0,[r0,#0]
000004  f00000e0          AND      r0,r0,#0xe0
;;;1251   }
000008  4770              BX       lr
;;;1252   
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;1256     */
;;;1257   static uint16_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L10.8|
;;;1258   {
;;;1259     /* Return the FLASH write protection Register value */
;;;1260     return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1261   }
000004  4770              BX       lr
;;;1262   
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_RDP_LevelConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDP_LevelConfig PROC
;;;1159     */
;;;1160   static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
000000  b570              PUSH     {r4-r6,lr}
;;;1161   {
000002  4604              MOV      r4,r0
;;;1162     HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;1163   
;;;1164     /* Check the parameters */
;;;1165     assert_param(IS_OB_RDP_LEVEL(Level));
;;;1166   
;;;1167     /* Wait for last operation to be completed */
;;;1168     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000006  f24c3050          MOV      r0,#0xc350
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
00000e  4605              MOV      r5,r0
;;;1169   
;;;1170     if (status == HAL_OK)
000010  b90d              CBNZ     r5,|L11.22|
;;;1171     {
;;;1172       *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
000012  4802              LDR      r0,|L11.28|
000014  7004              STRB     r4,[r0,#0]
                  |L11.22|
;;;1173     }
;;;1174   
;;;1175     return status;
000016  4628              MOV      r0,r5
;;;1176   }
000018  bd70              POP      {r4-r6,pc}
;;;1177   
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40023c15

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;1193     */
;;;1194   static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1195   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;1196     uint8_t optiontmp = 0xFF;
00000a  f04f08ff          MOV      r8,#0xff
;;;1197     HAL_StatusTypeDef status = HAL_OK;
00000e  2700              MOVS     r7,#0
;;;1198   
;;;1199     /* Check the parameters */
;;;1200     assert_param(IS_OB_IWDG_SOURCE(Iwdg));
;;;1201     assert_param(IS_OB_STOP_SOURCE(Stop));
;;;1202     assert_param(IS_OB_STDBY_SOURCE(Stdby));
;;;1203   
;;;1204     /* Wait for last operation to be completed */
;;;1205     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000010  f24c3050          MOV      r0,#0xc350
000014  f7fffffe          BL       FLASH_WaitForLastOperation
000018  4607              MOV      r7,r0
;;;1206   
;;;1207     if (status == HAL_OK)
00001a  b94f              CBNZ     r7,|L12.48|
;;;1208     {
;;;1209       /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
;;;1210       optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
00001c  4806              LDR      r0,|L12.56|
00001e  7800              LDRB     r0,[r0,#0]
000020  f000081f          AND      r8,r0,#0x1f
;;;1211   
;;;1212       /* Update User Option Byte */
;;;1213       *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
000024  ea450008          ORR      r0,r5,r8
000028  4330              ORRS     r0,r0,r6
00002a  4320              ORRS     r0,r0,r4
00002c  4902              LDR      r1,|L12.56|
00002e  7008              STRB     r0,[r1,#0]
                  |L12.48|
;;;1214     }
;;;1215   
;;;1216     return status;
000030  4638              MOV      r0,r7
;;;1217   }
000032  e8bd81f0          POP      {r4-r8,pc}
;;;1218   
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;159      */
;;;160    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;161    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;162      HAL_StatusTypeDef status = HAL_ERROR;
000008  2701              MOVS     r7,#1
;;;163      uint32_t index = 0U;
00000a  2500              MOVS     r5,#0
;;;164    
;;;165      /* Process Locked */
;;;166      __HAL_LOCK(&pFlash);
00000c  bf00              NOP      
00000e  4825              LDR      r0,|L13.164|
000010  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000012  2801              CMP      r0,#1
000014  d102              BNE      |L13.28|
000016  2002              MOVS     r0,#2
                  |L13.24|
;;;167    
;;;168      /* Check the parameters */
;;;169      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;170    
;;;171      /* Wait for last operation to be completed */
;;;172      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;173    
;;;174      if (status == HAL_OK)
;;;175      {
;;;176        /*Initialization of SectorError variable*/
;;;177        *SectorError = 0xFFFFFFFFU;
;;;178    
;;;179        if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;180        {
;;;181          /*Mass erase to be done*/
;;;182          FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
;;;183    
;;;184          /* Wait for last operation to be completed */
;;;185          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;186    
;;;187          /* if the erase operation is completed, disable the MER Bit */
;;;188          FLASH->CR &= (~FLASH_MER_BIT);
;;;189        }
;;;190        else
;;;191        {
;;;192          /* Check the parameters */
;;;193          assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
;;;194    
;;;195          /* Erase by sector by sector to be done*/
;;;196          for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
;;;197          {
;;;198            FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
;;;199    
;;;200            /* Wait for last operation to be completed */
;;;201            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;202    
;;;203            /* If the erase operation is completed, disable the SER and SNB Bits */
;;;204            CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
;;;205    
;;;206            if (status != HAL_OK)
;;;207            {
;;;208              /* In case of error, stop erase procedure and return the faulty sector*/
;;;209              *SectorError = index;
;;;210              break;
;;;211            }
;;;212          }
;;;213        }
;;;214        /* Flush the caches to be sure of the data consistency */
;;;215        FLASH_FlushCaches();
;;;216      }
;;;217    
;;;218      /* Process Unlocked */
;;;219      __HAL_UNLOCK(&pFlash);
;;;220    
;;;221      return status;
;;;222    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L13.28|
00001c  2001              MOVS     r0,#1                 ;166
00001e  4921              LDR      r1,|L13.164|
000020  7608              STRB     r0,[r1,#0x18]         ;166
000022  bf00              NOP                            ;166
000024  f24c3050          MOV      r0,#0xc350            ;172
000028  f7fffffe          BL       FLASH_WaitForLastOperation
00002c  4607              MOV      r7,r0                 ;172
00002e  2f00              CMP      r7,#0                 ;174
000030  d131              BNE      |L13.150|
000032  1e40              SUBS     r0,r0,#1              ;177
000034  6030              STR      r0,[r6,#0]            ;177
000036  6820              LDR      r0,[r4,#0]            ;179
000038  2801              CMP      r0,#1                 ;179
00003a  d10f              BNE      |L13.92|
00003c  7c20              LDRB     r0,[r4,#0x10]         ;182
00003e  6861              LDR      r1,[r4,#4]            ;182
000040  f7fffffe          BL       FLASH_MassErase
000044  f24c3050          MOV      r0,#0xc350            ;185
000048  f7fffffe          BL       FLASH_WaitForLastOperation
00004c  4607              MOV      r7,r0                 ;185
00004e  4816              LDR      r0,|L13.168|
000050  6800              LDR      r0,[r0,#0]            ;188
000052  f0200004          BIC      r0,r0,#4              ;188
000056  4914              LDR      r1,|L13.168|
000058  6008              STR      r0,[r1,#0]            ;188
00005a  e01a              B        |L13.146|
                  |L13.92|
00005c  68a5              LDR      r5,[r4,#8]            ;196
00005e  e012              B        |L13.134|
                  |L13.96|
000060  7c21              LDRB     r1,[r4,#0x10]         ;198
000062  4628              MOV      r0,r5                 ;198
000064  f7fffffe          BL       FLASH_Erase_Sector
000068  f24c3050          MOV      r0,#0xc350            ;201
00006c  f7fffffe          BL       FLASH_WaitForLastOperation
000070  4607              MOV      r7,r0                 ;201
000072  480d              LDR      r0,|L13.168|
000074  6800              LDR      r0,[r0,#0]            ;204
000076  f02000fa          BIC      r0,r0,#0xfa           ;204
00007a  490b              LDR      r1,|L13.168|
00007c  6008              STR      r0,[r1,#0]            ;204
00007e  b10f              CBZ      r7,|L13.132|
000080  6035              STR      r5,[r6,#0]            ;209
000082  e005              B        |L13.144|
                  |L13.132|
000084  1c6d              ADDS     r5,r5,#1              ;196
                  |L13.134|
000086  e9d41002          LDRD     r1,r0,[r4,#8]         ;196
00008a  4408              ADD      r0,r0,r1              ;196
00008c  42a8              CMP      r0,r5                 ;196
00008e  d8e7              BHI      |L13.96|
                  |L13.144|
000090  bf00              NOP                            ;210
                  |L13.146|
000092  f7fffffe          BL       FLASH_FlushCaches
                  |L13.150|
000096  bf00              NOP                            ;219
000098  2000              MOVS     r0,#0                 ;219
00009a  4902              LDR      r1,|L13.164|
00009c  7608              STRB     r0,[r1,#0x18]         ;219
00009e  bf00              NOP                            ;219
0000a0  4638              MOV      r0,r7                 ;221
0000a2  e7b9              B        |L13.24|
;;;223    
                          ENDP

                  |L13.164|
                          DCD      pFlash
                  |L13.168|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;230      */
;;;231    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  b570              PUSH     {r4-r6,lr}
;;;232    {
000002  4604              MOV      r4,r0
;;;233      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;234    
;;;235      /* Process Locked */
;;;236      __HAL_LOCK(&pFlash);
000006  bf00              NOP      
000008  4819              LDR      r0,|L14.112|
00000a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L14.20|
000010  2002              MOVS     r0,#2
                  |L14.18|
;;;237    
;;;238      /* Check the parameters */
;;;239      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;240    
;;;241      /* Enable End of FLASH Operation interrupt */
;;;242      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
;;;243    
;;;244      /* Enable Error source interrupt */
;;;245      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
;;;246    
;;;247      /* Clear pending flags (if any) */
;;;248      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
;;;249                             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
;;;250    
;;;251      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;252      {
;;;253        /*Mass erase to be done*/
;;;254        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;255        pFlash.Bank = pEraseInit->Banks;
;;;256        FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
;;;257      }
;;;258      else
;;;259      {
;;;260        /* Erase by sector to be done*/
;;;261    
;;;262        /* Check the parameters */
;;;263        assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
;;;264    
;;;265        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
;;;266        pFlash.NbSectorsToErase = pEraseInit->NbSectors;
;;;267        pFlash.Sector = pEraseInit->Sector;
;;;268        pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
;;;269    
;;;270        /*Erase 1st sector and wait for IT*/
;;;271        FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
;;;272      }
;;;273    
;;;274      return status;
;;;275    }
000012  bd70              POP      {r4-r6,pc}
                  |L14.20|
000014  2001              MOVS     r0,#1                 ;236
000016  4916              LDR      r1,|L14.112|
000018  7608              STRB     r0,[r1,#0x18]         ;236
00001a  bf00              NOP                            ;236
00001c  4815              LDR      r0,|L14.116|
00001e  6800              LDR      r0,[r0,#0]            ;242
000020  f0407080          ORR      r0,r0,#0x1000000      ;242
000024  4913              LDR      r1,|L14.116|
000026  6008              STR      r0,[r1,#0]            ;242
000028  4608              MOV      r0,r1                 ;245
00002a  6800              LDR      r0,[r0,#0]            ;245
00002c  f0407000          ORR      r0,r0,#0x2000000      ;245
000030  6008              STR      r0,[r1,#0]            ;245
000032  20f3              MOVS     r0,#0xf3              ;248
000034  1f09              SUBS     r1,r1,#4              ;248
000036  6008              STR      r0,[r1,#0]            ;248
000038  6820              LDR      r0,[r4,#0]            ;251
00003a  2801              CMP      r0,#1                 ;251
00003c  d109              BNE      |L14.82|
00003e  2002              MOVS     r0,#2                 ;254
000040  490b              LDR      r1,|L14.112|
000042  7008              STRB     r0,[r1,#0]            ;254
000044  6860              LDR      r0,[r4,#4]            ;255
000046  6108              STR      r0,[r1,#0x10]         ;255  ; pFlash
000048  7c20              LDRB     r0,[r4,#0x10]         ;256
00004a  6861              LDR      r1,[r4,#4]            ;256
00004c  f7fffffe          BL       FLASH_MassErase
000050  e00c              B        |L14.108|
                  |L14.82|
000052  2001              MOVS     r0,#1                 ;265
000054  4906              LDR      r1,|L14.112|
000056  7008              STRB     r0,[r1,#0]            ;265
000058  68e0              LDR      r0,[r4,#0xc]          ;266
00005a  6048              STR      r0,[r1,#4]            ;266  ; pFlash
00005c  68a0              LDR      r0,[r4,#8]            ;267
00005e  60c8              STR      r0,[r1,#0xc]          ;267  ; pFlash
000060  7c20              LDRB     r0,[r4,#0x10]         ;268
000062  7208              STRB     r0,[r1,#8]            ;268
000064  7c21              LDRB     r1,[r4,#0x10]         ;271
000066  68a0              LDR      r0,[r4,#8]            ;271
000068  f7fffffe          BL       FLASH_Erase_Sector
                  |L14.108|
00006c  4628              MOV      r0,r5                 ;274
00006e  e7d0              B        |L14.18|
;;;276    
                          ENDP

                  |L14.112|
                          DCD      pFlash
                  |L14.116|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=1

                  HAL_FLASHEx_OBGetConfig PROC
;;;342      */
;;;343    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b510              PUSH     {r4,lr}
;;;344    {
000002  4604              MOV      r4,r0
;;;345      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
000004  200f              MOVS     r0,#0xf
000006  6020              STR      r0,[r4,#0]
;;;346    
;;;347      /*Get WRP*/
;;;348      pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
000008  f7fffffe          BL       FLASH_OB_GetWRP
00000c  60a0              STR      r0,[r4,#8]
;;;349    
;;;350      /*Get RDP Level*/
;;;351      pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
00000e  f7fffffe          BL       FLASH_OB_GetRDP
000012  6120              STR      r0,[r4,#0x10]
;;;352    
;;;353      /*Get USER*/
;;;354      pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
000014  f7fffffe          BL       FLASH_OB_GetUser
000018  7620              STRB     r0,[r4,#0x18]
;;;355    
;;;356      /*Get BOR Level*/
;;;357      pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
00001a  f7fffffe          BL       FLASH_OB_GetBOR
00001e  6160              STR      r0,[r4,#0x14]
;;;358    }
000020  bd10              POP      {r4,pc}
;;;359    
                          ENDP


                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;283      */
;;;284    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b570              PUSH     {r4-r6,lr}
;;;285    {
000002  4604              MOV      r4,r0
;;;286      HAL_StatusTypeDef status = HAL_ERROR;
000004  2501              MOVS     r5,#1
;;;287    
;;;288      /* Process Locked */
;;;289      __HAL_LOCK(&pFlash);
000006  bf00              NOP      
000008  4821              LDR      r0,|L16.144|
00000a  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L16.20|
000010  2002              MOVS     r0,#2
                  |L16.18|
;;;290    
;;;291      /* Check the parameters */
;;;292      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;293    
;;;294      /*Write protection configuration*/
;;;295      if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
;;;296      {
;;;297        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;298        if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
;;;299        {
;;;300          /*Enable of Write protection on the selected Sector*/
;;;301          status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
;;;302        }
;;;303        else
;;;304        {
;;;305          /*Disable of Write protection on the selected Sector*/
;;;306          status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
;;;307        }
;;;308      }
;;;309    
;;;310      /*Read protection configuration*/
;;;311      if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;312      {
;;;313        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;314      }
;;;315    
;;;316      /*USER  configuration*/
;;;317      if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;318      {
;;;319        status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
;;;320                                     pOBInit->USERConfig & OB_STOP_NO_RST,
;;;321                                     pOBInit->USERConfig & OB_STDBY_NO_RST);
;;;322      }
;;;323    
;;;324      /*BOR Level  configuration*/
;;;325      if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
;;;326      {
;;;327        status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
;;;328      }
;;;329    
;;;330      /* Process Unlocked */
;;;331      __HAL_UNLOCK(&pFlash);
;;;332    
;;;333      return status;
;;;334    }
000012  bd70              POP      {r4-r6,pc}
                  |L16.20|
000014  2001              MOVS     r0,#1                 ;289
000016  491e              LDR      r1,|L16.144|
000018  7608              STRB     r0,[r1,#0x18]         ;289
00001a  bf00              NOP                            ;289
00001c  7820              LDRB     r0,[r4,#0]            ;295
00001e  f0000001          AND      r0,r0,#1              ;295
000022  b168              CBZ      r0,|L16.64|
000024  6860              LDR      r0,[r4,#4]            ;298
000026  2801              CMP      r0,#1                 ;298
000028  d105              BNE      |L16.54|
00002a  e9d40102          LDRD     r0,r1,[r4,#8]         ;301
00002e  f7fffffe          BL       FLASH_OB_EnableWRP
000032  4605              MOV      r5,r0                 ;301
000034  e004              B        |L16.64|
                  |L16.54|
000036  e9d40102          LDRD     r0,r1,[r4,#8]         ;306
00003a  f7fffffe          BL       FLASH_OB_DisableWRP
00003e  4605              MOV      r5,r0                 ;306
                  |L16.64|
000040  7820              LDRB     r0,[r4,#0]            ;311
000042  f0000002          AND      r0,r0,#2              ;311
000046  2802              CMP      r0,#2                 ;311
000048  d103              BNE      |L16.82|
00004a  7c20              LDRB     r0,[r4,#0x10]         ;313
00004c  f7fffffe          BL       FLASH_OB_RDP_LevelConfig
000050  4605              MOV      r5,r0                 ;313
                  |L16.82|
000052  7820              LDRB     r0,[r4,#0]            ;317
000054  f0000004          AND      r0,r0,#4              ;317
000058  2804              CMP      r0,#4                 ;317
00005a  d109              BNE      |L16.112|
00005c  7e23              LDRB     r3,[r4,#0x18]         ;319
00005e  f0030280          AND      r2,r3,#0x80           ;319
000062  f0030140          AND      r1,r3,#0x40           ;319
000066  f0030020          AND      r0,r3,#0x20           ;319
00006a  f7fffffe          BL       FLASH_OB_UserConfig
00006e  4605              MOV      r5,r0                 ;319
                  |L16.112|
000070  7820              LDRB     r0,[r4,#0]            ;325
000072  f0000008          AND      r0,r0,#8              ;325
000076  2808              CMP      r0,#8                 ;325
000078  d103              BNE      |L16.130|
00007a  7d20              LDRB     r0,[r4,#0x14]         ;327
00007c  f7fffffe          BL       FLASH_OB_BOR_LevelConfig
000080  4605              MOV      r5,r0                 ;327
                  |L16.130|
000082  bf00              NOP                            ;331
000084  2000              MOVS     r0,#0                 ;331
000086  4902              LDR      r1,|L16.144|
000088  7608              STRB     r0,[r1,#0x18]         ;331
00008a  bf00              NOP                            ;331
00008c  4628              MOV      r0,r5                 ;333
00008e  e7c0              B        |L16.18|
;;;335    
                          ENDP

                  |L16.144|
                          DCD      pFlash

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REVSH|
#line 478
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____RRX|
#line 665
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
