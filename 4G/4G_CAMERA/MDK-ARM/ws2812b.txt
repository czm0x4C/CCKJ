; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\ws2812b.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\ws2812b.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\ws2812b.crf ..\HARDWARE\WS2812B\ws2812b.c]
                          THUMB

                          AREA ||i.RGB_BLACK||, CODE, READONLY, ALIGN=2

                  RGB_BLACK PROC
;;;114    
;;;115     void RGB_BLACK(uint16_t Pixel_Len)
000000  b538              PUSH     {r3-r5,lr}
;;;116    {
000002  4605              MOV      r5,r0
;;;117    	uint16_t i;
;;;118    	for(i=0;i<Pixel_Len;i++)//给对应个数LED写入白色
000004  2400              MOVS     r4,#0
000006  e00c              B        |L1.34|
                  |L1.8|
;;;119    	{
;;;120    		RGB_SetColor(i,BLACK);
000008  b2e0              UXTB     r0,r4
00000a  4909              LDR      r1,|L1.48|
00000c  880a              LDRH     r2,[r1,#0]  ; BLACK
00000e  f8ad2000          STRH     r2,[sp,#0]
000012  7889              LDRB     r1,[r1,#2]  ; BLACK
000014  f88d1002          STRB     r1,[sp,#2]
000018  9900              LDR      r1,[sp,#0]
00001a  f7fffffe          BL       RGB_SetColor
00001e  1c60              ADDS     r0,r4,#1              ;118
000020  b284              UXTH     r4,r0                 ;118
                  |L1.34|
000022  42ac              CMP      r4,r5                 ;118
000024  dbf0              BLT      |L1.8|
;;;121    	}
;;;122    	Reset_Load();
000026  f7fffffe          BL       Reset_Load
;;;123    	RGB_SendArray();
00002a  f7fffffe          BL       RGB_SendArray
;;;124    }
00002e  bd38              POP      {r3-r5,pc}
;;;125    //也可以继续添加其他颜色，和颜色变化函数等
                          ENDP

                  |L1.48|
                          DCD      BLACK

                          AREA ||i.RGB_BLUE||, CODE, READONLY, ALIGN=2

                  RGB_BLUE PROC
;;;88     */
;;;89     void RGB_BLUE(uint16_t Pixel_Len)
000000  b538              PUSH     {r3-r5,lr}
;;;90     {
000002  4605              MOV      r5,r0
;;;91     	uint16_t i;
;;;92     	for(i=0;i<Pixel_Len;i++)//给对应个数LED写入蓝色
000004  2400              MOVS     r4,#0
000006  e00c              B        |L2.34|
                  |L2.8|
;;;93     	{
;;;94     		RGB_SetColor(i,BLUE);
000008  b2e0              UXTB     r0,r4
00000a  4909              LDR      r1,|L2.48|
00000c  880a              LDRH     r2,[r1,#0]  ; BLUE
00000e  f8ad2000          STRH     r2,[sp,#0]
000012  7889              LDRB     r1,[r1,#2]  ; BLUE
000014  f88d1002          STRB     r1,[sp,#2]
000018  9900              LDR      r1,[sp,#0]
00001a  f7fffffe          BL       RGB_SetColor
00001e  1c60              ADDS     r0,r4,#1              ;92
000020  b284              UXTH     r4,r0                 ;92
                  |L2.34|
000022  42ac              CMP      r4,r5                 ;92
000024  dbf0              BLT      |L2.8|
;;;95     	}
;;;96     	Reset_Load();
000026  f7fffffe          BL       Reset_Load
;;;97     	RGB_SendArray();
00002a  f7fffffe          BL       RGB_SendArray
;;;98     }
00002e  bd38              POP      {r3-r5,pc}
;;;99      
                          ENDP

                  |L2.48|
                          DCD      BLUE

                          AREA ||i.RGB_GREEN||, CODE, READONLY, ALIGN=2

                  RGB_GREEN PROC
;;;73     */
;;;74     void RGB_GREEN(uint16_t Pixel_Len)
000000  b538              PUSH     {r3-r5,lr}
;;;75     {
000002  4605              MOV      r5,r0
;;;76     	uint16_t i;
;;;77     	for(i=0;i<Pixel_Len;i++)//给对应个数LED写入绿色
000004  2400              MOVS     r4,#0
000006  e00c              B        |L3.34|
                  |L3.8|
;;;78     	{
;;;79     		RGB_SetColor(i,GREEN);
000008  b2e0              UXTB     r0,r4
00000a  4909              LDR      r1,|L3.48|
00000c  880a              LDRH     r2,[r1,#0]  ; GREEN
00000e  f8ad2000          STRH     r2,[sp,#0]
000012  7889              LDRB     r1,[r1,#2]  ; GREEN
000014  f88d1002          STRB     r1,[sp,#2]
000018  9900              LDR      r1,[sp,#0]
00001a  f7fffffe          BL       RGB_SetColor
00001e  1c60              ADDS     r0,r4,#1              ;77
000020  b284              UXTH     r4,r0                 ;77
                  |L3.34|
000022  42ac              CMP      r4,r5                 ;77
000024  dbf0              BLT      |L3.8|
;;;80     	}
;;;81     	Reset_Load();
000026  f7fffffe          BL       Reset_Load
;;;82     	RGB_SendArray();
00002a  f7fffffe          BL       RGB_SendArray
;;;83     }
00002e  bd38              POP      {r3-r5,pc}
;;;84      
                          ENDP

                  |L3.48|
                          DCD      GREEN

                          AREA ||i.RGB_RED||, CODE, READONLY, ALIGN=2

                  RGB_RED PROC
;;;58     */
;;;59     void RGB_RED(uint16_t Pixel_Len)
000000  b538              PUSH     {r3-r5,lr}
;;;60     {
000002  4605              MOV      r5,r0
;;;61     	uint16_t i;
;;;62     	for(i=0;i<Pixel_Len;i++)//给对应个数LED写入红色
000004  2400              MOVS     r4,#0
000006  e00c              B        |L4.34|
                  |L4.8|
;;;63     	{
;;;64     		RGB_SetColor(i,RED);
000008  b2e0              UXTB     r0,r4
00000a  4909              LDR      r1,|L4.48|
00000c  880a              LDRH     r2,[r1,#0]  ; RED
00000e  f8ad2000          STRH     r2,[sp,#0]
000012  7889              LDRB     r1,[r1,#2]  ; RED
000014  f88d1002          STRB     r1,[sp,#2]
000018  9900              LDR      r1,[sp,#0]
00001a  f7fffffe          BL       RGB_SetColor
00001e  1c60              ADDS     r0,r4,#1              ;62
000020  b284              UXTH     r4,r0                 ;62
                  |L4.34|
000022  42ac              CMP      r4,r5                 ;62
000024  dbf0              BLT      |L4.8|
;;;65     	}
;;;66     	Reset_Load();
000026  f7fffffe          BL       Reset_Load
;;;67     	RGB_SendArray();
00002a  f7fffffe          BL       RGB_SendArray
;;;68     }
00002e  bd38              POP      {r3-r5,pc}
;;;69      
                          ENDP

                  |L4.48|
                          DCD      ||RED||

                          AREA ||i.RGB_SendArray||, CODE, READONLY, ALIGN=2

                  RGB_SendArray PROC
;;;49     */
;;;50     void RGB_SendArray(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52     	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t *)Pixel_Buf,(Pixel_NUM+1)*24);
000002  2330              MOVS     r3,#0x30
000004  4a02              LDR      r2,|L5.16|
000006  2100              MOVS     r1,#0
000008  4802              LDR      r0,|L5.20|
00000a  f7fffffe          BL       HAL_TIM_PWM_Start_DMA
;;;53     }
00000e  bd10              POP      {r4,pc}
;;;54      
                          ENDP

                  |L5.16|
                          DCD      Pixel_Buf
                  |L5.20|
                          DCD      htim4

                          AREA ||i.RGB_SetColor||, CODE, READONLY, ALIGN=2

                  RGB_SetColor PROC
;;;22     */
;;;23     void RGB_SetColor(uint8_t LedId,RGB_Color_TypeDef Color)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;24     {
000002  4602              MOV      r2,r0
;;;25     	uint8_t i; 
;;;26     	if(LedId > Pixel_NUM)return; //avoid overflow 防止写入ID大于LED总数
000004  2a01              CMP      r2,#1
000006  dd00              BLE      |L6.10|
                  |L6.8|
;;;27     	
;;;28     	for(i=0;i<8;i++) Pixel_Buf[LedId][i]   = ( (Color.G & (1 << (7 -i)))? (CODE_1):CODE_0 );//数组某一行0~7转化存放G
;;;29     	for(i=8;i<16;i++) Pixel_Buf[LedId][i]  = ( (Color.R & (1 << (15-i)))? (CODE_1):CODE_0 );//数组某一行8~15转化存放R
;;;30     	for(i=16;i<24;i++) Pixel_Buf[LedId][i] = ( (Color.B & (1 << (23-i)))? (CODE_1):CODE_0 );//数组某一行16~23转化存放B
;;;31     }
000008  bd1c              POP      {r2-r4,pc}
                  |L6.10|
00000a  2000              MOVS     r0,#0                 ;28
00000c  e013              B        |L6.54|
                  |L6.14|
00000e  f89d1005          LDRB     r1,[sp,#5]            ;28
000012  f1c00407          RSB      r4,r0,#7              ;28
000016  2301              MOVS     r3,#1                 ;28
000018  40a3              LSLS     r3,r3,r4              ;28
00001a  4019              ANDS     r1,r1,r3              ;28
00001c  b109              CBZ      r1,|L6.34|
00001e  213a              MOVS     r1,#0x3a              ;28
000020  e000              B        |L6.36|
                  |L6.34|
000022  2119              MOVS     r1,#0x19              ;28
                  |L6.36|
000024  eb020342          ADD      r3,r2,r2,LSL #1       ;28
000028  4c1d              LDR      r4,|L6.160|
00002a  eb041343          ADD      r3,r4,r3,LSL #5       ;28
00002e  f8431020          STR      r1,[r3,r0,LSL #2]     ;28
000032  1c41              ADDS     r1,r0,#1              ;28
000034  b2c8              UXTB     r0,r1                 ;28
                  |L6.54|
000036  2808              CMP      r0,#8                 ;28
000038  dbe9              BLT      |L6.14|
00003a  2008              MOVS     r0,#8                 ;29
00003c  e013              B        |L6.102|
                  |L6.62|
00003e  f89d1004          LDRB     r1,[sp,#4]            ;29
000042  f1c0040f          RSB      r4,r0,#0xf            ;29
000046  2301              MOVS     r3,#1                 ;29
000048  40a3              LSLS     r3,r3,r4              ;29
00004a  4019              ANDS     r1,r1,r3              ;29
00004c  b109              CBZ      r1,|L6.82|
00004e  213a              MOVS     r1,#0x3a              ;29
000050  e000              B        |L6.84|
                  |L6.82|
000052  2119              MOVS     r1,#0x19              ;29
                  |L6.84|
000054  eb020342          ADD      r3,r2,r2,LSL #1       ;29
000058  4c11              LDR      r4,|L6.160|
00005a  eb041343          ADD      r3,r4,r3,LSL #5       ;29
00005e  f8431020          STR      r1,[r3,r0,LSL #2]     ;29
000062  1c41              ADDS     r1,r0,#1              ;29
000064  b2c8              UXTB     r0,r1                 ;29
                  |L6.102|
000066  2810              CMP      r0,#0x10              ;29
000068  dbe9              BLT      |L6.62|
00006a  2010              MOVS     r0,#0x10              ;30
00006c  e013              B        |L6.150|
                  |L6.110|
00006e  f89d1006          LDRB     r1,[sp,#6]            ;30
000072  f1c00417          RSB      r4,r0,#0x17           ;30
000076  2301              MOVS     r3,#1                 ;30
000078  40a3              LSLS     r3,r3,r4              ;30
00007a  4019              ANDS     r1,r1,r3              ;30
00007c  b109              CBZ      r1,|L6.130|
00007e  213a              MOVS     r1,#0x3a              ;30
000080  e000              B        |L6.132|
                  |L6.130|
000082  2119              MOVS     r1,#0x19              ;30
                  |L6.132|
000084  eb020342          ADD      r3,r2,r2,LSL #1       ;30
000088  4c05              LDR      r4,|L6.160|
00008a  eb041343          ADD      r3,r4,r3,LSL #5       ;30
00008e  f8431020          STR      r1,[r3,r0,LSL #2]     ;30
000092  1c41              ADDS     r1,r0,#1              ;30
000094  b2c8              UXTB     r0,r1                 ;30
                  |L6.150|
000096  2818              CMP      r0,#0x18              ;30
000098  dbe9              BLT      |L6.110|
00009a  bf00              NOP      
00009c  e7b4              B        |L6.8|
;;;32      
                          ENDP

00009e  0000              DCW      0x0000
                  |L6.160|
                          DCD      Pixel_Buf

                          AREA ||i.RGB_WHITE||, CODE, READONLY, ALIGN=2

                  RGB_WHITE PROC
;;;103    */
;;;104    void RGB_WHITE(uint16_t Pixel_Len)
000000  b538              PUSH     {r3-r5,lr}
;;;105    {
000002  4605              MOV      r5,r0
;;;106    	uint16_t i;
;;;107    	for(i=0;i<Pixel_Len;i++)//给对应个数LED写入白色
000004  2400              MOVS     r4,#0
000006  e00c              B        |L7.34|
                  |L7.8|
;;;108    	{
;;;109    		RGB_SetColor(i,WHITE);
000008  b2e0              UXTB     r0,r4
00000a  4909              LDR      r1,|L7.48|
00000c  880a              LDRH     r2,[r1,#0]  ; WHITE
00000e  f8ad2000          STRH     r2,[sp,#0]
000012  7889              LDRB     r1,[r1,#2]  ; WHITE
000014  f88d1002          STRB     r1,[sp,#2]
000018  9900              LDR      r1,[sp,#0]
00001a  f7fffffe          BL       RGB_SetColor
00001e  1c60              ADDS     r0,r4,#1              ;107
000020  b284              UXTH     r4,r0                 ;107
                  |L7.34|
000022  42ac              CMP      r4,r5                 ;107
000024  dbf0              BLT      |L7.8|
;;;110    	}
;;;111    	Reset_Load();
000026  f7fffffe          BL       Reset_Load
;;;112    	RGB_SendArray();
00002a  f7fffffe          BL       RGB_SendArray
;;;113    }
00002e  bd38              POP      {r3-r5,pc}
;;;114    
                          ENDP

                  |L7.48|
                          DCD      WHITE

                          AREA ||i.Reset_Load||, CODE, READONLY, ALIGN=2

                  Reset_Load PROC
;;;35     */
;;;36     void Reset_Load(void)
000000  2000              MOVS     r0,#0
;;;37     {
;;;38     	uint8_t i;
;;;39     	for(i=0;i<24;i++)
000002  e005              B        |L8.16|
                  |L8.4|
;;;40     	{
;;;41     		Pixel_Buf[Pixel_NUM][i] = 0;
000004  2200              MOVS     r2,#0
000006  4904              LDR      r1,|L8.24|
000008  f8412020          STR      r2,[r1,r0,LSL #2]
00000c  1c41              ADDS     r1,r0,#1              ;39
00000e  b2c8              UXTB     r0,r1                 ;39
                  |L8.16|
000010  2818              CMP      r0,#0x18              ;39
000012  dbf7              BLT      |L8.4|
;;;42     	}
;;;43     }
000014  4770              BX       lr
;;;44      
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      Pixel_Buf+0x60

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Pixel_Buf
                          %        192

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ||RED||
000000  ff0000            DCB      0xff,0x00,0x00
                  GREEN
000003  00                DCB      0x00
000004  ff00              DCB      0xff,0x00
                  BLUE
000006  0000              DCB      0x00,0x00
000008  ff                DCB      0xff
                  ||SKY||
000009  00ffff            DCB      0x00,0xff,0xff
                  MAGENTA
00000c  ff00dc            DCB      0xff,0x00,0xdc
                  YELLOW
00000f  7f                DCB      0x7f
000010  d800              DCB      0xd8,0x00
                  OEANGE
000012  7f6a              DCB      0x7f,0x6a
000014  00                DCB      0x00
                  BLACK
000015  000000            DCB      0x00,0x00,0x00
                  WHITE
000018  ffffff            DCB      0xff,0xff,0xff

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\WS2812B\\ws2812b.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ws2812b_c_RED____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___9_ws2812b_c_RED____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ws2812b_c_RED____REVSH|
#line 478
|__asm___9_ws2812b_c_RED____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_ws2812b_c_RED____RRX|
#line 665
|__asm___9_ws2812b_c_RED____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
