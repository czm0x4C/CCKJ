; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_dma.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_dma.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_dma.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_CalcBaseAndBitshift||, CODE, READONLY, ALIGN=2

                  DMA_CalcBaseAndBitshift PROC
;;;1184     */
;;;1185   static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;1186   {
;;;1187     uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
000002  7808              LDRB     r0,[r1,#0]
000004  3810              SUBS     r0,r0,#0x10
000006  2318              MOVS     r3,#0x18
000008  fbb0f2f3          UDIV     r2,r0,r3
;;;1188     
;;;1189     /* lookup table for necessary bitshift of flags within status registers */
;;;1190     static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
;;;1191     hdma->StreamIndex = flagBitshiftOffset[stream_number];
00000c  4808              LDR      r0,|L1.48|
00000e  5c80              LDRB     r0,[r0,r2]
000010  65c8              STR      r0,[r1,#0x5c]
;;;1192     
;;;1193     if (stream_number > 3U)
000012  2a03              CMP      r2,#3
000014  d905              BLS      |L1.34|
;;;1194     {
;;;1195       /* return pointer to HISR and HIFCR */
;;;1196       hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
000016  6808              LDR      r0,[r1,#0]
000018  f36f0009          BFC      r0,#0,#10
00001c  1d00              ADDS     r0,r0,#4
00001e  6588              STR      r0,[r1,#0x58]
000020  e003              B        |L1.42|
                  |L1.34|
;;;1197     }
;;;1198     else
;;;1199     {
;;;1200       /* return pointer to LISR and LIFCR */
;;;1201       hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
000022  6808              LDR      r0,[r1,#0]
000024  f36f0009          BFC      r0,#0,#10
000028  6588              STR      r0,[r1,#0x58]
                  |L1.42|
;;;1202     }
;;;1203     
;;;1204     return hdma->StreamBaseAddress;
00002a  6d88              LDR      r0,[r1,#0x58]
;;;1205   }
00002c  4770              BX       lr
;;;1206   
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      flagBitshiftOffset

                          AREA ||i.DMA_CheckFifoParam||, CODE, READONLY, ALIGN=1

                  DMA_CheckFifoParam PROC
;;;1212     */
;;;1213   static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;1214   {
;;;1215     HAL_StatusTypeDef status = HAL_OK;
000002  2000              MOVS     r0,#0
;;;1216     uint32_t tmp = hdma->Init.FIFOThreshold;
000004  6a8a              LDR      r2,[r1,#0x28]
;;;1217     
;;;1218     /* Memory Data size equal to Byte */
;;;1219     if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
000006  698b              LDR      r3,[r1,#0x18]
000008  b9cb              CBNZ     r3,|L2.62|
;;;1220     {
;;;1221       switch (tmp)
00000a  b132              CBZ      r2,|L2.26|
00000c  2a01              CMP      r2,#1
00000e  d00d              BEQ      |L2.44|
000010  2a02              CMP      r2,#2
000012  d003              BEQ      |L2.28|
000014  2a03              CMP      r2,#3
000016  d110              BNE      |L2.58|
000018  e00e              B        |L2.56|
                  |L2.26|
;;;1222       {
;;;1223       case DMA_FIFO_THRESHOLD_1QUARTERFULL:
;;;1224       case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
00001a  bf00              NOP      
                  |L2.28|
;;;1225         if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
00001c  6acb              LDR      r3,[r1,#0x2c]
00001e  f0037380          AND      r3,r3,#0x1000000
000022  f1b37f80          CMP      r3,#0x1000000
000026  d100              BNE      |L2.42|
;;;1226         {
;;;1227           status = HAL_ERROR;
000028  2001              MOVS     r0,#1
                  |L2.42|
;;;1228         }
;;;1229         break;
00002a  e007              B        |L2.60|
                  |L2.44|
;;;1230       case DMA_FIFO_THRESHOLD_HALFFULL:
;;;1231         if (hdma->Init.MemBurst == DMA_MBURST_INC16)
00002c  6acb              LDR      r3,[r1,#0x2c]
00002e  f1b37fc0          CMP      r3,#0x1800000
000032  d100              BNE      |L2.54|
;;;1232         {
;;;1233           status = HAL_ERROR;
000034  2001              MOVS     r0,#1
                  |L2.54|
;;;1234         }
;;;1235         break;
000036  e001              B        |L2.60|
                  |L2.56|
;;;1236       case DMA_FIFO_THRESHOLD_FULL:
;;;1237         break;
000038  e000              B        |L2.60|
                  |L2.58|
;;;1238       default:
;;;1239         break;
00003a  bf00              NOP      
                  |L2.60|
00003c  e034              B        |L2.168|
                  |L2.62|
;;;1240       }
;;;1241     }
;;;1242     
;;;1243     /* Memory Data size equal to Half-Word */
;;;1244     else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
00003e  698b              LDR      r3,[r1,#0x18]
000040  f5b35f00          CMP      r3,#0x2000
000044  d11a              BNE      |L2.124|
;;;1245     {
;;;1246       switch (tmp)
000046  b132              CBZ      r2,|L2.86|
000048  2a01              CMP      r2,#1
00004a  d007              BEQ      |L2.92|
00004c  2a02              CMP      r2,#2
00004e  d003              BEQ      |L2.88|
000050  2a03              CMP      r2,#3
000052  d111              BNE      |L2.120|
000054  e00a              B        |L2.108|
                  |L2.86|
;;;1247       {
;;;1248       case DMA_FIFO_THRESHOLD_1QUARTERFULL:
;;;1249       case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
000056  bf00              NOP      
                  |L2.88|
;;;1250         status = HAL_ERROR;
000058  2001              MOVS     r0,#1
;;;1251         break;
00005a  e00e              B        |L2.122|
                  |L2.92|
;;;1252       case DMA_FIFO_THRESHOLD_HALFFULL:
;;;1253         if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
00005c  6acb              LDR      r3,[r1,#0x2c]
00005e  f0037380          AND      r3,r3,#0x1000000
000062  f1b37f80          CMP      r3,#0x1000000
000066  d100              BNE      |L2.106|
;;;1254         {
;;;1255           status = HAL_ERROR;
000068  2001              MOVS     r0,#1
                  |L2.106|
;;;1256         }
;;;1257         break;
00006a  e006              B        |L2.122|
                  |L2.108|
;;;1258       case DMA_FIFO_THRESHOLD_FULL:
;;;1259         if (hdma->Init.MemBurst == DMA_MBURST_INC16)
00006c  6acb              LDR      r3,[r1,#0x2c]
00006e  f1b37fc0          CMP      r3,#0x1800000
000072  d100              BNE      |L2.118|
;;;1260         {
;;;1261           status = HAL_ERROR;
000074  2001              MOVS     r0,#1
                  |L2.118|
;;;1262         }
;;;1263         break;   
000076  e000              B        |L2.122|
                  |L2.120|
;;;1264       default:
;;;1265         break;
000078  bf00              NOP      
                  |L2.122|
00007a  e015              B        |L2.168|
                  |L2.124|
;;;1266       }
;;;1267     }
;;;1268     
;;;1269     /* Memory Data size equal to Word */
;;;1270     else
;;;1271     {
;;;1272       switch (tmp)
00007c  b132              CBZ      r2,|L2.140|
00007e  2a01              CMP      r2,#1
000080  d005              BEQ      |L2.142|
000082  2a02              CMP      r2,#2
000084  d004              BEQ      |L2.144|
000086  2a03              CMP      r2,#3
000088  d10c              BNE      |L2.164|
00008a  e003              B        |L2.148|
                  |L2.140|
;;;1273       {
;;;1274       case DMA_FIFO_THRESHOLD_1QUARTERFULL:
;;;1275       case DMA_FIFO_THRESHOLD_HALFFULL:
00008c  bf00              NOP      
                  |L2.142|
;;;1276       case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
00008e  bf00              NOP      
                  |L2.144|
;;;1277         status = HAL_ERROR;
000090  2001              MOVS     r0,#1
;;;1278         break;
000092  e008              B        |L2.166|
                  |L2.148|
;;;1279       case DMA_FIFO_THRESHOLD_FULL:
;;;1280         if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
000094  6acb              LDR      r3,[r1,#0x2c]
000096  f0037380          AND      r3,r3,#0x1000000
00009a  f1b37f80          CMP      r3,#0x1000000
00009e  d100              BNE      |L2.162|
;;;1281         {
;;;1282           status = HAL_ERROR;
0000a0  2001              MOVS     r0,#1
                  |L2.162|
;;;1283         }
;;;1284         break;
0000a2  e000              B        |L2.166|
                  |L2.164|
;;;1285       default:
;;;1286         break;
0000a4  bf00              NOP      
                  |L2.166|
0000a6  bf00              NOP                            ;1278
                  |L2.168|
;;;1287       }
;;;1288     } 
;;;1289     
;;;1290     return status; 
;;;1291   }
0000a8  4770              BX       lr
;;;1292   
                          ENDP


                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;1150     */
;;;1151   static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;1152   {
;;;1153     /* Clear DBM bit */
;;;1154     hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
000002  6804              LDR      r4,[r0,#0]
000004  6824              LDR      r4,[r4,#0]
000006  f4242480          BIC      r4,r4,#0x40000
00000a  6805              LDR      r5,[r0,#0]
00000c  602c              STR      r4,[r5,#0]
;;;1155   
;;;1156     /* Configure DMA Stream data length */
;;;1157     hdma->Instance->NDTR = DataLength;
00000e  6804              LDR      r4,[r0,#0]
000010  6063              STR      r3,[r4,#4]
;;;1158   
;;;1159     /* Memory to Peripheral */
;;;1160     if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000012  6884              LDR      r4,[r0,#8]
000014  2c40              CMP      r4,#0x40
000016  d104              BNE      |L3.34|
;;;1161     {
;;;1162       /* Configure DMA Stream destination address */
;;;1163       hdma->Instance->PAR = DstAddress;
000018  6804              LDR      r4,[r0,#0]
00001a  60a2              STR      r2,[r4,#8]
;;;1164   
;;;1165       /* Configure DMA Stream source address */
;;;1166       hdma->Instance->M0AR = SrcAddress;
00001c  6804              LDR      r4,[r0,#0]
00001e  60e1              STR      r1,[r4,#0xc]
000020  e003              B        |L3.42|
                  |L3.34|
;;;1167     }
;;;1168     /* Peripheral to Memory */
;;;1169     else
;;;1170     {
;;;1171       /* Configure DMA Stream source address */
;;;1172       hdma->Instance->PAR = SrcAddress;
000022  6804              LDR      r4,[r0,#0]
000024  60a1              STR      r1,[r4,#8]
;;;1173   
;;;1174       /* Configure DMA Stream destination address */
;;;1175       hdma->Instance->M0AR = DstAddress;
000026  6804              LDR      r4,[r0,#0]
000028  60e2              STR      r2,[r4,#0xc]
                  |L3.42|
;;;1176     }
;;;1177   }
00002a  bd30              POP      {r4,r5,pc}
;;;1178   
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;512      */
;;;513    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;514    {
000002  4604              MOV      r4,r0
;;;515      /* calculate DMA base and stream number */
;;;516      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
000004  6da5              LDR      r5,[r4,#0x58]
;;;517      
;;;518      uint32_t tickstart = HAL_GetTick();
000006  f7fffffe          BL       HAL_GetTick
00000a  4606              MOV      r6,r0
;;;519      
;;;520      if(hdma->State != HAL_DMA_STATE_BUSY)
00000c  f8940035          LDRB     r0,[r4,#0x35]
000010  2802              CMP      r0,#2
000012  d008              BEQ      |L4.38|
;;;521      {
;;;522        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000014  2080              MOVS     r0,#0x80
000016  6560              STR      r0,[r4,#0x54]
;;;523        
;;;524        /* Process Unlocked */
;;;525        __HAL_UNLOCK(hdma);
000018  bf00              NOP      
00001a  2000              MOVS     r0,#0
00001c  f8840034          STRB     r0,[r4,#0x34]
000020  bf00              NOP      
;;;526        
;;;527        return HAL_ERROR;
000022  2001              MOVS     r0,#1
                  |L4.36|
;;;528      }
;;;529      else
;;;530      {
;;;531        /* Disable all the transfer interrupts */
;;;532        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
;;;533        hdma->Instance->FCR &= ~(DMA_IT_FE);
;;;534        
;;;535        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
;;;536        {
;;;537          hdma->Instance->CR  &= ~(DMA_IT_HT);
;;;538        }
;;;539        
;;;540        /* Disable the stream */
;;;541        __HAL_DMA_DISABLE(hdma);
;;;542        
;;;543        /* Check if the DMA Stream is effectively disabled */
;;;544        while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
;;;545        {
;;;546          /* Check for the Timeout */
;;;547          if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
;;;548          {
;;;549            /* Update error code */
;;;550            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;551            
;;;552            /* Change the DMA state */
;;;553            hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;554            
;;;555            /* Process Unlocked */
;;;556            __HAL_UNLOCK(hdma);
;;;557            
;;;558            return HAL_TIMEOUT;
;;;559          }
;;;560        }
;;;561        
;;;562        /* Clear all interrupt flags at correct offset within the register */
;;;563        regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;564        
;;;565        /* Change the DMA state*/
;;;566        hdma->State = HAL_DMA_STATE_READY;
;;;567        
;;;568        /* Process Unlocked */
;;;569        __HAL_UNLOCK(hdma);
;;;570      }
;;;571      return HAL_OK;
;;;572    }
000024  bd70              POP      {r4-r6,pc}
                  |L4.38|
000026  6820              LDR      r0,[r4,#0]            ;532
000028  6800              LDR      r0,[r0,#0]            ;532
00002a  f0200016          BIC      r0,r0,#0x16           ;532
00002e  6821              LDR      r1,[r4,#0]            ;532
000030  6008              STR      r0,[r1,#0]            ;532
000032  6820              LDR      r0,[r4,#0]            ;533
000034  6940              LDR      r0,[r0,#0x14]         ;533
000036  f0200080          BIC      r0,r0,#0x80           ;533
00003a  6821              LDR      r1,[r4,#0]            ;533
00003c  6148              STR      r0,[r1,#0x14]         ;533
00003e  6c20              LDR      r0,[r4,#0x40]         ;535
000040  b908              CBNZ     r0,|L4.70|
000042  6ca0              LDR      r0,[r4,#0x48]         ;535
000044  b128              CBZ      r0,|L4.82|
                  |L4.70|
000046  6820              LDR      r0,[r4,#0]            ;537
000048  6800              LDR      r0,[r0,#0]            ;537
00004a  f0200008          BIC      r0,r0,#8              ;537
00004e  6821              LDR      r1,[r4,#0]            ;537
000050  6008              STR      r0,[r1,#0]            ;537
                  |L4.82|
000052  6820              LDR      r0,[r4,#0]            ;541
000054  6800              LDR      r0,[r0,#0]            ;541
000056  f0200001          BIC      r0,r0,#1              ;541
00005a  6821              LDR      r1,[r4,#0]            ;541
00005c  6008              STR      r0,[r1,#0]            ;541
00005e  e010              B        |L4.130|
                  |L4.96|
000060  f7fffffe          BL       HAL_GetTick
000064  1b80              SUBS     r0,r0,r6              ;547
000066  2805              CMP      r0,#5                 ;547
000068  d90b              BLS      |L4.130|
00006a  2020              MOVS     r0,#0x20              ;550
00006c  6560              STR      r0,[r4,#0x54]         ;550
00006e  2003              MOVS     r0,#3                 ;553
000070  f8840035          STRB     r0,[r4,#0x35]         ;553
000074  bf00              NOP                            ;556
000076  2000              MOVS     r0,#0                 ;556
000078  f8840034          STRB     r0,[r4,#0x34]         ;556
00007c  bf00              NOP                            ;556
00007e  2003              MOVS     r0,#3                 ;558
000080  e7d0              B        |L4.36|
                  |L4.130|
000082  6820              LDR      r0,[r4,#0]            ;544
000084  6800              LDR      r0,[r0,#0]            ;544
000086  f0000001          AND      r0,r0,#1              ;544
00008a  2800              CMP      r0,#0                 ;544
00008c  d1e8              BNE      |L4.96|
00008e  f894105c          LDRB     r1,[r4,#0x5c]         ;563
000092  203f              MOVS     r0,#0x3f              ;563
000094  4088              LSLS     r0,r0,r1              ;563
000096  60a8              STR      r0,[r5,#8]            ;563
000098  2001              MOVS     r0,#1                 ;566
00009a  f8840035          STRB     r0,[r4,#0x35]         ;566
00009e  bf00              NOP                            ;569
0000a0  2000              MOVS     r0,#0                 ;569
0000a2  f8840034          STRB     r0,[r4,#0x34]         ;569
0000a6  bf00              NOP                            ;569
0000a8  bf00              NOP                            ;571
0000aa  e7bb              B        |L4.36|
;;;573    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort_IT PROC
;;;579      */
;;;580    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;581    {
;;;582      if(hdma->State != HAL_DMA_STATE_BUSY)
000002  f8910035          LDRB     r0,[r1,#0x35]
000006  2802              CMP      r0,#2
000008  d003              BEQ      |L5.18|
;;;583      {
;;;584        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000a  2080              MOVS     r0,#0x80
00000c  6548              STR      r0,[r1,#0x54]
;;;585        return HAL_ERROR;
00000e  2001              MOVS     r0,#1
                  |L5.16|
;;;586      }
;;;587      else
;;;588      {
;;;589        /* Set Abort State  */
;;;590        hdma->State = HAL_DMA_STATE_ABORT;
;;;591        
;;;592        /* Disable the stream */
;;;593        __HAL_DMA_DISABLE(hdma);
;;;594      }
;;;595    
;;;596      return HAL_OK;
;;;597    }
000010  4770              BX       lr
                  |L5.18|
000012  2005              MOVS     r0,#5                 ;590
000014  f8810035          STRB     r0,[r1,#0x35]         ;590
000018  6808              LDR      r0,[r1,#0]            ;593
00001a  6800              LDR      r0,[r0,#0]            ;593
00001c  f0200001          BIC      r0,r0,#1              ;593
000020  680a              LDR      r2,[r1,#0]            ;593
000022  6010              STR      r0,[r2,#0]            ;593
000024  2000              MOVS     r0,#0                 ;596
000026  e7f3              B        |L5.16|
;;;598    
                          ENDP


                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_DMA_DeInit PROC
;;;308      */
;;;309    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;310    {
000002  4604              MOV      r4,r0
;;;311      DMA_Base_Registers *regs;
;;;312    
;;;313      /* Check the DMA peripheral state */
;;;314      if(hdma == NULL)
000004  b90c              CBNZ     r4,|L6.10|
;;;315      {
;;;316        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L6.8|
;;;317      }
;;;318      
;;;319      /* Check the DMA peripheral state */
;;;320      if(hdma->State == HAL_DMA_STATE_BUSY)
;;;321      {
;;;322        /* Return error status */
;;;323        return HAL_BUSY;
;;;324      }
;;;325    
;;;326      /* Check the parameters */
;;;327      assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
;;;328    
;;;329      /* Disable the selected DMA Streamx */
;;;330      __HAL_DMA_DISABLE(hdma);
;;;331    
;;;332      /* Reset DMA Streamx control register */
;;;333      hdma->Instance->CR   = 0U;
;;;334    
;;;335      /* Reset DMA Streamx number of data to transfer register */
;;;336      hdma->Instance->NDTR = 0U;
;;;337    
;;;338      /* Reset DMA Streamx peripheral address register */
;;;339      hdma->Instance->PAR  = 0U;
;;;340    
;;;341      /* Reset DMA Streamx memory 0 address register */
;;;342      hdma->Instance->M0AR = 0U;
;;;343      
;;;344      /* Reset DMA Streamx memory 1 address register */
;;;345      hdma->Instance->M1AR = 0U;
;;;346      
;;;347      /* Reset DMA Streamx FIFO control register */
;;;348      hdma->Instance->FCR  = 0x00000021U;
;;;349      
;;;350      /* Get DMA steam Base Address */  
;;;351      regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
;;;352      
;;;353      /* Clean all callbacks */
;;;354      hdma->XferCpltCallback = NULL;
;;;355      hdma->XferHalfCpltCallback = NULL;
;;;356      hdma->XferM1CpltCallback = NULL;
;;;357      hdma->XferM1HalfCpltCallback = NULL;
;;;358      hdma->XferErrorCallback = NULL;
;;;359      hdma->XferAbortCallback = NULL;
;;;360    
;;;361      /* Clear all interrupt flags at correct offset within the register */
;;;362      regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;363    
;;;364      /* Reset the error code */
;;;365      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;366    
;;;367      /* Reset the DMA state */
;;;368      hdma->State = HAL_DMA_STATE_RESET;
;;;369    
;;;370      /* Release Lock */
;;;371      __HAL_UNLOCK(hdma);
;;;372    
;;;373      return HAL_OK;
;;;374    }
000008  bd70              POP      {r4-r6,pc}
                  |L6.10|
00000a  f8940035          LDRB     r0,[r4,#0x35]         ;320
00000e  2802              CMP      r0,#2                 ;320
000010  d100              BNE      |L6.20|
000012  e7f9              B        |L6.8|
                  |L6.20|
000014  6820              LDR      r0,[r4,#0]            ;330
000016  6800              LDR      r0,[r0,#0]            ;330
000018  f0200001          BIC      r0,r0,#1              ;330
00001c  6821              LDR      r1,[r4,#0]            ;330
00001e  6008              STR      r0,[r1,#0]            ;330
000020  2000              MOVS     r0,#0                 ;333
000022  6821              LDR      r1,[r4,#0]            ;333
000024  6008              STR      r0,[r1,#0]            ;333
000026  6821              LDR      r1,[r4,#0]            ;336
000028  6048              STR      r0,[r1,#4]            ;336
00002a  6821              LDR      r1,[r4,#0]            ;339
00002c  6088              STR      r0,[r1,#8]            ;339
00002e  6821              LDR      r1,[r4,#0]            ;342
000030  60c8              STR      r0,[r1,#0xc]          ;342
000032  6821              LDR      r1,[r4,#0]            ;345
000034  6108              STR      r0,[r1,#0x10]         ;345
000036  2021              MOVS     r0,#0x21              ;348
000038  6821              LDR      r1,[r4,#0]            ;348
00003a  6148              STR      r0,[r1,#0x14]         ;348
00003c  4620              MOV      r0,r4                 ;351
00003e  f7fffffe          BL       DMA_CalcBaseAndBitshift
000042  4605              MOV      r5,r0                 ;351
000044  2000              MOVS     r0,#0                 ;354
000046  63e0              STR      r0,[r4,#0x3c]         ;354
000048  6420              STR      r0,[r4,#0x40]         ;355
00004a  6460              STR      r0,[r4,#0x44]         ;356
00004c  64a0              STR      r0,[r4,#0x48]         ;357
00004e  64e0              STR      r0,[r4,#0x4c]         ;358
000050  6520              STR      r0,[r4,#0x50]         ;359
000052  f894105c          LDRB     r1,[r4,#0x5c]         ;362
000056  203f              MOVS     r0,#0x3f              ;362
000058  4088              LSLS     r0,r0,r1              ;362
00005a  60a8              STR      r0,[r5,#8]            ;362
00005c  2000              MOVS     r0,#0                 ;365
00005e  6560              STR      r0,[r4,#0x54]         ;365
000060  f8840035          STRB     r0,[r4,#0x35]         ;368
000064  bf00              NOP                            ;371
000066  f8840034          STRB     r0,[r4,#0x34]         ;371
00006a  bf00              NOP                            ;371
00006c  bf00              NOP                            ;373
00006e  e7cb              B        |L6.8|
;;;375    
                          ENDP


                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;1124     */
;;;1125   uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;1126   {
;;;1127     return hdma->ErrorCode;
000002  6d48              LDR      r0,[r1,#0x54]
;;;1128   }
000004  4770              BX       lr
;;;1129   
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;1113     */
;;;1114   HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  4601              MOV      r1,r0
;;;1115   {
;;;1116     return hdma->State;
000002  f8910035          LDRB     r0,[r1,#0x35]
;;;1117   }
000006  4770              BX       lr
;;;1118   
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;745      */
;;;746    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  b5f8              PUSH     {r3-r7,lr}
;;;747    {
000002  4604              MOV      r4,r0
;;;748      uint32_t tmpisr;
;;;749      __IO uint32_t count = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;750      uint32_t timeout = SystemCoreClock / 9600U;
000008  488c              LDR      r0,|L9.572|
00000a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000c  f44f5116          MOV      r1,#0x2580
000010  fbb0f7f1          UDIV     r7,r0,r1
;;;751    
;;;752      /* calculate DMA base and stream number */
;;;753      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
000014  6da5              LDR      r5,[r4,#0x58]
;;;754    
;;;755      tmpisr = regs->ISR;
000016  682e              LDR      r6,[r5,#0]
;;;756    
;;;757      /* Transfer Error Interrupt management ***************************************/
;;;758      if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
000018  f894105c          LDRB     r1,[r4,#0x5c]
00001c  2008              MOVS     r0,#8
00001e  4088              LSLS     r0,r0,r1
000020  4030              ANDS     r0,r0,r6
000022  b198              CBZ      r0,|L9.76|
;;;759      {
;;;760        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
000024  6820              LDR      r0,[r4,#0]
000026  6800              LDR      r0,[r0,#0]
000028  f0000004          AND      r0,r0,#4
00002c  b170              CBZ      r0,|L9.76|
;;;761        {
;;;762          /* Disable the transfer error interrupt */
;;;763          hdma->Instance->CR  &= ~(DMA_IT_TE);
00002e  6820              LDR      r0,[r4,#0]
000030  6800              LDR      r0,[r0,#0]
000032  f0200004          BIC      r0,r0,#4
000036  6821              LDR      r1,[r4,#0]
000038  6008              STR      r0,[r1,#0]
;;;764          
;;;765          /* Clear the transfer error flag */
;;;766          regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
00003a  f894105c          LDRB     r1,[r4,#0x5c]
00003e  2008              MOVS     r0,#8
000040  4088              LSLS     r0,r0,r1
000042  60a8              STR      r0,[r5,#8]
;;;767          
;;;768          /* Update error code */
;;;769          hdma->ErrorCode |= HAL_DMA_ERROR_TE;
000044  6d60              LDR      r0,[r4,#0x54]
000046  f0400001          ORR      r0,r0,#1
00004a  6560              STR      r0,[r4,#0x54]
                  |L9.76|
;;;770        }
;;;771      }
;;;772      /* FIFO Error Interrupt management ******************************************/
;;;773      if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
00004c  f894105c          LDRB     r1,[r4,#0x5c]
000050  2001              MOVS     r0,#1
000052  4088              LSLS     r0,r0,r1
000054  4030              ANDS     r0,r0,r6
000056  b168              CBZ      r0,|L9.116|
;;;774      {
;;;775        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
000058  6820              LDR      r0,[r4,#0]
00005a  6940              LDR      r0,[r0,#0x14]
00005c  f0000080          AND      r0,r0,#0x80
000060  b140              CBZ      r0,|L9.116|
;;;776        {
;;;777          /* Clear the FIFO error flag */
;;;778          regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
000062  f894105c          LDRB     r1,[r4,#0x5c]
000066  2001              MOVS     r0,#1
000068  4088              LSLS     r0,r0,r1
00006a  60a8              STR      r0,[r5,#8]
;;;779    
;;;780          /* Update error code */
;;;781          hdma->ErrorCode |= HAL_DMA_ERROR_FE;
00006c  6d60              LDR      r0,[r4,#0x54]
00006e  f0400002          ORR      r0,r0,#2
000072  6560              STR      r0,[r4,#0x54]
                  |L9.116|
;;;782        }
;;;783      }
;;;784      /* Direct Mode Error Interrupt management ***********************************/
;;;785      if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
000074  f894105c          LDRB     r1,[r4,#0x5c]
000078  2004              MOVS     r0,#4
00007a  4088              LSLS     r0,r0,r1
00007c  4030              ANDS     r0,r0,r6
00007e  b168              CBZ      r0,|L9.156|
;;;786      {
;;;787        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
000080  6820              LDR      r0,[r4,#0]
000082  6800              LDR      r0,[r0,#0]
000084  f0000002          AND      r0,r0,#2
000088  b140              CBZ      r0,|L9.156|
;;;788        {
;;;789          /* Clear the direct mode error flag */
;;;790          regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
00008a  f894105c          LDRB     r1,[r4,#0x5c]
00008e  2004              MOVS     r0,#4
000090  4088              LSLS     r0,r0,r1
000092  60a8              STR      r0,[r5,#8]
;;;791    
;;;792          /* Update error code */
;;;793          hdma->ErrorCode |= HAL_DMA_ERROR_DME;
000094  6d60              LDR      r0,[r4,#0x54]
000096  f0400004          ORR      r0,r0,#4
00009a  6560              STR      r0,[r4,#0x54]
                  |L9.156|
;;;794        }
;;;795      }
;;;796      /* Half Transfer Complete Interrupt management ******************************/
;;;797      if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
00009c  f894105c          LDRB     r1,[r4,#0x5c]
0000a0  2010              MOVS     r0,#0x10
0000a2  4088              LSLS     r0,r0,r1
0000a4  4030              ANDS     r0,r0,r6
0000a6  b378              CBZ      r0,|L9.264|
;;;798      {
;;;799        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
0000a8  6820              LDR      r0,[r4,#0]
0000aa  6800              LDR      r0,[r0,#0]
0000ac  f0000008          AND      r0,r0,#8
0000b0  b350              CBZ      r0,|L9.264|
;;;800        {
;;;801          /* Clear the half transfer complete flag */
;;;802          regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
0000b2  f894105c          LDRB     r1,[r4,#0x5c]
0000b6  2010              MOVS     r0,#0x10
0000b8  4088              LSLS     r0,r0,r1
0000ba  60a8              STR      r0,[r5,#8]
;;;803          
;;;804          /* Multi_Buffering mode enabled */
;;;805          if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
0000bc  6820              LDR      r0,[r4,#0]
0000be  6800              LDR      r0,[r0,#0]
0000c0  f4002080          AND      r0,r0,#0x40000
0000c4  b180              CBZ      r0,|L9.232|
;;;806          {
;;;807            /* Current memory buffer used is Memory 0 */
;;;808            if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
0000c6  6820              LDR      r0,[r4,#0]
0000c8  6800              LDR      r0,[r0,#0]
0000ca  f4002000          AND      r0,r0,#0x80000
0000ce  b928              CBNZ     r0,|L9.220|
;;;809            {
;;;810              if(hdma->XferHalfCpltCallback != NULL)
0000d0  6c20              LDR      r0,[r4,#0x40]
0000d2  b1c8              CBZ      r0,|L9.264|
;;;811              {
;;;812                /* Half transfer callback */
;;;813                hdma->XferHalfCpltCallback(hdma);
0000d4  4620              MOV      r0,r4
0000d6  6c21              LDR      r1,[r4,#0x40]
0000d8  4788              BLX      r1
0000da  e015              B        |L9.264|
                  |L9.220|
;;;814              }
;;;815            }
;;;816            /* Current memory buffer used is Memory 1 */
;;;817            else
;;;818            {
;;;819              if(hdma->XferM1HalfCpltCallback != NULL)
0000dc  6ca0              LDR      r0,[r4,#0x48]
0000de  b198              CBZ      r0,|L9.264|
;;;820              {
;;;821                /* Half transfer callback */
;;;822                hdma->XferM1HalfCpltCallback(hdma);
0000e0  4620              MOV      r0,r4
0000e2  6ca1              LDR      r1,[r4,#0x48]
0000e4  4788              BLX      r1
0000e6  e00f              B        |L9.264|
                  |L9.232|
;;;823              }
;;;824            }
;;;825          }
;;;826          else
;;;827          {
;;;828            /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;829            if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
0000e8  6820              LDR      r0,[r4,#0]
0000ea  6800              LDR      r0,[r0,#0]
0000ec  f4007080          AND      r0,r0,#0x100
0000f0  b928              CBNZ     r0,|L9.254|
;;;830            {
;;;831              /* Disable the half transfer interrupt */
;;;832              hdma->Instance->CR  &= ~(DMA_IT_HT);
0000f2  6820              LDR      r0,[r4,#0]
0000f4  6800              LDR      r0,[r0,#0]
0000f6  f0200008          BIC      r0,r0,#8
0000fa  6821              LDR      r1,[r4,#0]
0000fc  6008              STR      r0,[r1,#0]
                  |L9.254|
;;;833            }
;;;834            
;;;835            if(hdma->XferHalfCpltCallback != NULL)
0000fe  6c20              LDR      r0,[r4,#0x40]
000100  b110              CBZ      r0,|L9.264|
;;;836            {
;;;837              /* Half transfer callback */
;;;838              hdma->XferHalfCpltCallback(hdma);
000102  4620              MOV      r0,r4
000104  6c21              LDR      r1,[r4,#0x40]
000106  4788              BLX      r1
                  |L9.264|
;;;839            }
;;;840          }
;;;841        }
;;;842      }
;;;843      /* Transfer Complete Interrupt management ***********************************/
;;;844      if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
000108  f894105c          LDRB     r1,[r4,#0x5c]
00010c  2020              MOVS     r0,#0x20
00010e  4088              LSLS     r0,r0,r1
000110  4030              ANDS     r0,r0,r6
000112  2800              CMP      r0,#0
000114  d065              BEQ      |L9.482|
;;;845      {
;;;846        if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
000116  6820              LDR      r0,[r4,#0]
000118  6800              LDR      r0,[r0,#0]
00011a  f0000010          AND      r0,r0,#0x10
00011e  2800              CMP      r0,#0
000120  d05f              BEQ      |L9.482|
;;;847        {
;;;848          /* Clear the transfer complete flag */
;;;849          regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
000122  f894105c          LDRB     r1,[r4,#0x5c]
000126  2020              MOVS     r0,#0x20
000128  4088              LSLS     r0,r0,r1
00012a  60a8              STR      r0,[r5,#8]
;;;850          
;;;851          if(HAL_DMA_STATE_ABORT == hdma->State)
00012c  f8940035          LDRB     r0,[r4,#0x35]
000130  2805              CMP      r0,#5
000132  d128              BNE      |L9.390|
;;;852          {
;;;853            /* Disable all the transfer interrupts */
;;;854            hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
000134  6820              LDR      r0,[r4,#0]
000136  6800              LDR      r0,[r0,#0]
000138  f0200016          BIC      r0,r0,#0x16
00013c  6821              LDR      r1,[r4,#0]
00013e  6008              STR      r0,[r1,#0]
;;;855            hdma->Instance->FCR &= ~(DMA_IT_FE);
000140  6820              LDR      r0,[r4,#0]
000142  6940              LDR      r0,[r0,#0x14]
000144  f0200080          BIC      r0,r0,#0x80
000148  6821              LDR      r1,[r4,#0]
00014a  6148              STR      r0,[r1,#0x14]
;;;856            
;;;857            if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
00014c  6c20              LDR      r0,[r4,#0x40]
00014e  b908              CBNZ     r0,|L9.340|
000150  6ca0              LDR      r0,[r4,#0x48]
000152  b128              CBZ      r0,|L9.352|
                  |L9.340|
;;;858            {
;;;859              hdma->Instance->CR  &= ~(DMA_IT_HT);
000154  6820              LDR      r0,[r4,#0]
000156  6800              LDR      r0,[r0,#0]
000158  f0200008          BIC      r0,r0,#8
00015c  6821              LDR      r1,[r4,#0]
00015e  6008              STR      r0,[r1,#0]
                  |L9.352|
;;;860            }
;;;861    
;;;862            /* Clear all interrupt flags at correct offset within the register */
;;;863            regs->IFCR = 0x3FU << hdma->StreamIndex;
000160  f894105c          LDRB     r1,[r4,#0x5c]
000164  203f              MOVS     r0,#0x3f
000166  4088              LSLS     r0,r0,r1
000168  60a8              STR      r0,[r5,#8]
;;;864    
;;;865            /* Change the DMA state */
;;;866            hdma->State = HAL_DMA_STATE_READY;
00016a  2001              MOVS     r0,#1
00016c  f8840035          STRB     r0,[r4,#0x35]
;;;867    
;;;868            /* Process Unlocked */
;;;869            __HAL_UNLOCK(hdma);
000170  bf00              NOP      
000172  2000              MOVS     r0,#0
000174  f8840034          STRB     r0,[r4,#0x34]
000178  bf00              NOP      
;;;870    
;;;871            if(hdma->XferAbortCallback != NULL)
00017a  6d20              LDR      r0,[r4,#0x50]
00017c  b110              CBZ      r0,|L9.388|
;;;872            {
;;;873              hdma->XferAbortCallback(hdma);
00017e  4620              MOV      r0,r4
000180  6d21              LDR      r1,[r4,#0x50]
000182  4788              BLX      r1
                  |L9.388|
;;;874            }
;;;875            return;
;;;876          }
;;;877    
;;;878          if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
;;;879          {
;;;880            /* Current memory buffer used is Memory 0 */
;;;881            if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
;;;882            {
;;;883              if(hdma->XferM1CpltCallback != NULL)
;;;884              {
;;;885                /* Transfer complete Callback for memory1 */
;;;886                hdma->XferM1CpltCallback(hdma);
;;;887              }
;;;888            }
;;;889            /* Current memory buffer used is Memory 1 */
;;;890            else
;;;891            {
;;;892              if(hdma->XferCpltCallback != NULL)
;;;893              {
;;;894                /* Transfer complete Callback for memory0 */
;;;895                hdma->XferCpltCallback(hdma);
;;;896              }
;;;897            }
;;;898          }
;;;899          /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
;;;900          else
;;;901          {
;;;902            if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
;;;903            {
;;;904              /* Disable the transfer complete interrupt */
;;;905              hdma->Instance->CR  &= ~(DMA_IT_TC);
;;;906    
;;;907              /* Change the DMA state */
;;;908              hdma->State = HAL_DMA_STATE_READY;
;;;909    
;;;910              /* Process Unlocked */
;;;911              __HAL_UNLOCK(hdma);
;;;912            }
;;;913    
;;;914            if(hdma->XferCpltCallback != NULL)
;;;915            {
;;;916              /* Transfer complete callback */
;;;917              hdma->XferCpltCallback(hdma);
;;;918            }
;;;919          }
;;;920        }
;;;921      }
;;;922      
;;;923      /* manage error case */
;;;924      if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
;;;925      {
;;;926        if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
;;;927        {
;;;928          hdma->State = HAL_DMA_STATE_ABORT;
;;;929    
;;;930          /* Disable the stream */
;;;931          __HAL_DMA_DISABLE(hdma);
;;;932    
;;;933          do
;;;934          {
;;;935            if (++count > timeout)
;;;936            {
;;;937              break;
;;;938            }
;;;939          }
;;;940          while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
;;;941    
;;;942          /* Change the DMA state */
;;;943          hdma->State = HAL_DMA_STATE_READY;
;;;944    
;;;945          /* Process Unlocked */
;;;946          __HAL_UNLOCK(hdma);
;;;947        }
;;;948    
;;;949        if(hdma->XferErrorCallback != NULL)
;;;950        {
;;;951          /* Transfer error callback */
;;;952          hdma->XferErrorCallback(hdma);
;;;953        }
;;;954      }
;;;955    }
000184  bdf8              POP      {r3-r7,pc}
                  |L9.390|
000186  6820              LDR      r0,[r4,#0]            ;878
000188  6800              LDR      r0,[r0,#0]            ;878
00018a  f4002080          AND      r0,r0,#0x40000        ;878
00018e  b180              CBZ      r0,|L9.434|
000190  6820              LDR      r0,[r4,#0]            ;881
000192  6800              LDR      r0,[r0,#0]            ;881
000194  f4002000          AND      r0,r0,#0x80000        ;881
000198  b928              CBNZ     r0,|L9.422|
00019a  6c60              LDR      r0,[r4,#0x44]         ;883
00019c  b110              CBZ      r0,|L9.420|
00019e  4620              MOV      r0,r4                 ;886
0001a0  6c61              LDR      r1,[r4,#0x44]         ;886
0001a2  4788              BLX      r1                    ;886
                  |L9.420|
0001a4  e01d              B        |L9.482|
                  |L9.422|
0001a6  6be0              LDR      r0,[r4,#0x3c]         ;892
0001a8  b1d8              CBZ      r0,|L9.482|
0001aa  4620              MOV      r0,r4                 ;895
0001ac  6be1              LDR      r1,[r4,#0x3c]         ;895
0001ae  4788              BLX      r1                    ;895
0001b0  e017              B        |L9.482|
                  |L9.434|
0001b2  6820              LDR      r0,[r4,#0]            ;902
0001b4  6800              LDR      r0,[r0,#0]            ;902
0001b6  f4007080          AND      r0,r0,#0x100          ;902
0001ba  b968              CBNZ     r0,|L9.472|
0001bc  6820              LDR      r0,[r4,#0]            ;905
0001be  6800              LDR      r0,[r0,#0]            ;905
0001c0  f0200010          BIC      r0,r0,#0x10           ;905
0001c4  6821              LDR      r1,[r4,#0]            ;905
0001c6  6008              STR      r0,[r1,#0]            ;905
0001c8  2001              MOVS     r0,#1                 ;908
0001ca  f8840035          STRB     r0,[r4,#0x35]         ;908
0001ce  bf00              NOP                            ;911
0001d0  2000              MOVS     r0,#0                 ;911
0001d2  f8840034          STRB     r0,[r4,#0x34]         ;911
0001d6  bf00              NOP                            ;911
                  |L9.472|
0001d8  6be0              LDR      r0,[r4,#0x3c]         ;914
0001da  b110              CBZ      r0,|L9.482|
0001dc  4620              MOV      r0,r4                 ;917
0001de  6be1              LDR      r1,[r4,#0x3c]         ;917
0001e0  4788              BLX      r1                    ;917
                  |L9.482|
0001e2  6d60              LDR      r0,[r4,#0x54]         ;924
0001e4  b338              CBZ      r0,|L9.566|
0001e6  6d60              LDR      r0,[r4,#0x54]         ;926
0001e8  f0000001          AND      r0,r0,#1              ;926
0001ec  b1f0              CBZ      r0,|L9.556|
0001ee  2005              MOVS     r0,#5                 ;928
0001f0  f8840035          STRB     r0,[r4,#0x35]         ;928
0001f4  6820              LDR      r0,[r4,#0]            ;931
0001f6  6800              LDR      r0,[r0,#0]            ;931
0001f8  f0200001          BIC      r0,r0,#1              ;931
0001fc  6821              LDR      r1,[r4,#0]            ;931
0001fe  6008              STR      r0,[r1,#0]            ;931
000200  bf00              NOP                            ;933
                  |L9.514|
000202  9800              LDR      r0,[sp,#0]            ;935
000204  1c40              ADDS     r0,r0,#1              ;935
000206  9000              STR      r0,[sp,#0]            ;935
000208  42b8              CMP      r0,r7                 ;935
00020a  d900              BLS      |L9.526|
00020c  e005              B        |L9.538|
                  |L9.526|
00020e  6820              LDR      r0,[r4,#0]            ;940
000210  6800              LDR      r0,[r0,#0]            ;940
000212  f0000001          AND      r0,r0,#1              ;940
000216  2800              CMP      r0,#0                 ;940
000218  d1f3              BNE      |L9.514|
                  |L9.538|
00021a  bf00              NOP                            ;937
00021c  2001              MOVS     r0,#1                 ;943
00021e  f8840035          STRB     r0,[r4,#0x35]         ;943
000222  bf00              NOP                            ;946
000224  2000              MOVS     r0,#0                 ;946
000226  f8840034          STRB     r0,[r4,#0x34]         ;946
00022a  bf00              NOP                            ;946
                  |L9.556|
00022c  6ce0              LDR      r0,[r4,#0x4c]         ;949
00022e  b110              CBZ      r0,|L9.566|
000230  4620              MOV      r0,r4                 ;952
000232  6ce1              LDR      r1,[r4,#0x4c]         ;952
000234  4788              BLX      r1                    ;952
                  |L9.566|
000236  bf00              NOP      
000238  e7a4              B        |L9.388|
;;;956    
                          ENDP

00023a  0000              DCW      0x0000
                  |L9.572|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;169      */
;;;170    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;171    {
000004  4604              MOV      r4,r0
;;;172      uint32_t tmp = 0U;
000006  2500              MOVS     r5,#0
;;;173      uint32_t tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4607              MOV      r7,r0
;;;174      DMA_Base_Registers *regs;
;;;175    
;;;176      /* Check the DMA peripheral state */
;;;177      if(hdma == NULL)
00000e  b914              CBNZ     r4,|L10.22|
;;;178      {
;;;179        return HAL_ERROR;
000010  2001              MOVS     r0,#1
                  |L10.18|
;;;180      }
;;;181    
;;;182      /* Check the parameters */
;;;183      assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
;;;184      assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
;;;185      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;186      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;187      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;188      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;189      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;190      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;191      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;192      assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
;;;193      /* Check the memory burst, peripheral burst and FIFO threshold parameters only
;;;194         when FIFO mode is enabled */
;;;195      if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
;;;196      {
;;;197        assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
;;;198        assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
;;;199        assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
;;;200      }
;;;201    
;;;202      /* Change DMA peripheral state */
;;;203      hdma->State = HAL_DMA_STATE_BUSY;
;;;204    
;;;205      /* Allocate lock resource */
;;;206      __HAL_UNLOCK(hdma);
;;;207      
;;;208      /* Disable the peripheral */
;;;209      __HAL_DMA_DISABLE(hdma);
;;;210      
;;;211      /* Check if the DMA Stream is effectively disabled */
;;;212      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
;;;213      {
;;;214        /* Check for the Timeout */
;;;215        if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
;;;216        {
;;;217          /* Update error code */
;;;218          hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;219          
;;;220          /* Change the DMA state */
;;;221          hdma->State = HAL_DMA_STATE_TIMEOUT;
;;;222          
;;;223          return HAL_TIMEOUT;
;;;224        }
;;;225      }
;;;226      
;;;227      /* Get the CR register value */
;;;228      tmp = hdma->Instance->CR;
;;;229    
;;;230      /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
;;;231      tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
;;;232                          DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
;;;233                          DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
;;;234                          DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));
;;;235    
;;;236      /* Prepare the DMA Stream configuration */
;;;237      tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
;;;238              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;239              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;240              hdma->Init.Mode                | hdma->Init.Priority;
;;;241    
;;;242      /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
;;;243      if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
;;;244      {
;;;245        /* Get memory burst and peripheral burst */
;;;246        tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
;;;247      }
;;;248      
;;;249      /* Write to DMA Stream CR register */
;;;250      hdma->Instance->CR = tmp;  
;;;251    
;;;252      /* Get the FCR register value */
;;;253      tmp = hdma->Instance->FCR;
;;;254    
;;;255      /* Clear Direct mode and FIFO threshold bits */
;;;256      tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
;;;257    
;;;258      /* Prepare the DMA Stream FIFO configuration */
;;;259      tmp |= hdma->Init.FIFOMode;
;;;260    
;;;261      /* The FIFO threshold is not used when the FIFO mode is disabled */
;;;262      if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
;;;263      {
;;;264        /* Get the FIFO threshold */
;;;265        tmp |= hdma->Init.FIFOThreshold;
;;;266        
;;;267        /* Check compatibility between FIFO threshold level and size of the memory burst */
;;;268        /* for INCR4, INCR8, INCR16 bursts */
;;;269        if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
;;;270        {
;;;271          if (DMA_CheckFifoParam(hdma) != HAL_OK)
;;;272          {
;;;273            /* Update error code */
;;;274            hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
;;;275            
;;;276            /* Change the DMA state */
;;;277            hdma->State = HAL_DMA_STATE_READY;
;;;278            
;;;279            return HAL_ERROR; 
;;;280          }
;;;281        }
;;;282      }
;;;283      
;;;284      /* Write to DMA Stream FCR */
;;;285      hdma->Instance->FCR = tmp;
;;;286    
;;;287      /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
;;;288         DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
;;;289      regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
;;;290      
;;;291      /* Clear all interrupt flags */
;;;292      regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;293    
;;;294      /* Initialize the error code */
;;;295      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;296                                                                                         
;;;297      /* Initialize the DMA state */
;;;298      hdma->State = HAL_DMA_STATE_READY;
;;;299    
;;;300      return HAL_OK;
;;;301    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L10.22|
000016  6a60              LDR      r0,[r4,#0x24]         ;195
000018  b100              CBZ      r0,|L10.28|
00001a  bf00              NOP                            ;199
                  |L10.28|
00001c  2002              MOVS     r0,#2                 ;203
00001e  f8840035          STRB     r0,[r4,#0x35]         ;203
000022  bf00              NOP                            ;206
000024  2000              MOVS     r0,#0                 ;206
000026  f8840034          STRB     r0,[r4,#0x34]         ;206
00002a  bf00              NOP                            ;206
00002c  6820              LDR      r0,[r4,#0]            ;209
00002e  6800              LDR      r0,[r0,#0]            ;209
000030  f0200001          BIC      r0,r0,#1              ;209
000034  6821              LDR      r1,[r4,#0]            ;209
000036  6008              STR      r0,[r1,#0]            ;209
000038  e00a              B        |L10.80|
                  |L10.58|
00003a  f7fffffe          BL       HAL_GetTick
00003e  1bc0              SUBS     r0,r0,r7              ;215
000040  2805              CMP      r0,#5                 ;215
000042  d905              BLS      |L10.80|
000044  2020              MOVS     r0,#0x20              ;218
000046  6560              STR      r0,[r4,#0x54]         ;218
000048  2003              MOVS     r0,#3                 ;221
00004a  f8840035          STRB     r0,[r4,#0x35]         ;221
00004e  e7e0              B        |L10.18|
                  |L10.80|
000050  6820              LDR      r0,[r4,#0]            ;212
000052  6800              LDR      r0,[r0,#0]            ;212
000054  f0000001          AND      r0,r0,#1              ;212
000058  2800              CMP      r0,#0                 ;212
00005a  d1ee              BNE      |L10.58|
00005c  6820              LDR      r0,[r4,#0]            ;228
00005e  6805              LDR      r5,[r0,#0]            ;228
000060  4821              LDR      r0,|L10.232|
000062  4005              ANDS     r5,r5,r0              ;231
000064  e9d40101          LDRD     r0,r1,[r4,#4]         ;237
000068  4308              ORRS     r0,r0,r1              ;237
00006a  68e1              LDR      r1,[r4,#0xc]          ;237
00006c  4308              ORRS     r0,r0,r1              ;237
00006e  6921              LDR      r1,[r4,#0x10]         ;237
000070  4308              ORRS     r0,r0,r1              ;237
000072  6961              LDR      r1,[r4,#0x14]         ;237
000074  4308              ORRS     r0,r0,r1              ;237
000076  69a1              LDR      r1,[r4,#0x18]         ;237
000078  4308              ORRS     r0,r0,r1              ;237
00007a  69e1              LDR      r1,[r4,#0x1c]         ;237
00007c  4308              ORRS     r0,r0,r1              ;237
00007e  6a21              LDR      r1,[r4,#0x20]         ;237
000080  4308              ORRS     r0,r0,r1              ;237
000082  4305              ORRS     r5,r5,r0              ;237
000084  6a60              LDR      r0,[r4,#0x24]         ;243
000086  2804              CMP      r0,#4                 ;243
000088  d103              BNE      |L10.146|
00008a  e9d4010b          LDRD     r0,r1,[r4,#0x2c]      ;246
00008e  4308              ORRS     r0,r0,r1              ;246
000090  4305              ORRS     r5,r5,r0              ;246
                  |L10.146|
000092  6820              LDR      r0,[r4,#0]            ;250
000094  6005              STR      r5,[r0,#0]            ;250
000096  6820              LDR      r0,[r4,#0]            ;253
000098  6945              LDR      r5,[r0,#0x14]         ;253
00009a  f0250507          BIC      r5,r5,#7              ;256
00009e  6a60              LDR      r0,[r4,#0x24]         ;259
0000a0  4305              ORRS     r5,r5,r0              ;259
0000a2  6a60              LDR      r0,[r4,#0x24]         ;262
0000a4  2804              CMP      r0,#4                 ;262
0000a6  d10d              BNE      |L10.196|
0000a8  6aa0              LDR      r0,[r4,#0x28]         ;265
0000aa  4305              ORRS     r5,r5,r0              ;265
0000ac  6ae0              LDR      r0,[r4,#0x2c]         ;269
0000ae  b148              CBZ      r0,|L10.196|
0000b0  4620              MOV      r0,r4                 ;271
0000b2  f7fffffe          BL       DMA_CheckFifoParam
0000b6  b128              CBZ      r0,|L10.196|
0000b8  2040              MOVS     r0,#0x40              ;274
0000ba  6560              STR      r0,[r4,#0x54]         ;274
0000bc  2001              MOVS     r0,#1                 ;277
0000be  f8840035          STRB     r0,[r4,#0x35]         ;277
0000c2  e7a6              B        |L10.18|
                  |L10.196|
0000c4  6820              LDR      r0,[r4,#0]            ;285
0000c6  6145              STR      r5,[r0,#0x14]         ;285
0000c8  4620              MOV      r0,r4                 ;289
0000ca  f7fffffe          BL       DMA_CalcBaseAndBitshift
0000ce  4606              MOV      r6,r0                 ;289
0000d0  f894105c          LDRB     r1,[r4,#0x5c]         ;292
0000d4  203f              MOVS     r0,#0x3f              ;292
0000d6  4088              LSLS     r0,r0,r1              ;292
0000d8  60b0              STR      r0,[r6,#8]            ;292
0000da  2000              MOVS     r0,#0                 ;295
0000dc  6560              STR      r0,[r4,#0x54]         ;295
0000de  2001              MOVS     r0,#1                 ;298
0000e0  f8840035          STRB     r0,[r4,#0x35]         ;298
0000e4  2000              MOVS     r0,#0                 ;300
0000e6  e794              B        |L10.18|
;;;302    
                          ENDP

                  |L10.232|
                          DCD      0xf010803f

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=1

                  HAL_DMA_PollForTransfer PROC
;;;609      */
;;;610    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;611    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4617              MOV      r7,r2
;;;612      HAL_StatusTypeDef status = HAL_OK; 
00000a  f04f0a00          MOV      r10,#0
;;;613      uint32_t mask_cpltlevel;
;;;614      uint32_t tickstart = HAL_GetTick(); 
00000e  f7fffffe          BL       HAL_GetTick
000012  4683              MOV      r11,r0
;;;615      uint32_t tmpisr;
;;;616      
;;;617      /* calculate DMA base and stream number */
;;;618      DMA_Base_Registers *regs;
;;;619    
;;;620      if(HAL_DMA_STATE_BUSY != hdma->State)
000014  f8940035          LDRB     r0,[r4,#0x35]
000018  2802              CMP      r0,#2
00001a  d009              BEQ      |L11.48|
;;;621      {
;;;622        /* No transfer ongoing */
;;;623        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00001c  2080              MOVS     r0,#0x80
00001e  6560              STR      r0,[r4,#0x54]
;;;624        __HAL_UNLOCK(hdma);
000020  bf00              NOP      
000022  2000              MOVS     r0,#0
000024  f8840034          STRB     r0,[r4,#0x34]
000028  bf00              NOP      
;;;625        return HAL_ERROR;
00002a  2001              MOVS     r0,#1
                  |L11.44|
;;;626      }
;;;627    
;;;628      /* Polling mode not supported in circular mode and double buffering mode */
;;;629      if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
;;;630      {
;;;631        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;632        return HAL_ERROR;
;;;633      }
;;;634      
;;;635      /* Get the level transfer complete flag */
;;;636      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;637      {
;;;638        /* Transfer Complete flag */
;;;639        mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
;;;640      }
;;;641      else
;;;642      {
;;;643        /* Half Transfer Complete flag */
;;;644        mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
;;;645      }
;;;646      
;;;647      regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
;;;648      tmpisr = regs->ISR;
;;;649      
;;;650      while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
;;;651      {
;;;652        /* Check for the Timeout (Not applicable in circular mode)*/
;;;653        if(Timeout != HAL_MAX_DELAY)
;;;654        {
;;;655          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
;;;656          {
;;;657            /* Update error code */
;;;658            hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
;;;659            
;;;660            /* Change the DMA state */
;;;661            hdma->State = HAL_DMA_STATE_READY;
;;;662            
;;;663            /* Process Unlocked */
;;;664            __HAL_UNLOCK(hdma);
;;;665            
;;;666            return HAL_TIMEOUT;
;;;667          }
;;;668        }
;;;669    
;;;670        /* Get the ISR register value */
;;;671        tmpisr = regs->ISR;
;;;672    
;;;673        if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
;;;674        {
;;;675          /* Update error code */
;;;676          hdma->ErrorCode |= HAL_DMA_ERROR_TE;
;;;677          
;;;678          /* Clear the transfer error flag */
;;;679          regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
;;;680        }
;;;681        
;;;682        if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
;;;683        {
;;;684          /* Update error code */
;;;685          hdma->ErrorCode |= HAL_DMA_ERROR_FE;
;;;686          
;;;687          /* Clear the FIFO error flag */
;;;688          regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
;;;689        }
;;;690        
;;;691        if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
;;;692        {
;;;693          /* Update error code */
;;;694          hdma->ErrorCode |= HAL_DMA_ERROR_DME;
;;;695          
;;;696          /* Clear the Direct Mode error flag */
;;;697          regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
;;;698        }
;;;699      }
;;;700      
;;;701      if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
;;;702      {
;;;703        if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
;;;704        {
;;;705          HAL_DMA_Abort(hdma);
;;;706        
;;;707          /* Clear the half transfer and transfer complete flags */
;;;708          regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
;;;709        
;;;710          /* Change the DMA state */
;;;711          hdma->State= HAL_DMA_STATE_READY;
;;;712    
;;;713          /* Process Unlocked */
;;;714          __HAL_UNLOCK(hdma);
;;;715    
;;;716          return HAL_ERROR;
;;;717       }
;;;718      }
;;;719      
;;;720      /* Get the level transfer complete flag */
;;;721      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;722      {
;;;723        /* Clear the half transfer and transfer complete flags */
;;;724        regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
;;;725        
;;;726        hdma->State = HAL_DMA_STATE_READY;
;;;727        
;;;728        /* Process Unlocked */
;;;729        __HAL_UNLOCK(hdma);
;;;730      }
;;;731      else
;;;732      {
;;;733        /* Clear the half transfer and transfer complete flags */
;;;734        regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
;;;735      }
;;;736      
;;;737      return status;
;;;738    }
00002c  e8bd9ff0          POP      {r4-r12,pc}
                  |L11.48|
000030  6820              LDR      r0,[r4,#0]            ;629
000032  6800              LDR      r0,[r0,#0]            ;629
000034  f4007080          AND      r0,r0,#0x100          ;629
000038  b120              CBZ      r0,|L11.68|
00003a  f44f7080          MOV      r0,#0x100             ;631
00003e  6560              STR      r0,[r4,#0x54]         ;631
000040  2001              MOVS     r0,#1                 ;632
000042  e7f3              B        |L11.44|
                  |L11.68|
000044  f1b80f00          CMP      r8,#0                 ;636
000048  d105              BNE      |L11.86|
00004a  f894105c          LDRB     r1,[r4,#0x5c]         ;639
00004e  2020              MOVS     r0,#0x20              ;639
000050  fa00f901          LSL      r9,r0,r1              ;639
000054  e004              B        |L11.96|
                  |L11.86|
000056  f894105c          LDRB     r1,[r4,#0x5c]         ;644
00005a  2010              MOVS     r0,#0x10              ;644
00005c  fa00f901          LSL      r9,r0,r1              ;644
                  |L11.96|
000060  6da5              LDR      r5,[r4,#0x58]         ;647
000062  682e              LDR      r6,[r5,#0]            ;648
000064  e042              B        |L11.236|
                  |L11.102|
000066  1c78              ADDS     r0,r7,#1              ;653
000068  b190              CBZ      r0,|L11.144|
00006a  b12f              CBZ      r7,|L11.120|
00006c  f7fffffe          BL       HAL_GetTick
000070  eba0000b          SUB      r0,r0,r11             ;655
000074  42b8              CMP      r0,r7                 ;655
000076  d90b              BLS      |L11.144|
                  |L11.120|
000078  2020              MOVS     r0,#0x20              ;658
00007a  6560              STR      r0,[r4,#0x54]         ;658
00007c  2001              MOVS     r0,#1                 ;661
00007e  f8840035          STRB     r0,[r4,#0x35]         ;661
000082  bf00              NOP                            ;664
000084  2000              MOVS     r0,#0                 ;664
000086  f8840034          STRB     r0,[r4,#0x34]         ;664
00008a  bf00              NOP                            ;664
00008c  2003              MOVS     r0,#3                 ;666
00008e  e7cd              B        |L11.44|
                  |L11.144|
000090  682e              LDR      r6,[r5,#0]            ;671
000092  f894105c          LDRB     r1,[r4,#0x5c]         ;673
000096  2008              MOVS     r0,#8                 ;673
000098  4088              LSLS     r0,r0,r1              ;673
00009a  4030              ANDS     r0,r0,r6              ;673
00009c  b140              CBZ      r0,|L11.176|
00009e  6d60              LDR      r0,[r4,#0x54]         ;676
0000a0  f0400001          ORR      r0,r0,#1              ;676
0000a4  6560              STR      r0,[r4,#0x54]         ;676
0000a6  f894105c          LDRB     r1,[r4,#0x5c]         ;679
0000aa  2008              MOVS     r0,#8                 ;679
0000ac  4088              LSLS     r0,r0,r1              ;679
0000ae  60a8              STR      r0,[r5,#8]            ;679
                  |L11.176|
0000b0  f894105c          LDRB     r1,[r4,#0x5c]         ;682
0000b4  2001              MOVS     r0,#1                 ;682
0000b6  4088              LSLS     r0,r0,r1              ;682
0000b8  4030              ANDS     r0,r0,r6              ;682
0000ba  b140              CBZ      r0,|L11.206|
0000bc  6d60              LDR      r0,[r4,#0x54]         ;685
0000be  f0400002          ORR      r0,r0,#2              ;685
0000c2  6560              STR      r0,[r4,#0x54]         ;685
0000c4  f894105c          LDRB     r1,[r4,#0x5c]         ;688
0000c8  2001              MOVS     r0,#1                 ;688
0000ca  4088              LSLS     r0,r0,r1              ;688
0000cc  60a8              STR      r0,[r5,#8]            ;688
                  |L11.206|
0000ce  f894105c          LDRB     r1,[r4,#0x5c]         ;691
0000d2  2004              MOVS     r0,#4                 ;691
0000d4  4088              LSLS     r0,r0,r1              ;691
0000d6  4030              ANDS     r0,r0,r6              ;691
0000d8  b140              CBZ      r0,|L11.236|
0000da  6d60              LDR      r0,[r4,#0x54]         ;694
0000dc  f0400004          ORR      r0,r0,#4              ;694
0000e0  6560              STR      r0,[r4,#0x54]         ;694
0000e2  f894105c          LDRB     r1,[r4,#0x5c]         ;697
0000e6  2004              MOVS     r0,#4                 ;697
0000e8  4088              LSLS     r0,r0,r1              ;697
0000ea  60a8              STR      r0,[r5,#8]            ;697
                  |L11.236|
0000ec  ea060009          AND      r0,r6,r9              ;650
0000f0  b920              CBNZ     r0,|L11.252|
0000f2  6d60              LDR      r0,[r4,#0x54]         ;650
0000f4  f0000001          AND      r0,r0,#1              ;650
0000f8  2800              CMP      r0,#0                 ;650
0000fa  d0b4              BEQ      |L11.102|
                  |L11.252|
0000fc  6d60              LDR      r0,[r4,#0x54]         ;701
0000fe  b1a8              CBZ      r0,|L11.300|
000100  6d60              LDR      r0,[r4,#0x54]         ;703
000102  f0000001          AND      r0,r0,#1              ;703
000106  b188              CBZ      r0,|L11.300|
000108  4620              MOV      r0,r4                 ;705
00010a  f7fffffe          BL       HAL_DMA_Abort
00010e  f894105c          LDRB     r1,[r4,#0x5c]         ;708
000112  2030              MOVS     r0,#0x30              ;708
000114  4088              LSLS     r0,r0,r1              ;708
000116  60a8              STR      r0,[r5,#8]            ;708
000118  2001              MOVS     r0,#1                 ;711
00011a  f8840035          STRB     r0,[r4,#0x35]         ;711
00011e  bf00              NOP                            ;714
000120  2000              MOVS     r0,#0                 ;714
000122  f8840034          STRB     r0,[r4,#0x34]         ;714
000126  bf00              NOP                            ;714
000128  2001              MOVS     r0,#1                 ;716
00012a  e77f              B        |L11.44|
                  |L11.300|
00012c  f1b80f00          CMP      r8,#0                 ;721
000130  d10c              BNE      |L11.332|
000132  f894105c          LDRB     r1,[r4,#0x5c]         ;724
000136  2030              MOVS     r0,#0x30              ;724
000138  4088              LSLS     r0,r0,r1              ;724
00013a  60a8              STR      r0,[r5,#8]            ;724
00013c  2001              MOVS     r0,#1                 ;726
00013e  f8840035          STRB     r0,[r4,#0x35]         ;726
000142  bf00              NOP                            ;729
000144  2000              MOVS     r0,#0                 ;729
000146  f8840034          STRB     r0,[r4,#0x34]         ;729
00014a  e004              B        |L11.342|
                  |L11.332|
00014c  f894105c          LDRB     r1,[r4,#0x5c]         ;734
000150  2010              MOVS     r0,#0x10              ;734
000152  4088              LSLS     r0,r0,r1              ;734
000154  60a8              STR      r0,[r5,#8]            ;734
                  |L11.342|
000156  4650              MOV      r0,r10                ;737
000158  e768              B        |L11.44|
;;;739    
                          ENDP


                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;966      */                      
;;;967    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
000000  b510              PUSH     {r4,lr}
;;;968    {
000002  4603              MOV      r3,r0
;;;969    
;;;970      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;971    
;;;972      /* Process locked */
;;;973      __HAL_LOCK(hdma);
000006  bf00              NOP      
000008  f8930034          LDRB     r0,[r3,#0x34]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L12.20|
000010  2002              MOVS     r0,#2
                  |L12.18|
;;;974    
;;;975      if(HAL_DMA_STATE_READY == hdma->State)
;;;976      {
;;;977        switch (CallbackID)
;;;978        {
;;;979        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;980          hdma->XferCpltCallback = pCallback;
;;;981          break;
;;;982    
;;;983        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;984          hdma->XferHalfCpltCallback = pCallback;
;;;985          break;
;;;986    
;;;987        case  HAL_DMA_XFER_M1CPLT_CB_ID:
;;;988          hdma->XferM1CpltCallback = pCallback;
;;;989          break;
;;;990    
;;;991        case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
;;;992          hdma->XferM1HalfCpltCallback = pCallback;
;;;993          break;
;;;994    
;;;995        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;996          hdma->XferErrorCallback = pCallback;
;;;997          break;
;;;998    
;;;999        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;1000         hdma->XferAbortCallback = pCallback;
;;;1001         break;
;;;1002   
;;;1003       default:
;;;1004         /* Return error status */
;;;1005         status =  HAL_ERROR;
;;;1006         break;
;;;1007       }
;;;1008     }
;;;1009     else
;;;1010     {
;;;1011       /* Return error status */
;;;1012       status =  HAL_ERROR;
;;;1013     }
;;;1014   
;;;1015     /* Release Lock */
;;;1016     __HAL_UNLOCK(hdma);
;;;1017     
;;;1018     return status;
;;;1019   }
000012  bd10              POP      {r4,pc}
                  |L12.20|
000014  2001              MOVS     r0,#1                 ;973
000016  f8830034          STRB     r0,[r3,#0x34]         ;973
00001a  bf00              NOP                            ;973
00001c  f8930035          LDRB     r0,[r3,#0x35]         ;975
000020  2801              CMP      r0,#1                 ;975
000022  d115              BNE      |L12.80|
000024  2906              CMP      r1,#6                 ;977
000026  d210              BCS      |L12.74|
000028  e8dff001          TBB      [pc,r1]               ;977
00002c  03050709          DCB      0x03,0x05,0x07,0x09
000030  0b0d              DCB      0x0b,0x0d
000032  63da              STR      r2,[r3,#0x3c]         ;980
000034  e00b              B        |L12.78|
000036  641a              STR      r2,[r3,#0x40]         ;984
000038  e009              B        |L12.78|
00003a  645a              STR      r2,[r3,#0x44]         ;988
00003c  e007              B        |L12.78|
00003e  649a              STR      r2,[r3,#0x48]         ;992
000040  e005              B        |L12.78|
000042  64da              STR      r2,[r3,#0x4c]         ;996
000044  e003              B        |L12.78|
000046  651a              STR      r2,[r3,#0x50]         ;1000
000048  e001              B        |L12.78|
                  |L12.74|
00004a  2401              MOVS     r4,#1                 ;1005
00004c  bf00              NOP                            ;1006
                  |L12.78|
00004e  e000              B        |L12.82|
                  |L12.80|
000050  2401              MOVS     r4,#1                 ;1012
                  |L12.82|
000052  bf00              NOP                            ;1016
000054  2000              MOVS     r0,#0                 ;1016
000056  f8830034          STRB     r0,[r3,#0x34]         ;1016
00005a  bf00              NOP                            ;1016
00005c  4620              MOV      r0,r4                 ;1018
00005e  e7d8              B        |L12.18|
;;;1020   
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;406      */
;;;407    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;408    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;409      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;410      
;;;411      /* Check the parameters */
;;;412      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;413    
;;;414      /* Process locked */
;;;415      __HAL_LOCK(hdma);
000010  bf00              NOP      
000012  f8940034          LDRB     r0,[r4,#0x34]
000016  2801              CMP      r0,#1
000018  d102              BNE      |L13.32|
00001a  2002              MOVS     r0,#2
                  |L13.28|
;;;416    
;;;417      if(HAL_DMA_STATE_READY == hdma->State)
;;;418      {
;;;419        /* Change DMA peripheral state */
;;;420        hdma->State = HAL_DMA_STATE_BUSY;
;;;421        
;;;422        /* Initialize the error code */
;;;423        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;424        
;;;425        /* Configure the source, destination address and the data length */
;;;426        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;427    
;;;428        /* Enable the Peripheral */
;;;429        __HAL_DMA_ENABLE(hdma);
;;;430      }
;;;431      else
;;;432      {
;;;433        /* Process unlocked */
;;;434        __HAL_UNLOCK(hdma);
;;;435        
;;;436        /* Return error status */
;;;437        status = HAL_BUSY;
;;;438      } 
;;;439      return status; 
;;;440    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L13.32|
000020  2001              MOVS     r0,#1                 ;415
000022  f8840034          STRB     r0,[r4,#0x34]         ;415
000026  bf00              NOP                            ;415
000028  f8940035          LDRB     r0,[r4,#0x35]         ;417
00002c  2801              CMP      r0,#1                 ;417
00002e  d111              BNE      |L13.84|
000030  2002              MOVS     r0,#2                 ;420
000032  f8840035          STRB     r0,[r4,#0x35]         ;420
000036  2000              MOVS     r0,#0                 ;423
000038  6560              STR      r0,[r4,#0x54]         ;423
00003a  463b              MOV      r3,r7                 ;426
00003c  4632              MOV      r2,r6                 ;426
00003e  4629              MOV      r1,r5                 ;426
000040  4620              MOV      r0,r4                 ;426
000042  f7fffffe          BL       DMA_SetConfig
000046  6820              LDR      r0,[r4,#0]            ;429
000048  6800              LDR      r0,[r0,#0]            ;429
00004a  f0400001          ORR      r0,r0,#1              ;429
00004e  6821              LDR      r1,[r4,#0]            ;429
000050  6008              STR      r0,[r1,#0]            ;429
000052  e006              B        |L13.98|
                  |L13.84|
000054  bf00              NOP                            ;434
000056  2000              MOVS     r0,#0                 ;434
000058  f8840034          STRB     r0,[r4,#0x34]         ;434
00005c  bf00              NOP                            ;434
00005e  f04f0802          MOV      r8,#2                 ;437
                  |L13.98|
000062  4640              MOV      r0,r8                 ;439
000064  e7da              B        |L13.28|
;;;441    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;450      */
;;;451    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;452    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;453      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;454    
;;;455      /* calculate DMA base and stream number */
;;;456      DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
000010  f8d49058          LDR      r9,[r4,#0x58]
;;;457      
;;;458      /* Check the parameters */
;;;459      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;460     
;;;461      /* Process locked */
;;;462      __HAL_LOCK(hdma);
000014  bf00              NOP      
000016  f8940034          LDRB     r0,[r4,#0x34]
00001a  2801              CMP      r0,#1
00001c  d102              BNE      |L14.36|
00001e  2002              MOVS     r0,#2
                  |L14.32|
;;;463      
;;;464      if(HAL_DMA_STATE_READY == hdma->State)
;;;465      {
;;;466        /* Change DMA peripheral state */
;;;467        hdma->State = HAL_DMA_STATE_BUSY;
;;;468        
;;;469        /* Initialize the error code */
;;;470        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;471        
;;;472        /* Configure the source, destination address and the data length */
;;;473        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;474        
;;;475        /* Clear all interrupt flags at correct offset within the register */
;;;476        regs->IFCR = 0x3FU << hdma->StreamIndex;
;;;477        
;;;478        /* Enable Common interrupts*/
;;;479        hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
;;;480        
;;;481        if(hdma->XferHalfCpltCallback != NULL)
;;;482        {
;;;483          hdma->Instance->CR  |= DMA_IT_HT;
;;;484        }
;;;485        
;;;486        /* Enable the Peripheral */
;;;487        __HAL_DMA_ENABLE(hdma);
;;;488      }
;;;489      else
;;;490      {
;;;491        /* Process unlocked */
;;;492        __HAL_UNLOCK(hdma);	  
;;;493        
;;;494        /* Return error status */
;;;495        status = HAL_BUSY;
;;;496      }
;;;497      
;;;498      return status;
;;;499    }
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L14.36|
000024  2001              MOVS     r0,#1                 ;462
000026  f8840034          STRB     r0,[r4,#0x34]         ;462
00002a  bf00              NOP                            ;462
00002c  f8940035          LDRB     r0,[r4,#0x35]         ;464
000030  2801              CMP      r0,#1                 ;464
000032  d125              BNE      |L14.128|
000034  2002              MOVS     r0,#2                 ;467
000036  f8840035          STRB     r0,[r4,#0x35]         ;467
00003a  2000              MOVS     r0,#0                 ;470
00003c  6560              STR      r0,[r4,#0x54]         ;470
00003e  463b              MOV      r3,r7                 ;473
000040  4632              MOV      r2,r6                 ;473
000042  4629              MOV      r1,r5                 ;473
000044  4620              MOV      r0,r4                 ;473
000046  f7fffffe          BL       DMA_SetConfig
00004a  f894105c          LDRB     r1,[r4,#0x5c]         ;476
00004e  203f              MOVS     r0,#0x3f              ;476
000050  4088              LSLS     r0,r0,r1              ;476
000052  f8c90008          STR      r0,[r9,#8]            ;476
000056  6820              LDR      r0,[r4,#0]            ;479
000058  6800              LDR      r0,[r0,#0]            ;479
00005a  f0400016          ORR      r0,r0,#0x16           ;479
00005e  6821              LDR      r1,[r4,#0]            ;479
000060  6008              STR      r0,[r1,#0]            ;479
000062  6c20              LDR      r0,[r4,#0x40]         ;481
000064  b128              CBZ      r0,|L14.114|
000066  6820              LDR      r0,[r4,#0]            ;483
000068  6800              LDR      r0,[r0,#0]            ;483
00006a  f0400008          ORR      r0,r0,#8              ;483
00006e  6821              LDR      r1,[r4,#0]            ;483
000070  6008              STR      r0,[r1,#0]            ;483
                  |L14.114|
000072  6820              LDR      r0,[r4,#0]            ;487
000074  6800              LDR      r0,[r0,#0]            ;487
000076  f0400001          ORR      r0,r0,#1              ;487
00007a  6821              LDR      r1,[r4,#0]            ;487
00007c  6008              STR      r0,[r1,#0]            ;487
00007e  e006              B        |L14.142|
                  |L14.128|
000080  bf00              NOP                            ;492
000082  2000              MOVS     r0,#0                 ;492
000084  f8840034          STRB     r0,[r4,#0x34]         ;492
000088  bf00              NOP                            ;492
00008a  f04f0802          MOV      r8,#2                 ;495
                  |L14.142|
00008e  4640              MOV      r0,r8                 ;498
000090  e7c6              B        |L14.32|
;;;500    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;1028     */              
;;;1029   HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  4602              MOV      r2,r0
;;;1030   {
;;;1031     HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;1032     
;;;1033     /* Process locked */
;;;1034     __HAL_LOCK(hdma);
000004  bf00              NOP      
000006  f8920034          LDRB     r0,[r2,#0x34]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L15.18|
00000e  2002              MOVS     r0,#2
                  |L15.16|
;;;1035     
;;;1036     if(HAL_DMA_STATE_READY == hdma->State)
;;;1037     {
;;;1038       switch (CallbackID)
;;;1039       {
;;;1040       case  HAL_DMA_XFER_CPLT_CB_ID:
;;;1041         hdma->XferCpltCallback = NULL;
;;;1042         break;
;;;1043         
;;;1044       case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;1045         hdma->XferHalfCpltCallback = NULL;
;;;1046         break;
;;;1047         
;;;1048       case  HAL_DMA_XFER_M1CPLT_CB_ID:
;;;1049         hdma->XferM1CpltCallback = NULL;
;;;1050         break;
;;;1051         
;;;1052       case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
;;;1053         hdma->XferM1HalfCpltCallback = NULL;
;;;1054         break;
;;;1055         
;;;1056       case  HAL_DMA_XFER_ERROR_CB_ID:
;;;1057         hdma->XferErrorCallback = NULL;
;;;1058         break;
;;;1059         
;;;1060       case  HAL_DMA_XFER_ABORT_CB_ID:
;;;1061         hdma->XferAbortCallback = NULL;
;;;1062         break; 
;;;1063         
;;;1064       case   HAL_DMA_XFER_ALL_CB_ID:
;;;1065         hdma->XferCpltCallback = NULL;
;;;1066         hdma->XferHalfCpltCallback = NULL;
;;;1067         hdma->XferM1CpltCallback = NULL;
;;;1068         hdma->XferM1HalfCpltCallback = NULL;
;;;1069         hdma->XferErrorCallback = NULL;
;;;1070         hdma->XferAbortCallback = NULL;
;;;1071         break; 
;;;1072         
;;;1073       default:
;;;1074         status = HAL_ERROR;
;;;1075         break;
;;;1076       }
;;;1077     }
;;;1078     else
;;;1079     {
;;;1080       status = HAL_ERROR;
;;;1081     }
;;;1082     
;;;1083     /* Release Lock */
;;;1084     __HAL_UNLOCK(hdma);
;;;1085     
;;;1086     return status;
;;;1087   }
000010  4770              BX       lr
                  |L15.18|
000012  2001              MOVS     r0,#1                 ;1034
000014  f8820034          STRB     r0,[r2,#0x34]         ;1034
000018  bf00              NOP                            ;1034
00001a  f8920035          LDRB     r0,[r2,#0x35]         ;1036
00001e  2801              CMP      r0,#1                 ;1036
000020  d124              BNE      |L15.108|
000022  2907              CMP      r1,#7                 ;1038
000024  d21f              BCS      |L15.102|
000026  e8dff001          TBB      [pc,r1]               ;1038
00002a  0407              DCB      0x04,0x07
00002c  0a0d1013          DCB      0x0a,0x0d,0x10,0x13
000030  1600              DCB      0x16,0x00
000032  2000              MOVS     r0,#0                 ;1041
000034  63d0              STR      r0,[r2,#0x3c]         ;1041
000036  e018              B        |L15.106|
000038  2000              MOVS     r0,#0                 ;1045
00003a  6410              STR      r0,[r2,#0x40]         ;1045
00003c  e015              B        |L15.106|
00003e  2000              MOVS     r0,#0                 ;1049
000040  6450              STR      r0,[r2,#0x44]         ;1049
000042  e012              B        |L15.106|
000044  2000              MOVS     r0,#0                 ;1053
000046  6490              STR      r0,[r2,#0x48]         ;1053
000048  e00f              B        |L15.106|
00004a  2000              MOVS     r0,#0                 ;1057
00004c  64d0              STR      r0,[r2,#0x4c]         ;1057
00004e  e00c              B        |L15.106|
000050  2000              MOVS     r0,#0                 ;1061
000052  6510              STR      r0,[r2,#0x50]         ;1061
000054  e009              B        |L15.106|
000056  2000              MOVS     r0,#0                 ;1065
000058  63d0              STR      r0,[r2,#0x3c]         ;1065
00005a  6410              STR      r0,[r2,#0x40]         ;1066
00005c  6450              STR      r0,[r2,#0x44]         ;1067
00005e  6490              STR      r0,[r2,#0x48]         ;1068
000060  64d0              STR      r0,[r2,#0x4c]         ;1069
000062  6510              STR      r0,[r2,#0x50]         ;1070
000064  e001              B        |L15.106|
                  |L15.102|
000066  2301              MOVS     r3,#1                 ;1074
000068  bf00              NOP                            ;1075
                  |L15.106|
00006a  e000              B        |L15.110|
                  |L15.108|
00006c  2301              MOVS     r3,#1                 ;1080
                  |L15.110|
00006e  bf00              NOP                            ;1084
000070  2000              MOVS     r0,#0                 ;1084
000072  f8820034          STRB     r0,[r2,#0x34]         ;1084
000076  bf00              NOP                            ;1084
000078  4618              MOV      r0,r3                 ;1086
00007a  e7c9              B        |L15.16|
;;;1088   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  flagBitshiftOffset
000000  00061016          DCB      0x00,0x06,0x10,0x16
000004  00061016          DCB      0x00,0x06,0x10,0x16

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_dma_c_c25f65ec____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_dma_c_c25f65ec____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_dma_c_c25f65ec____REVSH|
#line 478
|__asm___19_stm32f4xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_dma_c_c25f65ec____RRX|
#line 665
|__asm___19_stm32f4xx_hal_dma_c_c25f65ec____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
