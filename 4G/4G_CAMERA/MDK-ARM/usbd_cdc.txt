; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\usbd_cdc.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\usbd_cdc.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\usbd_cdc.crf ../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c]
                          THUMB

                          AREA ||i.USBD_CDC_DataIn||, CODE, READONLY, ALIGN=1

                  USBD_CDC_DataIn PROC
;;;536      */
;;;537    static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;538    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;539      USBD_CDC_HandleTypeDef *hcdc;
;;;540      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
000008  f8d472c8          LDR      r7,[r4,#0x2c8]
;;;541    
;;;542      if (pdev->pClassDataCmsit[pdev->classId] == NULL)
00000c  f5047030          ADD      r0,r4,#0x2c0
000010  f8d412d4          LDR      r1,[r4,#0x2d4]
000014  f8500021          LDR      r0,[r0,r1,LSL #2]
000018  b910              CBNZ     r0,|L1.32|
;;;543      {
;;;544        return (uint8_t)USBD_FAIL;
00001a  2003              MOVS     r0,#3
                  |L1.28|
;;;545      }
;;;546    
;;;547      hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
;;;548    
;;;549      if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
;;;550          ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
;;;551      {
;;;552        /* Update the packet total length */
;;;553        pdev->ep_in[epnum & 0xFU].total_length = 0U;
;;;554    
;;;555        /* Send ZLP */
;;;556        (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
;;;557      }
;;;558      else
;;;559      {
;;;560        hcdc->TxState = 0U;
;;;561    
;;;562        if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
;;;563        {
;;;564          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
;;;565        }
;;;566      }
;;;567    
;;;568      return (uint8_t)USBD_OK;
;;;569    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  f5047030          ADD      r0,r4,#0x2c0          ;547
000024  f8d412d4          LDR      r1,[r4,#0x2d4]        ;547
000028  f8506021          LDR      r6,[r0,r1,LSL #2]     ;547
00002c  f005000f          AND      r0,r5,#0xf            ;549
000030  eb000180          ADD      r1,r0,r0,LSL #2       ;549
000034  f1040014          ADD      r0,r4,#0x14           ;549
000038  eb000081          ADD      r0,r0,r1,LSL #2       ;549
00003c  6840              LDR      r0,[r0,#4]            ;549
00003e  b338              CBZ      r0,|L1.144|
000040  f005000f          AND      r0,r5,#0xf            ;550
000044  eb000180          ADD      r1,r0,r0,LSL #2       ;550
000048  f1040014          ADD      r0,r4,#0x14           ;550
00004c  eb000081          ADD      r0,r0,r1,LSL #2       ;550
000050  6841              LDR      r1,[r0,#4]            ;550
000052  f005000f          AND      r0,r5,#0xf            ;550
000056  eb0002c0          ADD      r2,r0,r0,LSL #3       ;550
00005a  f107003c          ADD      r0,r7,#0x3c           ;550
00005e  eb000082          ADD      r0,r0,r2,LSL #2       ;550
000062  68c0              LDR      r0,[r0,#0xc]          ;550
000064  fbb1f2f0          UDIV     r2,r1,r0              ;550
000068  fb001012          MLS      r0,r0,r2,r1           ;550
00006c  b980              CBNZ     r0,|L1.144|
00006e  2100              MOVS     r1,#0                 ;553
000070  f005000f          AND      r0,r5,#0xf            ;553
000074  eb000280          ADD      r2,r0,r0,LSL #2       ;553
000078  f1040014          ADD      r0,r4,#0x14           ;553
00007c  eb000082          ADD      r0,r0,r2,LSL #2       ;553
000080  6041              STR      r1,[r0,#4]            ;553
000082  2300              MOVS     r3,#0                 ;556
000084  461a              MOV      r2,r3                 ;556
000086  4629              MOV      r1,r5                 ;556
000088  4620              MOV      r0,r4                 ;556
00008a  f7fffffe          BL       USBD_LL_Transmit
00008e  e017              B        |L1.192|
                  |L1.144|
000090  2000              MOVS     r0,#0                 ;560
000092  f8c60214          STR      r0,[r6,#0x214]        ;560
000096  f5047031          ADD      r0,r4,#0x2c4          ;562
00009a  f8d412d4          LDR      r1,[r4,#0x2d4]        ;562
00009e  f8500021          LDR      r0,[r0,r1,LSL #2]     ;562
0000a2  6900              LDR      r0,[r0,#0x10]         ;562
0000a4  b160              CBZ      r0,|L1.192|
0000a6  f8d60208          LDR      r0,[r6,#0x208]        ;564
0000aa  f5047131          ADD      r1,r4,#0x2c4          ;564
0000ae  f8d422d4          LDR      r2,[r4,#0x2d4]        ;564
0000b2  f8511022          LDR      r1,[r1,r2,LSL #2]     ;564
0000b6  462a              MOV      r2,r5                 ;564
0000b8  690b              LDR      r3,[r1,#0x10]         ;564
0000ba  f5067104          ADD      r1,r6,#0x210          ;564
0000be  4798              BLX      r3                    ;564
                  |L1.192|
0000c0  2000              MOVS     r0,#0                 ;568
0000c2  e7ab              B        |L1.28|
;;;570    
                          ENDP


                          AREA ||i.USBD_CDC_DataOut||, CODE, READONLY, ALIGN=1

                  USBD_CDC_DataOut PROC
;;;577      */
;;;578    static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
000000  b570              PUSH     {r4-r6,lr}
;;;579    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;580      USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
000006  f5047030          ADD      r0,r4,#0x2c0
00000a  f8d412d4          LDR      r1,[r4,#0x2d4]
00000e  f8505021          LDR      r5,[r0,r1,LSL #2]
;;;581    
;;;582      if (pdev->pClassDataCmsit[pdev->classId] == NULL)
000012  f8d412d4          LDR      r1,[r4,#0x2d4]
000016  f8500021          LDR      r0,[r0,r1,LSL #2]
00001a  b908              CBNZ     r0,|L2.32|
;;;583      {
;;;584        return (uint8_t)USBD_FAIL;
00001c  2003              MOVS     r0,#3
                  |L2.30|
;;;585      }
;;;586    
;;;587      /* Get the received data length */
;;;588      hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
;;;589    
;;;590      /* USB data will be immediately processed, this allow next USB traffic being
;;;591      NAKed till the end of the application Xfer */
;;;592    
;;;593      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
;;;594    
;;;595      return (uint8_t)USBD_OK;
;;;596    }
00001e  bd70              POP      {r4-r6,pc}
                  |L2.32|
000020  4631              MOV      r1,r6                 ;588
000022  4620              MOV      r0,r4                 ;588
000024  f7fffffe          BL       USBD_LL_GetRxDataSize
000028  f8c5020c          STR      r0,[r5,#0x20c]        ;588
00002c  f8d50204          LDR      r0,[r5,#0x204]        ;593
000030  f5047131          ADD      r1,r4,#0x2c4          ;593
000034  f8d432d4          LDR      r3,[r4,#0x2d4]        ;593
000038  f8511023          LDR      r1,[r1,r3,LSL #2]     ;593
00003c  68ca              LDR      r2,[r1,#0xc]          ;593
00003e  f5057103          ADD      r1,r5,#0x20c          ;593
000042  4790              BLX      r2                    ;593
000044  2000              MOVS     r0,#0                 ;595
000046  e7ea              B        |L2.30|
;;;597    
                          ENDP


                          AREA ||i.USBD_CDC_DeInit||, CODE, READONLY, ALIGN=2

                  USBD_CDC_DeInit PROC
;;;388      */
;;;389    static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
000000  b570              PUSH     {r4-r6,lr}
;;;390    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;391      UNUSED(cfgidx);
;;;392    
;;;393    
;;;394    #ifdef USE_USBD_COMPOSITE
;;;395      /* Get the Endpoints addresses allocated for this CDC class instance */
;;;396      CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
;;;397      CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
;;;398      CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
;;;399    #endif /* USE_USBD_COMPOSITE */
;;;400    
;;;401      /* Close EP IN */
;;;402      (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
000006  4830              LDR      r0,|L3.200|
000008  7801              LDRB     r1,[r0,#0]  ; CDCInEpAdd
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       USBD_LL_CloseEP
;;;403      pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
000010  2100              MOVS     r1,#0
000012  482d              LDR      r0,|L3.200|
000014  7800              LDRB     r0,[r0,#0]  ; CDCInEpAdd
000016  f000000f          AND      r0,r0,#0xf
00001a  eb000280          ADD      r2,r0,r0,LSL #2
00001e  f1040014          ADD      r0,r4,#0x14
000022  eb000082          ADD      r0,r0,r2,LSL #2
000026  8201              STRH     r1,[r0,#0x10]
;;;404    
;;;405      /* Close EP OUT */
;;;406      (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
000028  4828              LDR      r0,|L3.204|
00002a  7801              LDRB     r1,[r0,#0]  ; CDCOutEpAdd
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       USBD_LL_CloseEP
;;;407      pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
000032  2100              MOVS     r1,#0
000034  4825              LDR      r0,|L3.204|
000036  7800              LDRB     r0,[r0,#0]  ; CDCOutEpAdd
000038  f000000f          AND      r0,r0,#0xf
00003c  eb000280          ADD      r2,r0,r0,LSL #2
000040  f50470aa          ADD      r0,r4,#0x154
000044  eb000082          ADD      r0,r0,r2,LSL #2
000048  8201              STRH     r1,[r0,#0x10]
;;;408    
;;;409      /* Close Command IN EP */
;;;410      (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
00004a  4821              LDR      r0,|L3.208|
00004c  7801              LDRB     r1,[r0,#0]  ; CDCCmdEpAdd
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       USBD_LL_CloseEP
;;;411      pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
000054  2100              MOVS     r1,#0
000056  481e              LDR      r0,|L3.208|
000058  7800              LDRB     r0,[r0,#0]  ; CDCCmdEpAdd
00005a  f000000f          AND      r0,r0,#0xf
00005e  eb000280          ADD      r2,r0,r0,LSL #2
000062  f1040014          ADD      r0,r4,#0x14
000066  eb000082          ADD      r0,r0,r2,LSL #2
00006a  8201              STRH     r1,[r0,#0x10]
;;;412      pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
00006c  4818              LDR      r0,|L3.208|
00006e  7800              LDRB     r0,[r0,#0]  ; CDCCmdEpAdd
000070  f000000f          AND      r0,r0,#0xf
000074  eb000280          ADD      r2,r0,r0,LSL #2
000078  f1040014          ADD      r0,r4,#0x14
00007c  eb000082          ADD      r0,r0,r2,LSL #2
000080  8241              STRH     r1,[r0,#0x12]
;;;413    
;;;414      /* DeInit  physical Interface components */
;;;415      if (pdev->pClassDataCmsit[pdev->classId] != NULL)
000082  f5047030          ADD      r0,r4,#0x2c0
000086  f8d412d4          LDR      r1,[r4,#0x2d4]
00008a  f8500021          LDR      r0,[r0,r1,LSL #2]
00008e  b1c8              CBZ      r0,|L3.196|
;;;416      {
;;;417        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
000090  f5047131          ADD      r1,r4,#0x2c4
000094  f8d422d4          LDR      r2,[r4,#0x2d4]
000098  f8511022          LDR      r1,[r1,r2,LSL #2]
00009c  6848              LDR      r0,[r1,#4]
00009e  4780              BLX      r0
;;;418        (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
0000a0  f5047130          ADD      r1,r4,#0x2c0
0000a4  f8d422d4          LDR      r2,[r4,#0x2d4]
0000a8  f8510022          LDR      r0,[r1,r2,LSL #2]
0000ac  f7fffffe          BL       USBD_static_free
;;;419        pdev->pClassDataCmsit[pdev->classId] = NULL;
0000b0  2100              MOVS     r1,#0
0000b2  f5047030          ADD      r0,r4,#0x2c0
0000b6  f8d422d4          LDR      r2,[r4,#0x2d4]
0000ba  f8401022          STR      r1,[r0,r2,LSL #2]
;;;420        pdev->pClassData = NULL;
0000be  2000              MOVS     r0,#0
0000c0  f8c402bc          STR      r0,[r4,#0x2bc]
                  |L3.196|
;;;421      }
;;;422    
;;;423      return (uint8_t)USBD_OK;
0000c4  2000              MOVS     r0,#0
;;;424    }
0000c6  bd70              POP      {r4-r6,pc}
;;;425    
                          ENDP

                  |L3.200|
                          DCD      CDCInEpAdd
                  |L3.204|
                          DCD      CDCOutEpAdd
                  |L3.208|
                          DCD      CDCCmdEpAdd

                          AREA ||i.USBD_CDC_EP0_RxReady||, CODE, READONLY, ALIGN=1

                  USBD_CDC_EP0_RxReady PROC
;;;603      */
;;;604    static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;605    {
000002  4604              MOV      r4,r0
;;;606      USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
000004  f5047030          ADD      r0,r4,#0x2c0
000008  f8d412d4          LDR      r1,[r4,#0x2d4]
00000c  f8505021          LDR      r5,[r0,r1,LSL #2]
;;;607    
;;;608      if (hcdc == NULL)
000010  b90d              CBNZ     r5,|L4.22|
;;;609      {
;;;610        return (uint8_t)USBD_FAIL;
000012  2003              MOVS     r0,#3
                  |L4.20|
;;;611      }
;;;612    
;;;613      if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
;;;614      {
;;;615        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
;;;616                                                                         (uint8_t *)hcdc->data,
;;;617                                                                         (uint16_t)hcdc->CmdLength);
;;;618        hcdc->CmdOpCode = 0xFFU;
;;;619      }
;;;620    
;;;621      return (uint8_t)USBD_OK;
;;;622    }
000014  bd70              POP      {r4-r6,pc}
                  |L4.22|
000016  f5047031          ADD      r0,r4,#0x2c4          ;613
00001a  f8d412d4          LDR      r1,[r4,#0x2d4]        ;613
00001e  f8500021          LDR      r0,[r0,r1,LSL #2]     ;613
000022  b198              CBZ      r0,|L4.76|
000024  f8950200          LDRB     r0,[r5,#0x200]        ;613
000028  28ff              CMP      r0,#0xff              ;613
00002a  d00f              BEQ      |L4.76|
00002c  f8952201          LDRB     r2,[r5,#0x201]        ;615
000030  f8950200          LDRB     r0,[r5,#0x200]        ;615
000034  f5047131          ADD      r1,r4,#0x2c4          ;615
000038  f8d462d4          LDR      r6,[r4,#0x2d4]        ;615
00003c  f8511026          LDR      r1,[r1,r6,LSL #2]     ;615
000040  688b              LDR      r3,[r1,#8]            ;615
000042  4629              MOV      r1,r5                 ;615
000044  4798              BLX      r3                    ;615
000046  20ff              MOVS     r0,#0xff              ;618
000048  f8850200          STRB     r0,[r5,#0x200]        ;618
                  |L4.76|
00004c  2000              MOVS     r0,#0                 ;621
00004e  e7e1              B        |L4.20|
;;;623    #ifndef USE_USBD_COMPOSITE
                          ENDP


                          AREA ||i.USBD_CDC_GetDeviceQualifierDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_CDC_GetDeviceQualifierDescriptor PROC
;;;722      */
;;;723    uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
000000  4601              MOV      r1,r0
;;;724    {
;;;725      *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
000002  200a              MOVS     r0,#0xa
000004  8008              STRH     r0,[r1,#0]
;;;726    
;;;727      return USBD_CDC_DeviceQualifierDesc;
000006  4801              LDR      r0,|L5.12|
;;;728    }
000008  4770              BX       lr
;;;729    #endif /* USE_USBD_COMPOSITE  */
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      USBD_CDC_DeviceQualifierDesc

                          AREA ||i.USBD_CDC_GetFSCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_CDC_GetFSCfgDesc PROC
;;;629      */
;;;630    static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;631    {
000004  4604              MOV      r4,r0
;;;632      USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
000006  2182              MOVS     r1,#0x82
000008  480d              LDR      r0,|L6.64|
00000a  f7fffffe          BL       USBD_GetEpDesc
00000e  4605              MOV      r5,r0
;;;633      USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
000010  2101              MOVS     r1,#1
000012  480b              LDR      r0,|L6.64|
000014  f7fffffe          BL       USBD_GetEpDesc
000018  4606              MOV      r6,r0
;;;634      USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
00001a  2181              MOVS     r1,#0x81
00001c  4808              LDR      r0,|L6.64|
00001e  f7fffffe          BL       USBD_GetEpDesc
000022  4607              MOV      r7,r0
;;;635    
;;;636      if (pEpCmdDesc != NULL)
000024  b10d              CBZ      r5,|L6.42|
;;;637      {
;;;638        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
000026  2010              MOVS     r0,#0x10
000028  71a8              STRB     r0,[r5,#6]
                  |L6.42|
;;;639      }
;;;640    
;;;641      if (pEpOutDesc != NULL)
00002a  b10e              CBZ      r6,|L6.48|
;;;642      {
;;;643        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
00002c  2040              MOVS     r0,#0x40
00002e  80b0              STRH     r0,[r6,#4]
                  |L6.48|
;;;644      }
;;;645    
;;;646      if (pEpInDesc != NULL)
000030  b10f              CBZ      r7,|L6.54|
;;;647      {
;;;648        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
000032  2040              MOVS     r0,#0x40
000034  80b8              STRH     r0,[r7,#4]
                  |L6.54|
;;;649      }
;;;650    
;;;651      *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
000036  2043              MOVS     r0,#0x43
000038  8020              STRH     r0,[r4,#0]
;;;652      return USBD_CDC_CfgDesc;
00003a  4801              LDR      r0,|L6.64|
;;;653    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;654    
                          ENDP

                  |L6.64|
                          DCD      USBD_CDC_CfgDesc

                          AREA ||i.USBD_CDC_GetHSCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_CDC_GetHSCfgDesc PROC
;;;660      */
;;;661    static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;662    {
000004  4604              MOV      r4,r0
;;;663      USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
000006  2182              MOVS     r1,#0x82
000008  480e              LDR      r0,|L7.68|
00000a  f7fffffe          BL       USBD_GetEpDesc
00000e  4605              MOV      r5,r0
;;;664      USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
000010  2101              MOVS     r1,#1
000012  480c              LDR      r0,|L7.68|
000014  f7fffffe          BL       USBD_GetEpDesc
000018  4606              MOV      r6,r0
;;;665      USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
00001a  2181              MOVS     r1,#0x81
00001c  4809              LDR      r0,|L7.68|
00001e  f7fffffe          BL       USBD_GetEpDesc
000022  4607              MOV      r7,r0
;;;666    
;;;667      if (pEpCmdDesc != NULL)
000024  b10d              CBZ      r5,|L7.42|
;;;668      {
;;;669        pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
000026  2010              MOVS     r0,#0x10
000028  71a8              STRB     r0,[r5,#6]
                  |L7.42|
;;;670      }
;;;671    
;;;672      if (pEpOutDesc != NULL)
00002a  b116              CBZ      r6,|L7.50|
;;;673      {
;;;674        pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
00002c  f44f7000          MOV      r0,#0x200
000030  80b0              STRH     r0,[r6,#4]
                  |L7.50|
;;;675      }
;;;676    
;;;677      if (pEpInDesc != NULL)
000032  b117              CBZ      r7,|L7.58|
;;;678      {
;;;679        pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
000034  f44f7000          MOV      r0,#0x200
000038  80b8              STRH     r0,[r7,#4]
                  |L7.58|
;;;680      }
;;;681    
;;;682      *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
00003a  2043              MOVS     r0,#0x43
00003c  8020              STRH     r0,[r4,#0]
;;;683      return USBD_CDC_CfgDesc;
00003e  4801              LDR      r0,|L7.68|
;;;684    }
000040  e8bd81f0          POP      {r4-r8,pc}
;;;685    
                          ENDP

                  |L7.68|
                          DCD      USBD_CDC_CfgDesc

                          AREA ||i.USBD_CDC_GetOtherSpeedCfgDesc||, CODE, READONLY, ALIGN=2

                  USBD_CDC_GetOtherSpeedCfgDesc PROC
;;;691      */
;;;692    static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;693    {
000004  4604              MOV      r4,r0
;;;694      USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
000006  2182              MOVS     r1,#0x82
000008  480d              LDR      r0,|L8.64|
00000a  f7fffffe          BL       USBD_GetEpDesc
00000e  4605              MOV      r5,r0
;;;695      USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
000010  2101              MOVS     r1,#1
000012  480b              LDR      r0,|L8.64|
000014  f7fffffe          BL       USBD_GetEpDesc
000018  4606              MOV      r6,r0
;;;696      USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
00001a  2181              MOVS     r1,#0x81
00001c  4808              LDR      r0,|L8.64|
00001e  f7fffffe          BL       USBD_GetEpDesc
000022  4607              MOV      r7,r0
;;;697    
;;;698      if (pEpCmdDesc != NULL)
000024  b10d              CBZ      r5,|L8.42|
;;;699      {
;;;700        pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
000026  2010              MOVS     r0,#0x10
000028  71a8              STRB     r0,[r5,#6]
                  |L8.42|
;;;701      }
;;;702    
;;;703      if (pEpOutDesc != NULL)
00002a  b10e              CBZ      r6,|L8.48|
;;;704      {
;;;705        pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
00002c  2040              MOVS     r0,#0x40
00002e  80b0              STRH     r0,[r6,#4]
                  |L8.48|
;;;706      }
;;;707    
;;;708      if (pEpInDesc != NULL)
000030  b10f              CBZ      r7,|L8.54|
;;;709      {
;;;710        pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
000032  2040              MOVS     r0,#0x40
000034  80b8              STRH     r0,[r7,#4]
                  |L8.54|
;;;711      }
;;;712    
;;;713      *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
000036  2043              MOVS     r0,#0x43
000038  8020              STRH     r0,[r4,#0]
;;;714      return USBD_CDC_CfgDesc;
00003a  4801              LDR      r0,|L8.64|
;;;715    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;716    
                          ENDP

                  |L8.64|
                          DCD      USBD_CDC_CfgDesc

                          AREA ||i.USBD_CDC_Init||, CODE, READONLY, ALIGN=2

                  USBD_CDC_Init PROC
;;;287      */
;;;288    static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
000000  b570              PUSH     {r4-r6,lr}
;;;289    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;290      UNUSED(cfgidx);
;;;291      USBD_CDC_HandleTypeDef *hcdc;
;;;292    
;;;293      hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
000006  f44f7007          MOV      r0,#0x21c
00000a  f7fffffe          BL       USBD_static_malloc
00000e  4605              MOV      r5,r0
;;;294    
;;;295      if (hcdc == NULL)
000010  b945              CBNZ     r5,|L9.36|
;;;296      {
;;;297        pdev->pClassDataCmsit[pdev->classId] = NULL;
000012  2100              MOVS     r1,#0
000014  f5047030          ADD      r0,r4,#0x2c0
000018  f8d422d4          LDR      r2,[r4,#0x2d4]
00001c  f8401022          STR      r1,[r0,r2,LSL #2]
;;;298        return (uint8_t)USBD_EMEM;
000020  2002              MOVS     r0,#2
                  |L9.34|
;;;299      }
;;;300    
;;;301      (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
;;;302    
;;;303      pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
;;;304      pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
;;;305    
;;;306    #ifdef USE_USBD_COMPOSITE
;;;307      /* Get the Endpoints addresses allocated for this class instance */
;;;308      CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
;;;309      CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
;;;310      CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
;;;311    #endif /* USE_USBD_COMPOSITE */
;;;312    
;;;313      if (pdev->dev_speed == USBD_SPEED_HIGH)
;;;314      {
;;;315        /* Open EP IN */
;;;316        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
;;;317                             CDC_DATA_HS_IN_PACKET_SIZE);
;;;318    
;;;319        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
;;;320    
;;;321        /* Open EP OUT */
;;;322        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
;;;323                             CDC_DATA_HS_OUT_PACKET_SIZE);
;;;324    
;;;325        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
;;;326    
;;;327        /* Set bInterval for CDC CMD Endpoint */
;;;328        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
;;;329      }
;;;330      else
;;;331      {
;;;332        /* Open EP IN */
;;;333        (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
;;;334                             CDC_DATA_FS_IN_PACKET_SIZE);
;;;335    
;;;336        pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
;;;337    
;;;338        /* Open EP OUT */
;;;339        (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
;;;340                             CDC_DATA_FS_OUT_PACKET_SIZE);
;;;341    
;;;342        pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
;;;343    
;;;344        /* Set bInterval for CMD Endpoint */
;;;345        pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
;;;346      }
;;;347    
;;;348      /* Open Command IN EP */
;;;349      (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
;;;350      pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
;;;351    
;;;352      hcdc->RxBuffer = NULL;
;;;353    
;;;354      /* Init  physical Interface components */
;;;355      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
;;;356    
;;;357      /* Init Xfer states */
;;;358      hcdc->TxState = 0U;
;;;359      hcdc->RxState = 0U;
;;;360    
;;;361      if (hcdc->RxBuffer == NULL)
;;;362      {
;;;363        return (uint8_t)USBD_EMEM;
;;;364      }
;;;365    
;;;366      if (pdev->dev_speed == USBD_SPEED_HIGH)
;;;367      {
;;;368        /* Prepare Out endpoint to receive next packet */
;;;369        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
;;;370                                     CDC_DATA_HS_OUT_PACKET_SIZE);
;;;371      }
;;;372      else
;;;373      {
;;;374        /* Prepare Out endpoint to receive next packet */
;;;375        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
;;;376                                     CDC_DATA_FS_OUT_PACKET_SIZE);
;;;377      }
;;;378    
;;;379      return (uint8_t)USBD_OK;
;;;380    }
000022  bd70              POP      {r4-r6,pc}
                  |L9.36|
000024  f44f7107          MOV      r1,#0x21c             ;301
000028  4628              MOV      r0,r5                 ;301
00002a  f7fffffe          BL       __aeabi_memclr4
00002e  f5047030          ADD      r0,r4,#0x2c0          ;303
000032  f8d412d4          LDR      r1,[r4,#0x2d4]        ;303
000036  f8405021          STR      r5,[r0,r1,LSL #2]     ;303
00003a  f8d412d4          LDR      r1,[r4,#0x2d4]        ;304
00003e  f8500021          LDR      r0,[r0,r1,LSL #2]     ;304
000042  f8c402bc          STR      r0,[r4,#0x2bc]        ;304
000046  7c20              LDRB     r0,[r4,#0x10]         ;313
000048  bb98              CBNZ     r0,|L9.178|
00004a  f44f7300          MOV      r3,#0x200             ;316
00004e  2202              MOVS     r2,#2                 ;316
000050  4850              LDR      r0,|L9.404|
000052  7801              LDRB     r1,[r0,#0]            ;316  ; CDCInEpAdd
000054  4620              MOV      r0,r4                 ;316
000056  f7fffffe          BL       USBD_LL_OpenEP
00005a  2101              MOVS     r1,#1                 ;319
00005c  484d              LDR      r0,|L9.404|
00005e  7800              LDRB     r0,[r0,#0]            ;319  ; CDCInEpAdd
000060  f000000f          AND      r0,r0,#0xf            ;319
000064  eb000280          ADD      r2,r0,r0,LSL #2       ;319
000068  f1040014          ADD      r0,r4,#0x14           ;319
00006c  eb000082          ADD      r0,r0,r2,LSL #2       ;319
000070  8201              STRH     r1,[r0,#0x10]         ;319
000072  024b              LSLS     r3,r1,#9              ;322
000074  2202              MOVS     r2,#2                 ;322
000076  4848              LDR      r0,|L9.408|
000078  7801              LDRB     r1,[r0,#0]            ;322  ; CDCOutEpAdd
00007a  4620              MOV      r0,r4                 ;322
00007c  f7fffffe          BL       USBD_LL_OpenEP
000080  2101              MOVS     r1,#1                 ;325
000082  4845              LDR      r0,|L9.408|
000084  7800              LDRB     r0,[r0,#0]            ;325  ; CDCOutEpAdd
000086  f000000f          AND      r0,r0,#0xf            ;325
00008a  eb000280          ADD      r2,r0,r0,LSL #2       ;325
00008e  f50470aa          ADD      r0,r4,#0x154          ;325
000092  eb000082          ADD      r0,r0,r2,LSL #2       ;325
000096  8201              STRH     r1,[r0,#0x10]         ;325
000098  2110              MOVS     r1,#0x10              ;328
00009a  4840              LDR      r0,|L9.412|
00009c  7800              LDRB     r0,[r0,#0]            ;328  ; CDCCmdEpAdd
00009e  f000000f          AND      r0,r0,#0xf            ;328
0000a2  eb000280          ADD      r2,r0,r0,LSL #2       ;328
0000a6  f1040014          ADD      r0,r4,#0x14           ;328
0000aa  eb000082          ADD      r0,r0,r2,LSL #2       ;328
0000ae  8241              STRH     r1,[r0,#0x12]         ;328
0000b0  e032              B        |L9.280|
                  |L9.178|
0000b2  e7ff              B        |L9.180|
                  |L9.180|
0000b4  2340              MOVS     r3,#0x40              ;333
0000b6  2202              MOVS     r2,#2                 ;333
0000b8  4836              LDR      r0,|L9.404|
0000ba  7801              LDRB     r1,[r0,#0]            ;333  ; CDCInEpAdd
0000bc  4620              MOV      r0,r4                 ;333
0000be  f7fffffe          BL       USBD_LL_OpenEP
0000c2  2101              MOVS     r1,#1                 ;336
0000c4  4833              LDR      r0,|L9.404|
0000c6  7800              LDRB     r0,[r0,#0]            ;336  ; CDCInEpAdd
0000c8  f000000f          AND      r0,r0,#0xf            ;336
0000cc  eb000280          ADD      r2,r0,r0,LSL #2       ;336
0000d0  f1040014          ADD      r0,r4,#0x14           ;336
0000d4  eb000082          ADD      r0,r0,r2,LSL #2       ;336
0000d8  8201              STRH     r1,[r0,#0x10]         ;336
0000da  2340              MOVS     r3,#0x40              ;339
0000dc  2202              MOVS     r2,#2                 ;339
0000de  482e              LDR      r0,|L9.408|
0000e0  7801              LDRB     r1,[r0,#0]            ;339  ; CDCOutEpAdd
0000e2  4620              MOV      r0,r4                 ;339
0000e4  f7fffffe          BL       USBD_LL_OpenEP
0000e8  2101              MOVS     r1,#1                 ;342
0000ea  482b              LDR      r0,|L9.408|
0000ec  7800              LDRB     r0,[r0,#0]            ;342  ; CDCOutEpAdd
0000ee  f000000f          AND      r0,r0,#0xf            ;342
0000f2  eb000280          ADD      r2,r0,r0,LSL #2       ;342
0000f6  f50470aa          ADD      r0,r4,#0x154          ;342
0000fa  eb000082          ADD      r0,r0,r2,LSL #2       ;342
0000fe  8201              STRH     r1,[r0,#0x10]         ;342
000100  2110              MOVS     r1,#0x10              ;345
000102  4826              LDR      r0,|L9.412|
000104  7800              LDRB     r0,[r0,#0]            ;345  ; CDCCmdEpAdd
000106  f000000f          AND      r0,r0,#0xf            ;345
00010a  eb000280          ADD      r2,r0,r0,LSL #2       ;345
00010e  f1040014          ADD      r0,r4,#0x14           ;345
000112  eb000082          ADD      r0,r0,r2,LSL #2       ;345
000116  8241              STRH     r1,[r0,#0x12]         ;345
                  |L9.280|
000118  2308              MOVS     r3,#8                 ;349
00011a  2203              MOVS     r2,#3                 ;349
00011c  481f              LDR      r0,|L9.412|
00011e  7801              LDRB     r1,[r0,#0]            ;349  ; CDCCmdEpAdd
000120  4620              MOV      r0,r4                 ;349
000122  f7fffffe          BL       USBD_LL_OpenEP
000126  2101              MOVS     r1,#1                 ;350
000128  481c              LDR      r0,|L9.412|
00012a  7800              LDRB     r0,[r0,#0]            ;350  ; CDCCmdEpAdd
00012c  f000000f          AND      r0,r0,#0xf            ;350
000130  eb000280          ADD      r2,r0,r0,LSL #2       ;350
000134  f1040014          ADD      r0,r4,#0x14           ;350
000138  eb000082          ADD      r0,r0,r2,LSL #2       ;350
00013c  8201              STRH     r1,[r0,#0x10]         ;350
00013e  2000              MOVS     r0,#0                 ;352
000140  f8c50204          STR      r0,[r5,#0x204]        ;352
000144  f5047131          ADD      r1,r4,#0x2c4          ;355
000148  f8d422d4          LDR      r2,[r4,#0x2d4]        ;355
00014c  f8511022          LDR      r1,[r1,r2,LSL #2]     ;355
000150  6808              LDR      r0,[r1,#0]            ;355
000152  4780              BLX      r0                    ;355
000154  2000              MOVS     r0,#0                 ;358
000156  f8c50214          STR      r0,[r5,#0x214]        ;358
00015a  f8c50218          STR      r0,[r5,#0x218]        ;359
00015e  f8d50204          LDR      r0,[r5,#0x204]        ;361
000162  b908              CBNZ     r0,|L9.360|
000164  2002              MOVS     r0,#2                 ;363
000166  e75c              B        |L9.34|
                  |L9.360|
000168  7c20              LDRB     r0,[r4,#0x10]         ;366
00016a  b948              CBNZ     r0,|L9.384|
00016c  f44f7300          MOV      r3,#0x200             ;369
000170  4809              LDR      r0,|L9.408|
000172  7801              LDRB     r1,[r0,#0]            ;369  ; CDCOutEpAdd
000174  4620              MOV      r0,r4                 ;369
000176  f8d52204          LDR      r2,[r5,#0x204]        ;369
00017a  f7fffffe          BL       USBD_LL_PrepareReceive
00017e  e007              B        |L9.400|
                  |L9.384|
000180  2340              MOVS     r3,#0x40              ;375
000182  4805              LDR      r0,|L9.408|
000184  7801              LDRB     r1,[r0,#0]            ;375  ; CDCOutEpAdd
000186  4620              MOV      r0,r4                 ;375
000188  f8d52204          LDR      r2,[r5,#0x204]        ;375
00018c  f7fffffe          BL       USBD_LL_PrepareReceive
                  |L9.400|
000190  2000              MOVS     r0,#0                 ;379
000192  e746              B        |L9.34|
;;;381    
                          ENDP

                  |L9.404|
                          DCD      CDCInEpAdd
                  |L9.408|
                          DCD      CDCOutEpAdd
                  |L9.412|
                          DCD      CDCCmdEpAdd

                          AREA ||i.USBD_CDC_ReceivePacket||, CODE, READONLY, ALIGN=2

                  USBD_CDC_ReceivePacket PROC
;;;834      */
;;;835    uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;836    {
000002  4604              MOV      r4,r0
;;;837      USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
000004  f5047030          ADD      r0,r4,#0x2c0
000008  f8d412d4          LDR      r1,[r4,#0x2d4]
00000c  f8505021          LDR      r5,[r0,r1,LSL #2]
;;;838    
;;;839    #ifdef USE_USBD_COMPOSITE
;;;840      /* Get the Endpoints addresses allocated for this class instance */
;;;841      CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
;;;842    #endif /* USE_USBD_COMPOSITE */
;;;843    
;;;844      if (pdev->pClassDataCmsit[pdev->classId] == NULL)
000010  f8d412d4          LDR      r1,[r4,#0x2d4]
000014  f8500021          LDR      r0,[r0,r1,LSL #2]
000018  b908              CBNZ     r0,|L10.30|
;;;845      {
;;;846        return (uint8_t)USBD_FAIL;
00001a  2003              MOVS     r0,#3
                  |L10.28|
;;;847      }
;;;848    
;;;849      if (pdev->dev_speed == USBD_SPEED_HIGH)
;;;850      {
;;;851        /* Prepare Out endpoint to receive next packet */
;;;852        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
;;;853                                     CDC_DATA_HS_OUT_PACKET_SIZE);
;;;854      }
;;;855      else
;;;856      {
;;;857        /* Prepare Out endpoint to receive next packet */
;;;858        (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
;;;859                                     CDC_DATA_FS_OUT_PACKET_SIZE);
;;;860      }
;;;861    
;;;862      return (uint8_t)USBD_OK;
;;;863    }
00001c  bd70              POP      {r4-r6,pc}
                  |L10.30|
00001e  7c20              LDRB     r0,[r4,#0x10]         ;849
000020  b948              CBNZ     r0,|L10.54|
000022  f44f7300          MOV      r3,#0x200             ;852
000026  4809              LDR      r0,|L10.76|
000028  7801              LDRB     r1,[r0,#0]            ;852  ; CDCOutEpAdd
00002a  4620              MOV      r0,r4                 ;852
00002c  f8d52204          LDR      r2,[r5,#0x204]        ;852
000030  f7fffffe          BL       USBD_LL_PrepareReceive
000034  e007              B        |L10.70|
                  |L10.54|
000036  2340              MOVS     r3,#0x40              ;858
000038  4804              LDR      r0,|L10.76|
00003a  7801              LDRB     r1,[r0,#0]            ;858  ; CDCOutEpAdd
00003c  4620              MOV      r0,r4                 ;858
00003e  f8d52204          LDR      r2,[r5,#0x204]        ;858
000042  f7fffffe          BL       USBD_LL_PrepareReceive
                  |L10.70|
000046  2000              MOVS     r0,#0                 ;862
000048  e7e8              B        |L10.28|
;;;864    /**
                          ENDP

00004a  0000              DCW      0x0000
                  |L10.76|
                          DCD      CDCOutEpAdd

                          AREA ||i.USBD_CDC_RegisterInterface||, CODE, READONLY, ALIGN=1

                  USBD_CDC_RegisterInterface PROC
;;;735      */
;;;736    uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
000000  4602              MOV      r2,r0
;;;737                                       USBD_CDC_ItfTypeDef *fops)
;;;738    {
;;;739      if (fops == NULL)
000002  b909              CBNZ     r1,|L11.8|
;;;740      {
;;;741        return (uint8_t)USBD_FAIL;
000004  2003              MOVS     r0,#3
                  |L11.6|
;;;742      }
;;;743    
;;;744      pdev->pUserData[pdev->classId] = fops;
;;;745    
;;;746      return (uint8_t)USBD_OK;
;;;747    }
000006  4770              BX       lr
                  |L11.8|
000008  f5027031          ADD      r0,r2,#0x2c4          ;744
00000c  f8d232d4          LDR      r3,[r2,#0x2d4]        ;744
000010  f8401023          STR      r1,[r0,r3,LSL #2]     ;744
000014  2000              MOVS     r0,#0                 ;746
000016  e7f6              B        |L11.6|
;;;748    
                          ENDP


                          AREA ||i.USBD_CDC_SetRxBuffer||, CODE, READONLY, ALIGN=1

                  USBD_CDC_SetRxBuffer PROC
;;;777      */
;;;778    uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
000000  b510              PUSH     {r4,lr}
;;;779    {
000002  4602              MOV      r2,r0
;;;780      USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
000004  f5027030          ADD      r0,r2,#0x2c0
000008  f8d242d4          LDR      r4,[r2,#0x2d4]
00000c  f8503024          LDR      r3,[r0,r4,LSL #2]
;;;781    
;;;782      if (hcdc == NULL)
000010  b90b              CBNZ     r3,|L12.22|
;;;783      {
;;;784        return (uint8_t)USBD_FAIL;
000012  2003              MOVS     r0,#3
                  |L12.20|
;;;785      }
;;;786    
;;;787      hcdc->RxBuffer = pbuff;
;;;788    
;;;789      return (uint8_t)USBD_OK;
;;;790    }
000014  bd10              POP      {r4,pc}
                  |L12.22|
000016  f8c31204          STR      r1,[r3,#0x204]        ;787
00001a  2000              MOVS     r0,#0                 ;789
00001c  e7fa              B        |L12.20|
;;;791    
                          ENDP


                          AREA ||i.USBD_CDC_SetTxBuffer||, CODE, READONLY, ALIGN=1

                  USBD_CDC_SetTxBuffer PROC
;;;755      */
;;;756    uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
000000  b530              PUSH     {r4,r5,lr}
;;;757                                 uint8_t *pbuff, uint32_t length)
;;;758    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;759      USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
000006  f5037030          ADD      r0,r3,#0x2c0
00000a  f8d352d4          LDR      r5,[r3,#0x2d4]
00000e  f8501025          LDR      r1,[r0,r5,LSL #2]
;;;760    
;;;761      if (hcdc == NULL)
000012  b909              CBNZ     r1,|L13.24|
;;;762      {
;;;763        return (uint8_t)USBD_FAIL;
000014  2003              MOVS     r0,#3
                  |L13.22|
;;;764      }
;;;765    
;;;766      hcdc->TxBuffer = pbuff;
;;;767      hcdc->TxLength = length;
;;;768    
;;;769      return (uint8_t)USBD_OK;
;;;770    }
000016  bd30              POP      {r4,r5,pc}
                  |L13.24|
000018  f8c14208          STR      r4,[r1,#0x208]        ;766
00001c  f8c12210          STR      r2,[r1,#0x210]        ;767
000020  2000              MOVS     r0,#0                 ;769
000022  e7f8              B        |L13.22|
;;;771    
                          ENDP


                          AREA ||i.USBD_CDC_Setup||, CODE, READONLY, ALIGN=1

                  USBD_CDC_Setup PROC
;;;432      */
;;;433    static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;434                                  USBD_SetupReqTypedef *req)
;;;435    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;436      USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
000008  f5057030          ADD      r0,r5,#0x2c0
00000c  f8d512d4          LDR      r1,[r5,#0x2d4]
000010  f8506021          LDR      r6,[r0,r1,LSL #2]
;;;437      uint16_t len;
;;;438      uint8_t ifalt = 0U;
000014  2000              MOVS     r0,#0
000016  9001              STR      r0,[sp,#4]
;;;439      uint16_t status_info = 0U;
000018  9000              STR      r0,[sp,#0]
;;;440      USBD_StatusTypeDef ret = USBD_OK;
00001a  4680              MOV      r8,r0
;;;441    
;;;442      if (hcdc == NULL)
00001c  b916              CBNZ     r6,|L14.36|
;;;443      {
;;;444        return (uint8_t)USBD_FAIL;
00001e  2003              MOVS     r0,#3
                  |L14.32|
;;;445      }
;;;446    
;;;447      switch (req->bmRequest & USB_REQ_TYPE_MASK)
;;;448      {
;;;449        case USB_REQ_TYPE_CLASS:
;;;450          if (req->wLength != 0U)
;;;451          {
;;;452            if ((req->bmRequest & 0x80U) != 0U)
;;;453            {
;;;454              ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
;;;455                                                                               (uint8_t *)hcdc->data,
;;;456                                                                               req->wLength);
;;;457    
;;;458              len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
;;;459              (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
;;;460            }
;;;461            else
;;;462            {
;;;463              hcdc->CmdOpCode = req->bRequest;
;;;464              hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
;;;465    
;;;466              (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
;;;467            }
;;;468          }
;;;469          else
;;;470          {
;;;471            ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
;;;472                                                                             (uint8_t *)req, 0U);
;;;473          }
;;;474          break;
;;;475    
;;;476        case USB_REQ_TYPE_STANDARD:
;;;477          switch (req->bRequest)
;;;478          {
;;;479            case USB_REQ_GET_STATUS:
;;;480              if (pdev->dev_state == USBD_STATE_CONFIGURED)
;;;481              {
;;;482                (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
;;;483              }
;;;484              else
;;;485              {
;;;486                USBD_CtlError(pdev, req);
;;;487                ret = USBD_FAIL;
;;;488              }
;;;489              break;
;;;490    
;;;491            case USB_REQ_GET_INTERFACE:
;;;492              if (pdev->dev_state == USBD_STATE_CONFIGURED)
;;;493              {
;;;494                (void)USBD_CtlSendData(pdev, &ifalt, 1U);
;;;495              }
;;;496              else
;;;497              {
;;;498                USBD_CtlError(pdev, req);
;;;499                ret = USBD_FAIL;
;;;500              }
;;;501              break;
;;;502    
;;;503            case USB_REQ_SET_INTERFACE:
;;;504              if (pdev->dev_state != USBD_STATE_CONFIGURED)
;;;505              {
;;;506                USBD_CtlError(pdev, req);
;;;507                ret = USBD_FAIL;
;;;508              }
;;;509              break;
;;;510    
;;;511            case USB_REQ_CLEAR_FEATURE:
;;;512              break;
;;;513    
;;;514            default:
;;;515              USBD_CtlError(pdev, req);
;;;516              ret = USBD_FAIL;
;;;517              break;
;;;518          }
;;;519          break;
;;;520    
;;;521        default:
;;;522          USBD_CtlError(pdev, req);
;;;523          ret = USBD_FAIL;
;;;524          break;
;;;525      }
;;;526    
;;;527      return (uint8_t)ret;
;;;528    }
000020  e8bd81fc          POP      {r2-r8,pc}
                  |L14.36|
000024  7820              LDRB     r0,[r4,#0]            ;447
000026  f0000060          AND      r0,r0,#0x60           ;447
00002a  2800              CMP      r0,#0                 ;447
00002c  d03d              BEQ      |L14.170|
00002e  2820              CMP      r0,#0x20              ;447
000030  d17c              BNE      |L14.300|
000032  88e0              LDRH     r0,[r4,#6]            ;450
000034  b368              CBZ      r0,|L14.146|
000036  7820              LDRB     r0,[r4,#0]            ;452
000038  f0000080          AND      r0,r0,#0x80           ;452
00003c  b1b8              CBZ      r0,|L14.110|
00003e  88e2              LDRH     r2,[r4,#6]            ;454
000040  7860              LDRB     r0,[r4,#1]            ;454
000042  f5057131          ADD      r1,r5,#0x2c4          ;454
000046  f8d5c2d4          LDR      r12,[r5,#0x2d4]       ;454
00004a  f851102c          LDR      r1,[r1,r12,LSL #2]    ;454
00004e  688b              LDR      r3,[r1,#8]            ;454
000050  4631              MOV      r1,r6                 ;454
000052  4798              BLX      r3                    ;454
000054  88e0              LDRH     r0,[r4,#6]            ;458
000056  2807              CMP      r0,#7                 ;458
000058  d901              BLS      |L14.94|
00005a  2007              MOVS     r0,#7                 ;458
00005c  e000              B        |L14.96|
                  |L14.94|
00005e  88e0              LDRH     r0,[r4,#6]            ;458
                  |L14.96|
000060  4607              MOV      r7,r0                 ;458
000062  463a              MOV      r2,r7                 ;459
000064  4631              MOV      r1,r6                 ;459
000066  4628              MOV      r0,r5                 ;459
000068  f7fffffe          BL       USBD_CtlSendData
00006c  e01c              B        |L14.168|
                  |L14.110|
00006e  7860              LDRB     r0,[r4,#1]            ;463
000070  f8860200          STRB     r0,[r6,#0x200]        ;463
000074  88e0              LDRH     r0,[r4,#6]            ;464
000076  2840              CMP      r0,#0x40              ;464
000078  d201              BCS      |L14.126|
00007a  88e0              LDRH     r0,[r4,#6]            ;464
00007c  e000              B        |L14.128|
                  |L14.126|
00007e  2040              MOVS     r0,#0x40              ;464
                  |L14.128|
000080  f8860201          STRB     r0,[r6,#0x201]        ;464
000084  f8962201          LDRB     r2,[r6,#0x201]        ;466
000088  4631              MOV      r1,r6                 ;466
00008a  4628              MOV      r0,r5                 ;466
00008c  f7fffffe          BL       USBD_CtlPrepareRx
000090  e00a              B        |L14.168|
                  |L14.146|
000092  7860              LDRB     r0,[r4,#1]            ;471
000094  f5057131          ADD      r1,r5,#0x2c4          ;471
000098  f8d522d4          LDR      r2,[r5,#0x2d4]        ;471
00009c  f8511022          LDR      r1,[r1,r2,LSL #2]     ;471
0000a0  2200              MOVS     r2,#0                 ;471
0000a2  688b              LDR      r3,[r1,#8]            ;471
0000a4  4621              MOV      r1,r4                 ;471
0000a6  4798              BLX      r3                    ;471
                  |L14.168|
0000a8  e047              B        |L14.314|
                  |L14.170|
0000aa  7860              LDRB     r0,[r4,#1]            ;477
0000ac  b130              CBZ      r0,|L14.188|
0000ae  2801              CMP      r0,#1                 ;477
0000b0  d032              BEQ      |L14.280|
0000b2  280a              CMP      r0,#0xa               ;477
0000b4  d013              BEQ      |L14.222|
0000b6  280b              CMP      r0,#0xb               ;477
0000b8  d12f              BNE      |L14.282|
0000ba  e021              B        |L14.256|
                  |L14.188|
0000bc  f895029c          LDRB     r0,[r5,#0x29c]        ;480
0000c0  2803              CMP      r0,#3                 ;480
0000c2  d105              BNE      |L14.208|
0000c4  2202              MOVS     r2,#2                 ;482
0000c6  4669              MOV      r1,sp                 ;482
0000c8  4628              MOV      r0,r5                 ;482
0000ca  f7fffffe          BL       USBD_CtlSendData
0000ce  e005              B        |L14.220|
                  |L14.208|
0000d0  4621              MOV      r1,r4                 ;486
0000d2  4628              MOV      r0,r5                 ;486
0000d4  f7fffffe          BL       USBD_CtlError
0000d8  f04f0803          MOV      r8,#3                 ;487
                  |L14.220|
0000dc  e024              B        |L14.296|
                  |L14.222|
0000de  f895029c          LDRB     r0,[r5,#0x29c]        ;492
0000e2  2803              CMP      r0,#3                 ;492
0000e4  d105              BNE      |L14.242|
0000e6  2201              MOVS     r2,#1                 ;494
0000e8  a901              ADD      r1,sp,#4              ;494
0000ea  4628              MOV      r0,r5                 ;494
0000ec  f7fffffe          BL       USBD_CtlSendData
0000f0  e005              B        |L14.254|
                  |L14.242|
0000f2  4621              MOV      r1,r4                 ;498
0000f4  4628              MOV      r0,r5                 ;498
0000f6  f7fffffe          BL       USBD_CtlError
0000fa  f04f0803          MOV      r8,#3                 ;499
                  |L14.254|
0000fe  e013              B        |L14.296|
                  |L14.256|
000100  f895029c          LDRB     r0,[r5,#0x29c]        ;504
000104  2803              CMP      r0,#3                 ;504
000106  d005              BEQ      |L14.276|
000108  4621              MOV      r1,r4                 ;506
00010a  4628              MOV      r0,r5                 ;506
00010c  f7fffffe          BL       USBD_CtlError
000110  f04f0803          MOV      r8,#3                 ;507
                  |L14.276|
000114  e008              B        |L14.296|
000116  e009              B        |L14.300|
                  |L14.280|
000118  e006              B        |L14.296|
                  |L14.282|
00011a  4621              MOV      r1,r4                 ;515
00011c  4628              MOV      r0,r5                 ;515
00011e  f7fffffe          BL       USBD_CtlError
000122  f04f0803          MOV      r8,#3                 ;516
000126  bf00              NOP                            ;517
                  |L14.296|
000128  bf00              NOP                            ;489
00012a  e006              B        |L14.314|
                  |L14.300|
00012c  4621              MOV      r1,r4                 ;522
00012e  4628              MOV      r0,r5                 ;522
000130  f7fffffe          BL       USBD_CtlError
000134  f04f0803          MOV      r8,#3                 ;523
000138  bf00              NOP                            ;524
                  |L14.314|
00013a  bf00              NOP                            ;474
00013c  4640              MOV      r0,r8                 ;527
00013e  e76f              B        |L14.32|
;;;529    
                          ENDP


                          AREA ||i.USBD_CDC_TransmitPacket||, CODE, READONLY, ALIGN=2

                  USBD_CDC_TransmitPacket PROC
;;;797      */
;;;798    uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
000000  b570              PUSH     {r4-r6,lr}
;;;799    {
000002  4604              MOV      r4,r0
;;;800      USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
000004  f5047030          ADD      r0,r4,#0x2c0
000008  f8d412d4          LDR      r1,[r4,#0x2d4]
00000c  f8505021          LDR      r5,[r0,r1,LSL #2]
;;;801      USBD_StatusTypeDef ret = USBD_BUSY;
000010  2601              MOVS     r6,#1
;;;802    
;;;803    #ifdef USE_USBD_COMPOSITE
;;;804      /* Get the Endpoints addresses allocated for this class instance */
;;;805      CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
;;;806    #endif /* USE_USBD_COMPOSITE */
;;;807      if (pdev->pClassDataCmsit[pdev->classId] == NULL)
000012  f8d412d4          LDR      r1,[r4,#0x2d4]
000016  f8500021          LDR      r0,[r0,r1,LSL #2]
00001a  b908              CBNZ     r0,|L15.32|
;;;808      {
;;;809        return (uint8_t)USBD_FAIL;
00001c  2003              MOVS     r0,#3
                  |L15.30|
;;;810      }
;;;811    
;;;812      if (hcdc->TxState == 0U)
;;;813      {
;;;814        /* Tx Transfer in progress */
;;;815        hcdc->TxState = 1U;
;;;816    
;;;817        /* Update the packet total length */
;;;818        pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
;;;819    
;;;820        /* Transmit next packet */
;;;821        (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
;;;822    
;;;823        ret = USBD_OK;
;;;824      }
;;;825    
;;;826      return (uint8_t)ret;
;;;827    }
00001e  bd70              POP      {r4-r6,pc}
                  |L15.32|
000020  f8d50214          LDR      r0,[r5,#0x214]        ;812
000024  b9c8              CBNZ     r0,|L15.90|
000026  2001              MOVS     r0,#1                 ;815
000028  f8c50214          STR      r0,[r5,#0x214]        ;815
00002c  480c              LDR      r0,|L15.96|
00002e  7800              LDRB     r0,[r0,#0]            ;818  ; CDCInEpAdd
000030  f000000f          AND      r0,r0,#0xf            ;818
000034  eb000280          ADD      r2,r0,r0,LSL #2       ;818
000038  f1040014          ADD      r0,r4,#0x14           ;818
00003c  eb000082          ADD      r0,r0,r2,LSL #2       ;818
000040  f8d51210          LDR      r1,[r5,#0x210]        ;818
000044  6041              STR      r1,[r0,#4]            ;818
000046  4806              LDR      r0,|L15.96|
000048  7801              LDRB     r1,[r0,#0]            ;821  ; CDCInEpAdd
00004a  4620              MOV      r0,r4                 ;821
00004c  f8d53210          LDR      r3,[r5,#0x210]        ;821
000050  f8d52208          LDR      r2,[r5,#0x208]        ;821
000054  f7fffffe          BL       USBD_LL_Transmit
000058  2600              MOVS     r6,#0                 ;823
                  |L15.90|
00005a  4630              MOV      r0,r6                 ;826
00005c  e7df              B        |L15.30|
;;;828    
                          ENDP

00005e  0000              DCW      0x0000
                  |L15.96|
                          DCD      CDCInEpAdd

                          AREA ||.data||, DATA, ALIGN=2

                  USBD_CDC_DeviceQualifierDesc
000000  0a060002          DCB      0x0a,0x06,0x00,0x02
000004  00000040          DCB      0x00,0x00,0x00,0x40
000008  01000000          DCB      0x01,0x00,0x00,0x00
                  USBD_CDC
                          DCD      USBD_CDC_Init
                          DCD      USBD_CDC_DeInit
                          DCD      USBD_CDC_Setup
                          DCD      0x00000000
                          DCD      USBD_CDC_EP0_RxReady
                          DCD      USBD_CDC_DataIn
                          DCD      USBD_CDC_DataOut
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      USBD_CDC_GetHSCfgDesc
                          DCD      USBD_CDC_GetFSCfgDesc
                          DCD      USBD_CDC_GetOtherSpeedCfgDesc
                          DCD      USBD_CDC_GetDeviceQualifierDescriptor
                  USBD_CDC_CfgDesc
000044  09024300          DCB      0x09,0x02,0x43,0x00
000048  020100c0          DCB      0x02,0x01,0x00,0xc0
00004c  32090400          DCB      0x32,0x09,0x04,0x00
000050  00010202          DCB      0x00,0x01,0x02,0x02
000054  01000524          DCB      0x01,0x00,0x05,0x24
000058  00100105          DCB      0x00,0x10,0x01,0x05
00005c  24010001          DCB      0x24,0x01,0x00,0x01
000060  04240202          DCB      0x04,0x24,0x02,0x02
000064  05240600          DCB      0x05,0x24,0x06,0x00
000068  01070582          DCB      0x01,0x07,0x05,0x82
00006c  03080010          DCB      0x03,0x08,0x00,0x10
000070  09040100          DCB      0x09,0x04,0x01,0x00
000074  020a0000          DCB      0x02,0x0a,0x00,0x00
000078  00070501          DCB      0x00,0x07,0x05,0x01
00007c  02400000          DCB      0x02,0x40,0x00,0x00
000080  07058102          DCB      0x07,0x05,0x81,0x02
000084  400000            DCB      0x40,0x00,0x00
                  CDCInEpAdd
000087  81                DCB      0x81
                  CDCOutEpAdd
000088  01                DCB      0x01
                  CDCCmdEpAdd
000089  82                DCB      0x82

;*** Start embedded assembler ***

#line 1 "../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usbd_cdc_c_USBD_CDC____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___10_usbd_cdc_c_USBD_CDC____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usbd_cdc_c_USBD_CDC____REVSH|
#line 478
|__asm___10_usbd_cdc_c_USBD_CDC____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_usbd_cdc_c_USBD_CDC____RRX|
#line 665
|__asm___10_usbd_cdc_c_USBD_CDC____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
