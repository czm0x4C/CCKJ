; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_tim_ex.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_tim_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_tim_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c]
                          THUMB

                          AREA ||i.HAL_TIMEx_BreakCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_BreakCallback PROC
;;;2184     */
;;;2185   __weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2186   {
;;;2187     /* Prevent unused argument(s) compilation warning */
;;;2188     UNUSED(htim);
;;;2189   
;;;2190     /* NOTE : This function should not be modified, when the callback is needed,
;;;2191               the HAL_TIMEx_BreakCallback could be implemented in the user file
;;;2192      */
;;;2193   }
;;;2194   /**
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutCallback PROC
;;;2155     */
;;;2156   __weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2157   {
;;;2158     /* Prevent unused argument(s) compilation warning */
;;;2159     UNUSED(htim);
;;;2160   
;;;2161     /* NOTE : This function should not be modified, when the callback is needed,
;;;2162               the HAL_TIMEx_CommutCallback could be implemented in the user file
;;;2163      */
;;;2164   }
;;;2165   /**
                          ENDP


                          AREA ||i.HAL_TIMEx_CommutHalfCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_CommutHalfCpltCallback PROC
;;;2169     */
;;;2170   __weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;2171   {
;;;2172     /* Prevent unused argument(s) compilation warning */
;;;2173     UNUSED(htim);
;;;2174   
;;;2175     /* NOTE : This function should not be modified, when the callback is needed,
;;;2176               the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
;;;2177      */
;;;2178   }
;;;2179   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigBreakDeadTime||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigBreakDeadTime PROC
;;;2022     */
;;;2023   HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
000000  b510              PUSH     {r4,lr}
;;;2024                                                   TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
;;;2025   {
000002  4603              MOV      r3,r0
;;;2026     /* Keep this variable initialized to 0 as it is used to configure BDTR register */
;;;2027     uint32_t tmpbdtr = 0U;
000004  2200              MOVS     r2,#0
;;;2028   
;;;2029     /* Check the parameters */
;;;2030     assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
;;;2031     assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
;;;2032     assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
;;;2033     assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
;;;2034     assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
;;;2035     assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
;;;2036     assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
;;;2037     assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
;;;2038   
;;;2039     /* Check input state */
;;;2040     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  f893003c          LDRB     r0,[r3,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L4.20|
000010  2002              MOVS     r0,#2
                  |L4.18|
;;;2041   
;;;2042     /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
;;;2043        the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;2044   
;;;2045     /* Set the BDTR bits */
;;;2046     MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
;;;2047     MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
;;;2048     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
;;;2049     MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
;;;2050     MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
;;;2051     MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
;;;2052     MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
;;;2053   
;;;2054   
;;;2055     /* Set TIMx_BDTR */
;;;2056     htim->Instance->BDTR = tmpbdtr;
;;;2057   
;;;2058     __HAL_UNLOCK(htim);
;;;2059   
;;;2060     return HAL_OK;
;;;2061   }
000012  bd10              POP      {r4,pc}
                  |L4.20|
000014  2001              MOVS     r0,#1                 ;2040
000016  f883003c          STRB     r0,[r3,#0x3c]         ;2040
00001a  bf00              NOP                            ;2040
00001c  f02200ff          BIC      r0,r2,#0xff           ;2046
000020  68cc              LDR      r4,[r1,#0xc]          ;2046
000022  ea400204          ORR      r2,r0,r4              ;2046
000026  f4227040          BIC      r0,r2,#0x300          ;2047
00002a  688c              LDR      r4,[r1,#8]            ;2047
00002c  ea400204          ORR      r2,r0,r4              ;2047
000030  f4226080          BIC      r0,r2,#0x400          ;2048
000034  684c              LDR      r4,[r1,#4]            ;2048
000036  ea400204          ORR      r2,r0,r4              ;2048
00003a  f4226000          BIC      r0,r2,#0x800          ;2049
00003e  680c              LDR      r4,[r1,#0]            ;2049
000040  ea400204          ORR      r2,r0,r4              ;2049
000044  f4225080          BIC      r0,r2,#0x1000         ;2050
000048  690c              LDR      r4,[r1,#0x10]         ;2050
00004a  ea400204          ORR      r2,r0,r4              ;2050
00004e  f4225000          BIC      r0,r2,#0x2000         ;2051
000052  694c              LDR      r4,[r1,#0x14]         ;2051
000054  ea400204          ORR      r2,r0,r4              ;2051
000058  f4224080          BIC      r0,r2,#0x4000         ;2052
00005c  69cc              LDR      r4,[r1,#0x1c]         ;2052
00005e  ea400204          ORR      r2,r0,r4              ;2052
000062  6818              LDR      r0,[r3,#0]            ;2056
000064  6442              STR      r2,[r0,#0x44]         ;2056
000066  bf00              NOP                            ;2058
000068  2000              MOVS     r0,#0                 ;2058
00006a  f883003c          STRB     r0,[r3,#0x3c]         ;2058
00006e  bf00              NOP                            ;2058
000070  bf00              NOP                            ;2060
000072  e7ce              B        |L4.18|
;;;2062   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutEvent||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutEvent PROC
;;;1799     */
;;;1800   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
000000  b510              PUSH     {r4,lr}
;;;1801                                                 uint32_t  CommutationSource)
;;;1802   {
000002  4603              MOV      r3,r0
;;;1803     /* Check the parameters */
;;;1804     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1805     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1806   
;;;1807     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  f893003c          LDRB     r0,[r3,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L5.18|
00000e  2002              MOVS     r0,#2
                  |L5.16|
;;;1808   
;;;1809     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1810         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1811     {
;;;1812       /* Select the Input trigger */
;;;1813       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1814       htim->Instance->SMCR |= InputTrigger;
;;;1815     }
;;;1816   
;;;1817     /* Select the Capture Compare preload feature */
;;;1818     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1819     /* Select the Commutation event source */
;;;1820     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1821     htim->Instance->CR2 |= CommutationSource;
;;;1822   
;;;1823     /* Disable Commutation Interrupt */
;;;1824     __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
;;;1825   
;;;1826     /* Disable Commutation DMA request */
;;;1827     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
;;;1828   
;;;1829     __HAL_UNLOCK(htim);
;;;1830   
;;;1831     return HAL_OK;
;;;1832   }
000010  bd10              POP      {r4,pc}
                  |L5.18|
000012  2001              MOVS     r0,#1                 ;1807
000014  f883003c          STRB     r0,[r3,#0x3c]         ;1807
000018  bf00              NOP                            ;1807
00001a  b129              CBZ      r1,|L5.40|
00001c  2910              CMP      r1,#0x10              ;1809
00001e  d003              BEQ      |L5.40|
000020  2920              CMP      r1,#0x20              ;1810
000022  d001              BEQ      |L5.40|
000024  2930              CMP      r1,#0x30              ;1810
000026  d10a              BNE      |L5.62|
                  |L5.40|
000028  6818              LDR      r0,[r3,#0]            ;1813
00002a  6880              LDR      r0,[r0,#8]            ;1813
00002c  f0200070          BIC      r0,r0,#0x70           ;1813
000030  681c              LDR      r4,[r3,#0]            ;1813
000032  60a0              STR      r0,[r4,#8]            ;1813
000034  6818              LDR      r0,[r3,#0]            ;1814
000036  6880              LDR      r0,[r0,#8]            ;1814
000038  4308              ORRS     r0,r0,r1              ;1814
00003a  681c              LDR      r4,[r3,#0]            ;1814
00003c  60a0              STR      r0,[r4,#8]            ;1814
                  |L5.62|
00003e  6818              LDR      r0,[r3,#0]            ;1818
000040  6840              LDR      r0,[r0,#4]            ;1818
000042  f0400001          ORR      r0,r0,#1              ;1818
000046  681c              LDR      r4,[r3,#0]            ;1818
000048  6060              STR      r0,[r4,#4]            ;1818
00004a  6818              LDR      r0,[r3,#0]            ;1820
00004c  6840              LDR      r0,[r0,#4]            ;1820
00004e  f0200004          BIC      r0,r0,#4              ;1820
000052  681c              LDR      r4,[r3,#0]            ;1820
000054  6060              STR      r0,[r4,#4]            ;1820
000056  6818              LDR      r0,[r3,#0]            ;1821
000058  6840              LDR      r0,[r0,#4]            ;1821
00005a  4310              ORRS     r0,r0,r2              ;1821
00005c  681c              LDR      r4,[r3,#0]            ;1821
00005e  6060              STR      r0,[r4,#4]            ;1821
000060  6818              LDR      r0,[r3,#0]            ;1824
000062  68c0              LDR      r0,[r0,#0xc]          ;1824
000064  f0200020          BIC      r0,r0,#0x20           ;1824
000068  681c              LDR      r4,[r3,#0]            ;1824
00006a  60e0              STR      r0,[r4,#0xc]          ;1824
00006c  6818              LDR      r0,[r3,#0]            ;1827
00006e  68c0              LDR      r0,[r0,#0xc]          ;1827
000070  f4205000          BIC      r0,r0,#0x2000         ;1827
000074  681c              LDR      r4,[r3,#0]            ;1827
000076  60e0              STR      r0,[r4,#0xc]          ;1827
000078  bf00              NOP                            ;1829
00007a  2000              MOVS     r0,#0                 ;1829
00007c  f883003c          STRB     r0,[r3,#0x3c]         ;1829
000080  bf00              NOP                            ;1829
000082  bf00              NOP                            ;1831
000084  e7c4              B        |L5.16|
;;;1833   
                          ENDP


                          AREA ||i.HAL_TIMEx_ConfigCommutEvent_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_ConfigCommutEvent_DMA PROC
;;;1912     */
;;;1913   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
000000  b510              PUSH     {r4,lr}
;;;1914                                                     uint32_t  CommutationSource)
;;;1915   {
000002  4603              MOV      r3,r0
;;;1916     /* Check the parameters */
;;;1917     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1918     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1919   
;;;1920     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  f893003c          LDRB     r0,[r3,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L6.18|
00000e  2002              MOVS     r0,#2
                  |L6.16|
;;;1921   
;;;1922     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1923         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1924     {
;;;1925       /* Select the Input trigger */
;;;1926       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1927       htim->Instance->SMCR |= InputTrigger;
;;;1928     }
;;;1929   
;;;1930     /* Select the Capture Compare preload feature */
;;;1931     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1932     /* Select the Commutation event source */
;;;1933     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1934     htim->Instance->CR2 |= CommutationSource;
;;;1935   
;;;1936     /* Enable the Commutation DMA Request */
;;;1937     /* Set the DMA Commutation Callback */
;;;1938     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
;;;1939     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
;;;1940     /* Set the DMA error callback */
;;;1941     htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
;;;1942   
;;;1943     /* Disable Commutation Interrupt */
;;;1944     __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
;;;1945   
;;;1946     /* Enable the Commutation DMA Request */
;;;1947     __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
;;;1948   
;;;1949     __HAL_UNLOCK(htim);
;;;1950   
;;;1951     return HAL_OK;
;;;1952   }
000010  bd10              POP      {r4,pc}
                  |L6.18|
000012  2001              MOVS     r0,#1                 ;1920
000014  f883003c          STRB     r0,[r3,#0x3c]         ;1920
000018  bf00              NOP                            ;1920
00001a  b129              CBZ      r1,|L6.40|
00001c  2910              CMP      r1,#0x10              ;1922
00001e  d003              BEQ      |L6.40|
000020  2920              CMP      r1,#0x20              ;1923
000022  d001              BEQ      |L6.40|
000024  2930              CMP      r1,#0x30              ;1923
000026  d10a              BNE      |L6.62|
                  |L6.40|
000028  6818              LDR      r0,[r3,#0]            ;1926
00002a  6880              LDR      r0,[r0,#8]            ;1926
00002c  f0200070          BIC      r0,r0,#0x70           ;1926
000030  681c              LDR      r4,[r3,#0]            ;1926
000032  60a0              STR      r0,[r4,#8]            ;1926
000034  6818              LDR      r0,[r3,#0]            ;1927
000036  6880              LDR      r0,[r0,#8]            ;1927
000038  4308              ORRS     r0,r0,r1              ;1927
00003a  681c              LDR      r4,[r3,#0]            ;1927
00003c  60a0              STR      r0,[r4,#8]            ;1927
                  |L6.62|
00003e  6818              LDR      r0,[r3,#0]            ;1931
000040  6840              LDR      r0,[r0,#4]            ;1931
000042  f0400001          ORR      r0,r0,#1              ;1931
000046  681c              LDR      r4,[r3,#0]            ;1931
000048  6060              STR      r0,[r4,#4]            ;1931
00004a  6818              LDR      r0,[r3,#0]            ;1933
00004c  6840              LDR      r0,[r0,#4]            ;1933
00004e  f0200004          BIC      r0,r0,#4              ;1933
000052  681c              LDR      r4,[r3,#0]            ;1933
000054  6060              STR      r0,[r4,#4]            ;1933
000056  6818              LDR      r0,[r3,#0]            ;1934
000058  6840              LDR      r0,[r0,#4]            ;1934
00005a  4310              ORRS     r0,r0,r2              ;1934
00005c  681c              LDR      r4,[r3,#0]            ;1934
00005e  6060              STR      r0,[r4,#4]            ;1934
000060  4c0d              LDR      r4,|L6.152|
000062  6b58              LDR      r0,[r3,#0x34]         ;1938
000064  63c4              STR      r4,[r0,#0x3c]         ;1938
000066  4c0d              LDR      r4,|L6.156|
000068  6b58              LDR      r0,[r3,#0x34]         ;1939
00006a  6404              STR      r4,[r0,#0x40]         ;1939
00006c  4c0c              LDR      r4,|L6.160|
00006e  6b58              LDR      r0,[r3,#0x34]         ;1941
000070  64c4              STR      r4,[r0,#0x4c]         ;1941
000072  6818              LDR      r0,[r3,#0]            ;1944
000074  68c0              LDR      r0,[r0,#0xc]          ;1944
000076  f0200020          BIC      r0,r0,#0x20           ;1944
00007a  681c              LDR      r4,[r3,#0]            ;1944
00007c  60e0              STR      r0,[r4,#0xc]          ;1944
00007e  6818              LDR      r0,[r3,#0]            ;1947
000080  68c0              LDR      r0,[r0,#0xc]          ;1947
000082  f4405000          ORR      r0,r0,#0x2000         ;1947
000086  681c              LDR      r4,[r3,#0]            ;1947
000088  60e0              STR      r0,[r4,#0xc]          ;1947
00008a  bf00              NOP                            ;1949
00008c  2000              MOVS     r0,#0                 ;1949
00008e  f883003c          STRB     r0,[r3,#0x3c]         ;1949
000092  bf00              NOP                            ;1949
000094  bf00              NOP                            ;1951
000096  e7bb              B        |L6.16|
;;;1953   
                          ENDP

                  |L6.152|
                          DCD      TIMEx_DMACommutationCplt
                  |L6.156|
                          DCD      TIMEx_DMACommutationHalfCplt
                  |L6.160|
                          DCD      TIM_DMAError

                          AREA ||i.HAL_TIMEx_ConfigCommutEvent_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_ConfigCommutEvent_IT PROC
;;;1855     */
;;;1856   HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
000000  b510              PUSH     {r4,lr}
;;;1857                                                    uint32_t  CommutationSource)
;;;1858   {
000002  4603              MOV      r3,r0
;;;1859     /* Check the parameters */
;;;1860     assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
;;;1861     assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));
;;;1862   
;;;1863     __HAL_LOCK(htim);
000004  bf00              NOP      
000006  f893003c          LDRB     r0,[r3,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L7.18|
00000e  2002              MOVS     r0,#2
                  |L7.16|
;;;1864   
;;;1865     if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
;;;1866         (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
;;;1867     {
;;;1868       /* Select the Input trigger */
;;;1869       htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;1870       htim->Instance->SMCR |= InputTrigger;
;;;1871     }
;;;1872   
;;;1873     /* Select the Capture Compare preload feature */
;;;1874     htim->Instance->CR2 |= TIM_CR2_CCPC;
;;;1875     /* Select the Commutation event source */
;;;1876     htim->Instance->CR2 &= ~TIM_CR2_CCUS;
;;;1877     htim->Instance->CR2 |= CommutationSource;
;;;1878   
;;;1879     /* Disable Commutation DMA request */
;;;1880     __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
;;;1881   
;;;1882     /* Enable the Commutation Interrupt */
;;;1883     __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
;;;1884   
;;;1885     __HAL_UNLOCK(htim);
;;;1886   
;;;1887     return HAL_OK;
;;;1888   }
000010  bd10              POP      {r4,pc}
                  |L7.18|
000012  2001              MOVS     r0,#1                 ;1863
000014  f883003c          STRB     r0,[r3,#0x3c]         ;1863
000018  bf00              NOP                            ;1863
00001a  b129              CBZ      r1,|L7.40|
00001c  2910              CMP      r1,#0x10              ;1865
00001e  d003              BEQ      |L7.40|
000020  2920              CMP      r1,#0x20              ;1866
000022  d001              BEQ      |L7.40|
000024  2930              CMP      r1,#0x30              ;1866
000026  d10a              BNE      |L7.62|
                  |L7.40|
000028  6818              LDR      r0,[r3,#0]            ;1869
00002a  6880              LDR      r0,[r0,#8]            ;1869
00002c  f0200070          BIC      r0,r0,#0x70           ;1869
000030  681c              LDR      r4,[r3,#0]            ;1869
000032  60a0              STR      r0,[r4,#8]            ;1869
000034  6818              LDR      r0,[r3,#0]            ;1870
000036  6880              LDR      r0,[r0,#8]            ;1870
000038  4308              ORRS     r0,r0,r1              ;1870
00003a  681c              LDR      r4,[r3,#0]            ;1870
00003c  60a0              STR      r0,[r4,#8]            ;1870
                  |L7.62|
00003e  6818              LDR      r0,[r3,#0]            ;1874
000040  6840              LDR      r0,[r0,#4]            ;1874
000042  f0400001          ORR      r0,r0,#1              ;1874
000046  681c              LDR      r4,[r3,#0]            ;1874
000048  6060              STR      r0,[r4,#4]            ;1874
00004a  6818              LDR      r0,[r3,#0]            ;1876
00004c  6840              LDR      r0,[r0,#4]            ;1876
00004e  f0200004          BIC      r0,r0,#4              ;1876
000052  681c              LDR      r4,[r3,#0]            ;1876
000054  6060              STR      r0,[r4,#4]            ;1876
000056  6818              LDR      r0,[r3,#0]            ;1877
000058  6840              LDR      r0,[r0,#4]            ;1877
00005a  4310              ORRS     r0,r0,r2              ;1877
00005c  681c              LDR      r4,[r3,#0]            ;1877
00005e  6060              STR      r0,[r4,#4]            ;1877
000060  6818              LDR      r0,[r3,#0]            ;1880
000062  68c0              LDR      r0,[r0,#0xc]          ;1880
000064  f4205000          BIC      r0,r0,#0x2000         ;1880
000068  681c              LDR      r4,[r3,#0]            ;1880
00006a  60e0              STR      r0,[r4,#0xc]          ;1880
00006c  6818              LDR      r0,[r3,#0]            ;1883
00006e  68c0              LDR      r0,[r0,#0xc]          ;1883
000070  f0400020          ORR      r0,r0,#0x20           ;1883
000074  681c              LDR      r4,[r3,#0]            ;1883
000076  60e0              STR      r0,[r4,#0xc]          ;1883
000078  bf00              NOP                            ;1885
00007a  2000              MOVS     r0,#0                 ;1885
00007c  f883003c          STRB     r0,[r3,#0x3c]         ;1885
000080  bf00              NOP                            ;1885
000082  bf00              NOP                            ;1887
000084  e7c4              B        |L7.16|
;;;1889   
                          ENDP


                          AREA ||i.HAL_TIMEx_GetChannelNState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_GetChannelNState PROC
;;;2232     */
;;;2233   HAL_TIM_ChannelStateTypeDef HAL_TIMEx_GetChannelNState(TIM_HandleTypeDef *htim,  uint32_t ChannelN)
000000  4602              MOV      r2,r0
;;;2234   {
;;;2235     HAL_TIM_ChannelStateTypeDef channel_state;
;;;2236   
;;;2237     /* Check the parameters */
;;;2238     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, ChannelN));
;;;2239   
;;;2240     channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
000002  b911              CBNZ     r1,|L8.10|
000004  f8923042          LDRB     r3,[r2,#0x42]
000008  e00b              B        |L8.34|
                  |L8.10|
00000a  2904              CMP      r1,#4
00000c  d102              BNE      |L8.20|
00000e  2343              MOVS     r3,#0x43
000010  5c9b              LDRB     r3,[r3,r2]
000012  e006              B        |L8.34|
                  |L8.20|
000014  2908              CMP      r1,#8
000016  d102              BNE      |L8.30|
000018  2344              MOVS     r3,#0x44
00001a  5c9b              LDRB     r3,[r3,r2]
00001c  e001              B        |L8.34|
                  |L8.30|
00001e  2345              MOVS     r3,#0x45
000020  5c9b              LDRB     r3,[r3,r2]
                  |L8.34|
000022  4618              MOV      r0,r3
;;;2241   
;;;2242     return channel_state;
;;;2243   }
000024  4770              BX       lr
;;;2244   /**
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_DeInit PROC
;;;238      */
;;;239    HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;240    {
000002  4604              MOV      r4,r0
;;;241      /* Check the parameters */
;;;242      assert_param(IS_TIM_INSTANCE(htim->Instance));
;;;243    
;;;244      htim->State = HAL_TIM_STATE_BUSY;
000004  2002              MOVS     r0,#2
000006  f884003d          STRB     r0,[r4,#0x3d]
;;;245    
;;;246      /* Disable the TIM Peripheral Clock */
;;;247      __HAL_TIM_DISABLE(htim);
00000a  bf00              NOP      
00000c  6820              LDR      r0,[r4,#0]
00000e  6a00              LDR      r0,[r0,#0x20]
000010  f2411111          MOV      r1,#0x1111
000014  4008              ANDS     r0,r0,r1
000016  b950              CBNZ     r0,|L9.46|
000018  6820              LDR      r0,[r4,#0]
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  1089              ASRS     r1,r1,#2
00001e  4008              ANDS     r0,r0,r1
000020  b928              CBNZ     r0,|L9.46|
000022  6820              LDR      r0,[r4,#0]
000024  6800              LDR      r0,[r0,#0]
000026  f0200001          BIC      r0,r0,#1
00002a  6821              LDR      r1,[r4,#0]
00002c  6008              STR      r0,[r1,#0]
                  |L9.46|
00002e  bf00              NOP      
;;;248    
;;;249    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;250      if (htim->HallSensor_MspDeInitCallback == NULL)
;;;251      {
;;;252        htim->HallSensor_MspDeInitCallback = HAL_TIMEx_HallSensor_MspDeInit;
;;;253      }
;;;254      /* DeInit the low level hardware */
;;;255      htim->HallSensor_MspDeInitCallback(htim);
;;;256    #else
;;;257      /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
;;;258      HAL_TIMEx_HallSensor_MspDeInit(htim);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       HAL_TIMEx_HallSensor_MspDeInit
;;;259    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;260    
;;;261      /* Change the DMA burst operation state */
;;;262      htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
000036  2000              MOVS     r0,#0
000038  f8840046          STRB     r0,[r4,#0x46]
;;;263    
;;;264      /* Change the TIM channels state */
;;;265      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
00003c  f884003e          STRB     r0,[r4,#0x3e]
;;;266      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
000040  2100              MOVS     r1,#0
000042  203f              MOVS     r0,#0x3f
000044  5501              STRB     r1,[r0,r4]
;;;267      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
000046  2000              MOVS     r0,#0
000048  f8840042          STRB     r0,[r4,#0x42]
;;;268      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
00004c  2043              MOVS     r0,#0x43
00004e  5501              STRB     r1,[r0,r4]
;;;269    
;;;270      /* Change TIM state */
;;;271      htim->State = HAL_TIM_STATE_RESET;
000050  2000              MOVS     r0,#0
000052  f884003d          STRB     r0,[r4,#0x3d]
;;;272    
;;;273      /* Release Lock */
;;;274      __HAL_UNLOCK(htim);
000056  bf00              NOP      
000058  f884003c          STRB     r0,[r4,#0x3c]
00005c  bf00              NOP      
;;;275    
;;;276      return HAL_OK;
;;;277    }
00005e  bd10              POP      {r4,pc}
;;;278    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_GetState||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_GetState PROC
;;;2217     */
;;;2218   HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
000000  4601              MOV      r1,r0
;;;2219   {
;;;2220     return htim->State;
000002  f891003d          LDRB     r0,[r1,#0x3d]
;;;2221   }
000006  4770              BX       lr
;;;2222   
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Init||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Init PROC
;;;137      */
;;;138    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
000000  b530              PUSH     {r4,r5,lr}
;;;139    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;140      TIM_OC_InitTypeDef OC_Config;
;;;141    
;;;142      /* Check the TIM handle allocation */
;;;143      if (htim == NULL)
000008  b914              CBNZ     r4,|L11.16|
;;;144      {
;;;145        return HAL_ERROR;
00000a  2001              MOVS     r0,#1
                  |L11.12|
;;;146      }
;;;147    
;;;148      /* Check the parameters */
;;;149      assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));
;;;150      assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
;;;151      assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
;;;152      assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
;;;153      assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
;;;154      assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
;;;155      assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
;;;156    
;;;157      if (htim->State == HAL_TIM_STATE_RESET)
;;;158      {
;;;159        /* Allocate lock resource and initialize it */
;;;160        htim->Lock = HAL_UNLOCKED;
;;;161    
;;;162    #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;163        /* Reset interrupt callbacks to legacy week callbacks */
;;;164        TIM_ResetCallback(htim);
;;;165    
;;;166        if (htim->HallSensor_MspInitCallback == NULL)
;;;167        {
;;;168          htim->HallSensor_MspInitCallback = HAL_TIMEx_HallSensor_MspInit;
;;;169        }
;;;170        /* Init the low level hardware : GPIO, CLOCK, NVIC */
;;;171        htim->HallSensor_MspInitCallback(htim);
;;;172    #else
;;;173        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;174        HAL_TIMEx_HallSensor_MspInit(htim);
;;;175    #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;176      }
;;;177    
;;;178      /* Set the TIM state */
;;;179      htim->State = HAL_TIM_STATE_BUSY;
;;;180    
;;;181      /* Configure the Time base in the Encoder Mode */
;;;182      TIM_Base_SetConfig(htim->Instance, &htim->Init);
;;;183    
;;;184      /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
;;;185      TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
;;;186    
;;;187      /* Reset the IC1PSC Bits */
;;;188      htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
;;;189      /* Set the IC1PSC value */
;;;190      htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
;;;191    
;;;192      /* Enable the Hall sensor interface (XOR function of the three inputs) */
;;;193      htim->Instance->CR2 |= TIM_CR2_TI1S;
;;;194    
;;;195      /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
;;;196      htim->Instance->SMCR &= ~TIM_SMCR_TS;
;;;197      htim->Instance->SMCR |= TIM_TS_TI1F_ED;
;;;198    
;;;199      /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
;;;200      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
;;;201      htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
;;;202    
;;;203      /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
;;;204      OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
;;;205      OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
;;;206      OC_Config.OCMode = TIM_OCMODE_PWM2;
;;;207      OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
;;;208      OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
;;;209      OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
;;;210      OC_Config.Pulse = sConfig->Commutation_Delay;
;;;211    
;;;212      TIM_OC2_SetConfig(htim->Instance, &OC_Config);
;;;213    
;;;214      /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
;;;215        register to 101 */
;;;216      htim->Instance->CR2 &= ~TIM_CR2_MMS;
;;;217      htim->Instance->CR2 |= TIM_TRGO_OC2REF;
;;;218    
;;;219      /* Initialize the DMA burst operation state */
;;;220      htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
;;;221    
;;;222      /* Initialize the TIM channels state */
;;;223      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
;;;224      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
;;;225      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
;;;226      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
;;;227    
;;;228      /* Initialize the TIM state*/
;;;229      htim->State = HAL_TIM_STATE_READY;
;;;230    
;;;231      return HAL_OK;
;;;232    }
00000c  b007              ADD      sp,sp,#0x1c
00000e  bd30              POP      {r4,r5,pc}
                  |L11.16|
000010  f894003d          LDRB     r0,[r4,#0x3d]         ;157
000014  b928              CBNZ     r0,|L11.34|
000016  2000              MOVS     r0,#0                 ;160
000018  f884003c          STRB     r0,[r4,#0x3c]         ;160
00001c  4620              MOV      r0,r4                 ;174
00001e  f7fffffe          BL       HAL_TIMEx_HallSensor_MspInit
                  |L11.34|
000022  2002              MOVS     r0,#2                 ;179
000024  f884003d          STRB     r0,[r4,#0x3d]         ;179
000028  1d21              ADDS     r1,r4,#4              ;182
00002a  6820              LDR      r0,[r4,#0]            ;182
00002c  f7fffffe          BL       TIM_Base_SetConfig
000030  68ab              LDR      r3,[r5,#8]            ;185
000032  6829              LDR      r1,[r5,#0]            ;185
000034  2203              MOVS     r2,#3                 ;185
000036  6820              LDR      r0,[r4,#0]            ;185
000038  f7fffffe          BL       TIM_TI1_SetConfig
00003c  6820              LDR      r0,[r4,#0]            ;188
00003e  6980              LDR      r0,[r0,#0x18]         ;188
000040  f020000c          BIC      r0,r0,#0xc            ;188
000044  6821              LDR      r1,[r4,#0]            ;188
000046  6188              STR      r0,[r1,#0x18]         ;188
000048  6820              LDR      r0,[r4,#0]            ;190
00004a  6980              LDR      r0,[r0,#0x18]         ;190
00004c  6869              LDR      r1,[r5,#4]            ;190
00004e  4308              ORRS     r0,r0,r1              ;190
000050  6821              LDR      r1,[r4,#0]            ;190
000052  6188              STR      r0,[r1,#0x18]         ;190
000054  6820              LDR      r0,[r4,#0]            ;193
000056  6840              LDR      r0,[r0,#4]            ;193
000058  f0400080          ORR      r0,r0,#0x80           ;193
00005c  6821              LDR      r1,[r4,#0]            ;193
00005e  6048              STR      r0,[r1,#4]            ;193
000060  6820              LDR      r0,[r4,#0]            ;196
000062  6880              LDR      r0,[r0,#8]            ;196
000064  f0200070          BIC      r0,r0,#0x70           ;196
000068  6821              LDR      r1,[r4,#0]            ;196
00006a  6088              STR      r0,[r1,#8]            ;196
00006c  6820              LDR      r0,[r4,#0]            ;197
00006e  6880              LDR      r0,[r0,#8]            ;197
000070  f0400040          ORR      r0,r0,#0x40           ;197
000074  6821              LDR      r1,[r4,#0]            ;197
000076  6088              STR      r0,[r1,#8]            ;197
000078  6820              LDR      r0,[r4,#0]            ;200
00007a  6880              LDR      r0,[r0,#8]            ;200
00007c  f0200007          BIC      r0,r0,#7              ;200
000080  6821              LDR      r1,[r4,#0]            ;200
000082  6088              STR      r0,[r1,#8]            ;200
000084  6820              LDR      r0,[r4,#0]            ;201
000086  6880              LDR      r0,[r0,#8]            ;201
000088  f0400004          ORR      r0,r0,#4              ;201
00008c  6821              LDR      r1,[r4,#0]            ;201
00008e  6088              STR      r0,[r1,#8]            ;201
000090  2000              MOVS     r0,#0                 ;204
000092  9004              STR      r0,[sp,#0x10]         ;204
000094  9005              STR      r0,[sp,#0x14]         ;205
000096  2070              MOVS     r0,#0x70              ;206
000098  9000              STR      r0,[sp,#0]            ;206
00009a  2000              MOVS     r0,#0                 ;207
00009c  9006              STR      r0,[sp,#0x18]         ;207
00009e  9003              STR      r0,[sp,#0xc]          ;208
0000a0  9002              STR      r0,[sp,#8]            ;209
0000a2  68e8              LDR      r0,[r5,#0xc]          ;210
0000a4  9001              STR      r0,[sp,#4]            ;210
0000a6  4669              MOV      r1,sp                 ;212
0000a8  6820              LDR      r0,[r4,#0]            ;212
0000aa  f7fffffe          BL       TIM_OC2_SetConfig
0000ae  6820              LDR      r0,[r4,#0]            ;216
0000b0  6840              LDR      r0,[r0,#4]            ;216
0000b2  f0200070          BIC      r0,r0,#0x70           ;216
0000b6  6821              LDR      r1,[r4,#0]            ;216
0000b8  6048              STR      r0,[r1,#4]            ;216
0000ba  6820              LDR      r0,[r4,#0]            ;217
0000bc  6840              LDR      r0,[r0,#4]            ;217
0000be  f0400050          ORR      r0,r0,#0x50           ;217
0000c2  6821              LDR      r1,[r4,#0]            ;217
0000c4  6048              STR      r0,[r1,#4]            ;217
0000c6  2001              MOVS     r0,#1                 ;220
0000c8  f8840046          STRB     r0,[r4,#0x46]         ;220
0000cc  f884003e          STRB     r0,[r4,#0x3e]         ;223
0000d0  2101              MOVS     r1,#1                 ;224
0000d2  203f              MOVS     r0,#0x3f              ;224
0000d4  5501              STRB     r1,[r0,r4]            ;224
0000d6  2001              MOVS     r0,#1                 ;225
0000d8  f8840042          STRB     r0,[r4,#0x42]         ;225
0000dc  2043              MOVS     r0,#0x43              ;226
0000de  5501              STRB     r1,[r0,r4]            ;226
0000e0  2001              MOVS     r0,#1                 ;229
0000e2  f884003d          STRB     r0,[r4,#0x3d]         ;229
0000e6  2000              MOVS     r0,#0                 ;231
0000e8  e790              B        |L11.12|
;;;233    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspDeInit PROC
;;;298      */
;;;299    __weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;300    {
;;;301      /* Prevent unused argument(s) compilation warning */
;;;302      UNUSED(htim);
;;;303    
;;;304      /* NOTE : This function should not be modified, when the callback is needed,
;;;305                the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
;;;306       */
;;;307    }
;;;308    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_MspInit PROC
;;;283      */
;;;284    __weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
000000  4770              BX       lr
;;;285    {
;;;286      /* Prevent unused argument(s) compilation warning */
;;;287      UNUSED(htim);
;;;288    
;;;289      /* NOTE : This function should not be modified, when the callback is needed,
;;;290                the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
;;;291       */
;;;292    }
;;;293    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Start||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start PROC
;;;313      */
;;;314    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;315    {
000004  4604              MOV      r4,r0
;;;316      uint32_t tmpsmcr;
;;;317      HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
000006  f894603e          LDRB     r6,[r4,#0x3e]
;;;318      HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
00000a  203f              MOVS     r0,#0x3f
00000c  5d07              LDRB     r7,[r0,r4]
;;;319      HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
00000e  f8948042          LDRB     r8,[r4,#0x42]
;;;320      HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
000012  2043              MOVS     r0,#0x43
000014  f8109004          LDRB     r9,[r0,r4]
;;;321    
;;;322      /* Check the parameters */
;;;323      assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));
;;;324    
;;;325      /* Check the TIM channels state */
;;;326      if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
000018  2e01              CMP      r6,#1
00001a  d107              BNE      |L14.44|
;;;327          || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
00001c  2f01              CMP      r7,#1
00001e  d105              BNE      |L14.44|
;;;328          || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
000020  f1b80f01          CMP      r8,#1
000024  d102              BNE      |L14.44|
;;;329          || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
000026  f1b90f01          CMP      r9,#1
00002a  d002              BEQ      |L14.50|
                  |L14.44|
;;;330      {
;;;331        return HAL_ERROR;
00002c  2001              MOVS     r0,#1
                  |L14.46|
;;;332      }
;;;333    
;;;334      /* Set the TIM channels state */
;;;335      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;336      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;337      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;338      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;339    
;;;340      /* Enable the Input Capture channel 1
;;;341      (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
;;;342      TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;343      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;344    
;;;345      /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;346      if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;347      {
;;;348        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;349        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;350        {
;;;351          __HAL_TIM_ENABLE(htim);
;;;352        }
;;;353      }
;;;354      else
;;;355      {
;;;356        __HAL_TIM_ENABLE(htim);
;;;357      }
;;;358    
;;;359      /* Return function status */
;;;360      return HAL_OK;
;;;361    }
00002e  e8bd87f0          POP      {r4-r10,pc}
                  |L14.50|
000032  2002              MOVS     r0,#2                 ;335
000034  f884003e          STRB     r0,[r4,#0x3e]         ;335
000038  2102              MOVS     r1,#2                 ;336
00003a  203f              MOVS     r0,#0x3f              ;336
00003c  5501              STRB     r1,[r0,r4]            ;336
00003e  2002              MOVS     r0,#2                 ;337
000040  f8840042          STRB     r0,[r4,#0x42]         ;337
000044  2043              MOVS     r0,#0x43              ;338
000046  5501              STRB     r1,[r0,r4]            ;338
000048  2201              MOVS     r2,#1                 ;343
00004a  2100              MOVS     r1,#0                 ;343
00004c  6820              LDR      r0,[r4,#0]            ;343
00004e  f7fffffe          BL       TIM_CCxChannelCmd
000052  491a              LDR      r1,|L14.188|
000054  6820              LDR      r0,[r4,#0]            ;346
000056  4288              CMP      r0,r1                 ;346
000058  d01b              BEQ      |L14.146|
00005a  6820              LDR      r0,[r4,#0]            ;346
00005c  f1b04f80          CMP      r0,#0x40000000        ;346
000060  d017              BEQ      |L14.146|
000062  4917              LDR      r1,|L14.192|
000064  6820              LDR      r0,[r4,#0]            ;346
000066  4288              CMP      r0,r1                 ;346
000068  d013              BEQ      |L14.146|
00006a  4916              LDR      r1,|L14.196|
00006c  6820              LDR      r0,[r4,#0]            ;346
00006e  4288              CMP      r0,r1                 ;346
000070  d00f              BEQ      |L14.146|
000072  4915              LDR      r1,|L14.200|
000074  6820              LDR      r0,[r4,#0]            ;346
000076  4288              CMP      r0,r1                 ;346
000078  d00b              BEQ      |L14.146|
00007a  4914              LDR      r1,|L14.204|
00007c  6820              LDR      r0,[r4,#0]            ;346
00007e  4288              CMP      r0,r1                 ;346
000080  d007              BEQ      |L14.146|
000082  4913              LDR      r1,|L14.208|
000084  6820              LDR      r0,[r4,#0]            ;346
000086  4288              CMP      r0,r1                 ;346
000088  d003              BEQ      |L14.146|
00008a  4912              LDR      r1,|L14.212|
00008c  6820              LDR      r0,[r4,#0]            ;346
00008e  4288              CMP      r0,r1                 ;346
000090  d10c              BNE      |L14.172|
                  |L14.146|
000092  6820              LDR      r0,[r4,#0]            ;348
000094  6880              LDR      r0,[r0,#8]            ;348
000096  f0000507          AND      r5,r0,#7              ;348
00009a  2d06              CMP      r5,#6                 ;349
00009c  d00c              BEQ      |L14.184|
00009e  6820              LDR      r0,[r4,#0]            ;351
0000a0  6800              LDR      r0,[r0,#0]            ;351
0000a2  f0400001          ORR      r0,r0,#1              ;351
0000a6  6821              LDR      r1,[r4,#0]            ;351
0000a8  6008              STR      r0,[r1,#0]            ;351
0000aa  e005              B        |L14.184|
                  |L14.172|
0000ac  6820              LDR      r0,[r4,#0]            ;356
0000ae  6800              LDR      r0,[r0,#0]            ;356
0000b0  f0400001          ORR      r0,r0,#1              ;356
0000b4  6821              LDR      r1,[r4,#0]            ;356
0000b6  6008              STR      r0,[r1,#0]            ;356
                  |L14.184|
0000b8  2000              MOVS     r0,#0                 ;360
0000ba  e7b8              B        |L14.46|
;;;362    
                          ENDP

                  |L14.188|
                          DCD      0x40010000
                  |L14.192|
                          DCD      0x40000400
                  |L14.196|
                          DCD      0x40000800
                  |L14.200|
                          DCD      0x40000c00
                  |L14.204|
                          DCD      0x40010400
                  |L14.208|
                          DCD      0x40014000
                  |L14.212|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_HallSensor_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_DMA PROC
;;;485      */
;;;486    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;487    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;488      uint32_t tmpsmcr;
;;;489      HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
00000a  f894803e          LDRB     r8,[r4,#0x3e]
;;;490      HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
00000e  f8949042          LDRB     r9,[r4,#0x42]
;;;491    
;;;492      /* Check the parameters */
;;;493      assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));
;;;494    
;;;495      /* Set the TIM channel state */
;;;496      if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
000012  f1b80f02          CMP      r8,#2
000016  d002              BEQ      |L15.30|
;;;497          || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
000018  f1b90f02          CMP      r9,#2
00001c  d102              BNE      |L15.36|
                  |L15.30|
;;;498      {
;;;499        return HAL_BUSY;
00001e  2002              MOVS     r0,#2
                  |L15.32|
;;;500      }
;;;501      else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
;;;502               && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
;;;503      {
;;;504        if ((pData == NULL) && (Length > 0U))
;;;505        {
;;;506          return HAL_ERROR;
;;;507        }
;;;508        else
;;;509        {
;;;510          TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;511          TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;512        }
;;;513      }
;;;514      else
;;;515      {
;;;516        return HAL_ERROR;
;;;517      }
;;;518    
;;;519      /* Enable the Input Capture channel 1
;;;520      (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
;;;521      TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;522      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;523    
;;;524      /* Set the DMA Input Capture 1 Callbacks */
;;;525      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
;;;526      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
;;;527      /* Set the DMA error callback */
;;;528      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
;;;529    
;;;530      /* Enable the DMA stream for Capture 1*/
;;;531      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
;;;532      {
;;;533        /* Return error status */
;;;534        return HAL_ERROR;
;;;535      }
;;;536      /* Enable the capture compare 1 Interrupt */
;;;537      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;538    
;;;539      /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;540      if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;541      {
;;;542        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;543        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;544        {
;;;545          __HAL_TIM_ENABLE(htim);
;;;546        }
;;;547      }
;;;548      else
;;;549      {
;;;550        __HAL_TIM_ENABLE(htim);
;;;551      }
;;;552    
;;;553      /* Return function status */
;;;554      return HAL_OK;
;;;555    }
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L15.36|
000024  f1b80f01          CMP      r8,#1                 ;501
000028  d10c              BNE      |L15.68|
00002a  f1b90f01          CMP      r9,#1                 ;502
00002e  d109              BNE      |L15.68|
000030  b915              CBNZ     r5,|L15.56|
000032  b10e              CBZ      r6,|L15.56|
000034  2001              MOVS     r0,#1                 ;506
000036  e7f3              B        |L15.32|
                  |L15.56|
000038  2002              MOVS     r0,#2                 ;510
00003a  f884003e          STRB     r0,[r4,#0x3e]         ;510
00003e  f8840042          STRB     r0,[r4,#0x42]         ;511
000042  e001              B        |L15.72|
                  |L15.68|
000044  2001              MOVS     r0,#1                 ;516
000046  e7eb              B        |L15.32|
                  |L15.72|
000048  2201              MOVS     r2,#1                 ;522
00004a  2100              MOVS     r1,#0                 ;522
00004c  6820              LDR      r0,[r4,#0]            ;522
00004e  f7fffffe          BL       TIM_CCxChannelCmd
000052  4927              LDR      r1,|L15.240|
000054  6a60              LDR      r0,[r4,#0x24]         ;525
000056  63c1              STR      r1,[r0,#0x3c]         ;525
000058  4926              LDR      r1,|L15.244|
00005a  6a60              LDR      r0,[r4,#0x24]         ;526
00005c  6401              STR      r1,[r0,#0x40]         ;526
00005e  4926              LDR      r1,|L15.248|
000060  6a60              LDR      r0,[r4,#0x24]         ;528
000062  64c1              STR      r1,[r0,#0x4c]         ;528
000064  6822              LDR      r2,[r4,#0]            ;531
000066  f1020134          ADD      r1,r2,#0x34           ;531
00006a  4633              MOV      r3,r6                 ;531
00006c  462a              MOV      r2,r5                 ;531
00006e  6a60              LDR      r0,[r4,#0x24]         ;531
000070  f7fffffe          BL       HAL_DMA_Start_IT
000074  b108              CBZ      r0,|L15.122|
000076  2001              MOVS     r0,#1                 ;534
000078  e7d2              B        |L15.32|
                  |L15.122|
00007a  6820              LDR      r0,[r4,#0]            ;537
00007c  68c0              LDR      r0,[r0,#0xc]          ;537
00007e  f4407000          ORR      r0,r0,#0x200          ;537
000082  6821              LDR      r1,[r4,#0]            ;537
000084  60c8              STR      r0,[r1,#0xc]          ;537
000086  491d              LDR      r1,|L15.252|
000088  6820              LDR      r0,[r4,#0]            ;540
00008a  4288              CMP      r0,r1                 ;540
00008c  d01b              BEQ      |L15.198|
00008e  6820              LDR      r0,[r4,#0]            ;540
000090  f1b04f80          CMP      r0,#0x40000000        ;540
000094  d017              BEQ      |L15.198|
000096  491a              LDR      r1,|L15.256|
000098  6820              LDR      r0,[r4,#0]            ;540
00009a  4288              CMP      r0,r1                 ;540
00009c  d013              BEQ      |L15.198|
00009e  4919              LDR      r1,|L15.260|
0000a0  6820              LDR      r0,[r4,#0]            ;540
0000a2  4288              CMP      r0,r1                 ;540
0000a4  d00f              BEQ      |L15.198|
0000a6  4918              LDR      r1,|L15.264|
0000a8  6820              LDR      r0,[r4,#0]            ;540
0000aa  4288              CMP      r0,r1                 ;540
0000ac  d00b              BEQ      |L15.198|
0000ae  4917              LDR      r1,|L15.268|
0000b0  6820              LDR      r0,[r4,#0]            ;540
0000b2  4288              CMP      r0,r1                 ;540
0000b4  d007              BEQ      |L15.198|
0000b6  4916              LDR      r1,|L15.272|
0000b8  6820              LDR      r0,[r4,#0]            ;540
0000ba  4288              CMP      r0,r1                 ;540
0000bc  d003              BEQ      |L15.198|
0000be  4915              LDR      r1,|L15.276|
0000c0  6820              LDR      r0,[r4,#0]            ;540
0000c2  4288              CMP      r0,r1                 ;540
0000c4  d10c              BNE      |L15.224|
                  |L15.198|
0000c6  6820              LDR      r0,[r4,#0]            ;542
0000c8  6880              LDR      r0,[r0,#8]            ;542
0000ca  f0000707          AND      r7,r0,#7              ;542
0000ce  2f06              CMP      r7,#6                 ;543
0000d0  d00c              BEQ      |L15.236|
0000d2  6820              LDR      r0,[r4,#0]            ;545
0000d4  6800              LDR      r0,[r0,#0]            ;545
0000d6  f0400001          ORR      r0,r0,#1              ;545
0000da  6821              LDR      r1,[r4,#0]            ;545
0000dc  6008              STR      r0,[r1,#0]            ;545
0000de  e005              B        |L15.236|
                  |L15.224|
0000e0  6820              LDR      r0,[r4,#0]            ;550
0000e2  6800              LDR      r0,[r0,#0]            ;550
0000e4  f0400001          ORR      r0,r0,#1              ;550
0000e8  6821              LDR      r1,[r4,#0]            ;550
0000ea  6008              STR      r0,[r1,#0]            ;550
                  |L15.236|
0000ec  2000              MOVS     r0,#0                 ;554
0000ee  e797              B        |L15.32|
;;;556    
                          ENDP

                  |L15.240|
                          DCD      TIM_DMACaptureCplt
                  |L15.244|
                          DCD      TIM_DMACaptureHalfCplt
                  |L15.248|
                          DCD      TIM_DMAError
                  |L15.252|
                          DCD      0x40010000
                  |L15.256|
                          DCD      0x40000400
                  |L15.260|
                          DCD      0x40000800
                  |L15.264|
                          DCD      0x40000c00
                  |L15.268|
                          DCD      0x40010400
                  |L15.272|
                          DCD      0x40014000
                  |L15.276|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_HallSensor_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_HallSensor_Start_IT PROC
;;;395      */
;;;396    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;397    {
000004  4604              MOV      r4,r0
;;;398      uint32_t tmpsmcr;
;;;399      HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
000006  f894603e          LDRB     r6,[r4,#0x3e]
;;;400      HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
00000a  203f              MOVS     r0,#0x3f
00000c  5d07              LDRB     r7,[r0,r4]
;;;401      HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
00000e  f8948042          LDRB     r8,[r4,#0x42]
;;;402      HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
000012  2043              MOVS     r0,#0x43
000014  f8109004          LDRB     r9,[r0,r4]
;;;403    
;;;404      /* Check the parameters */
;;;405      assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));
;;;406    
;;;407      /* Check the TIM channels state */
;;;408      if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
000018  2e01              CMP      r6,#1
00001a  d107              BNE      |L16.44|
;;;409          || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
00001c  2f01              CMP      r7,#1
00001e  d105              BNE      |L16.44|
;;;410          || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
000020  f1b80f01          CMP      r8,#1
000024  d102              BNE      |L16.44|
;;;411          || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
000026  f1b90f01          CMP      r9,#1
00002a  d002              BEQ      |L16.50|
                  |L16.44|
;;;412      {
;;;413        return HAL_ERROR;
00002c  2001              MOVS     r0,#1
                  |L16.46|
;;;414      }
;;;415    
;;;416      /* Set the TIM channels state */
;;;417      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;418      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;419      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;420      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;421    
;;;422      /* Enable the capture compare Interrupts 1 event */
;;;423      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;424    
;;;425      /* Enable the Input Capture channel 1
;;;426      (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
;;;427      TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;428      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
;;;429    
;;;430      /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;431      if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;432      {
;;;433        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;434        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;435        {
;;;436          __HAL_TIM_ENABLE(htim);
;;;437        }
;;;438      }
;;;439      else
;;;440      {
;;;441        __HAL_TIM_ENABLE(htim);
;;;442      }
;;;443    
;;;444      /* Return function status */
;;;445      return HAL_OK;
;;;446    }
00002e  e8bd87f0          POP      {r4-r10,pc}
                  |L16.50|
000032  2002              MOVS     r0,#2                 ;417
000034  f884003e          STRB     r0,[r4,#0x3e]         ;417
000038  2102              MOVS     r1,#2                 ;418
00003a  203f              MOVS     r0,#0x3f              ;418
00003c  5501              STRB     r1,[r0,r4]            ;418
00003e  2002              MOVS     r0,#2                 ;419
000040  f8840042          STRB     r0,[r4,#0x42]         ;419
000044  2043              MOVS     r0,#0x43              ;420
000046  5501              STRB     r1,[r0,r4]            ;420
000048  6820              LDR      r0,[r4,#0]            ;423
00004a  68c0              LDR      r0,[r0,#0xc]          ;423
00004c  f0400002          ORR      r0,r0,#2              ;423
000050  6821              LDR      r1,[r4,#0]            ;423
000052  60c8              STR      r0,[r1,#0xc]          ;423
000054  2201              MOVS     r2,#1                 ;428
000056  2100              MOVS     r1,#0                 ;428
000058  6820              LDR      r0,[r4,#0]            ;428
00005a  f7fffffe          BL       TIM_CCxChannelCmd
00005e  491a              LDR      r1,|L16.200|
000060  6820              LDR      r0,[r4,#0]            ;431
000062  4288              CMP      r0,r1                 ;431
000064  d01b              BEQ      |L16.158|
000066  6820              LDR      r0,[r4,#0]            ;431
000068  f1b04f80          CMP      r0,#0x40000000        ;431
00006c  d017              BEQ      |L16.158|
00006e  4917              LDR      r1,|L16.204|
000070  6820              LDR      r0,[r4,#0]            ;431
000072  4288              CMP      r0,r1                 ;431
000074  d013              BEQ      |L16.158|
000076  4916              LDR      r1,|L16.208|
000078  6820              LDR      r0,[r4,#0]            ;431
00007a  4288              CMP      r0,r1                 ;431
00007c  d00f              BEQ      |L16.158|
00007e  4915              LDR      r1,|L16.212|
000080  6820              LDR      r0,[r4,#0]            ;431
000082  4288              CMP      r0,r1                 ;431
000084  d00b              BEQ      |L16.158|
000086  4914              LDR      r1,|L16.216|
000088  6820              LDR      r0,[r4,#0]            ;431
00008a  4288              CMP      r0,r1                 ;431
00008c  d007              BEQ      |L16.158|
00008e  4913              LDR      r1,|L16.220|
000090  6820              LDR      r0,[r4,#0]            ;431
000092  4288              CMP      r0,r1                 ;431
000094  d003              BEQ      |L16.158|
000096  4912              LDR      r1,|L16.224|
000098  6820              LDR      r0,[r4,#0]            ;431
00009a  4288              CMP      r0,r1                 ;431
00009c  d10c              BNE      |L16.184|
                  |L16.158|
00009e  6820              LDR      r0,[r4,#0]            ;433
0000a0  6880              LDR      r0,[r0,#8]            ;433
0000a2  f0000507          AND      r5,r0,#7              ;433
0000a6  2d06              CMP      r5,#6                 ;434
0000a8  d00c              BEQ      |L16.196|
0000aa  6820              LDR      r0,[r4,#0]            ;436
0000ac  6800              LDR      r0,[r0,#0]            ;436
0000ae  f0400001          ORR      r0,r0,#1              ;436
0000b2  6821              LDR      r1,[r4,#0]            ;436
0000b4  6008              STR      r0,[r1,#0]            ;436
0000b6  e005              B        |L16.196|
                  |L16.184|
0000b8  6820              LDR      r0,[r4,#0]            ;441
0000ba  6800              LDR      r0,[r0,#0]            ;441
0000bc  f0400001          ORR      r0,r0,#1              ;441
0000c0  6821              LDR      r1,[r4,#0]            ;441
0000c2  6008              STR      r0,[r1,#0]            ;441
                  |L16.196|
0000c4  2000              MOVS     r0,#0                 ;445
0000c6  e7b2              B        |L16.46|
;;;447    
                          ENDP

                  |L16.200|
                          DCD      0x40010000
                  |L16.204|
                          DCD      0x40000400
                  |L16.208|
                          DCD      0x40000800
                  |L16.212|
                          DCD      0x40000c00
                  |L16.216|
                          DCD      0x40010400
                  |L16.220|
                          DCD      0x40014000
                  |L16.224|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_HallSensor_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop PROC
;;;367      */
;;;368    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;369    {
000002  4604              MOV      r4,r0
;;;370      /* Check the parameters */
;;;371      assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));
;;;372    
;;;373      /* Disable the Input Capture channels 1, 2 and 3
;;;374      (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
;;;375      TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;376      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;377    
;;;378      /* Disable the Peripheral */
;;;379      __HAL_TIM_DISABLE(htim);
00000e  bf00              NOP      
000010  6820              LDR      r0,[r4,#0]
000012  6a00              LDR      r0,[r0,#0x20]
000014  f2411111          MOV      r1,#0x1111
000018  4008              ANDS     r0,r0,r1
00001a  b950              CBNZ     r0,|L17.50|
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  1089              ASRS     r1,r1,#2
000022  4008              ANDS     r0,r0,r1
000024  b928              CBNZ     r0,|L17.50|
000026  6820              LDR      r0,[r4,#0]
000028  6800              LDR      r0,[r0,#0]
00002a  f0200001          BIC      r0,r0,#1
00002e  6821              LDR      r1,[r4,#0]
000030  6008              STR      r0,[r1,#0]
                  |L17.50|
000032  bf00              NOP      
;;;380    
;;;381      /* Set the TIM channels state */
;;;382      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000034  2001              MOVS     r0,#1
000036  f884003e          STRB     r0,[r4,#0x3e]
;;;383      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
00003a  2101              MOVS     r1,#1
00003c  203f              MOVS     r0,#0x3f
00003e  5501              STRB     r1,[r0,r4]
;;;384      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000040  2001              MOVS     r0,#1
000042  f8840042          STRB     r0,[r4,#0x42]
;;;385      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000046  2043              MOVS     r0,#0x43
000048  5501              STRB     r1,[r0,r4]
;;;386    
;;;387      /* Return function status */
;;;388      return HAL_OK;
00004a  2000              MOVS     r0,#0
;;;389    }
00004c  bd10              POP      {r4,pc}
;;;390    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_DMA PROC
;;;561      */
;;;562    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;563    {
000002  4604              MOV      r4,r0
;;;564      /* Check the parameters */
;;;565      assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));
;;;566    
;;;567      /* Disable the Input Capture channel 1
;;;568      (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
;;;569      TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;570      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;571    
;;;572    
;;;573      /* Disable the capture compare Interrupts 1 event */
;;;574      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f4207000          BIC      r0,r0,#0x200
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;575    
;;;576      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
00001a  6a60              LDR      r0,[r4,#0x24]
00001c  f7fffffe          BL       HAL_DMA_Abort_IT
;;;577    
;;;578      /* Disable the Peripheral */
;;;579      __HAL_TIM_DISABLE(htim);
000020  bf00              NOP      
000022  6820              LDR      r0,[r4,#0]
000024  6a00              LDR      r0,[r0,#0x20]
000026  f2411111          MOV      r1,#0x1111
00002a  4008              ANDS     r0,r0,r1
00002c  b950              CBNZ     r0,|L18.68|
00002e  6820              LDR      r0,[r4,#0]
000030  6a00              LDR      r0,[r0,#0x20]
000032  1089              ASRS     r1,r1,#2
000034  4008              ANDS     r0,r0,r1
000036  b928              CBNZ     r0,|L18.68|
000038  6820              LDR      r0,[r4,#0]
00003a  6800              LDR      r0,[r0,#0]
00003c  f0200001          BIC      r0,r0,#1
000040  6821              LDR      r1,[r4,#0]
000042  6008              STR      r0,[r1,#0]
                  |L18.68|
000044  bf00              NOP      
;;;580    
;;;581      /* Set the TIM channel state */
;;;582      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000046  2001              MOVS     r0,#1
000048  f884003e          STRB     r0,[r4,#0x3e]
;;;583      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
00004c  f8840042          STRB     r0,[r4,#0x42]
;;;584    
;;;585      /* Return function status */
;;;586      return HAL_OK;
000050  2000              MOVS     r0,#0
;;;587    }
000052  bd10              POP      {r4,pc}
;;;588    
                          ENDP


                          AREA ||i.HAL_TIMEx_HallSensor_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_HallSensor_Stop_IT PROC
;;;452      */
;;;453    HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
000000  b510              PUSH     {r4,lr}
;;;454    {
000002  4604              MOV      r4,r0
;;;455      /* Check the parameters */
;;;456      assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));
;;;457    
;;;458      /* Disable the Input Capture channel 1
;;;459      (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
;;;460      TIM_CHANNEL_2 and TIM_CHANNEL_3) */
;;;461      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
000004  2200              MOVS     r2,#0
000006  4611              MOV      r1,r2
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       TIM_CCxChannelCmd
;;;462    
;;;463      /* Disable the capture compare Interrupts event */
;;;464      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
00000e  6820              LDR      r0,[r4,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f0200002          BIC      r0,r0,#2
000016  6821              LDR      r1,[r4,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;465    
;;;466      /* Disable the Peripheral */
;;;467      __HAL_TIM_DISABLE(htim);
00001a  bf00              NOP      
00001c  6820              LDR      r0,[r4,#0]
00001e  6a00              LDR      r0,[r0,#0x20]
000020  f2411111          MOV      r1,#0x1111
000024  4008              ANDS     r0,r0,r1
000026  b950              CBNZ     r0,|L19.62|
000028  6820              LDR      r0,[r4,#0]
00002a  6a00              LDR      r0,[r0,#0x20]
00002c  1089              ASRS     r1,r1,#2
00002e  4008              ANDS     r0,r0,r1
000030  b928              CBNZ     r0,|L19.62|
000032  6820              LDR      r0,[r4,#0]
000034  6800              LDR      r0,[r0,#0]
000036  f0200001          BIC      r0,r0,#1
00003a  6821              LDR      r1,[r4,#0]
00003c  6008              STR      r0,[r1,#0]
                  |L19.62|
00003e  bf00              NOP      
;;;468    
;;;469      /* Set the TIM channels state */
;;;470      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000040  2001              MOVS     r0,#1
000042  f884003e          STRB     r0,[r4,#0x3e]
;;;471      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000046  2101              MOVS     r1,#1
000048  203f              MOVS     r0,#0x3f
00004a  5501              STRB     r1,[r0,r4]
;;;472      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
00004c  2001              MOVS     r0,#1
00004e  f8840042          STRB     r0,[r4,#0x42]
;;;473      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000052  2043              MOVS     r0,#0x43
000054  5501              STRB     r1,[r0,r4]
;;;474    
;;;475      /* Return function status */
;;;476      return HAL_OK;
000056  2000              MOVS     r0,#0
;;;477    }
000058  bd10              POP      {r4,pc}
;;;478    
                          ENDP


                          AREA ||i.HAL_TIMEx_MasterConfigSynchronization||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_MasterConfigSynchronization PROC
;;;1961     */
;;;1962   HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
000000  b530              PUSH     {r4,r5,lr}
;;;1963                                                           TIM_MasterConfigTypeDef *sMasterConfig)
;;;1964   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1965     uint32_t tmpcr2;
;;;1966     uint32_t tmpsmcr;
;;;1967   
;;;1968     /* Check the parameters */
;;;1969     assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
;;;1970     assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
;;;1971     assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
;;;1972   
;;;1973     /* Check input state */
;;;1974     __HAL_LOCK(htim);
000006  bf00              NOP      
000008  f892003c          LDRB     r0,[r2,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L20.20|
000010  2002              MOVS     r0,#2
                  |L20.18|
;;;1975   
;;;1976     /* Change the handler state */
;;;1977     htim->State = HAL_TIM_STATE_BUSY;
;;;1978   
;;;1979     /* Get the TIMx CR2 register value */
;;;1980     tmpcr2 = htim->Instance->CR2;
;;;1981   
;;;1982     /* Get the TIMx SMCR register value */
;;;1983     tmpsmcr = htim->Instance->SMCR;
;;;1984   
;;;1985     /* Reset the MMS Bits */
;;;1986     tmpcr2 &= ~TIM_CR2_MMS;
;;;1987     /* Select the TRGO source */
;;;1988     tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
;;;1989   
;;;1990     /* Update TIMx CR2 */
;;;1991     htim->Instance->CR2 = tmpcr2;
;;;1992   
;;;1993     if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;1994     {
;;;1995       /* Reset the MSM Bit */
;;;1996       tmpsmcr &= ~TIM_SMCR_MSM;
;;;1997       /* Set master mode */
;;;1998       tmpsmcr |= sMasterConfig->MasterSlaveMode;
;;;1999   
;;;2000       /* Update TIMx SMCR */
;;;2001       htim->Instance->SMCR = tmpsmcr;
;;;2002     }
;;;2003   
;;;2004     /* Change the htim state */
;;;2005     htim->State = HAL_TIM_STATE_READY;
;;;2006   
;;;2007     __HAL_UNLOCK(htim);
;;;2008   
;;;2009     return HAL_OK;
;;;2010   }
000012  bd30              POP      {r4,r5,pc}
                  |L20.20|
000014  2001              MOVS     r0,#1                 ;1974
000016  f882003c          STRB     r0,[r2,#0x3c]         ;1974
00001a  bf00              NOP                            ;1974
00001c  2002              MOVS     r0,#2                 ;1977
00001e  f882003d          STRB     r0,[r2,#0x3d]         ;1977
000022  6810              LDR      r0,[r2,#0]            ;1980
000024  6844              LDR      r4,[r0,#4]            ;1980
000026  6810              LDR      r0,[r2,#0]            ;1983
000028  6881              LDR      r1,[r0,#8]            ;1983
00002a  f0240470          BIC      r4,r4,#0x70           ;1986
00002e  6818              LDR      r0,[r3,#0]            ;1988
000030  4304              ORRS     r4,r4,r0              ;1988
000032  6810              LDR      r0,[r2,#0]            ;1991
000034  6044              STR      r4,[r0,#4]            ;1991
000036  4d18              LDR      r5,|L20.152|
000038  6810              LDR      r0,[r2,#0]            ;1993
00003a  42a8              CMP      r0,r5                 ;1993
00003c  d01b              BEQ      |L20.118|
00003e  6810              LDR      r0,[r2,#0]            ;1993
000040  f1b04f80          CMP      r0,#0x40000000        ;1993
000044  d017              BEQ      |L20.118|
000046  4d15              LDR      r5,|L20.156|
000048  6810              LDR      r0,[r2,#0]            ;1993
00004a  42a8              CMP      r0,r5                 ;1993
00004c  d013              BEQ      |L20.118|
00004e  4d14              LDR      r5,|L20.160|
000050  6810              LDR      r0,[r2,#0]            ;1993
000052  42a8              CMP      r0,r5                 ;1993
000054  d00f              BEQ      |L20.118|
000056  4d13              LDR      r5,|L20.164|
000058  6810              LDR      r0,[r2,#0]            ;1993
00005a  42a8              CMP      r0,r5                 ;1993
00005c  d00b              BEQ      |L20.118|
00005e  4d12              LDR      r5,|L20.168|
000060  6810              LDR      r0,[r2,#0]            ;1993
000062  42a8              CMP      r0,r5                 ;1993
000064  d007              BEQ      |L20.118|
000066  4d11              LDR      r5,|L20.172|
000068  6810              LDR      r0,[r2,#0]            ;1993
00006a  42a8              CMP      r0,r5                 ;1993
00006c  d003              BEQ      |L20.118|
00006e  4d10              LDR      r5,|L20.176|
000070  6810              LDR      r0,[r2,#0]            ;1993
000072  42a8              CMP      r0,r5                 ;1993
000074  d105              BNE      |L20.130|
                  |L20.118|
000076  f0210180          BIC      r1,r1,#0x80           ;1996
00007a  6858              LDR      r0,[r3,#4]            ;1998
00007c  4301              ORRS     r1,r1,r0              ;1998
00007e  6810              LDR      r0,[r2,#0]            ;2001
000080  6081              STR      r1,[r0,#8]            ;2001
                  |L20.130|
000082  2001              MOVS     r0,#1                 ;2005
000084  f882003d          STRB     r0,[r2,#0x3d]         ;2005
000088  bf00              NOP                            ;2007
00008a  2000              MOVS     r0,#0                 ;2007
00008c  f882003c          STRB     r0,[r2,#0x3c]         ;2007
000090  bf00              NOP                            ;2007
000092  bf00              NOP                            ;2009
000094  e7bd              B        |L20.18|
;;;2011   
                          ENDP

000096  0000              DCW      0x0000
                  |L20.152|
                          DCD      0x40010000
                  |L20.156|
                          DCD      0x40000400
                  |L20.160|
                          DCD      0x40000800
                  |L20.164|
                          DCD      0x40000c00
                  |L20.168|
                          DCD      0x40010400
                  |L20.172|
                          DCD      0x40014000
                  |L20.176|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_OCN_Start||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start PROC
;;;623      */
;;;624    HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;625    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;626      uint32_t tmpsmcr;
;;;627    
;;;628      /* Check the parameters */
;;;629      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;630    
;;;631      /* Check the TIM complementary channel state */
;;;632      if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
000006  b915              CBNZ     r5,|L21.14|
000008  f8940042          LDRB     r0,[r4,#0x42]
00000c  e00b              B        |L21.38|
                  |L21.14|
00000e  2d04              CMP      r5,#4
000010  d102              BNE      |L21.24|
000012  2043              MOVS     r0,#0x43
000014  5d00              LDRB     r0,[r0,r4]
000016  e006              B        |L21.38|
                  |L21.24|
000018  2d08              CMP      r5,#8
00001a  d102              BNE      |L21.34|
00001c  2044              MOVS     r0,#0x44
00001e  5d00              LDRB     r0,[r0,r4]
000020  e001              B        |L21.38|
                  |L21.34|
000022  2045              MOVS     r0,#0x45
000024  5d00              LDRB     r0,[r0,r4]
                  |L21.38|
000026  2801              CMP      r0,#1
000028  d001              BEQ      |L21.46|
;;;633      {
;;;634        return HAL_ERROR;
00002a  2001              MOVS     r0,#1
                  |L21.44|
;;;635      }
;;;636    
;;;637      /* Set the TIM complementary channel state */
;;;638      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;639    
;;;640      /* Enable the Capture compare channel N */
;;;641      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;642    
;;;643      /* Enable the Main Output */
;;;644      __HAL_TIM_MOE_ENABLE(htim);
;;;645    
;;;646      /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;647      if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;648      {
;;;649        tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;650        if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;651        {
;;;652          __HAL_TIM_ENABLE(htim);
;;;653        }
;;;654      }
;;;655      else
;;;656      {
;;;657        __HAL_TIM_ENABLE(htim);
;;;658      }
;;;659    
;;;660      /* Return function status */
;;;661      return HAL_OK;
;;;662    }
00002c  bd70              POP      {r4-r6,pc}
                  |L21.46|
00002e  b91d              CBNZ     r5,|L21.56|
000030  2002              MOVS     r0,#2                 ;638
000032  f8840042          STRB     r0,[r4,#0x42]         ;638
000036  e00e              B        |L21.86|
                  |L21.56|
000038  2d04              CMP      r5,#4                 ;638
00003a  d103              BNE      |L21.68|
00003c  2102              MOVS     r1,#2                 ;638
00003e  2043              MOVS     r0,#0x43              ;638
000040  5501              STRB     r1,[r0,r4]            ;638
000042  e008              B        |L21.86|
                  |L21.68|
000044  2d08              CMP      r5,#8                 ;638
000046  d103              BNE      |L21.80|
000048  2102              MOVS     r1,#2                 ;638
00004a  2044              MOVS     r0,#0x44              ;638
00004c  5501              STRB     r1,[r0,r4]            ;638
00004e  e002              B        |L21.86|
                  |L21.80|
000050  2102              MOVS     r1,#2                 ;638
000052  2045              MOVS     r0,#0x45              ;638
000054  5501              STRB     r1,[r0,r4]            ;638
                  |L21.86|
000056  2204              MOVS     r2,#4                 ;641
000058  4629              MOV      r1,r5                 ;641
00005a  6820              LDR      r0,[r4,#0]            ;641
00005c  f7fffffe          BL       TIM_CCxNChannelCmd
000060  6820              LDR      r0,[r4,#0]            ;644
000062  6c40              LDR      r0,[r0,#0x44]         ;644
000064  f4404000          ORR      r0,r0,#0x8000         ;644
000068  6821              LDR      r1,[r4,#0]            ;644
00006a  6448              STR      r0,[r1,#0x44]         ;644
00006c  491a              LDR      r1,|L21.216|
00006e  6820              LDR      r0,[r4,#0]            ;647
000070  4288              CMP      r0,r1                 ;647
000072  d01b              BEQ      |L21.172|
000074  6820              LDR      r0,[r4,#0]            ;647
000076  f1b04f80          CMP      r0,#0x40000000        ;647
00007a  d017              BEQ      |L21.172|
00007c  4917              LDR      r1,|L21.220|
00007e  6820              LDR      r0,[r4,#0]            ;647
000080  4288              CMP      r0,r1                 ;647
000082  d013              BEQ      |L21.172|
000084  4916              LDR      r1,|L21.224|
000086  6820              LDR      r0,[r4,#0]            ;647
000088  4288              CMP      r0,r1                 ;647
00008a  d00f              BEQ      |L21.172|
00008c  4915              LDR      r1,|L21.228|
00008e  6820              LDR      r0,[r4,#0]            ;647
000090  4288              CMP      r0,r1                 ;647
000092  d00b              BEQ      |L21.172|
000094  4914              LDR      r1,|L21.232|
000096  6820              LDR      r0,[r4,#0]            ;647
000098  4288              CMP      r0,r1                 ;647
00009a  d007              BEQ      |L21.172|
00009c  4913              LDR      r1,|L21.236|
00009e  6820              LDR      r0,[r4,#0]            ;647
0000a0  4288              CMP      r0,r1                 ;647
0000a2  d003              BEQ      |L21.172|
0000a4  4912              LDR      r1,|L21.240|
0000a6  6820              LDR      r0,[r4,#0]            ;647
0000a8  4288              CMP      r0,r1                 ;647
0000aa  d10c              BNE      |L21.198|
                  |L21.172|
0000ac  6820              LDR      r0,[r4,#0]            ;649
0000ae  6880              LDR      r0,[r0,#8]            ;649
0000b0  f0000607          AND      r6,r0,#7              ;649
0000b4  2e06              CMP      r6,#6                 ;650
0000b6  d00c              BEQ      |L21.210|
0000b8  6820              LDR      r0,[r4,#0]            ;652
0000ba  6800              LDR      r0,[r0,#0]            ;652
0000bc  f0400001          ORR      r0,r0,#1              ;652
0000c0  6821              LDR      r1,[r4,#0]            ;652
0000c2  6008              STR      r0,[r1,#0]            ;652
0000c4  e005              B        |L21.210|
                  |L21.198|
0000c6  6820              LDR      r0,[r4,#0]            ;657
0000c8  6800              LDR      r0,[r0,#0]            ;657
0000ca  f0400001          ORR      r0,r0,#1              ;657
0000ce  6821              LDR      r1,[r4,#0]            ;657
0000d0  6008              STR      r0,[r1,#0]            ;657
                  |L21.210|
0000d2  2000              MOVS     r0,#0                 ;661
0000d4  e7aa              B        |L21.44|
;;;663    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L21.216|
                          DCD      0x40010000
                  |L21.220|
                          DCD      0x40000400
                  |L21.224|
                          DCD      0x40000800
                  |L21.228|
                          DCD      0x40000c00
                  |L21.232|
                          DCD      0x40010400
                  |L21.236|
                          DCD      0x40014000
                  |L21.240|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_OCN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_DMA PROC
;;;868      */
;;;869    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;870    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;871      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;872      uint32_t tmpsmcr;
;;;873    
;;;874      /* Check the parameters */
;;;875      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;876    
;;;877      /* Set the TIM complementary channel state */
;;;878      if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
000010  b915              CBNZ     r5,|L22.24|
000012  f8940042          LDRB     r0,[r4,#0x42]
000016  e00b              B        |L22.48|
                  |L22.24|
000018  2d04              CMP      r5,#4
00001a  d102              BNE      |L22.34|
00001c  2043              MOVS     r0,#0x43
00001e  5d00              LDRB     r0,[r0,r4]
000020  e006              B        |L22.48|
                  |L22.34|
000022  2d08              CMP      r5,#8
000024  d102              BNE      |L22.44|
000026  2044              MOVS     r0,#0x44
000028  5d00              LDRB     r0,[r0,r4]
00002a  e001              B        |L22.48|
                  |L22.44|
00002c  2045              MOVS     r0,#0x45
00002e  5d00              LDRB     r0,[r0,r4]
                  |L22.48|
000030  2802              CMP      r0,#2
000032  d101              BNE      |L22.56|
                  |L22.52|
;;;879      {
;;;880        return HAL_BUSY;
;;;881      }
;;;882      else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
;;;883      {
;;;884        if ((pData == NULL) && (Length > 0U))
;;;885        {
;;;886          return HAL_ERROR;
;;;887        }
;;;888        else
;;;889        {
;;;890          TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;891        }
;;;892      }
;;;893      else
;;;894      {
;;;895        return HAL_ERROR;
;;;896      }
;;;897    
;;;898      switch (Channel)
;;;899      {
;;;900        case TIM_CHANNEL_1:
;;;901        {
;;;902          /* Set the DMA compare callbacks */
;;;903          htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
;;;904          htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;905    
;;;906          /* Set the DMA error callback */
;;;907          htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
;;;908    
;;;909          /* Enable the DMA stream */
;;;910          if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
;;;911                               Length) != HAL_OK)
;;;912          {
;;;913            /* Return error status */
;;;914            return HAL_ERROR;
;;;915          }
;;;916          /* Enable the TIM Output Compare DMA request */
;;;917          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;918          break;
;;;919        }
;;;920    
;;;921        case TIM_CHANNEL_2:
;;;922        {
;;;923          /* Set the DMA compare callbacks */
;;;924          htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
;;;925          htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;926    
;;;927          /* Set the DMA error callback */
;;;928          htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
;;;929    
;;;930          /* Enable the DMA stream */
;;;931          if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
;;;932                               Length) != HAL_OK)
;;;933          {
;;;934            /* Return error status */
;;;935            return HAL_ERROR;
;;;936          }
;;;937          /* Enable the TIM Output Compare DMA request */
;;;938          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;939          break;
;;;940        }
;;;941    
;;;942        case TIM_CHANNEL_3:
;;;943        {
;;;944          /* Set the DMA compare callbacks */
;;;945          htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
;;;946          htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;947    
;;;948          /* Set the DMA error callback */
;;;949          htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
;;;950    
;;;951          /* Enable the DMA stream */
;;;952          if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
;;;953                               Length) != HAL_OK)
;;;954          {
;;;955            /* Return error status */
;;;956            return HAL_ERROR;
;;;957          }
;;;958          /* Enable the TIM Output Compare DMA request */
;;;959          __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;960          break;
;;;961        }
;;;962    
;;;963        default:
;;;964          status = HAL_ERROR;
;;;965          break;
;;;966      }
;;;967    
;;;968      if (status == HAL_OK)
;;;969      {
;;;970        /* Enable the Capture compare channel N */
;;;971        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;972    
;;;973        /* Enable the Main Output */
;;;974        __HAL_TIM_MOE_ENABLE(htim);
;;;975    
;;;976        /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;977        if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;978        {
;;;979          tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;980          if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;981          {
;;;982            __HAL_TIM_ENABLE(htim);
;;;983          }
;;;984        }
;;;985        else
;;;986        {
;;;987          __HAL_TIM_ENABLE(htim);
;;;988        }
;;;989      }
;;;990    
;;;991      /* Return function status */
;;;992      return status;
;;;993    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L22.56|
000038  b915              CBNZ     r5,|L22.64|
00003a  f8940042          LDRB     r0,[r4,#0x42]         ;882
00003e  e00b              B        |L22.88|
                  |L22.64|
000040  2d04              CMP      r5,#4                 ;882
000042  d102              BNE      |L22.74|
000044  2043              MOVS     r0,#0x43              ;882
000046  5d00              LDRB     r0,[r0,r4]            ;882
000048  e006              B        |L22.88|
                  |L22.74|
00004a  2d08              CMP      r5,#8                 ;882
00004c  d102              BNE      |L22.84|
00004e  2044              MOVS     r0,#0x44              ;882
000050  5d00              LDRB     r0,[r0,r4]            ;882
000052  e001              B        |L22.88|
                  |L22.84|
000054  2045              MOVS     r0,#0x45              ;882
000056  5d00              LDRB     r0,[r0,r4]            ;882
                  |L22.88|
000058  2801              CMP      r0,#1                 ;882
00005a  d117              BNE      |L22.140|
00005c  b90e              CBNZ     r6,|L22.98|
00005e  b107              CBZ      r7,|L22.98|
000060  e7e8              B        |L22.52|
                  |L22.98|
000062  b91d              CBNZ     r5,|L22.108|
000064  2002              MOVS     r0,#2                 ;890
000066  f8840042          STRB     r0,[r4,#0x42]         ;890
00006a  e011              B        |L22.144|
                  |L22.108|
00006c  2d04              CMP      r5,#4                 ;890
00006e  d103              BNE      |L22.120|
000070  2102              MOVS     r1,#2                 ;890
000072  2043              MOVS     r0,#0x43              ;890
000074  5501              STRB     r1,[r0,r4]            ;890
000076  e00b              B        |L22.144|
                  |L22.120|
000078  2d08              CMP      r5,#8                 ;890
00007a  d103              BNE      |L22.132|
00007c  2102              MOVS     r1,#2                 ;890
00007e  2044              MOVS     r0,#0x44              ;890
000080  5501              STRB     r1,[r0,r4]            ;890
000082  e005              B        |L22.144|
                  |L22.132|
000084  2102              MOVS     r1,#2                 ;890
000086  2045              MOVS     r0,#0x45              ;890
000088  5501              STRB     r1,[r0,r4]            ;890
00008a  e001              B        |L22.144|
                  |L22.140|
00008c  2001              MOVS     r0,#1                 ;895
00008e  e7d1              B        |L22.52|
                  |L22.144|
000090  b125              CBZ      r5,|L22.156|
000092  2d04              CMP      r5,#4                 ;898
000094  d01d              BEQ      |L22.210|
000096  2d08              CMP      r5,#8                 ;898
000098  d151              BNE      |L22.318|
00009a  e035              B        |L22.264|
                  |L22.156|
00009c  494c              LDR      r1,|L22.464|
00009e  6a60              LDR      r0,[r4,#0x24]         ;903
0000a0  63c1              STR      r1,[r0,#0x3c]         ;903
0000a2  494c              LDR      r1,|L22.468|
0000a4  6a60              LDR      r0,[r4,#0x24]         ;904
0000a6  6401              STR      r1,[r0,#0x40]         ;904
0000a8  494b              LDR      r1,|L22.472|
0000aa  6a60              LDR      r0,[r4,#0x24]         ;907
0000ac  64c1              STR      r1,[r0,#0x4c]         ;907
0000ae  6821              LDR      r1,[r4,#0]            ;910
0000b0  f1010234          ADD      r2,r1,#0x34           ;910
0000b4  463b              MOV      r3,r7                 ;910
0000b6  4631              MOV      r1,r6                 ;910
0000b8  6a60              LDR      r0,[r4,#0x24]         ;910
0000ba  f7fffffe          BL       HAL_DMA_Start_IT
0000be  b108              CBZ      r0,|L22.196|
0000c0  2001              MOVS     r0,#1                 ;914
0000c2  e7b7              B        |L22.52|
                  |L22.196|
0000c4  6820              LDR      r0,[r4,#0]            ;917
0000c6  68c0              LDR      r0,[r0,#0xc]          ;917
0000c8  f4407000          ORR      r0,r0,#0x200          ;917
0000cc  6821              LDR      r1,[r4,#0]            ;917
0000ce  60c8              STR      r0,[r1,#0xc]          ;917
0000d0  e038              B        |L22.324|
                  |L22.210|
0000d2  493f              LDR      r1,|L22.464|
0000d4  6aa0              LDR      r0,[r4,#0x28]         ;924
0000d6  63c1              STR      r1,[r0,#0x3c]         ;924
0000d8  493e              LDR      r1,|L22.468|
0000da  6aa0              LDR      r0,[r4,#0x28]         ;925
0000dc  6401              STR      r1,[r0,#0x40]         ;925
0000de  493e              LDR      r1,|L22.472|
0000e0  6aa0              LDR      r0,[r4,#0x28]         ;928
0000e2  64c1              STR      r1,[r0,#0x4c]         ;928
0000e4  6821              LDR      r1,[r4,#0]            ;931
0000e6  f1010238          ADD      r2,r1,#0x38           ;931
0000ea  463b              MOV      r3,r7                 ;931
0000ec  4631              MOV      r1,r6                 ;931
0000ee  6aa0              LDR      r0,[r4,#0x28]         ;931
0000f0  f7fffffe          BL       HAL_DMA_Start_IT
0000f4  b108              CBZ      r0,|L22.250|
0000f6  2001              MOVS     r0,#1                 ;935
0000f8  e79c              B        |L22.52|
                  |L22.250|
0000fa  6820              LDR      r0,[r4,#0]            ;938
0000fc  68c0              LDR      r0,[r0,#0xc]          ;938
0000fe  f4406080          ORR      r0,r0,#0x400          ;938
000102  6821              LDR      r1,[r4,#0]            ;938
000104  60c8              STR      r0,[r1,#0xc]          ;938
000106  e01d              B        |L22.324|
                  |L22.264|
000108  4931              LDR      r1,|L22.464|
00010a  6ae0              LDR      r0,[r4,#0x2c]         ;945
00010c  63c1              STR      r1,[r0,#0x3c]         ;945
00010e  4931              LDR      r1,|L22.468|
000110  6ae0              LDR      r0,[r4,#0x2c]         ;946
000112  6401              STR      r1,[r0,#0x40]         ;946
000114  4930              LDR      r1,|L22.472|
000116  6ae0              LDR      r0,[r4,#0x2c]         ;949
000118  64c1              STR      r1,[r0,#0x4c]         ;949
00011a  6821              LDR      r1,[r4,#0]            ;952
00011c  f101023c          ADD      r2,r1,#0x3c           ;952
000120  463b              MOV      r3,r7                 ;952
000122  4631              MOV      r1,r6                 ;952
000124  6ae0              LDR      r0,[r4,#0x2c]         ;952
000126  f7fffffe          BL       HAL_DMA_Start_IT
00012a  b108              CBZ      r0,|L22.304|
00012c  2001              MOVS     r0,#1                 ;956
00012e  e781              B        |L22.52|
                  |L22.304|
000130  6820              LDR      r0,[r4,#0]            ;959
000132  68c0              LDR      r0,[r0,#0xc]          ;959
000134  f4406000          ORR      r0,r0,#0x800          ;959
000138  6821              LDR      r1,[r4,#0]            ;959
00013a  60c8              STR      r0,[r1,#0xc]          ;959
00013c  e002              B        |L22.324|
                  |L22.318|
00013e  f04f0801          MOV      r8,#1                 ;964
000142  bf00              NOP                            ;965
                  |L22.324|
000144  bf00              NOP                            ;918
000146  f1b80f00          CMP      r8,#0                 ;968
00014a  d13e              BNE      |L22.458|
00014c  2204              MOVS     r2,#4                 ;971
00014e  4629              MOV      r1,r5                 ;971
000150  6820              LDR      r0,[r4,#0]            ;971
000152  f7fffffe          BL       TIM_CCxNChannelCmd
000156  6820              LDR      r0,[r4,#0]            ;974
000158  6c40              LDR      r0,[r0,#0x44]         ;974
00015a  f4404000          ORR      r0,r0,#0x8000         ;974
00015e  6821              LDR      r1,[r4,#0]            ;974
000160  6448              STR      r0,[r1,#0x44]         ;974
000162  491e              LDR      r1,|L22.476|
000164  6820              LDR      r0,[r4,#0]            ;977
000166  4288              CMP      r0,r1                 ;977
000168  d01b              BEQ      |L22.418|
00016a  6820              LDR      r0,[r4,#0]            ;977
00016c  f1b04f80          CMP      r0,#0x40000000        ;977
000170  d017              BEQ      |L22.418|
000172  491b              LDR      r1,|L22.480|
000174  6820              LDR      r0,[r4,#0]            ;977
000176  4288              CMP      r0,r1                 ;977
000178  d013              BEQ      |L22.418|
00017a  491a              LDR      r1,|L22.484|
00017c  6820              LDR      r0,[r4,#0]            ;977
00017e  4288              CMP      r0,r1                 ;977
000180  d00f              BEQ      |L22.418|
000182  4919              LDR      r1,|L22.488|
000184  6820              LDR      r0,[r4,#0]            ;977
000186  4288              CMP      r0,r1                 ;977
000188  d00b              BEQ      |L22.418|
00018a  4918              LDR      r1,|L22.492|
00018c  6820              LDR      r0,[r4,#0]            ;977
00018e  4288              CMP      r0,r1                 ;977
000190  d007              BEQ      |L22.418|
000192  4917              LDR      r1,|L22.496|
000194  6820              LDR      r0,[r4,#0]            ;977
000196  4288              CMP      r0,r1                 ;977
000198  d003              BEQ      |L22.418|
00019a  4916              LDR      r1,|L22.500|
00019c  6820              LDR      r0,[r4,#0]            ;977
00019e  4288              CMP      r0,r1                 ;977
0001a0  d10d              BNE      |L22.446|
                  |L22.418|
0001a2  6820              LDR      r0,[r4,#0]            ;979
0001a4  6880              LDR      r0,[r0,#8]            ;979
0001a6  f0000907          AND      r9,r0,#7              ;979
0001aa  f1b90f06          CMP      r9,#6                 ;980
0001ae  d00c              BEQ      |L22.458|
0001b0  6820              LDR      r0,[r4,#0]            ;982
0001b2  6800              LDR      r0,[r0,#0]            ;982
0001b4  f0400001          ORR      r0,r0,#1              ;982
0001b8  6821              LDR      r1,[r4,#0]            ;982
0001ba  6008              STR      r0,[r1,#0]            ;982
0001bc  e005              B        |L22.458|
                  |L22.446|
0001be  6820              LDR      r0,[r4,#0]            ;987
0001c0  6800              LDR      r0,[r0,#0]            ;987
0001c2  f0400001          ORR      r0,r0,#1              ;987
0001c6  6821              LDR      r1,[r4,#0]            ;987
0001c8  6008              STR      r0,[r1,#0]            ;987
                  |L22.458|
0001ca  4640              MOV      r0,r8                 ;992
0001cc  e732              B        |L22.52|
;;;994    
                          ENDP

0001ce  0000              DCW      0x0000
                  |L22.464|
                          DCD      TIM_DMADelayPulseNCplt
                  |L22.468|
                          DCD      TIM_DMADelayPulseHalfCplt
                  |L22.472|
                          DCD      TIM_DMAErrorCCxN
                  |L22.476|
                          DCD      0x40010000
                  |L22.480|
                          DCD      0x40000400
                  |L22.484|
                          DCD      0x40000800
                  |L22.488|
                          DCD      0x40000c00
                  |L22.492|
                          DCD      0x40010400
                  |L22.496|
                          DCD      0x40014000
                  |L22.500|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_OCN_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_OCN_Start_IT PROC
;;;706      */
;;;707    HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;708    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;709      HAL_StatusTypeDef status = HAL_OK;
000008  2600              MOVS     r6,#0
;;;710      uint32_t tmpsmcr;
;;;711    
;;;712      /* Check the parameters */
;;;713      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;714    
;;;715      /* Check the TIM complementary channel state */
;;;716      if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
00000a  b915              CBNZ     r5,|L23.18|
00000c  f8940042          LDRB     r0,[r4,#0x42]
000010  e00b              B        |L23.42|
                  |L23.18|
000012  2d04              CMP      r5,#4
000014  d102              BNE      |L23.28|
000016  2043              MOVS     r0,#0x43
000018  5d00              LDRB     r0,[r0,r4]
00001a  e006              B        |L23.42|
                  |L23.28|
00001c  2d08              CMP      r5,#8
00001e  d102              BNE      |L23.38|
000020  2044              MOVS     r0,#0x44
000022  5d00              LDRB     r0,[r0,r4]
000024  e001              B        |L23.42|
                  |L23.38|
000026  2045              MOVS     r0,#0x45
000028  5d00              LDRB     r0,[r0,r4]
                  |L23.42|
00002a  2801              CMP      r0,#1
00002c  d002              BEQ      |L23.52|
;;;717      {
;;;718        return HAL_ERROR;
00002e  2001              MOVS     r0,#1
                  |L23.48|
;;;719      }
;;;720    
;;;721      /* Set the TIM complementary channel state */
;;;722      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;723    
;;;724      switch (Channel)
;;;725      {
;;;726        case TIM_CHANNEL_1:
;;;727        {
;;;728          /* Enable the TIM Output Compare interrupt */
;;;729          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;730          break;
;;;731        }
;;;732    
;;;733        case TIM_CHANNEL_2:
;;;734        {
;;;735          /* Enable the TIM Output Compare interrupt */
;;;736          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;737          break;
;;;738        }
;;;739    
;;;740        case TIM_CHANNEL_3:
;;;741        {
;;;742          /* Enable the TIM Output Compare interrupt */
;;;743          __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
;;;744          break;
;;;745        }
;;;746    
;;;747    
;;;748        default:
;;;749          status = HAL_ERROR;
;;;750          break;
;;;751      }
;;;752    
;;;753      if (status == HAL_OK)
;;;754      {
;;;755        /* Enable the TIM Break interrupt */
;;;756        __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
;;;757    
;;;758        /* Enable the Capture compare channel N */
;;;759        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;760    
;;;761        /* Enable the Main Output */
;;;762        __HAL_TIM_MOE_ENABLE(htim);
;;;763    
;;;764        /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;765        if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;766        {
;;;767          tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;768          if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;769          {
;;;770            __HAL_TIM_ENABLE(htim);
;;;771          }
;;;772        }
;;;773        else
;;;774        {
;;;775          __HAL_TIM_ENABLE(htim);
;;;776        }
;;;777      }
;;;778    
;;;779      /* Return function status */
;;;780      return status;
;;;781    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L23.52|
000034  b91d              CBNZ     r5,|L23.62|
000036  2002              MOVS     r0,#2                 ;722
000038  f8840042          STRB     r0,[r4,#0x42]         ;722
00003c  e00e              B        |L23.92|
                  |L23.62|
00003e  2d04              CMP      r5,#4                 ;722
000040  d103              BNE      |L23.74|
000042  2102              MOVS     r1,#2                 ;722
000044  2043              MOVS     r0,#0x43              ;722
000046  5501              STRB     r1,[r0,r4]            ;722
000048  e008              B        |L23.92|
                  |L23.74|
00004a  2d08              CMP      r5,#8                 ;722
00004c  d103              BNE      |L23.86|
00004e  2102              MOVS     r1,#2                 ;722
000050  2044              MOVS     r0,#0x44              ;722
000052  5501              STRB     r1,[r0,r4]            ;722
000054  e002              B        |L23.92|
                  |L23.86|
000056  2102              MOVS     r1,#2                 ;722
000058  2045              MOVS     r0,#0x45              ;722
00005a  5501              STRB     r1,[r0,r4]            ;722
                  |L23.92|
00005c  b125              CBZ      r5,|L23.104|
00005e  2d04              CMP      r5,#4                 ;724
000060  d009              BEQ      |L23.118|
000062  2d08              CMP      r5,#8                 ;724
000064  d115              BNE      |L23.146|
000066  e00d              B        |L23.132|
                  |L23.104|
000068  6820              LDR      r0,[r4,#0]            ;729
00006a  68c0              LDR      r0,[r0,#0xc]          ;729
00006c  f0400002          ORR      r0,r0,#2              ;729
000070  6821              LDR      r1,[r4,#0]            ;729
000072  60c8              STR      r0,[r1,#0xc]          ;729
000074  e00f              B        |L23.150|
                  |L23.118|
000076  6820              LDR      r0,[r4,#0]            ;736
000078  68c0              LDR      r0,[r0,#0xc]          ;736
00007a  f0400004          ORR      r0,r0,#4              ;736
00007e  6821              LDR      r1,[r4,#0]            ;736
000080  60c8              STR      r0,[r1,#0xc]          ;736
000082  e008              B        |L23.150|
                  |L23.132|
000084  6820              LDR      r0,[r4,#0]            ;743
000086  68c0              LDR      r0,[r0,#0xc]          ;743
000088  f0400008          ORR      r0,r0,#8              ;743
00008c  6821              LDR      r1,[r4,#0]            ;743
00008e  60c8              STR      r0,[r1,#0xc]          ;743
000090  e001              B        |L23.150|
                  |L23.146|
000092  2601              MOVS     r6,#1                 ;749
000094  bf00              NOP                            ;750
                  |L23.150|
000096  bf00              NOP                            ;730
000098  bbe6              CBNZ     r6,|L23.276|
00009a  6820              LDR      r0,[r4,#0]            ;756
00009c  68c0              LDR      r0,[r0,#0xc]          ;756
00009e  f0400080          ORR      r0,r0,#0x80           ;756
0000a2  6821              LDR      r1,[r4,#0]            ;756
0000a4  60c8              STR      r0,[r1,#0xc]          ;756
0000a6  2204              MOVS     r2,#4                 ;759
0000a8  4629              MOV      r1,r5                 ;759
0000aa  6820              LDR      r0,[r4,#0]            ;759
0000ac  f7fffffe          BL       TIM_CCxNChannelCmd
0000b0  6820              LDR      r0,[r4,#0]            ;762
0000b2  6c40              LDR      r0,[r0,#0x44]         ;762
0000b4  f4404000          ORR      r0,r0,#0x8000         ;762
0000b8  6821              LDR      r1,[r4,#0]            ;762
0000ba  6448              STR      r0,[r1,#0x44]         ;762
0000bc  491a              LDR      r1,|L23.296|
0000be  6820              LDR      r0,[r4,#0]            ;765
0000c0  4288              CMP      r0,r1                 ;765
0000c2  d01b              BEQ      |L23.252|
0000c4  6820              LDR      r0,[r4,#0]            ;765
0000c6  f1b04f80          CMP      r0,#0x40000000        ;765
0000ca  d017              BEQ      |L23.252|
0000cc  4917              LDR      r1,|L23.300|
0000ce  6820              LDR      r0,[r4,#0]            ;765
0000d0  4288              CMP      r0,r1                 ;765
0000d2  d013              BEQ      |L23.252|
0000d4  4916              LDR      r1,|L23.304|
0000d6  6820              LDR      r0,[r4,#0]            ;765
0000d8  4288              CMP      r0,r1                 ;765
0000da  d00f              BEQ      |L23.252|
0000dc  4915              LDR      r1,|L23.308|
0000de  6820              LDR      r0,[r4,#0]            ;765
0000e0  4288              CMP      r0,r1                 ;765
0000e2  d00b              BEQ      |L23.252|
0000e4  4914              LDR      r1,|L23.312|
0000e6  6820              LDR      r0,[r4,#0]            ;765
0000e8  4288              CMP      r0,r1                 ;765
0000ea  d007              BEQ      |L23.252|
0000ec  4913              LDR      r1,|L23.316|
0000ee  6820              LDR      r0,[r4,#0]            ;765
0000f0  4288              CMP      r0,r1                 ;765
0000f2  d003              BEQ      |L23.252|
0000f4  4912              LDR      r1,|L23.320|
0000f6  6820              LDR      r0,[r4,#0]            ;765
0000f8  4288              CMP      r0,r1                 ;765
0000fa  d10c              BNE      |L23.278|
                  |L23.252|
0000fc  6820              LDR      r0,[r4,#0]            ;767
0000fe  6880              LDR      r0,[r0,#8]            ;767
000100  f0000707          AND      r7,r0,#7              ;767
000104  2f06              CMP      r7,#6                 ;768
000106  d00c              BEQ      |L23.290|
000108  6820              LDR      r0,[r4,#0]            ;770
00010a  6800              LDR      r0,[r0,#0]            ;770
00010c  f0400001          ORR      r0,r0,#1              ;770
000110  6821              LDR      r1,[r4,#0]            ;770
000112  6008              STR      r0,[r1,#0]            ;770
                  |L23.276|
000114  e005              B        |L23.290|
                  |L23.278|
000116  6820              LDR      r0,[r4,#0]            ;775
000118  6800              LDR      r0,[r0,#0]            ;775
00011a  f0400001          ORR      r0,r0,#1              ;775
00011e  6821              LDR      r1,[r4,#0]            ;775
000120  6008              STR      r0,[r1,#0]            ;775
                  |L23.290|
000122  4630              MOV      r0,r6                 ;780
000124  e784              B        |L23.48|
;;;782    
                          ENDP

000126  0000              DCW      0x0000
                  |L23.296|
                          DCD      0x40010000
                  |L23.300|
                          DCD      0x40000400
                  |L23.304|
                          DCD      0x40000800
                  |L23.308|
                          DCD      0x40000c00
                  |L23.312|
                          DCD      0x40010400
                  |L23.316|
                          DCD      0x40014000
                  |L23.320|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_OCN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop PROC
;;;674      */
;;;675    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;676    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;677      /* Check the parameters */
;;;678      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;679    
;;;680      /* Disable the Capture compare channel N */
;;;681      TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;682    
;;;683      /* Disable the Main Output */
;;;684      __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L24.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L24.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L24.52|
000034  bf00              NOP      
;;;685    
;;;686      /* Disable the Peripheral */
;;;687      __HAL_TIM_DISABLE(htim);
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L24.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L24.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L24.90|
00005a  bf00              NOP      
;;;688    
;;;689      /* Set the TIM complementary channel state */
;;;690      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
00005c  b91d              CBNZ     r5,|L24.102|
00005e  2001              MOVS     r0,#1
000060  f8840042          STRB     r0,[r4,#0x42]
000064  e00e              B        |L24.132|
                  |L24.102|
000066  2d04              CMP      r5,#4
000068  d103              BNE      |L24.114|
00006a  2101              MOVS     r1,#1
00006c  2043              MOVS     r0,#0x43
00006e  5501              STRB     r1,[r0,r4]
000070  e008              B        |L24.132|
                  |L24.114|
000072  2d08              CMP      r5,#8
000074  d103              BNE      |L24.126|
000076  2101              MOVS     r1,#1
000078  2044              MOVS     r0,#0x44
00007a  5501              STRB     r1,[r0,r4]
00007c  e002              B        |L24.132|
                  |L24.126|
00007e  2101              MOVS     r1,#1
000080  2045              MOVS     r0,#0x45
000082  5501              STRB     r1,[r0,r4]
                  |L24.132|
;;;691    
;;;692      /* Return function status */
;;;693      return HAL_OK;
000084  2000              MOVS     r0,#0
;;;694    }
000086  bd70              POP      {r4-r6,pc}
;;;695    
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_DMA PROC
;;;1005     */
;;;1006   HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1007   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1008     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;1009   
;;;1010     /* Check the parameters */
;;;1011     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1012   
;;;1013     switch (Channel)
000008  b125              CBZ      r5,|L25.20|
00000a  2d04              CMP      r5,#4
00000c  d00c              BEQ      |L25.40|
00000e  2d08              CMP      r5,#8
000010  d11e              BNE      |L25.80|
000012  e013              B        |L25.60|
                  |L25.20|
;;;1014     {
;;;1015       case TIM_CHANNEL_1:
;;;1016       {
;;;1017         /* Disable the TIM Output Compare DMA request */
;;;1018         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000014  6820              LDR      r0,[r4,#0]
000016  68c0              LDR      r0,[r0,#0xc]
000018  f4207000          BIC      r0,r0,#0x200
00001c  6821              LDR      r1,[r4,#0]
00001e  60c8              STR      r0,[r1,#0xc]
;;;1019         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
000020  6a60              LDR      r0,[r4,#0x24]
000022  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1020         break;
000026  e015              B        |L25.84|
                  |L25.40|
;;;1021       }
;;;1022   
;;;1023       case TIM_CHANNEL_2:
;;;1024       {
;;;1025         /* Disable the TIM Output Compare DMA request */
;;;1026         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  f4206080          BIC      r0,r0,#0x400
000030  6821              LDR      r1,[r4,#0]
000032  60c8              STR      r0,[r1,#0xc]
;;;1027         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
000034  6aa0              LDR      r0,[r4,#0x28]
000036  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1028         break;
00003a  e00b              B        |L25.84|
                  |L25.60|
;;;1029       }
;;;1030   
;;;1031       case TIM_CHANNEL_3:
;;;1032       {
;;;1033         /* Disable the TIM Output Compare DMA request */
;;;1034         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00003c  6820              LDR      r0,[r4,#0]
00003e  68c0              LDR      r0,[r0,#0xc]
000040  f4206000          BIC      r0,r0,#0x800
000044  6821              LDR      r1,[r4,#0]
000046  60c8              STR      r0,[r1,#0xc]
;;;1035         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
000048  6ae0              LDR      r0,[r4,#0x2c]
00004a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1036         break;
00004e  e001              B        |L25.84|
                  |L25.80|
;;;1037       }
;;;1038   
;;;1039       default:
;;;1040         status = HAL_ERROR;
000050  2601              MOVS     r6,#1
;;;1041         break;
000052  bf00              NOP      
                  |L25.84|
000054  bf00              NOP                            ;1020
;;;1042     }
;;;1043   
;;;1044     if (status == HAL_OK)
000056  2e00              CMP      r6,#0
000058  d13e              BNE      |L25.216|
;;;1045     {
;;;1046       /* Disable the Capture compare channel N */
;;;1047       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00005a  2200              MOVS     r2,#0
00005c  4629              MOV      r1,r5
00005e  6820              LDR      r0,[r4,#0]
000060  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1048   
;;;1049       /* Disable the Main Output */
;;;1050       __HAL_TIM_MOE_DISABLE(htim);
000064  bf00              NOP      
000066  6820              LDR      r0,[r4,#0]
000068  6a00              LDR      r0,[r0,#0x20]
00006a  f2411111          MOV      r1,#0x1111
00006e  4008              ANDS     r0,r0,r1
000070  b950              CBNZ     r0,|L25.136|
000072  6820              LDR      r0,[r4,#0]
000074  6a00              LDR      r0,[r0,#0x20]
000076  1089              ASRS     r1,r1,#2
000078  4008              ANDS     r0,r0,r1
00007a  b928              CBNZ     r0,|L25.136|
00007c  6820              LDR      r0,[r4,#0]
00007e  6c40              LDR      r0,[r0,#0x44]
000080  f4204000          BIC      r0,r0,#0x8000
000084  6821              LDR      r1,[r4,#0]
000086  6448              STR      r0,[r1,#0x44]
                  |L25.136|
000088  bf00              NOP      
;;;1051   
;;;1052       /* Disable the Peripheral */
;;;1053       __HAL_TIM_DISABLE(htim);
00008a  bf00              NOP      
00008c  6820              LDR      r0,[r4,#0]
00008e  6a00              LDR      r0,[r0,#0x20]
000090  f2411111          MOV      r1,#0x1111
000094  4008              ANDS     r0,r0,r1
000096  b950              CBNZ     r0,|L25.174|
000098  6820              LDR      r0,[r4,#0]
00009a  6a00              LDR      r0,[r0,#0x20]
00009c  1089              ASRS     r1,r1,#2
00009e  4008              ANDS     r0,r0,r1
0000a0  b928              CBNZ     r0,|L25.174|
0000a2  6820              LDR      r0,[r4,#0]
0000a4  6800              LDR      r0,[r0,#0]
0000a6  f0200001          BIC      r0,r0,#1
0000aa  6821              LDR      r1,[r4,#0]
0000ac  6008              STR      r0,[r1,#0]
                  |L25.174|
0000ae  bf00              NOP      
;;;1054   
;;;1055       /* Set the TIM complementary channel state */
;;;1056       TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000b0  b91d              CBNZ     r5,|L25.186|
0000b2  2001              MOVS     r0,#1
0000b4  f8840042          STRB     r0,[r4,#0x42]
0000b8  e00e              B        |L25.216|
                  |L25.186|
0000ba  2d04              CMP      r5,#4
0000bc  d103              BNE      |L25.198|
0000be  2101              MOVS     r1,#1
0000c0  2043              MOVS     r0,#0x43
0000c2  5501              STRB     r1,[r0,r4]
0000c4  e008              B        |L25.216|
                  |L25.198|
0000c6  2d08              CMP      r5,#8
0000c8  d103              BNE      |L25.210|
0000ca  2101              MOVS     r1,#1
0000cc  2044              MOVS     r0,#0x44
0000ce  5501              STRB     r1,[r0,r4]
0000d0  e002              B        |L25.216|
                  |L25.210|
0000d2  2101              MOVS     r1,#1
0000d4  2045              MOVS     r0,#0x45
0000d6  5501              STRB     r1,[r0,r4]
                  |L25.216|
;;;1057     }
;;;1058   
;;;1059     /* Return function status */
;;;1060     return status;
0000d8  4630              MOV      r0,r6
;;;1061   }
0000da  bd70              POP      {r4-r6,pc}
;;;1062   
                          ENDP


                          AREA ||i.HAL_TIMEx_OCN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OCN_Stop_IT PROC
;;;793      */
;;;794    HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;795    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;796      HAL_StatusTypeDef status = HAL_OK;
000008  2600              MOVS     r6,#0
;;;797      uint32_t tmpccer;
;;;798    
;;;799      /* Check the parameters */
;;;800      assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;801    
;;;802      switch (Channel)
00000a  b125              CBZ      r5,|L26.22|
00000c  2d04              CMP      r5,#4
00000e  d009              BEQ      |L26.36|
000010  2d08              CMP      r5,#8
000012  d115              BNE      |L26.64|
000014  e00d              B        |L26.50|
                  |L26.22|
;;;803      {
;;;804        case TIM_CHANNEL_1:
;;;805        {
;;;806          /* Disable the TIM Output Compare interrupt */
;;;807          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0200002          BIC      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;808          break;
000022  e00f              B        |L26.68|
                  |L26.36|
;;;809        }
;;;810    
;;;811        case TIM_CHANNEL_2:
;;;812        {
;;;813          /* Disable the TIM Output Compare interrupt */
;;;814          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0200004          BIC      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;815          break;
000030  e008              B        |L26.68|
                  |L26.50|
;;;816        }
;;;817    
;;;818        case TIM_CHANNEL_3:
;;;819        {
;;;820          /* Disable the TIM Output Compare interrupt */
;;;821          __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0200008          BIC      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;822          break;
00003e  e001              B        |L26.68|
                  |L26.64|
;;;823        }
;;;824    
;;;825        default:
;;;826          status = HAL_ERROR;
000040  2601              MOVS     r6,#1
;;;827          break;
000042  bf00              NOP      
                  |L26.68|
000044  bf00              NOP                            ;808
;;;828      }
;;;829    
;;;830      if (status == HAL_OK)
000046  2e00              CMP      r6,#0
000048  d14a              BNE      |L26.224|
;;;831      {
;;;832        /* Disable the Capture compare channel N */
;;;833        TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00004a  2200              MOVS     r2,#0
00004c  4629              MOV      r1,r5
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       TIM_CCxNChannelCmd
;;;834    
;;;835        /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;836        tmpccer = htim->Instance->CCER;
000054  6820              LDR      r0,[r4,#0]
000056  6a07              LDR      r7,[r0,#0x20]
;;;837        if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
000058  f2404044          MOV      r0,#0x444
00005c  4038              ANDS     r0,r0,r7
00005e  b928              CBNZ     r0,|L26.108|
;;;838        {
;;;839          __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000060  6820              LDR      r0,[r4,#0]
000062  68c0              LDR      r0,[r0,#0xc]
000064  f0200080          BIC      r0,r0,#0x80
000068  6821              LDR      r1,[r4,#0]
00006a  60c8              STR      r0,[r1,#0xc]
                  |L26.108|
;;;840        }
;;;841    
;;;842        /* Disable the Main Output */
;;;843        __HAL_TIM_MOE_DISABLE(htim);
00006c  bf00              NOP      
00006e  6820              LDR      r0,[r4,#0]
000070  6a00              LDR      r0,[r0,#0x20]
000072  f2411111          MOV      r1,#0x1111
000076  4008              ANDS     r0,r0,r1
000078  b950              CBNZ     r0,|L26.144|
00007a  6820              LDR      r0,[r4,#0]
00007c  6a00              LDR      r0,[r0,#0x20]
00007e  1089              ASRS     r1,r1,#2
000080  4008              ANDS     r0,r0,r1
000082  b928              CBNZ     r0,|L26.144|
000084  6820              LDR      r0,[r4,#0]
000086  6c40              LDR      r0,[r0,#0x44]
000088  f4204000          BIC      r0,r0,#0x8000
00008c  6821              LDR      r1,[r4,#0]
00008e  6448              STR      r0,[r1,#0x44]
                  |L26.144|
000090  bf00              NOP      
;;;844    
;;;845        /* Disable the Peripheral */
;;;846        __HAL_TIM_DISABLE(htim);
000092  bf00              NOP      
000094  6820              LDR      r0,[r4,#0]
000096  6a00              LDR      r0,[r0,#0x20]
000098  f2411111          MOV      r1,#0x1111
00009c  4008              ANDS     r0,r0,r1
00009e  b950              CBNZ     r0,|L26.182|
0000a0  6820              LDR      r0,[r4,#0]
0000a2  6a00              LDR      r0,[r0,#0x20]
0000a4  1089              ASRS     r1,r1,#2
0000a6  4008              ANDS     r0,r0,r1
0000a8  b928              CBNZ     r0,|L26.182|
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6800              LDR      r0,[r0,#0]
0000ae  f0200001          BIC      r0,r0,#1
0000b2  6821              LDR      r1,[r4,#0]
0000b4  6008              STR      r0,[r1,#0]
                  |L26.182|
0000b6  bf00              NOP      
;;;847    
;;;848        /* Set the TIM complementary channel state */
;;;849        TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000b8  b91d              CBNZ     r5,|L26.194|
0000ba  2001              MOVS     r0,#1
0000bc  f8840042          STRB     r0,[r4,#0x42]
0000c0  e00e              B        |L26.224|
                  |L26.194|
0000c2  2d04              CMP      r5,#4
0000c4  d103              BNE      |L26.206|
0000c6  2101              MOVS     r1,#1
0000c8  2043              MOVS     r0,#0x43
0000ca  5501              STRB     r1,[r0,r4]
0000cc  e008              B        |L26.224|
                  |L26.206|
0000ce  2d08              CMP      r5,#8
0000d0  d103              BNE      |L26.218|
0000d2  2101              MOVS     r1,#1
0000d4  2044              MOVS     r0,#0x44
0000d6  5501              STRB     r1,[r0,r4]
0000d8  e002              B        |L26.224|
                  |L26.218|
0000da  2101              MOVS     r1,#1
0000dc  2045              MOVS     r0,#0x45
0000de  5501              STRB     r1,[r0,r4]
                  |L26.224|
;;;850      }
;;;851    
;;;852      /* Return function status */
;;;853      return status;
0000e0  4630              MOV      r0,r6
;;;854    }
0000e2  e8bd81f0          POP      {r4-r8,pc}
;;;855    
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start PROC
;;;1577     */
;;;1578   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1579   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;1580     uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
000008  b90d              CBNZ     r5,|L27.14|
00000a  2004              MOVS     r0,#4
00000c  e000              B        |L27.16|
                  |L27.14|
00000e  2000              MOVS     r0,#0
                  |L27.16|
000010  4682              MOV      r10,r0
;;;1581     HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
000012  f894603e          LDRB     r6,[r4,#0x3e]
;;;1582     HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
000016  203f              MOVS     r0,#0x3f
000018  5d07              LDRB     r7,[r0,r4]
;;;1583     HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
00001a  f8948042          LDRB     r8,[r4,#0x42]
;;;1584     HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
00001e  f8949043          LDRB     r9,[r4,#0x43]
;;;1585   
;;;1586     /* Check the parameters */
;;;1587     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1588   
;;;1589     /* Check the TIM channels state */
;;;1590     if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
000022  2e01              CMP      r6,#1
000024  d107              BNE      |L27.54|
;;;1591         || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
000026  2f01              CMP      r7,#1
000028  d105              BNE      |L27.54|
;;;1592         || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
00002a  f1b80f01          CMP      r8,#1
00002e  d102              BNE      |L27.54|
;;;1593         || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
000030  f1b90f01          CMP      r9,#1
000034  d002              BEQ      |L27.60|
                  |L27.54|
;;;1594     {
;;;1595       return HAL_ERROR;
000036  2001              MOVS     r0,#1
                  |L27.56|
;;;1596     }
;;;1597   
;;;1598     /* Set the TIM channels state */
;;;1599     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1600     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1601     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1602     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1603   
;;;1604     /* Enable the complementary One Pulse output channel and the Input Capture channel */
;;;1605     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
;;;1606     TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
;;;1607   
;;;1608     /* Enable the Main Output */
;;;1609     __HAL_TIM_MOE_ENABLE(htim);
;;;1610   
;;;1611     /* Return function status */
;;;1612     return HAL_OK;
;;;1613   }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L27.60|
00003c  2002              MOVS     r0,#2                 ;1599
00003e  f884003e          STRB     r0,[r4,#0x3e]         ;1599
000042  2102              MOVS     r1,#2                 ;1600
000044  203f              MOVS     r0,#0x3f              ;1600
000046  5501              STRB     r1,[r0,r4]            ;1600
000048  2002              MOVS     r0,#2                 ;1601
00004a  f8840042          STRB     r0,[r4,#0x42]         ;1601
00004e  2043              MOVS     r0,#0x43              ;1602
000050  5501              STRB     r1,[r0,r4]            ;1602
000052  2204              MOVS     r2,#4                 ;1605
000054  4629              MOV      r1,r5                 ;1605
000056  6820              LDR      r0,[r4,#0]            ;1605
000058  f7fffffe          BL       TIM_CCxNChannelCmd
00005c  2201              MOVS     r2,#1                 ;1606
00005e  4651              MOV      r1,r10                ;1606
000060  6820              LDR      r0,[r4,#0]            ;1606
000062  f7fffffe          BL       TIM_CCxChannelCmd
000066  6820              LDR      r0,[r4,#0]            ;1609
000068  6c40              LDR      r0,[r0,#0x44]         ;1609
00006a  f4404000          ORR      r0,r0,#0x8000         ;1609
00006e  6821              LDR      r1,[r4,#0]            ;1609
000070  6448              STR      r0,[r1,#0x44]         ;1609
000072  2000              MOVS     r0,#0                 ;1612
000074  e7e0              B        |L27.56|
;;;1614   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Start_IT PROC
;;;1665     */
;;;1666   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1667   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;1668     uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
000008  b90d              CBNZ     r5,|L28.14|
00000a  2004              MOVS     r0,#4
00000c  e000              B        |L28.16|
                  |L28.14|
00000e  2000              MOVS     r0,#0
                  |L28.16|
000010  4682              MOV      r10,r0
;;;1669     HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
000012  f894603e          LDRB     r6,[r4,#0x3e]
;;;1670     HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
000016  203f              MOVS     r0,#0x3f
000018  5d07              LDRB     r7,[r0,r4]
;;;1671     HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
00001a  f8948042          LDRB     r8,[r4,#0x42]
;;;1672     HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
00001e  f8949043          LDRB     r9,[r4,#0x43]
;;;1673   
;;;1674     /* Check the parameters */
;;;1675     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1676   
;;;1677     /* Check the TIM channels state */
;;;1678     if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
000022  2e01              CMP      r6,#1
000024  d107              BNE      |L28.54|
;;;1679         || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
000026  2f01              CMP      r7,#1
000028  d105              BNE      |L28.54|
;;;1680         || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
00002a  f1b80f01          CMP      r8,#1
00002e  d102              BNE      |L28.54|
;;;1681         || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
000030  f1b90f01          CMP      r9,#1
000034  d002              BEQ      |L28.60|
                  |L28.54|
;;;1682     {
;;;1683       return HAL_ERROR;
000036  2001              MOVS     r0,#1
                  |L28.56|
;;;1684     }
;;;1685   
;;;1686     /* Set the TIM channels state */
;;;1687     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1688     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1689     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1690     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1691   
;;;1692     /* Enable the TIM Capture/Compare 1 interrupt */
;;;1693     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;1694   
;;;1695     /* Enable the TIM Capture/Compare 2 interrupt */
;;;1696     __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;1697   
;;;1698     /* Enable the complementary One Pulse output channel and the Input Capture channel */
;;;1699     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
;;;1700     TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
;;;1701   
;;;1702     /* Enable the Main Output */
;;;1703     __HAL_TIM_MOE_ENABLE(htim);
;;;1704   
;;;1705     /* Return function status */
;;;1706     return HAL_OK;
;;;1707   }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L28.60|
00003c  2002              MOVS     r0,#2                 ;1687
00003e  f884003e          STRB     r0,[r4,#0x3e]         ;1687
000042  2102              MOVS     r1,#2                 ;1688
000044  203f              MOVS     r0,#0x3f              ;1688
000046  5501              STRB     r1,[r0,r4]            ;1688
000048  2002              MOVS     r0,#2                 ;1689
00004a  f8840042          STRB     r0,[r4,#0x42]         ;1689
00004e  2043              MOVS     r0,#0x43              ;1690
000050  5501              STRB     r1,[r0,r4]            ;1690
000052  6820              LDR      r0,[r4,#0]            ;1693
000054  68c0              LDR      r0,[r0,#0xc]          ;1693
000056  f0400002          ORR      r0,r0,#2              ;1693
00005a  6821              LDR      r1,[r4,#0]            ;1693
00005c  60c8              STR      r0,[r1,#0xc]          ;1693
00005e  6820              LDR      r0,[r4,#0]            ;1696
000060  68c0              LDR      r0,[r0,#0xc]          ;1696
000062  f0400004          ORR      r0,r0,#4              ;1696
000066  6821              LDR      r1,[r4,#0]            ;1696
000068  60c8              STR      r0,[r1,#0xc]          ;1696
00006a  2204              MOVS     r2,#4                 ;1699
00006c  4629              MOV      r1,r5                 ;1699
00006e  6820              LDR      r0,[r4,#0]            ;1699
000070  f7fffffe          BL       TIM_CCxNChannelCmd
000074  2201              MOVS     r2,#1                 ;1700
000076  4651              MOV      r1,r10                ;1700
000078  6820              LDR      r0,[r4,#0]            ;1700
00007a  f7fffffe          BL       TIM_CCxChannelCmd
00007e  6820              LDR      r0,[r4,#0]            ;1703
000080  6c40              LDR      r0,[r0,#0x44]         ;1703
000082  f4404000          ORR      r0,r0,#0x8000         ;1703
000086  6821              LDR      r1,[r4,#0]            ;1703
000088  6448              STR      r0,[r1,#0x44]         ;1703
00008a  2000              MOVS     r0,#0                 ;1706
00008c  e7d4              B        |L28.56|
;;;1708   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop PROC
;;;1626     */
;;;1627   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1628   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1629     uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
000006  b90d              CBNZ     r5,|L29.12|
000008  2004              MOVS     r0,#4
00000a  e000              B        |L29.14|
                  |L29.12|
00000c  2000              MOVS     r0,#0
                  |L29.14|
00000e  4606              MOV      r6,r0
;;;1630   
;;;1631     /* Check the parameters */
;;;1632     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1633   
;;;1634     /* Disable the complementary One Pulse output channel and the Input Capture channel */
;;;1635     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000010  2200              MOVS     r2,#0
000012  4629              MOV      r1,r5
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1636     TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
00001a  2200              MOVS     r2,#0
00001c  4631              MOV      r1,r6
00001e  6820              LDR      r0,[r4,#0]
000020  f7fffffe          BL       TIM_CCxChannelCmd
;;;1637   
;;;1638     /* Disable the Main Output */
;;;1639     __HAL_TIM_MOE_DISABLE(htim);
000024  bf00              NOP      
000026  6820              LDR      r0,[r4,#0]
000028  6a00              LDR      r0,[r0,#0x20]
00002a  f2411111          MOV      r1,#0x1111
00002e  4008              ANDS     r0,r0,r1
000030  b950              CBNZ     r0,|L29.72|
000032  6820              LDR      r0,[r4,#0]
000034  6a00              LDR      r0,[r0,#0x20]
000036  1089              ASRS     r1,r1,#2
000038  4008              ANDS     r0,r0,r1
00003a  b928              CBNZ     r0,|L29.72|
00003c  6820              LDR      r0,[r4,#0]
00003e  6c40              LDR      r0,[r0,#0x44]
000040  f4204000          BIC      r0,r0,#0x8000
000044  6821              LDR      r1,[r4,#0]
000046  6448              STR      r0,[r1,#0x44]
                  |L29.72|
000048  bf00              NOP      
;;;1640   
;;;1641     /* Disable the Peripheral */
;;;1642     __HAL_TIM_DISABLE(htim);
00004a  bf00              NOP      
00004c  6820              LDR      r0,[r4,#0]
00004e  6a00              LDR      r0,[r0,#0x20]
000050  f2411111          MOV      r1,#0x1111
000054  4008              ANDS     r0,r0,r1
000056  b950              CBNZ     r0,|L29.110|
000058  6820              LDR      r0,[r4,#0]
00005a  6a00              LDR      r0,[r0,#0x20]
00005c  1089              ASRS     r1,r1,#2
00005e  4008              ANDS     r0,r0,r1
000060  b928              CBNZ     r0,|L29.110|
000062  6820              LDR      r0,[r4,#0]
000064  6800              LDR      r0,[r0,#0]
000066  f0200001          BIC      r0,r0,#1
00006a  6821              LDR      r1,[r4,#0]
00006c  6008              STR      r0,[r1,#0]
                  |L29.110|
00006e  bf00              NOP      
;;;1643   
;;;1644     /* Set the TIM  channels state */
;;;1645     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000070  2001              MOVS     r0,#1
000072  f884003e          STRB     r0,[r4,#0x3e]
;;;1646     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000076  2101              MOVS     r1,#1
000078  203f              MOVS     r0,#0x3f
00007a  5501              STRB     r1,[r0,r4]
;;;1647     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
00007c  2001              MOVS     r0,#1
00007e  f8840042          STRB     r0,[r4,#0x42]
;;;1648     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000082  2043              MOVS     r0,#0x43
000084  5501              STRB     r1,[r0,r4]
;;;1649   
;;;1650     /* Return function status */
;;;1651     return HAL_OK;
000086  2000              MOVS     r0,#0
;;;1652   }
000088  bd70              POP      {r4-r6,pc}
;;;1653   
                          ENDP


                          AREA ||i.HAL_TIMEx_OnePulseN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_OnePulseN_Stop_IT PROC
;;;1720     */
;;;1721   HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
000000  b570              PUSH     {r4-r6,lr}
;;;1722   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1723     uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
000006  b90d              CBNZ     r5,|L30.12|
000008  2004              MOVS     r0,#4
00000a  e000              B        |L30.14|
                  |L30.12|
00000c  2000              MOVS     r0,#0
                  |L30.14|
00000e  4606              MOV      r6,r0
;;;1724   
;;;1725     /* Check the parameters */
;;;1726     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));
;;;1727   
;;;1728     /* Disable the TIM Capture/Compare 1 interrupt */
;;;1729     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000010  6820              LDR      r0,[r4,#0]
000012  68c0              LDR      r0,[r0,#0xc]
000014  f0200002          BIC      r0,r0,#2
000018  6821              LDR      r1,[r4,#0]
00001a  60c8              STR      r0,[r1,#0xc]
;;;1730   
;;;1731     /* Disable the TIM Capture/Compare 2 interrupt */
;;;1732     __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
00001c  6820              LDR      r0,[r4,#0]
00001e  68c0              LDR      r0,[r0,#0xc]
000020  f0200004          BIC      r0,r0,#4
000024  6821              LDR      r1,[r4,#0]
000026  60c8              STR      r0,[r1,#0xc]
;;;1733   
;;;1734     /* Disable the complementary One Pulse output channel and the Input Capture channel */
;;;1735     TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
000028  2200              MOVS     r2,#0
00002a  4629              MOV      r1,r5
00002c  6820              LDR      r0,[r4,#0]
00002e  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1736     TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
000032  2200              MOVS     r2,#0
000034  4631              MOV      r1,r6
000036  6820              LDR      r0,[r4,#0]
000038  f7fffffe          BL       TIM_CCxChannelCmd
;;;1737   
;;;1738     /* Disable the Main Output */
;;;1739     __HAL_TIM_MOE_DISABLE(htim);
00003c  bf00              NOP      
00003e  6820              LDR      r0,[r4,#0]
000040  6a00              LDR      r0,[r0,#0x20]
000042  f2411111          MOV      r1,#0x1111
000046  4008              ANDS     r0,r0,r1
000048  b950              CBNZ     r0,|L30.96|
00004a  6820              LDR      r0,[r4,#0]
00004c  6a00              LDR      r0,[r0,#0x20]
00004e  1089              ASRS     r1,r1,#2
000050  4008              ANDS     r0,r0,r1
000052  b928              CBNZ     r0,|L30.96|
000054  6820              LDR      r0,[r4,#0]
000056  6c40              LDR      r0,[r0,#0x44]
000058  f4204000          BIC      r0,r0,#0x8000
00005c  6821              LDR      r1,[r4,#0]
00005e  6448              STR      r0,[r1,#0x44]
                  |L30.96|
000060  bf00              NOP      
;;;1740   
;;;1741     /* Disable the Peripheral */
;;;1742     __HAL_TIM_DISABLE(htim);
000062  bf00              NOP      
000064  6820              LDR      r0,[r4,#0]
000066  6a00              LDR      r0,[r0,#0x20]
000068  f2411111          MOV      r1,#0x1111
00006c  4008              ANDS     r0,r0,r1
00006e  b950              CBNZ     r0,|L30.134|
000070  6820              LDR      r0,[r4,#0]
000072  6a00              LDR      r0,[r0,#0x20]
000074  1089              ASRS     r1,r1,#2
000076  4008              ANDS     r0,r0,r1
000078  b928              CBNZ     r0,|L30.134|
00007a  6820              LDR      r0,[r4,#0]
00007c  6800              LDR      r0,[r0,#0]
00007e  f0200001          BIC      r0,r0,#1
000082  6821              LDR      r1,[r4,#0]
000084  6008              STR      r0,[r1,#0]
                  |L30.134|
000086  bf00              NOP      
;;;1743   
;;;1744     /* Set the TIM  channels state */
;;;1745     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000088  2001              MOVS     r0,#1
00008a  f884003e          STRB     r0,[r4,#0x3e]
;;;1746     TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
00008e  2101              MOVS     r1,#1
000090  203f              MOVS     r0,#0x3f
000092  5501              STRB     r1,[r0,r4]
;;;1747     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000094  2001              MOVS     r0,#1
000096  f8840042          STRB     r0,[r4,#0x42]
;;;1748     TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
00009a  2043              MOVS     r0,#0x43
00009c  5501              STRB     r1,[r0,r4]
;;;1749   
;;;1750     /* Return function status */
;;;1751     return HAL_OK;
00009e  2000              MOVS     r0,#0
;;;1752   }
0000a0  bd70              POP      {r4-r6,pc}
;;;1753   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Start||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start PROC
;;;1106     */
;;;1107   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1108   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1109     uint32_t tmpsmcr;
;;;1110   
;;;1111     /* Check the parameters */
;;;1112     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1113   
;;;1114     /* Check the TIM complementary channel state */
;;;1115     if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
000006  b915              CBNZ     r5,|L31.14|
000008  f8940042          LDRB     r0,[r4,#0x42]
00000c  e00b              B        |L31.38|
                  |L31.14|
00000e  2d04              CMP      r5,#4
000010  d102              BNE      |L31.24|
000012  2043              MOVS     r0,#0x43
000014  5d00              LDRB     r0,[r0,r4]
000016  e006              B        |L31.38|
                  |L31.24|
000018  2d08              CMP      r5,#8
00001a  d102              BNE      |L31.34|
00001c  2044              MOVS     r0,#0x44
00001e  5d00              LDRB     r0,[r0,r4]
000020  e001              B        |L31.38|
                  |L31.34|
000022  2045              MOVS     r0,#0x45
000024  5d00              LDRB     r0,[r0,r4]
                  |L31.38|
000026  2801              CMP      r0,#1
000028  d001              BEQ      |L31.46|
;;;1116     {
;;;1117       return HAL_ERROR;
00002a  2001              MOVS     r0,#1
                  |L31.44|
;;;1118     }
;;;1119   
;;;1120     /* Set the TIM complementary channel state */
;;;1121     TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1122   
;;;1123     /* Enable the complementary PWM output  */
;;;1124     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1125   
;;;1126     /* Enable the Main Output */
;;;1127     __HAL_TIM_MOE_ENABLE(htim);
;;;1128   
;;;1129     /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;1130     if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;1131     {
;;;1132       tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;1133       if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;1134       {
;;;1135         __HAL_TIM_ENABLE(htim);
;;;1136       }
;;;1137     }
;;;1138     else
;;;1139     {
;;;1140       __HAL_TIM_ENABLE(htim);
;;;1141     }
;;;1142   
;;;1143     /* Return function status */
;;;1144     return HAL_OK;
;;;1145   }
00002c  bd70              POP      {r4-r6,pc}
                  |L31.46|
00002e  b91d              CBNZ     r5,|L31.56|
000030  2002              MOVS     r0,#2                 ;1121
000032  f8840042          STRB     r0,[r4,#0x42]         ;1121
000036  e00e              B        |L31.86|
                  |L31.56|
000038  2d04              CMP      r5,#4                 ;1121
00003a  d103              BNE      |L31.68|
00003c  2102              MOVS     r1,#2                 ;1121
00003e  2043              MOVS     r0,#0x43              ;1121
000040  5501              STRB     r1,[r0,r4]            ;1121
000042  e008              B        |L31.86|
                  |L31.68|
000044  2d08              CMP      r5,#8                 ;1121
000046  d103              BNE      |L31.80|
000048  2102              MOVS     r1,#2                 ;1121
00004a  2044              MOVS     r0,#0x44              ;1121
00004c  5501              STRB     r1,[r0,r4]            ;1121
00004e  e002              B        |L31.86|
                  |L31.80|
000050  2102              MOVS     r1,#2                 ;1121
000052  2045              MOVS     r0,#0x45              ;1121
000054  5501              STRB     r1,[r0,r4]            ;1121
                  |L31.86|
000056  2204              MOVS     r2,#4                 ;1124
000058  4629              MOV      r1,r5                 ;1124
00005a  6820              LDR      r0,[r4,#0]            ;1124
00005c  f7fffffe          BL       TIM_CCxNChannelCmd
000060  6820              LDR      r0,[r4,#0]            ;1127
000062  6c40              LDR      r0,[r0,#0x44]         ;1127
000064  f4404000          ORR      r0,r0,#0x8000         ;1127
000068  6821              LDR      r1,[r4,#0]            ;1127
00006a  6448              STR      r0,[r1,#0x44]         ;1127
00006c  491a              LDR      r1,|L31.216|
00006e  6820              LDR      r0,[r4,#0]            ;1130
000070  4288              CMP      r0,r1                 ;1130
000072  d01b              BEQ      |L31.172|
000074  6820              LDR      r0,[r4,#0]            ;1130
000076  f1b04f80          CMP      r0,#0x40000000        ;1130
00007a  d017              BEQ      |L31.172|
00007c  4917              LDR      r1,|L31.220|
00007e  6820              LDR      r0,[r4,#0]            ;1130
000080  4288              CMP      r0,r1                 ;1130
000082  d013              BEQ      |L31.172|
000084  4916              LDR      r1,|L31.224|
000086  6820              LDR      r0,[r4,#0]            ;1130
000088  4288              CMP      r0,r1                 ;1130
00008a  d00f              BEQ      |L31.172|
00008c  4915              LDR      r1,|L31.228|
00008e  6820              LDR      r0,[r4,#0]            ;1130
000090  4288              CMP      r0,r1                 ;1130
000092  d00b              BEQ      |L31.172|
000094  4914              LDR      r1,|L31.232|
000096  6820              LDR      r0,[r4,#0]            ;1130
000098  4288              CMP      r0,r1                 ;1130
00009a  d007              BEQ      |L31.172|
00009c  4913              LDR      r1,|L31.236|
00009e  6820              LDR      r0,[r4,#0]            ;1130
0000a0  4288              CMP      r0,r1                 ;1130
0000a2  d003              BEQ      |L31.172|
0000a4  4912              LDR      r1,|L31.240|
0000a6  6820              LDR      r0,[r4,#0]            ;1130
0000a8  4288              CMP      r0,r1                 ;1130
0000aa  d10c              BNE      |L31.198|
                  |L31.172|
0000ac  6820              LDR      r0,[r4,#0]            ;1132
0000ae  6880              LDR      r0,[r0,#8]            ;1132
0000b0  f0000607          AND      r6,r0,#7              ;1132
0000b4  2e06              CMP      r6,#6                 ;1133
0000b6  d00c              BEQ      |L31.210|
0000b8  6820              LDR      r0,[r4,#0]            ;1135
0000ba  6800              LDR      r0,[r0,#0]            ;1135
0000bc  f0400001          ORR      r0,r0,#1              ;1135
0000c0  6821              LDR      r1,[r4,#0]            ;1135
0000c2  6008              STR      r0,[r1,#0]            ;1135
0000c4  e005              B        |L31.210|
                  |L31.198|
0000c6  6820              LDR      r0,[r4,#0]            ;1140
0000c8  6800              LDR      r0,[r0,#0]            ;1140
0000ca  f0400001          ORR      r0,r0,#1              ;1140
0000ce  6821              LDR      r1,[r4,#0]            ;1140
0000d0  6008              STR      r0,[r1,#0]            ;1140
                  |L31.210|
0000d2  2000              MOVS     r0,#0                 ;1144
0000d4  e7aa              B        |L31.44|
;;;1146   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L31.216|
                          DCD      0x40010000
                  |L31.220|
                          DCD      0x40000400
                  |L31.224|
                          DCD      0x40000800
                  |L31.228|
                          DCD      0x40000c00
                  |L31.232|
                          DCD      0x40010400
                  |L31.236|
                          DCD      0x40014000
                  |L31.240|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_PWMN_Start_DMA||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_DMA PROC
;;;1349     */
;;;1350   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1351   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;1352     HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;1353     uint32_t tmpsmcr;
;;;1354   
;;;1355     /* Check the parameters */
;;;1356     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1357   
;;;1358     /* Set the TIM complementary channel state */
;;;1359     if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
000010  b915              CBNZ     r5,|L32.24|
000012  f8940042          LDRB     r0,[r4,#0x42]
000016  e00b              B        |L32.48|
                  |L32.24|
000018  2d04              CMP      r5,#4
00001a  d102              BNE      |L32.34|
00001c  2043              MOVS     r0,#0x43
00001e  5d00              LDRB     r0,[r0,r4]
000020  e006              B        |L32.48|
                  |L32.34|
000022  2d08              CMP      r5,#8
000024  d102              BNE      |L32.44|
000026  2044              MOVS     r0,#0x44
000028  5d00              LDRB     r0,[r0,r4]
00002a  e001              B        |L32.48|
                  |L32.44|
00002c  2045              MOVS     r0,#0x45
00002e  5d00              LDRB     r0,[r0,r4]
                  |L32.48|
000030  2802              CMP      r0,#2
000032  d101              BNE      |L32.56|
                  |L32.52|
;;;1360     {
;;;1361       return HAL_BUSY;
;;;1362     }
;;;1363     else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
;;;1364     {
;;;1365       if ((pData == NULL) && (Length > 0U))
;;;1366       {
;;;1367         return HAL_ERROR;
;;;1368       }
;;;1369       else
;;;1370       {
;;;1371         TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1372       }
;;;1373     }
;;;1374     else
;;;1375     {
;;;1376       return HAL_ERROR;
;;;1377     }
;;;1378   
;;;1379     switch (Channel)
;;;1380     {
;;;1381       case TIM_CHANNEL_1:
;;;1382       {
;;;1383         /* Set the DMA compare callbacks */
;;;1384         htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
;;;1385         htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1386   
;;;1387         /* Set the DMA error callback */
;;;1388         htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
;;;1389   
;;;1390         /* Enable the DMA stream */
;;;1391         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
;;;1392                              Length) != HAL_OK)
;;;1393         {
;;;1394           /* Return error status */
;;;1395           return HAL_ERROR;
;;;1396         }
;;;1397         /* Enable the TIM Capture/Compare 1 DMA request */
;;;1398         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
;;;1399         break;
;;;1400       }
;;;1401   
;;;1402       case TIM_CHANNEL_2:
;;;1403       {
;;;1404         /* Set the DMA compare callbacks */
;;;1405         htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
;;;1406         htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1407   
;;;1408         /* Set the DMA error callback */
;;;1409         htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
;;;1410   
;;;1411         /* Enable the DMA stream */
;;;1412         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
;;;1413                              Length) != HAL_OK)
;;;1414         {
;;;1415           /* Return error status */
;;;1416           return HAL_ERROR;
;;;1417         }
;;;1418         /* Enable the TIM Capture/Compare 2 DMA request */
;;;1419         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
;;;1420         break;
;;;1421       }
;;;1422   
;;;1423       case TIM_CHANNEL_3:
;;;1424       {
;;;1425         /* Set the DMA compare callbacks */
;;;1426         htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
;;;1427         htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
;;;1428   
;;;1429         /* Set the DMA error callback */
;;;1430         htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
;;;1431   
;;;1432         /* Enable the DMA stream */
;;;1433         if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
;;;1434                              Length) != HAL_OK)
;;;1435         {
;;;1436           /* Return error status */
;;;1437           return HAL_ERROR;
;;;1438         }
;;;1439         /* Enable the TIM Capture/Compare 3 DMA request */
;;;1440         __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
;;;1441         break;
;;;1442       }
;;;1443   
;;;1444       default:
;;;1445         status = HAL_ERROR;
;;;1446         break;
;;;1447     }
;;;1448   
;;;1449     if (status == HAL_OK)
;;;1450     {
;;;1451       /* Enable the complementary PWM output  */
;;;1452       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1453   
;;;1454       /* Enable the Main Output */
;;;1455       __HAL_TIM_MOE_ENABLE(htim);
;;;1456   
;;;1457       /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;1458       if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;1459       {
;;;1460         tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;1461         if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;1462         {
;;;1463           __HAL_TIM_ENABLE(htim);
;;;1464         }
;;;1465       }
;;;1466       else
;;;1467       {
;;;1468         __HAL_TIM_ENABLE(htim);
;;;1469       }
;;;1470     }
;;;1471   
;;;1472     /* Return function status */
;;;1473     return status;
;;;1474   }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L32.56|
000038  b915              CBNZ     r5,|L32.64|
00003a  f8940042          LDRB     r0,[r4,#0x42]         ;1363
00003e  e00b              B        |L32.88|
                  |L32.64|
000040  2d04              CMP      r5,#4                 ;1363
000042  d102              BNE      |L32.74|
000044  2043              MOVS     r0,#0x43              ;1363
000046  5d00              LDRB     r0,[r0,r4]            ;1363
000048  e006              B        |L32.88|
                  |L32.74|
00004a  2d08              CMP      r5,#8                 ;1363
00004c  d102              BNE      |L32.84|
00004e  2044              MOVS     r0,#0x44              ;1363
000050  5d00              LDRB     r0,[r0,r4]            ;1363
000052  e001              B        |L32.88|
                  |L32.84|
000054  2045              MOVS     r0,#0x45              ;1363
000056  5d00              LDRB     r0,[r0,r4]            ;1363
                  |L32.88|
000058  2801              CMP      r0,#1                 ;1363
00005a  d117              BNE      |L32.140|
00005c  b90e              CBNZ     r6,|L32.98|
00005e  b107              CBZ      r7,|L32.98|
000060  e7e8              B        |L32.52|
                  |L32.98|
000062  b91d              CBNZ     r5,|L32.108|
000064  2002              MOVS     r0,#2                 ;1371
000066  f8840042          STRB     r0,[r4,#0x42]         ;1371
00006a  e011              B        |L32.144|
                  |L32.108|
00006c  2d04              CMP      r5,#4                 ;1371
00006e  d103              BNE      |L32.120|
000070  2102              MOVS     r1,#2                 ;1371
000072  2043              MOVS     r0,#0x43              ;1371
000074  5501              STRB     r1,[r0,r4]            ;1371
000076  e00b              B        |L32.144|
                  |L32.120|
000078  2d08              CMP      r5,#8                 ;1371
00007a  d103              BNE      |L32.132|
00007c  2102              MOVS     r1,#2                 ;1371
00007e  2044              MOVS     r0,#0x44              ;1371
000080  5501              STRB     r1,[r0,r4]            ;1371
000082  e005              B        |L32.144|
                  |L32.132|
000084  2102              MOVS     r1,#2                 ;1371
000086  2045              MOVS     r0,#0x45              ;1371
000088  5501              STRB     r1,[r0,r4]            ;1371
00008a  e001              B        |L32.144|
                  |L32.140|
00008c  2001              MOVS     r0,#1                 ;1376
00008e  e7d1              B        |L32.52|
                  |L32.144|
000090  b125              CBZ      r5,|L32.156|
000092  2d04              CMP      r5,#4                 ;1379
000094  d01d              BEQ      |L32.210|
000096  2d08              CMP      r5,#8                 ;1379
000098  d151              BNE      |L32.318|
00009a  e035              B        |L32.264|
                  |L32.156|
00009c  494c              LDR      r1,|L32.464|
00009e  6a60              LDR      r0,[r4,#0x24]         ;1384
0000a0  63c1              STR      r1,[r0,#0x3c]         ;1384
0000a2  494c              LDR      r1,|L32.468|
0000a4  6a60              LDR      r0,[r4,#0x24]         ;1385
0000a6  6401              STR      r1,[r0,#0x40]         ;1385
0000a8  494b              LDR      r1,|L32.472|
0000aa  6a60              LDR      r0,[r4,#0x24]         ;1388
0000ac  64c1              STR      r1,[r0,#0x4c]         ;1388
0000ae  6821              LDR      r1,[r4,#0]            ;1391
0000b0  f1010234          ADD      r2,r1,#0x34           ;1391
0000b4  463b              MOV      r3,r7                 ;1391
0000b6  4631              MOV      r1,r6                 ;1391
0000b8  6a60              LDR      r0,[r4,#0x24]         ;1391
0000ba  f7fffffe          BL       HAL_DMA_Start_IT
0000be  b108              CBZ      r0,|L32.196|
0000c0  2001              MOVS     r0,#1                 ;1395
0000c2  e7b7              B        |L32.52|
                  |L32.196|
0000c4  6820              LDR      r0,[r4,#0]            ;1398
0000c6  68c0              LDR      r0,[r0,#0xc]          ;1398
0000c8  f4407000          ORR      r0,r0,#0x200          ;1398
0000cc  6821              LDR      r1,[r4,#0]            ;1398
0000ce  60c8              STR      r0,[r1,#0xc]          ;1398
0000d0  e038              B        |L32.324|
                  |L32.210|
0000d2  493f              LDR      r1,|L32.464|
0000d4  6aa0              LDR      r0,[r4,#0x28]         ;1405
0000d6  63c1              STR      r1,[r0,#0x3c]         ;1405
0000d8  493e              LDR      r1,|L32.468|
0000da  6aa0              LDR      r0,[r4,#0x28]         ;1406
0000dc  6401              STR      r1,[r0,#0x40]         ;1406
0000de  493e              LDR      r1,|L32.472|
0000e0  6aa0              LDR      r0,[r4,#0x28]         ;1409
0000e2  64c1              STR      r1,[r0,#0x4c]         ;1409
0000e4  6821              LDR      r1,[r4,#0]            ;1412
0000e6  f1010238          ADD      r2,r1,#0x38           ;1412
0000ea  463b              MOV      r3,r7                 ;1412
0000ec  4631              MOV      r1,r6                 ;1412
0000ee  6aa0              LDR      r0,[r4,#0x28]         ;1412
0000f0  f7fffffe          BL       HAL_DMA_Start_IT
0000f4  b108              CBZ      r0,|L32.250|
0000f6  2001              MOVS     r0,#1                 ;1416
0000f8  e79c              B        |L32.52|
                  |L32.250|
0000fa  6820              LDR      r0,[r4,#0]            ;1419
0000fc  68c0              LDR      r0,[r0,#0xc]          ;1419
0000fe  f4406080          ORR      r0,r0,#0x400          ;1419
000102  6821              LDR      r1,[r4,#0]            ;1419
000104  60c8              STR      r0,[r1,#0xc]          ;1419
000106  e01d              B        |L32.324|
                  |L32.264|
000108  4931              LDR      r1,|L32.464|
00010a  6ae0              LDR      r0,[r4,#0x2c]         ;1426
00010c  63c1              STR      r1,[r0,#0x3c]         ;1426
00010e  4931              LDR      r1,|L32.468|
000110  6ae0              LDR      r0,[r4,#0x2c]         ;1427
000112  6401              STR      r1,[r0,#0x40]         ;1427
000114  4930              LDR      r1,|L32.472|
000116  6ae0              LDR      r0,[r4,#0x2c]         ;1430
000118  64c1              STR      r1,[r0,#0x4c]         ;1430
00011a  6821              LDR      r1,[r4,#0]            ;1433
00011c  f101023c          ADD      r2,r1,#0x3c           ;1433
000120  463b              MOV      r3,r7                 ;1433
000122  4631              MOV      r1,r6                 ;1433
000124  6ae0              LDR      r0,[r4,#0x2c]         ;1433
000126  f7fffffe          BL       HAL_DMA_Start_IT
00012a  b108              CBZ      r0,|L32.304|
00012c  2001              MOVS     r0,#1                 ;1437
00012e  e781              B        |L32.52|
                  |L32.304|
000130  6820              LDR      r0,[r4,#0]            ;1440
000132  68c0              LDR      r0,[r0,#0xc]          ;1440
000134  f4406000          ORR      r0,r0,#0x800          ;1440
000138  6821              LDR      r1,[r4,#0]            ;1440
00013a  60c8              STR      r0,[r1,#0xc]          ;1440
00013c  e002              B        |L32.324|
                  |L32.318|
00013e  f04f0801          MOV      r8,#1                 ;1445
000142  bf00              NOP                            ;1446
                  |L32.324|
000144  bf00              NOP                            ;1399
000146  f1b80f00          CMP      r8,#0                 ;1449
00014a  d13e              BNE      |L32.458|
00014c  2204              MOVS     r2,#4                 ;1452
00014e  4629              MOV      r1,r5                 ;1452
000150  6820              LDR      r0,[r4,#0]            ;1452
000152  f7fffffe          BL       TIM_CCxNChannelCmd
000156  6820              LDR      r0,[r4,#0]            ;1455
000158  6c40              LDR      r0,[r0,#0x44]         ;1455
00015a  f4404000          ORR      r0,r0,#0x8000         ;1455
00015e  6821              LDR      r1,[r4,#0]            ;1455
000160  6448              STR      r0,[r1,#0x44]         ;1455
000162  491e              LDR      r1,|L32.476|
000164  6820              LDR      r0,[r4,#0]            ;1458
000166  4288              CMP      r0,r1                 ;1458
000168  d01b              BEQ      |L32.418|
00016a  6820              LDR      r0,[r4,#0]            ;1458
00016c  f1b04f80          CMP      r0,#0x40000000        ;1458
000170  d017              BEQ      |L32.418|
000172  491b              LDR      r1,|L32.480|
000174  6820              LDR      r0,[r4,#0]            ;1458
000176  4288              CMP      r0,r1                 ;1458
000178  d013              BEQ      |L32.418|
00017a  491a              LDR      r1,|L32.484|
00017c  6820              LDR      r0,[r4,#0]            ;1458
00017e  4288              CMP      r0,r1                 ;1458
000180  d00f              BEQ      |L32.418|
000182  4919              LDR      r1,|L32.488|
000184  6820              LDR      r0,[r4,#0]            ;1458
000186  4288              CMP      r0,r1                 ;1458
000188  d00b              BEQ      |L32.418|
00018a  4918              LDR      r1,|L32.492|
00018c  6820              LDR      r0,[r4,#0]            ;1458
00018e  4288              CMP      r0,r1                 ;1458
000190  d007              BEQ      |L32.418|
000192  4917              LDR      r1,|L32.496|
000194  6820              LDR      r0,[r4,#0]            ;1458
000196  4288              CMP      r0,r1                 ;1458
000198  d003              BEQ      |L32.418|
00019a  4916              LDR      r1,|L32.500|
00019c  6820              LDR      r0,[r4,#0]            ;1458
00019e  4288              CMP      r0,r1                 ;1458
0001a0  d10d              BNE      |L32.446|
                  |L32.418|
0001a2  6820              LDR      r0,[r4,#0]            ;1460
0001a4  6880              LDR      r0,[r0,#8]            ;1460
0001a6  f0000907          AND      r9,r0,#7              ;1460
0001aa  f1b90f06          CMP      r9,#6                 ;1461
0001ae  d00c              BEQ      |L32.458|
0001b0  6820              LDR      r0,[r4,#0]            ;1463
0001b2  6800              LDR      r0,[r0,#0]            ;1463
0001b4  f0400001          ORR      r0,r0,#1              ;1463
0001b8  6821              LDR      r1,[r4,#0]            ;1463
0001ba  6008              STR      r0,[r1,#0]            ;1463
0001bc  e005              B        |L32.458|
                  |L32.446|
0001be  6820              LDR      r0,[r4,#0]            ;1468
0001c0  6800              LDR      r0,[r0,#0]            ;1468
0001c2  f0400001          ORR      r0,r0,#1              ;1468
0001c6  6821              LDR      r1,[r4,#0]            ;1468
0001c8  6008              STR      r0,[r1,#0]            ;1468
                  |L32.458|
0001ca  4640              MOV      r0,r8                 ;1473
0001cc  e732              B        |L32.52|
;;;1475   
                          ENDP

0001ce  0000              DCW      0x0000
                  |L32.464|
                          DCD      TIM_DMADelayPulseNCplt
                  |L32.468|
                          DCD      TIM_DMADelayPulseHalfCplt
                  |L32.472|
                          DCD      TIM_DMAErrorCCxN
                  |L32.476|
                          DCD      0x40010000
                  |L32.480|
                          DCD      0x40000400
                  |L32.484|
                          DCD      0x40000800
                  |L32.488|
                          DCD      0x40000c00
                  |L32.492|
                          DCD      0x40010400
                  |L32.496|
                          DCD      0x40014000
                  |L32.500|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_PWMN_Start_IT||, CODE, READONLY, ALIGN=2

                  HAL_TIMEx_PWMN_Start_IT PROC
;;;1188     */
;;;1189   HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1190   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;1191     HAL_StatusTypeDef status = HAL_OK;
000008  2600              MOVS     r6,#0
;;;1192     uint32_t tmpsmcr;
;;;1193   
;;;1194     /* Check the parameters */
;;;1195     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1196   
;;;1197     /* Check the TIM complementary channel state */
;;;1198     if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
00000a  b915              CBNZ     r5,|L33.18|
00000c  f8940042          LDRB     r0,[r4,#0x42]
000010  e00b              B        |L33.42|
                  |L33.18|
000012  2d04              CMP      r5,#4
000014  d102              BNE      |L33.28|
000016  2043              MOVS     r0,#0x43
000018  5d00              LDRB     r0,[r0,r4]
00001a  e006              B        |L33.42|
                  |L33.28|
00001c  2d08              CMP      r5,#8
00001e  d102              BNE      |L33.38|
000020  2044              MOVS     r0,#0x44
000022  5d00              LDRB     r0,[r0,r4]
000024  e001              B        |L33.42|
                  |L33.38|
000026  2045              MOVS     r0,#0x45
000028  5d00              LDRB     r0,[r0,r4]
                  |L33.42|
00002a  2801              CMP      r0,#1
00002c  d002              BEQ      |L33.52|
;;;1199     {
;;;1200       return HAL_ERROR;
00002e  2001              MOVS     r0,#1
                  |L33.48|
;;;1201     }
;;;1202   
;;;1203     /* Set the TIM complementary channel state */
;;;1204     TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
;;;1205   
;;;1206     switch (Channel)
;;;1207     {
;;;1208       case TIM_CHANNEL_1:
;;;1209       {
;;;1210         /* Enable the TIM Capture/Compare 1 interrupt */
;;;1211         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
;;;1212         break;
;;;1213       }
;;;1214   
;;;1215       case TIM_CHANNEL_2:
;;;1216       {
;;;1217         /* Enable the TIM Capture/Compare 2 interrupt */
;;;1218         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
;;;1219         break;
;;;1220       }
;;;1221   
;;;1222       case TIM_CHANNEL_3:
;;;1223       {
;;;1224         /* Enable the TIM Capture/Compare 3 interrupt */
;;;1225         __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
;;;1226         break;
;;;1227       }
;;;1228   
;;;1229       default:
;;;1230         status = HAL_ERROR;
;;;1231         break;
;;;1232     }
;;;1233   
;;;1234     if (status == HAL_OK)
;;;1235     {
;;;1236       /* Enable the TIM Break interrupt */
;;;1237       __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
;;;1238   
;;;1239       /* Enable the complementary PWM output  */
;;;1240       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
;;;1241   
;;;1242       /* Enable the Main Output */
;;;1243       __HAL_TIM_MOE_ENABLE(htim);
;;;1244   
;;;1245       /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
;;;1246       if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
;;;1247       {
;;;1248         tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
;;;1249         if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
;;;1250         {
;;;1251           __HAL_TIM_ENABLE(htim);
;;;1252         }
;;;1253       }
;;;1254       else
;;;1255       {
;;;1256         __HAL_TIM_ENABLE(htim);
;;;1257       }
;;;1258     }
;;;1259   
;;;1260     /* Return function status */
;;;1261     return status;
;;;1262   }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L33.52|
000034  b91d              CBNZ     r5,|L33.62|
000036  2002              MOVS     r0,#2                 ;1204
000038  f8840042          STRB     r0,[r4,#0x42]         ;1204
00003c  e00e              B        |L33.92|
                  |L33.62|
00003e  2d04              CMP      r5,#4                 ;1204
000040  d103              BNE      |L33.74|
000042  2102              MOVS     r1,#2                 ;1204
000044  2043              MOVS     r0,#0x43              ;1204
000046  5501              STRB     r1,[r0,r4]            ;1204
000048  e008              B        |L33.92|
                  |L33.74|
00004a  2d08              CMP      r5,#8                 ;1204
00004c  d103              BNE      |L33.86|
00004e  2102              MOVS     r1,#2                 ;1204
000050  2044              MOVS     r0,#0x44              ;1204
000052  5501              STRB     r1,[r0,r4]            ;1204
000054  e002              B        |L33.92|
                  |L33.86|
000056  2102              MOVS     r1,#2                 ;1204
000058  2045              MOVS     r0,#0x45              ;1204
00005a  5501              STRB     r1,[r0,r4]            ;1204
                  |L33.92|
00005c  b125              CBZ      r5,|L33.104|
00005e  2d04              CMP      r5,#4                 ;1206
000060  d009              BEQ      |L33.118|
000062  2d08              CMP      r5,#8                 ;1206
000064  d115              BNE      |L33.146|
000066  e00d              B        |L33.132|
                  |L33.104|
000068  6820              LDR      r0,[r4,#0]            ;1211
00006a  68c0              LDR      r0,[r0,#0xc]          ;1211
00006c  f0400002          ORR      r0,r0,#2              ;1211
000070  6821              LDR      r1,[r4,#0]            ;1211
000072  60c8              STR      r0,[r1,#0xc]          ;1211
000074  e00f              B        |L33.150|
                  |L33.118|
000076  6820              LDR      r0,[r4,#0]            ;1218
000078  68c0              LDR      r0,[r0,#0xc]          ;1218
00007a  f0400004          ORR      r0,r0,#4              ;1218
00007e  6821              LDR      r1,[r4,#0]            ;1218
000080  60c8              STR      r0,[r1,#0xc]          ;1218
000082  e008              B        |L33.150|
                  |L33.132|
000084  6820              LDR      r0,[r4,#0]            ;1225
000086  68c0              LDR      r0,[r0,#0xc]          ;1225
000088  f0400008          ORR      r0,r0,#8              ;1225
00008c  6821              LDR      r1,[r4,#0]            ;1225
00008e  60c8              STR      r0,[r1,#0xc]          ;1225
000090  e001              B        |L33.150|
                  |L33.146|
000092  2601              MOVS     r6,#1                 ;1230
000094  bf00              NOP                            ;1231
                  |L33.150|
000096  bf00              NOP                            ;1212
000098  bbe6              CBNZ     r6,|L33.276|
00009a  6820              LDR      r0,[r4,#0]            ;1237
00009c  68c0              LDR      r0,[r0,#0xc]          ;1237
00009e  f0400080          ORR      r0,r0,#0x80           ;1237
0000a2  6821              LDR      r1,[r4,#0]            ;1237
0000a4  60c8              STR      r0,[r1,#0xc]          ;1237
0000a6  2204              MOVS     r2,#4                 ;1240
0000a8  4629              MOV      r1,r5                 ;1240
0000aa  6820              LDR      r0,[r4,#0]            ;1240
0000ac  f7fffffe          BL       TIM_CCxNChannelCmd
0000b0  6820              LDR      r0,[r4,#0]            ;1243
0000b2  6c40              LDR      r0,[r0,#0x44]         ;1243
0000b4  f4404000          ORR      r0,r0,#0x8000         ;1243
0000b8  6821              LDR      r1,[r4,#0]            ;1243
0000ba  6448              STR      r0,[r1,#0x44]         ;1243
0000bc  491a              LDR      r1,|L33.296|
0000be  6820              LDR      r0,[r4,#0]            ;1246
0000c0  4288              CMP      r0,r1                 ;1246
0000c2  d01b              BEQ      |L33.252|
0000c4  6820              LDR      r0,[r4,#0]            ;1246
0000c6  f1b04f80          CMP      r0,#0x40000000        ;1246
0000ca  d017              BEQ      |L33.252|
0000cc  4917              LDR      r1,|L33.300|
0000ce  6820              LDR      r0,[r4,#0]            ;1246
0000d0  4288              CMP      r0,r1                 ;1246
0000d2  d013              BEQ      |L33.252|
0000d4  4916              LDR      r1,|L33.304|
0000d6  6820              LDR      r0,[r4,#0]            ;1246
0000d8  4288              CMP      r0,r1                 ;1246
0000da  d00f              BEQ      |L33.252|
0000dc  4915              LDR      r1,|L33.308|
0000de  6820              LDR      r0,[r4,#0]            ;1246
0000e0  4288              CMP      r0,r1                 ;1246
0000e2  d00b              BEQ      |L33.252|
0000e4  4914              LDR      r1,|L33.312|
0000e6  6820              LDR      r0,[r4,#0]            ;1246
0000e8  4288              CMP      r0,r1                 ;1246
0000ea  d007              BEQ      |L33.252|
0000ec  4913              LDR      r1,|L33.316|
0000ee  6820              LDR      r0,[r4,#0]            ;1246
0000f0  4288              CMP      r0,r1                 ;1246
0000f2  d003              BEQ      |L33.252|
0000f4  4912              LDR      r1,|L33.320|
0000f6  6820              LDR      r0,[r4,#0]            ;1246
0000f8  4288              CMP      r0,r1                 ;1246
0000fa  d10c              BNE      |L33.278|
                  |L33.252|
0000fc  6820              LDR      r0,[r4,#0]            ;1248
0000fe  6880              LDR      r0,[r0,#8]            ;1248
000100  f0000707          AND      r7,r0,#7              ;1248
000104  2f06              CMP      r7,#6                 ;1249
000106  d00c              BEQ      |L33.290|
000108  6820              LDR      r0,[r4,#0]            ;1251
00010a  6800              LDR      r0,[r0,#0]            ;1251
00010c  f0400001          ORR      r0,r0,#1              ;1251
000110  6821              LDR      r1,[r4,#0]            ;1251
000112  6008              STR      r0,[r1,#0]            ;1251
                  |L33.276|
000114  e005              B        |L33.290|
                  |L33.278|
000116  6820              LDR      r0,[r4,#0]            ;1256
000118  6800              LDR      r0,[r0,#0]            ;1256
00011a  f0400001          ORR      r0,r0,#1              ;1256
00011e  6821              LDR      r1,[r4,#0]            ;1256
000120  6008              STR      r0,[r1,#0]            ;1256
                  |L33.290|
000122  4630              MOV      r0,r6                 ;1261
000124  e784              B        |L33.48|
;;;1263   
                          ENDP

000126  0000              DCW      0x0000
                  |L33.296|
                          DCD      0x40010000
                  |L33.300|
                          DCD      0x40000400
                  |L33.304|
                          DCD      0x40000800
                  |L33.308|
                          DCD      0x40000c00
                  |L33.312|
                          DCD      0x40010400
                  |L33.316|
                          DCD      0x40014000
                  |L33.320|
                          DCD      0x40001800

                          AREA ||i.HAL_TIMEx_PWMN_Stop||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop PROC
;;;1156     */
;;;1157   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1158   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1159     /* Check the parameters */
;;;1160     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1161   
;;;1162     /* Disable the complementary PWM output  */
;;;1163     TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
000006  2200              MOVS     r2,#0
000008  4629              MOV      r1,r5
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1164   
;;;1165     /* Disable the Main Output */
;;;1166     __HAL_TIM_MOE_DISABLE(htim);
000010  bf00              NOP      
000012  6820              LDR      r0,[r4,#0]
000014  6a00              LDR      r0,[r0,#0x20]
000016  f2411111          MOV      r1,#0x1111
00001a  4008              ANDS     r0,r0,r1
00001c  b950              CBNZ     r0,|L34.52|
00001e  6820              LDR      r0,[r4,#0]
000020  6a00              LDR      r0,[r0,#0x20]
000022  1089              ASRS     r1,r1,#2
000024  4008              ANDS     r0,r0,r1
000026  b928              CBNZ     r0,|L34.52|
000028  6820              LDR      r0,[r4,#0]
00002a  6c40              LDR      r0,[r0,#0x44]
00002c  f4204000          BIC      r0,r0,#0x8000
000030  6821              LDR      r1,[r4,#0]
000032  6448              STR      r0,[r1,#0x44]
                  |L34.52|
000034  bf00              NOP      
;;;1167   
;;;1168     /* Disable the Peripheral */
;;;1169     __HAL_TIM_DISABLE(htim);
000036  bf00              NOP      
000038  6820              LDR      r0,[r4,#0]
00003a  6a00              LDR      r0,[r0,#0x20]
00003c  f2411111          MOV      r1,#0x1111
000040  4008              ANDS     r0,r0,r1
000042  b950              CBNZ     r0,|L34.90|
000044  6820              LDR      r0,[r4,#0]
000046  6a00              LDR      r0,[r0,#0x20]
000048  1089              ASRS     r1,r1,#2
00004a  4008              ANDS     r0,r0,r1
00004c  b928              CBNZ     r0,|L34.90|
00004e  6820              LDR      r0,[r4,#0]
000050  6800              LDR      r0,[r0,#0]
000052  f0200001          BIC      r0,r0,#1
000056  6821              LDR      r1,[r4,#0]
000058  6008              STR      r0,[r1,#0]
                  |L34.90|
00005a  bf00              NOP      
;;;1170   
;;;1171     /* Set the TIM complementary channel state */
;;;1172     TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
00005c  b91d              CBNZ     r5,|L34.102|
00005e  2001              MOVS     r0,#1
000060  f8840042          STRB     r0,[r4,#0x42]
000064  e00e              B        |L34.132|
                  |L34.102|
000066  2d04              CMP      r5,#4
000068  d103              BNE      |L34.114|
00006a  2101              MOVS     r1,#1
00006c  2043              MOVS     r0,#0x43
00006e  5501              STRB     r1,[r0,r4]
000070  e008              B        |L34.132|
                  |L34.114|
000072  2d08              CMP      r5,#8
000074  d103              BNE      |L34.126|
000076  2101              MOVS     r1,#1
000078  2044              MOVS     r0,#0x44
00007a  5501              STRB     r1,[r0,r4]
00007c  e002              B        |L34.132|
                  |L34.126|
00007e  2101              MOVS     r1,#1
000080  2045              MOVS     r0,#0x45
000082  5501              STRB     r1,[r0,r4]
                  |L34.132|
;;;1173   
;;;1174     /* Return function status */
;;;1175     return HAL_OK;
000084  2000              MOVS     r0,#0
;;;1176   }
000086  bd70              POP      {r4-r6,pc}
;;;1177   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_DMA||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_DMA PROC
;;;1486     */
;;;1487   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;1488   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1489     HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;1490   
;;;1491     /* Check the parameters */
;;;1492     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1493   
;;;1494     switch (Channel)
000008  b125              CBZ      r5,|L35.20|
00000a  2d04              CMP      r5,#4
00000c  d00c              BEQ      |L35.40|
00000e  2d08              CMP      r5,#8
000010  d11e              BNE      |L35.80|
000012  e013              B        |L35.60|
                  |L35.20|
;;;1495     {
;;;1496       case TIM_CHANNEL_1:
;;;1497       {
;;;1498         /* Disable the TIM Capture/Compare 1 DMA request */
;;;1499         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
000014  6820              LDR      r0,[r4,#0]
000016  68c0              LDR      r0,[r0,#0xc]
000018  f4207000          BIC      r0,r0,#0x200
00001c  6821              LDR      r1,[r4,#0]
00001e  60c8              STR      r0,[r1,#0xc]
;;;1500         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
000020  6a60              LDR      r0,[r4,#0x24]
000022  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1501         break;
000026  e015              B        |L35.84|
                  |L35.40|
;;;1502       }
;;;1503   
;;;1504       case TIM_CHANNEL_2:
;;;1505       {
;;;1506         /* Disable the TIM Capture/Compare 2 DMA request */
;;;1507         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
000028  6820              LDR      r0,[r4,#0]
00002a  68c0              LDR      r0,[r0,#0xc]
00002c  f4206080          BIC      r0,r0,#0x400
000030  6821              LDR      r1,[r4,#0]
000032  60c8              STR      r0,[r1,#0xc]
;;;1508         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
000034  6aa0              LDR      r0,[r4,#0x28]
000036  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1509         break;
00003a  e00b              B        |L35.84|
                  |L35.60|
;;;1510       }
;;;1511   
;;;1512       case TIM_CHANNEL_3:
;;;1513       {
;;;1514         /* Disable the TIM Capture/Compare 3 DMA request */
;;;1515         __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
00003c  6820              LDR      r0,[r4,#0]
00003e  68c0              LDR      r0,[r0,#0xc]
000040  f4206000          BIC      r0,r0,#0x800
000044  6821              LDR      r1,[r4,#0]
000046  60c8              STR      r0,[r1,#0xc]
;;;1516         (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
000048  6ae0              LDR      r0,[r4,#0x2c]
00004a  f7fffffe          BL       HAL_DMA_Abort_IT
;;;1517         break;
00004e  e001              B        |L35.84|
                  |L35.80|
;;;1518       }
;;;1519   
;;;1520       default:
;;;1521         status = HAL_ERROR;
000050  2601              MOVS     r6,#1
;;;1522         break;
000052  bf00              NOP      
                  |L35.84|
000054  bf00              NOP                            ;1501
;;;1523     }
;;;1524   
;;;1525     if (status == HAL_OK)
000056  2e00              CMP      r6,#0
000058  d13e              BNE      |L35.216|
;;;1526     {
;;;1527       /* Disable the complementary PWM output */
;;;1528       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00005a  2200              MOVS     r2,#0
00005c  4629              MOV      r1,r5
00005e  6820              LDR      r0,[r4,#0]
000060  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1529   
;;;1530       /* Disable the Main Output */
;;;1531       __HAL_TIM_MOE_DISABLE(htim);
000064  bf00              NOP      
000066  6820              LDR      r0,[r4,#0]
000068  6a00              LDR      r0,[r0,#0x20]
00006a  f2411111          MOV      r1,#0x1111
00006e  4008              ANDS     r0,r0,r1
000070  b950              CBNZ     r0,|L35.136|
000072  6820              LDR      r0,[r4,#0]
000074  6a00              LDR      r0,[r0,#0x20]
000076  1089              ASRS     r1,r1,#2
000078  4008              ANDS     r0,r0,r1
00007a  b928              CBNZ     r0,|L35.136|
00007c  6820              LDR      r0,[r4,#0]
00007e  6c40              LDR      r0,[r0,#0x44]
000080  f4204000          BIC      r0,r0,#0x8000
000084  6821              LDR      r1,[r4,#0]
000086  6448              STR      r0,[r1,#0x44]
                  |L35.136|
000088  bf00              NOP      
;;;1532   
;;;1533       /* Disable the Peripheral */
;;;1534       __HAL_TIM_DISABLE(htim);
00008a  bf00              NOP      
00008c  6820              LDR      r0,[r4,#0]
00008e  6a00              LDR      r0,[r0,#0x20]
000090  f2411111          MOV      r1,#0x1111
000094  4008              ANDS     r0,r0,r1
000096  b950              CBNZ     r0,|L35.174|
000098  6820              LDR      r0,[r4,#0]
00009a  6a00              LDR      r0,[r0,#0x20]
00009c  1089              ASRS     r1,r1,#2
00009e  4008              ANDS     r0,r0,r1
0000a0  b928              CBNZ     r0,|L35.174|
0000a2  6820              LDR      r0,[r4,#0]
0000a4  6800              LDR      r0,[r0,#0]
0000a6  f0200001          BIC      r0,r0,#1
0000aa  6821              LDR      r1,[r4,#0]
0000ac  6008              STR      r0,[r1,#0]
                  |L35.174|
0000ae  bf00              NOP      
;;;1535   
;;;1536       /* Set the TIM complementary channel state */
;;;1537       TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000b0  b91d              CBNZ     r5,|L35.186|
0000b2  2001              MOVS     r0,#1
0000b4  f8840042          STRB     r0,[r4,#0x42]
0000b8  e00e              B        |L35.216|
                  |L35.186|
0000ba  2d04              CMP      r5,#4
0000bc  d103              BNE      |L35.198|
0000be  2101              MOVS     r1,#1
0000c0  2043              MOVS     r0,#0x43
0000c2  5501              STRB     r1,[r0,r4]
0000c4  e008              B        |L35.216|
                  |L35.198|
0000c6  2d08              CMP      r5,#8
0000c8  d103              BNE      |L35.210|
0000ca  2101              MOVS     r1,#1
0000cc  2044              MOVS     r0,#0x44
0000ce  5501              STRB     r1,[r0,r4]
0000d0  e002              B        |L35.216|
                  |L35.210|
0000d2  2101              MOVS     r1,#1
0000d4  2045              MOVS     r0,#0x45
0000d6  5501              STRB     r1,[r0,r4]
                  |L35.216|
;;;1538     }
;;;1539   
;;;1540     /* Return function status */
;;;1541     return status;
0000d8  4630              MOV      r0,r6
;;;1542   }
0000da  bd70              POP      {r4-r6,pc}
;;;1543   
                          ENDP


                          AREA ||i.HAL_TIMEx_PWMN_Stop_IT||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_PWMN_Stop_IT PROC
;;;1274     */
;;;1275   HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1276   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;1277     HAL_StatusTypeDef status = HAL_OK;
000008  2600              MOVS     r6,#0
;;;1278     uint32_t tmpccer;
;;;1279   
;;;1280     /* Check the parameters */
;;;1281     assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));
;;;1282   
;;;1283     switch (Channel)
00000a  b125              CBZ      r5,|L36.22|
00000c  2d04              CMP      r5,#4
00000e  d009              BEQ      |L36.36|
000010  2d08              CMP      r5,#8
000012  d115              BNE      |L36.64|
000014  e00d              B        |L36.50|
                  |L36.22|
;;;1284     {
;;;1285       case TIM_CHANNEL_1:
;;;1286       {
;;;1287         /* Disable the TIM Capture/Compare 1 interrupt */
;;;1288         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
000016  6820              LDR      r0,[r4,#0]
000018  68c0              LDR      r0,[r0,#0xc]
00001a  f0200002          BIC      r0,r0,#2
00001e  6821              LDR      r1,[r4,#0]
000020  60c8              STR      r0,[r1,#0xc]
;;;1289         break;
000022  e00f              B        |L36.68|
                  |L36.36|
;;;1290       }
;;;1291   
;;;1292       case TIM_CHANNEL_2:
;;;1293       {
;;;1294         /* Disable the TIM Capture/Compare 2 interrupt */
;;;1295         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
000024  6820              LDR      r0,[r4,#0]
000026  68c0              LDR      r0,[r0,#0xc]
000028  f0200004          BIC      r0,r0,#4
00002c  6821              LDR      r1,[r4,#0]
00002e  60c8              STR      r0,[r1,#0xc]
;;;1296         break;
000030  e008              B        |L36.68|
                  |L36.50|
;;;1297       }
;;;1298   
;;;1299       case TIM_CHANNEL_3:
;;;1300       {
;;;1301         /* Disable the TIM Capture/Compare 3 interrupt */
;;;1302         __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
000032  6820              LDR      r0,[r4,#0]
000034  68c0              LDR      r0,[r0,#0xc]
000036  f0200008          BIC      r0,r0,#8
00003a  6821              LDR      r1,[r4,#0]
00003c  60c8              STR      r0,[r1,#0xc]
;;;1303         break;
00003e  e001              B        |L36.68|
                  |L36.64|
;;;1304       }
;;;1305   
;;;1306       default:
;;;1307         status = HAL_ERROR;
000040  2601              MOVS     r6,#1
;;;1308         break;
000042  bf00              NOP      
                  |L36.68|
000044  bf00              NOP                            ;1289
;;;1309     }
;;;1310   
;;;1311     if (status == HAL_OK)
000046  2e00              CMP      r6,#0
000048  d14a              BNE      |L36.224|
;;;1312     {
;;;1313       /* Disable the complementary PWM output  */
;;;1314       TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
00004a  2200              MOVS     r2,#0
00004c  4629              MOV      r1,r5
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       TIM_CCxNChannelCmd
;;;1315   
;;;1316       /* Disable the TIM Break interrupt (only if no more channel is active) */
;;;1317       tmpccer = htim->Instance->CCER;
000054  6820              LDR      r0,[r4,#0]
000056  6a07              LDR      r7,[r0,#0x20]
;;;1318       if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
000058  f2404044          MOV      r0,#0x444
00005c  4038              ANDS     r0,r0,r7
00005e  b928              CBNZ     r0,|L36.108|
;;;1319       {
;;;1320         __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
000060  6820              LDR      r0,[r4,#0]
000062  68c0              LDR      r0,[r0,#0xc]
000064  f0200080          BIC      r0,r0,#0x80
000068  6821              LDR      r1,[r4,#0]
00006a  60c8              STR      r0,[r1,#0xc]
                  |L36.108|
;;;1321       }
;;;1322   
;;;1323       /* Disable the Main Output */
;;;1324       __HAL_TIM_MOE_DISABLE(htim);
00006c  bf00              NOP      
00006e  6820              LDR      r0,[r4,#0]
000070  6a00              LDR      r0,[r0,#0x20]
000072  f2411111          MOV      r1,#0x1111
000076  4008              ANDS     r0,r0,r1
000078  b950              CBNZ     r0,|L36.144|
00007a  6820              LDR      r0,[r4,#0]
00007c  6a00              LDR      r0,[r0,#0x20]
00007e  1089              ASRS     r1,r1,#2
000080  4008              ANDS     r0,r0,r1
000082  b928              CBNZ     r0,|L36.144|
000084  6820              LDR      r0,[r4,#0]
000086  6c40              LDR      r0,[r0,#0x44]
000088  f4204000          BIC      r0,r0,#0x8000
00008c  6821              LDR      r1,[r4,#0]
00008e  6448              STR      r0,[r1,#0x44]
                  |L36.144|
000090  bf00              NOP      
;;;1325   
;;;1326       /* Disable the Peripheral */
;;;1327       __HAL_TIM_DISABLE(htim);
000092  bf00              NOP      
000094  6820              LDR      r0,[r4,#0]
000096  6a00              LDR      r0,[r0,#0x20]
000098  f2411111          MOV      r1,#0x1111
00009c  4008              ANDS     r0,r0,r1
00009e  b950              CBNZ     r0,|L36.182|
0000a0  6820              LDR      r0,[r4,#0]
0000a2  6a00              LDR      r0,[r0,#0x20]
0000a4  1089              ASRS     r1,r1,#2
0000a6  4008              ANDS     r0,r0,r1
0000a8  b928              CBNZ     r0,|L36.182|
0000aa  6820              LDR      r0,[r4,#0]
0000ac  6800              LDR      r0,[r0,#0]
0000ae  f0200001          BIC      r0,r0,#1
0000b2  6821              LDR      r1,[r4,#0]
0000b4  6008              STR      r0,[r1,#0]
                  |L36.182|
0000b6  bf00              NOP      
;;;1328   
;;;1329       /* Set the TIM complementary channel state */
;;;1330       TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
0000b8  b91d              CBNZ     r5,|L36.194|
0000ba  2001              MOVS     r0,#1
0000bc  f8840042          STRB     r0,[r4,#0x42]
0000c0  e00e              B        |L36.224|
                  |L36.194|
0000c2  2d04              CMP      r5,#4
0000c4  d103              BNE      |L36.206|
0000c6  2101              MOVS     r1,#1
0000c8  2043              MOVS     r0,#0x43
0000ca  5501              STRB     r1,[r0,r4]
0000cc  e008              B        |L36.224|
                  |L36.206|
0000ce  2d08              CMP      r5,#8
0000d0  d103              BNE      |L36.218|
0000d2  2101              MOVS     r1,#1
0000d4  2044              MOVS     r0,#0x44
0000d6  5501              STRB     r1,[r0,r4]
0000d8  e002              B        |L36.224|
                  |L36.218|
0000da  2101              MOVS     r1,#1
0000dc  2045              MOVS     r0,#0x45
0000de  5501              STRB     r1,[r0,r4]
                  |L36.224|
;;;1331     }
;;;1332   
;;;1333     /* Return function status */
;;;1334     return status;
0000e0  4630              MOV      r0,r6
;;;1335   }
0000e2  e8bd81f0          POP      {r4-r8,pc}
;;;1336   
                          ENDP


                          AREA ||i.HAL_TIMEx_RemapConfig||, CODE, READONLY, ALIGN=1

                  HAL_TIMEx_RemapConfig PROC
;;;2098     */
;;;2099   HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
000000  4602              MOV      r2,r0
;;;2100   {
;;;2101   
;;;2102     /* Check parameters */
;;;2103     assert_param(IS_TIM_REMAP(htim->Instance, Remap));
;;;2104   
;;;2105     __HAL_LOCK(htim);
000002  bf00              NOP      
000004  f892003c          LDRB     r0,[r2,#0x3c]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L37.16|
00000c  2002              MOVS     r0,#2
                  |L37.14|
;;;2106   
;;;2107   #if defined(LPTIM_OR_TIM1_ITR2_RMP) && defined(LPTIM_OR_TIM5_ITR1_RMP) && defined(LPTIM_OR_TIM9_ITR1_RMP)
;;;2108     if ((Remap & LPTIM_REMAP_MASK) == LPTIM_REMAP_MASK)
;;;2109     {
;;;2110       /* Connect TIMx internal trigger to LPTIM1 output */
;;;2111       __HAL_RCC_LPTIM1_CLK_ENABLE();
;;;2112       MODIFY_REG(LPTIM1->OR,
;;;2113                  (LPTIM_OR_TIM1_ITR2_RMP | LPTIM_OR_TIM5_ITR1_RMP | LPTIM_OR_TIM9_ITR1_RMP),
;;;2114                  Remap & ~(LPTIM_REMAP_MASK));
;;;2115     }
;;;2116     else
;;;2117     {
;;;2118       /* Set the Timer remapping configuration */
;;;2119       WRITE_REG(htim->Instance->OR, Remap);
;;;2120     }
;;;2121   #else
;;;2122     /* Set the Timer remapping configuration */
;;;2123     WRITE_REG(htim->Instance->OR, Remap);
;;;2124   #endif /* LPTIM_OR_TIM1_ITR2_RMP &&  LPTIM_OR_TIM5_ITR1_RMP && LPTIM_OR_TIM9_ITR1_RMP */
;;;2125   
;;;2126     __HAL_UNLOCK(htim);
;;;2127   
;;;2128     return HAL_OK;
;;;2129   }
00000e  4770              BX       lr
                  |L37.16|
000010  2001              MOVS     r0,#1                 ;2105
000012  f882003c          STRB     r0,[r2,#0x3c]         ;2105
000016  bf00              NOP                            ;2105
000018  6810              LDR      r0,[r2,#0]            ;2123
00001a  6501              STR      r1,[r0,#0x50]         ;2123
00001c  bf00              NOP                            ;2126
00001e  2000              MOVS     r0,#0                 ;2126
000020  f882003c          STRB     r0,[r2,#0x3c]         ;2126
000024  bf00              NOP                            ;2126
000026  bf00              NOP                            ;2128
000028  e7f1              B        |L37.14|
;;;2130   
                          ENDP


                          AREA ||i.TIMEx_DMACommutationCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationCplt PROC
;;;2261     */
;;;2262   void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2263   {
000002  4604              MOV      r4,r0
;;;2264     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;2265   
;;;2266     /* Change the htim state */
;;;2267     htim->State = HAL_TIM_STATE_READY;
000006  2001              MOVS     r0,#1
000008  f885003d          STRB     r0,[r5,#0x3d]
;;;2268   
;;;2269   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2270     htim->CommutationCallback(htim);
;;;2271   #else
;;;2272     HAL_TIMEx_CommutCallback(htim);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       HAL_TIMEx_CommutCallback
;;;2273   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2274   }
000012  bd70              POP      {r4-r6,pc}
;;;2275   
                          ENDP


                          AREA ||i.TIMEx_DMACommutationHalfCplt||, CODE, READONLY, ALIGN=1

                  TIMEx_DMACommutationHalfCplt PROC
;;;2280     */
;;;2281   void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2282   {
000002  4604              MOV      r4,r0
;;;2283     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;2284   
;;;2285     /* Change the htim state */
;;;2286     htim->State = HAL_TIM_STATE_READY;
000006  2001              MOVS     r0,#1
000008  f885003d          STRB     r0,[r5,#0x3d]
;;;2287   
;;;2288   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2289     htim->CommutationHalfCpltCallback(htim);
;;;2290   #else
;;;2291     HAL_TIMEx_CommutHalfCpltCallback(htim);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       HAL_TIMEx_CommutHalfCpltCallback
;;;2292   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2293   }
000012  bd70              POP      {r4-r6,pc}
;;;2294   
                          ENDP


                          AREA ||i.TIM_CCxNChannelCmd||, CODE, READONLY, ALIGN=1

                  TIM_CCxNChannelCmd PROC
;;;2404     */
;;;2405   static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
000000  b530              PUSH     {r4,r5,lr}
;;;2406   {
;;;2407     uint32_t tmp;
;;;2408   
;;;2409     tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
000002  f001051f          AND      r5,r1,#0x1f
000006  2404              MOVS     r4,#4
000008  fa04f305          LSL      r3,r4,r5
;;;2410   
;;;2411     /* Reset the CCxNE Bit */
;;;2412     TIMx->CCER &=  ~tmp;
00000c  6a04              LDR      r4,[r0,#0x20]
00000e  439c              BICS     r4,r4,r3
000010  6204              STR      r4,[r0,#0x20]
;;;2413   
;;;2414     /* Set or reset the CCxNE Bit */
;;;2415     TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
000012  6a04              LDR      r4,[r0,#0x20]
000014  f001051f          AND      r5,r1,#0x1f
000018  fa02f505          LSL      r5,r2,r5
00001c  432c              ORRS     r4,r4,r5
00001e  6204              STR      r4,[r0,#0x20]
;;;2416   }
000020  bd30              POP      {r4,r5,pc}
;;;2417   /**
                          ENDP


                          AREA ||i.TIM_DMADelayPulseNCplt||, CODE, READONLY, ALIGN=1

                  TIM_DMADelayPulseNCplt PROC
;;;2300     */
;;;2301   static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2302   {
000002  4605              MOV      r5,r0
;;;2303     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;2304   
;;;2305     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000006  6a60              LDR      r0,[r4,#0x24]
000008  42a8              CMP      r0,r5
00000a  d107              BNE      |L41.28|
;;;2306     {
;;;2307       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  2001              MOVS     r0,#1
00000e  7720              STRB     r0,[r4,#0x1c]
;;;2308   
;;;2309       if (hdma->Init.Mode == DMA_NORMAL)
000010  69e8              LDR      r0,[r5,#0x1c]
000012  bb18              CBNZ     r0,|L41.92|
;;;2310       {
;;;2311         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000014  2001              MOVS     r0,#1
000016  f8840042          STRB     r0,[r4,#0x42]
00001a  e01f              B        |L41.92|
                  |L41.28|
;;;2312       }
;;;2313     }
;;;2314     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
00001c  6aa0              LDR      r0,[r4,#0x28]
00001e  42a8              CMP      r0,r5
000020  d107              BNE      |L41.50|
;;;2315     {
;;;2316       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
000022  2002              MOVS     r0,#2
000024  7720              STRB     r0,[r4,#0x1c]
;;;2317   
;;;2318       if (hdma->Init.Mode == DMA_NORMAL)
000026  69e8              LDR      r0,[r5,#0x1c]
000028  b9c0              CBNZ     r0,|L41.92|
;;;2319       {
;;;2320         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
00002a  2101              MOVS     r1,#1
00002c  2043              MOVS     r0,#0x43
00002e  5501              STRB     r1,[r0,r4]
000030  e014              B        |L41.92|
                  |L41.50|
;;;2321       }
;;;2322     }
;;;2323     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
000032  6ae0              LDR      r0,[r4,#0x2c]
000034  42a8              CMP      r0,r5
000036  d107              BNE      |L41.72|
;;;2324     {
;;;2325       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
000038  2004              MOVS     r0,#4
00003a  7720              STRB     r0,[r4,#0x1c]
;;;2326   
;;;2327       if (hdma->Init.Mode == DMA_NORMAL)
00003c  69e8              LDR      r0,[r5,#0x1c]
00003e  b968              CBNZ     r0,|L41.92|
;;;2328       {
;;;2329         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
000040  2101              MOVS     r1,#1
000042  2044              MOVS     r0,#0x44
000044  5501              STRB     r1,[r0,r4]
000046  e009              B        |L41.92|
                  |L41.72|
;;;2330       }
;;;2331     }
;;;2332     else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
000048  6b20              LDR      r0,[r4,#0x30]
00004a  42a8              CMP      r0,r5
00004c  d106              BNE      |L41.92|
;;;2333     {
;;;2334       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
00004e  2008              MOVS     r0,#8
000050  7720              STRB     r0,[r4,#0x1c]
;;;2335   
;;;2336       if (hdma->Init.Mode == DMA_NORMAL)
000052  69e8              LDR      r0,[r5,#0x1c]
000054  b910              CBNZ     r0,|L41.92|
;;;2337       {
;;;2338         TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
000056  2101              MOVS     r1,#1
000058  2045              MOVS     r0,#0x45
00005a  5501              STRB     r1,[r0,r4]
                  |L41.92|
;;;2339       }
;;;2340     }
;;;2341     else
;;;2342     {
;;;2343       /* nothing to do */
;;;2344     }
;;;2345   
;;;2346   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2347     htim->PWM_PulseFinishedCallback(htim);
;;;2348   #else
;;;2349     HAL_TIM_PWM_PulseFinishedCallback(htim);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       HAL_TIM_PWM_PulseFinishedCallback
;;;2350   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2351   
;;;2352     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
000062  2000              MOVS     r0,#0
000064  7720              STRB     r0,[r4,#0x1c]
;;;2353   }
000066  bd70              POP      {r4-r6,pc}
;;;2354   
                          ENDP


                          AREA ||i.TIM_DMAErrorCCxN||, CODE, READONLY, ALIGN=1

                  TIM_DMAErrorCCxN PROC
;;;2359     */
;;;2360   static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
000000  b570              PUSH     {r4-r6,lr}
;;;2361   {
000002  4605              MOV      r5,r0
;;;2362     TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;2363   
;;;2364     if (hdma == htim->hdma[TIM_DMA_ID_CC1])
000006  6a60              LDR      r0,[r4,#0x24]
000008  42a8              CMP      r0,r5
00000a  d104              BNE      |L42.22|
;;;2365     {
;;;2366       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
00000c  2001              MOVS     r0,#1
00000e  7720              STRB     r0,[r4,#0x1c]
;;;2367       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
000010  f8840042          STRB     r0,[r4,#0x42]
000014  e010              B        |L42.56|
                  |L42.22|
;;;2368     }
;;;2369     else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
000016  6aa0              LDR      r0,[r4,#0x28]
000018  42a8              CMP      r0,r5
00001a  d105              BNE      |L42.40|
;;;2370     {
;;;2371       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
00001c  2002              MOVS     r0,#2
00001e  7720              STRB     r0,[r4,#0x1c]
;;;2372       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
000020  2101              MOVS     r1,#1
000022  2043              MOVS     r0,#0x43
000024  5501              STRB     r1,[r0,r4]
000026  e007              B        |L42.56|
                  |L42.40|
;;;2373     }
;;;2374     else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
000028  6ae0              LDR      r0,[r4,#0x2c]
00002a  42a8              CMP      r0,r5
00002c  d104              BNE      |L42.56|
;;;2375     {
;;;2376       htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
00002e  2004              MOVS     r0,#4
000030  7720              STRB     r0,[r4,#0x1c]
;;;2377       TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
000032  2101              MOVS     r1,#1
000034  2044              MOVS     r0,#0x44
000036  5501              STRB     r1,[r0,r4]
                  |L42.56|
;;;2378     }
;;;2379     else
;;;2380     {
;;;2381       /* nothing to do */
;;;2382     }
;;;2383   
;;;2384   #if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
;;;2385     htim->ErrorCallback(htim);
;;;2386   #else
;;;2387     HAL_TIM_ErrorCallback(htim);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       HAL_TIM_ErrorCallback
;;;2388   #endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
;;;2389   
;;;2390     htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
00003e  2000              MOVS     r0,#0
000040  7720              STRB     r0,[r4,#0x1c]
;;;2391   }
000042  bd70              POP      {r4-r6,pc}
;;;2392   
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____REVSH|
#line 478
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____RRX|
#line 665
|__asm___22_stm32f4xx_hal_tim_ex_c_e8ef3920____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
