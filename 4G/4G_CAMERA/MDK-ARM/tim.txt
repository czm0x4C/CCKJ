; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\tim.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\tim.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\tim.crf ../Core/Src/tim.c]
                          THUMB

                          AREA ||i.HAL_TIM_Base_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspDeInit PROC
;;;286    
;;;287    void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
000000  b510              PUSH     {r4,lr}
;;;288    {
000002  4604              MOV      r4,r0
;;;289    
;;;290      if(tim_baseHandle->Instance==TIM1)
000004  490d              LDR      r1,|L1.60|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d106              BNE      |L1.26|
;;;291      {
;;;292      /* USER CODE BEGIN TIM1_MspDeInit 0 */
;;;293    
;;;294      /* USER CODE END TIM1_MspDeInit 0 */
;;;295        /* Peripheral clock disable */
;;;296        __HAL_RCC_TIM1_CLK_DISABLE();
00000c  480c              LDR      r0,|L1.64|
00000e  6800              LDR      r0,[r0,#0]
000010  f0200001          BIC      r0,r0,#1
000014  490a              LDR      r1,|L1.64|
000016  6008              STR      r0,[r1,#0]
000018  e00e              B        |L1.56|
                  |L1.26|
;;;297      /* USER CODE BEGIN TIM1_MspDeInit 1 */
;;;298    
;;;299      /* USER CODE END TIM1_MspDeInit 1 */
;;;300      }
;;;301      else if(tim_baseHandle->Instance==TIM13)
00001a  490a              LDR      r1,|L1.68|
00001c  6820              LDR      r0,[r4,#0]
00001e  4288              CMP      r0,r1
000020  d10a              BNE      |L1.56|
;;;302      {
;;;303      /* USER CODE BEGIN TIM13_MspDeInit 0 */
;;;304    
;;;305      /* USER CODE END TIM13_MspDeInit 0 */
;;;306        /* Peripheral clock disable */
;;;307        __HAL_RCC_TIM13_CLK_DISABLE();
000022  4807              LDR      r0,|L1.64|
000024  1f00              SUBS     r0,r0,#4
000026  6800              LDR      r0,[r0,#0]
000028  f0200080          BIC      r0,r0,#0x80
00002c  4904              LDR      r1,|L1.64|
00002e  1f09              SUBS     r1,r1,#4
000030  6008              STR      r0,[r1,#0]
;;;308    
;;;309        /* TIM13 interrupt Deinit */
;;;310        HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
000032  202c              MOVS     r0,#0x2c
000034  f7fffffe          BL       HAL_NVIC_DisableIRQ
                  |L1.56|
;;;311      /* USER CODE BEGIN TIM13_MspDeInit 1 */
;;;312    
;;;313      /* USER CODE END TIM13_MspDeInit 1 */
;;;314      }
;;;315    }
000038  bd10              POP      {r4,pc}
;;;316    
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x40010000
                  |L1.64|
                          DCD      0x40023844
                  |L1.68|
                          DCD      0x40001c00

                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspInit PROC
;;;172    
;;;173    void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
000000  b538              PUSH     {r3-r5,lr}
;;;174    {
000002  4604              MOV      r4,r0
;;;175    
;;;176      if(tim_baseHandle->Instance==TIM1)
000004  4919              LDR      r1,|L2.108|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d10f              BNE      |L2.44|
;;;177      {
;;;178      /* USER CODE BEGIN TIM1_MspInit 0 */
;;;179    
;;;180      /* USER CODE END TIM1_MspInit 0 */
;;;181        /* TIM1 clock enable */
;;;182        __HAL_RCC_TIM1_CLK_ENABLE();
00000c  bf00              NOP      
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  4817              LDR      r0,|L2.112|
000014  6800              LDR      r0,[r0,#0]
000016  f0400001          ORR      r0,r0,#1
00001a  4915              LDR      r1,|L2.112|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0000001          AND      r0,r0,#1
000026  9000              STR      r0,[sp,#0]
000028  bf00              NOP      
00002a  e01d              B        |L2.104|
                  |L2.44|
;;;183      /* USER CODE BEGIN TIM1_MspInit 1 */
;;;184    
;;;185      /* USER CODE END TIM1_MspInit 1 */
;;;186      }
;;;187      else if(tim_baseHandle->Instance==TIM13)
00002c  4911              LDR      r1,|L2.116|
00002e  6820              LDR      r0,[r4,#0]
000030  4288              CMP      r0,r1
000032  d119              BNE      |L2.104|
;;;188      {
;;;189      /* USER CODE BEGIN TIM13_MspInit 0 */
;;;190    
;;;191      /* USER CODE END TIM13_MspInit 0 */
;;;192        /* TIM13 clock enable */
;;;193        __HAL_RCC_TIM13_CLK_ENABLE();
000034  bf00              NOP      
000036  2000              MOVS     r0,#0
000038  9000              STR      r0,[sp,#0]
00003a  480d              LDR      r0,|L2.112|
00003c  1f00              SUBS     r0,r0,#4
00003e  6800              LDR      r0,[r0,#0]
000040  f0400080          ORR      r0,r0,#0x80
000044  490a              LDR      r1,|L2.112|
000046  1f09              SUBS     r1,r1,#4
000048  6008              STR      r0,[r1,#0]
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]
00004e  f0000080          AND      r0,r0,#0x80
000052  9000              STR      r0,[sp,#0]
000054  bf00              NOP      
000056  bf00              NOP      
;;;194    
;;;195        /* TIM13 interrupt Init */
;;;196        HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 9, 0);
000058  2200              MOVS     r2,#0
00005a  2109              MOVS     r1,#9
00005c  202c              MOVS     r0,#0x2c
00005e  f7fffffe          BL       HAL_NVIC_SetPriority
;;;197        HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
000062  202c              MOVS     r0,#0x2c
000064  f7fffffe          BL       HAL_NVIC_EnableIRQ
                  |L2.104|
;;;198      /* USER CODE BEGIN TIM13_MspInit 1 */
;;;199    
;;;200      /* USER CODE END TIM13_MspInit 1 */
;;;201      }
;;;202    }
000068  bd38              POP      {r3-r5,pc}
;;;203    
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      0x40010000
                  |L2.112|
                          DCD      0x40023844
                  |L2.116|
                          DCD      0x40001c00

                          AREA ||i.HAL_TIM_MspPostInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_MspPostInit PROC
;;;238    }
;;;239    void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
000000  b510              PUSH     {r4,lr}
;;;240    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;241    
;;;242      GPIO_InitTypeDef GPIO_InitStruct = {0};
000006  2114              MOVS     r1,#0x14
000008  a801              ADD      r0,sp,#4
00000a  f7fffffe          BL       __aeabi_memclr4
;;;243      if(timHandle->Instance==TIM1)
00000e  4922              LDR      r1,|L3.152|
000010  6820              LDR      r0,[r4,#0]
000012  4288              CMP      r0,r1
000014  d11d              BNE      |L3.82|
;;;244      {
;;;245      /* USER CODE BEGIN TIM1_MspPostInit 0 */
;;;246    
;;;247      /* USER CODE END TIM1_MspPostInit 0 */
;;;248        __HAL_RCC_GPIOA_CLK_ENABLE();
000016  bf00              NOP      
000018  2000              MOVS     r0,#0
00001a  9000              STR      r0,[sp,#0]
00001c  481f              LDR      r0,|L3.156|
00001e  6800              LDR      r0,[r0,#0]
000020  f0400001          ORR      r0,r0,#1
000024  491d              LDR      r1,|L3.156|
000026  6008              STR      r0,[r1,#0]
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  f0000001          AND      r0,r0,#1
000030  9000              STR      r0,[sp,#0]
000032  bf00              NOP      
000034  bf00              NOP      
;;;249        /**TIM1 GPIO Configuration
;;;250        PA8     ------> TIM1_CH1
;;;251        */
;;;252        GPIO_InitStruct.Pin = GPIO_PIN_8;
000036  1588              ASRS     r0,r1,#22
000038  9001              STR      r0,[sp,#4]
;;;253        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
00003a  2002              MOVS     r0,#2
00003c  9002              STR      r0,[sp,#8]
;;;254        GPIO_InitStruct.Pull = GPIO_NOPULL;
00003e  2000              MOVS     r0,#0
000040  9003              STR      r0,[sp,#0xc]
;;;255        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
000042  9004              STR      r0,[sp,#0x10]
;;;256        GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
000044  2001              MOVS     r0,#1
000046  9005              STR      r0,[sp,#0x14]
;;;257        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000048  a901              ADD      r1,sp,#4
00004a  4815              LDR      r0,|L3.160|
00004c  f7fffffe          BL       HAL_GPIO_Init
000050  e020              B        |L3.148|
                  |L3.82|
;;;258    
;;;259      /* USER CODE BEGIN TIM1_MspPostInit 1 */
;;;260    
;;;261      /* USER CODE END TIM1_MspPostInit 1 */
;;;262      }
;;;263      else if(timHandle->Instance==TIM4)
000052  4914              LDR      r1,|L3.164|
000054  6820              LDR      r0,[r4,#0]
000056  4288              CMP      r0,r1
000058  d11c              BNE      |L3.148|
;;;264      {
;;;265      /* USER CODE BEGIN TIM4_MspPostInit 0 */
;;;266    
;;;267      /* USER CODE END TIM4_MspPostInit 0 */
;;;268    
;;;269        __HAL_RCC_GPIOD_CLK_ENABLE();
00005a  bf00              NOP      
00005c  2000              MOVS     r0,#0
00005e  9000              STR      r0,[sp,#0]
000060  480e              LDR      r0,|L3.156|
000062  6800              LDR      r0,[r0,#0]
000064  f0400008          ORR      r0,r0,#8
000068  490c              LDR      r1,|L3.156|
00006a  6008              STR      r0,[r1,#0]
00006c  4608              MOV      r0,r1
00006e  6800              LDR      r0,[r0,#0]
000070  f0000008          AND      r0,r0,#8
000074  9000              STR      r0,[sp,#0]
000076  bf00              NOP      
000078  bf00              NOP      
;;;270        /**TIM4 GPIO Configuration
;;;271        PD12     ------> TIM4_CH1
;;;272        */
;;;273        GPIO_InitStruct.Pin = GPIO_PIN_12;
00007a  1488              ASRS     r0,r1,#18
00007c  9001              STR      r0,[sp,#4]
;;;274        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
00007e  2002              MOVS     r0,#2
000080  9002              STR      r0,[sp,#8]
;;;275        GPIO_InitStruct.Pull = GPIO_NOPULL;
000082  2000              MOVS     r0,#0
000084  9003              STR      r0,[sp,#0xc]
;;;276        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
000086  9004              STR      r0,[sp,#0x10]
;;;277        GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
000088  2002              MOVS     r0,#2
00008a  9005              STR      r0,[sp,#0x14]
;;;278        HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
00008c  a901              ADD      r1,sp,#4
00008e  4806              LDR      r0,|L3.168|
000090  f7fffffe          BL       HAL_GPIO_Init
                  |L3.148|
;;;279    
;;;280      /* USER CODE BEGIN TIM4_MspPostInit 1 */
;;;281    
;;;282      /* USER CODE END TIM4_MspPostInit 1 */
;;;283      }
;;;284    
;;;285    }
000094  b006              ADD      sp,sp,#0x18
000096  bd10              POP      {r4,pc}
;;;286    
                          ENDP

                  |L3.152|
                          DCD      0x40010000
                  |L3.156|
                          DCD      0x40023830
                  |L3.160|
                          DCD      0x40020000
                  |L3.164|
                          DCD      0x40000800
                  |L3.168|
                          DCD      0x40020c00

                          AREA ||i.HAL_TIM_PWM_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_MspDeInit PROC
;;;316    
;;;317    void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
000000  b510              PUSH     {r4,lr}
;;;318    {
000002  4604              MOV      r4,r0
;;;319    
;;;320      if(tim_pwmHandle->Instance==TIM4)
000004  4906              LDR      r1,|L4.32|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d108              BNE      |L4.30|
;;;321      {
;;;322      /* USER CODE BEGIN TIM4_MspDeInit 0 */
;;;323    
;;;324      /* USER CODE END TIM4_MspDeInit 0 */
;;;325        /* Peripheral clock disable */
;;;326        __HAL_RCC_TIM4_CLK_DISABLE();
00000c  4805              LDR      r0,|L4.36|
00000e  6800              LDR      r0,[r0,#0]
000010  f0200004          BIC      r0,r0,#4
000014  4903              LDR      r1,|L4.36|
000016  6008              STR      r0,[r1,#0]
;;;327    
;;;328        /* TIM4 DMA DeInit */
;;;329        HAL_DMA_DeInit(tim_pwmHandle->hdma[TIM_DMA_ID_CC1]);
000018  6a60              LDR      r0,[r4,#0x24]
00001a  f7fffffe          BL       HAL_DMA_DeInit
                  |L4.30|
;;;330      /* USER CODE BEGIN TIM4_MspDeInit 1 */
;;;331    
;;;332      /* USER CODE END TIM4_MspDeInit 1 */
;;;333      }
;;;334    }
00001e  bd10              POP      {r4,pc}
;;;335    
                          ENDP

                  |L4.32|
                          DCD      0x40000800
                  |L4.36|
                          DCD      0x40023840

                          AREA ||i.HAL_TIM_PWM_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_PWM_MspInit PROC
;;;203    
;;;204    void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
000000  b538              PUSH     {r3-r5,lr}
;;;205    {
000002  4604              MOV      r4,r0
;;;206    
;;;207      if(tim_pwmHandle->Instance==TIM4)
000004  491a              LDR      r1,|L5.112|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d12f              BNE      |L5.108|
;;;208      {
;;;209      /* USER CODE BEGIN TIM4_MspInit 0 */
;;;210    
;;;211      /* USER CODE END TIM4_MspInit 0 */
;;;212        /* TIM4 clock enable */
;;;213        __HAL_RCC_TIM4_CLK_ENABLE();
00000c  bf00              NOP      
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  4818              LDR      r0,|L5.116|
000014  6800              LDR      r0,[r0,#0]
000016  f0400004          ORR      r0,r0,#4
00001a  4916              LDR      r1,|L5.116|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0000004          AND      r0,r0,#4
000026  9000              STR      r0,[sp,#0]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;214    
;;;215        /* TIM4 DMA Init */
;;;216        /* TIM4_CH1 Init */
;;;217        hdma_tim4_ch1.Instance = DMA1_Stream0;
00002c  4812              LDR      r0,|L5.120|
00002e  4913              LDR      r1,|L5.124|
000030  6008              STR      r0,[r1,#0]  ; hdma_tim4_ch1
;;;218        hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
000032  0580              LSLS     r0,r0,#22
000034  6048              STR      r0,[r1,#4]  ; hdma_tim4_ch1
;;;219        hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
000036  2140              MOVS     r1,#0x40
000038  4810              LDR      r0,|L5.124|
00003a  6081              STR      r1,[r0,#8]
;;;220        hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
00003c  2100              MOVS     r1,#0
00003e  60c1              STR      r1,[r0,#0xc]
;;;221        hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
000040  f44f6180          MOV      r1,#0x400
000044  6101              STR      r1,[r0,#0x10]
;;;222        hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
000046  0089              LSLS     r1,r1,#2
000048  6141              STR      r1,[r0,#0x14]
;;;223        hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
00004a  0089              LSLS     r1,r1,#2
00004c  6181              STR      r1,[r0,#0x18]
;;;224        hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
00004e  2100              MOVS     r1,#0
000050  61c1              STR      r1,[r0,#0x1c]
;;;225        hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
000052  6201              STR      r1,[r0,#0x20]
;;;226        hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
000054  6241              STR      r1,[r0,#0x24]
;;;227        if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
000056  f7fffffe          BL       HAL_DMA_Init
00005a  b108              CBZ      r0,|L5.96|
;;;228        {
;;;229          Error_Handler();
00005c  f7fffffe          BL       Error_Handler
                  |L5.96|
;;;230        }
;;;231    
;;;232        __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
000060  bf00              NOP      
000062  4906              LDR      r1,|L5.124|
000064  6261              STR      r1,[r4,#0x24]
000066  4608              MOV      r0,r1
000068  6384              STR      r4,[r0,#0x38]  ; hdma_tim4_ch1
00006a  bf00              NOP      
                  |L5.108|
;;;233    
;;;234      /* USER CODE BEGIN TIM4_MspInit 1 */
;;;235    
;;;236      /* USER CODE END TIM4_MspInit 1 */
;;;237      }
;;;238    }
00006c  bd38              POP      {r3-r5,pc}
;;;239    void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
                          ENDP

00006e  0000              DCW      0x0000
                  |L5.112|
                          DCD      0x40000800
                  |L5.116|
                          DCD      0x40023840
                  |L5.120|
                          DCD      0x40026010
                  |L5.124|
                          DCD      hdma_tim4_ch1

                          AREA ||i.MX_TIM13_Init||, CODE, READONLY, ALIGN=2

                  MX_TIM13_Init PROC
;;;146    /* TIM13 init function */
;;;147    void MX_TIM13_Init(void)
000000  b510              PUSH     {r4,lr}
;;;148    {
;;;149    
;;;150      /* USER CODE BEGIN TIM13_Init 0 */
;;;151    
;;;152      /* USER CODE END TIM13_Init 0 */
;;;153    
;;;154      /* USER CODE BEGIN TIM13_Init 1 */
;;;155    
;;;156      /* USER CODE END TIM13_Init 1 */
;;;157      htim13.Instance = TIM13;
000002  480a              LDR      r0,|L6.44|
000004  490a              LDR      r1,|L6.48|
000006  6008              STR      r0,[r1,#0]  ; htim13
;;;158      htim13.Init.Prescaler = 8399;
000008  f24200cf          MOV      r0,#0x20cf
00000c  6048              STR      r0,[r1,#4]  ; htim13
;;;159      htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
00000e  2100              MOVS     r1,#0
000010  4807              LDR      r0,|L6.48|
000012  6081              STR      r1,[r0,#8]
;;;160      htim13.Init.Period = 9999;
000014  f242710f          MOV      r1,#0x270f
000018  60c1              STR      r1,[r0,#0xc]
;;;161      htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
00001a  2100              MOVS     r1,#0
00001c  6101              STR      r1,[r0,#0x10]
;;;162      htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
00001e  6181              STR      r1,[r0,#0x18]
;;;163      if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
000020  f7fffffe          BL       HAL_TIM_Base_Init
000024  b108              CBZ      r0,|L6.42|
;;;164      {
;;;165        Error_Handler();
000026  f7fffffe          BL       Error_Handler
                  |L6.42|
;;;166      }
;;;167      /* USER CODE BEGIN TIM13_Init 2 */
;;;168    
;;;169      /* USER CODE END TIM13_Init 2 */
;;;170    
;;;171    }
00002a  bd10              POP      {r4,pc}
;;;172    
                          ENDP

                  |L6.44|
                          DCD      0x40001c00
                  |L6.48|
                          DCD      htim13

                          AREA ||i.MX_TIM1_Init||, CODE, READONLY, ALIGN=2

                  MX_TIM1_Init PROC
;;;32     /* TIM1 init function */
;;;33     void MX_TIM1_Init(void)
000000  b500              PUSH     {lr}
;;;34     {
000002  b095              SUB      sp,sp,#0x54
;;;35     
;;;36       /* USER CODE BEGIN TIM1_Init 0 */
;;;37     
;;;38       /* USER CODE END TIM1_Init 0 */
;;;39     
;;;40       TIM_ClockConfigTypeDef sClockSourceConfig = {0};
000004  2000              MOVS     r0,#0
000006  9011              STR      r0,[sp,#0x44]
000008  9012              STR      r0,[sp,#0x48]
00000a  9013              STR      r0,[sp,#0x4c]
00000c  9014              STR      r0,[sp,#0x50]
;;;41       TIM_MasterConfigTypeDef sMasterConfig = {0};
00000e  900f              STR      r0,[sp,#0x3c]
000010  9010              STR      r0,[sp,#0x40]
;;;42       TIM_OC_InitTypeDef sConfigOC = {0};
000012  211c              MOVS     r1,#0x1c
000014  a808              ADD      r0,sp,#0x20
000016  f7fffffe          BL       __aeabi_memclr4
;;;43       TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
00001a  2120              MOVS     r1,#0x20
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       __aeabi_memclr4
;;;44     
;;;45       /* USER CODE BEGIN TIM1_Init 1 */
;;;46     
;;;47       /* USER CODE END TIM1_Init 1 */
;;;48       htim1.Instance = TIM1;
000022  482b              LDR      r0,|L7.208|
000024  492b              LDR      r1,|L7.212|
000026  6008              STR      r0,[r1,#0]  ; htim1
;;;49       htim1.Init.Prescaler = 1679;
000028  f240608f          MOV      r0,#0x68f
00002c  6048              STR      r0,[r1,#4]  ; htim1
;;;50       htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
00002e  2100              MOVS     r1,#0
000030  4828              LDR      r0,|L7.212|
000032  6081              STR      r1,[r0,#8]
;;;51       htim1.Init.Period = 99;
000034  2163              MOVS     r1,#0x63
000036  60c1              STR      r1,[r0,#0xc]
;;;52       htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
000038  2100              MOVS     r1,#0
00003a  6101              STR      r1,[r0,#0x10]
;;;53       htim1.Init.RepetitionCounter = 0;
00003c  6141              STR      r1,[r0,#0x14]
;;;54       htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
00003e  2180              MOVS     r1,#0x80
000040  6181              STR      r1,[r0,#0x18]
;;;55       if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
000042  f7fffffe          BL       HAL_TIM_Base_Init
000046  b108              CBZ      r0,|L7.76|
;;;56       {
;;;57         Error_Handler();
000048  f7fffffe          BL       Error_Handler
                  |L7.76|
;;;58       }
;;;59       sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
00004c  f44f5080          MOV      r0,#0x1000
000050  9011              STR      r0,[sp,#0x44]
;;;60       if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
000052  a911              ADD      r1,sp,#0x44
000054  481f              LDR      r0,|L7.212|
000056  f7fffffe          BL       HAL_TIM_ConfigClockSource
00005a  b108              CBZ      r0,|L7.96|
;;;61       {
;;;62         Error_Handler();
00005c  f7fffffe          BL       Error_Handler
                  |L7.96|
;;;63       }
;;;64       if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
000060  481c              LDR      r0,|L7.212|
000062  f7fffffe          BL       HAL_TIM_PWM_Init
000066  b108              CBZ      r0,|L7.108|
;;;65       {
;;;66         Error_Handler();
000068  f7fffffe          BL       Error_Handler
                  |L7.108|
;;;67       }
;;;68       sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
00006c  2000              MOVS     r0,#0
00006e  900f              STR      r0,[sp,#0x3c]
;;;69       sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
000070  9010              STR      r0,[sp,#0x40]
;;;70       if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
000072  a90f              ADD      r1,sp,#0x3c
000074  4817              LDR      r0,|L7.212|
000076  f7fffffe          BL       HAL_TIMEx_MasterConfigSynchronization
00007a  b108              CBZ      r0,|L7.128|
;;;71       {
;;;72         Error_Handler();
00007c  f7fffffe          BL       Error_Handler
                  |L7.128|
;;;73       }
;;;74       sConfigOC.OCMode = TIM_OCMODE_PWM1;
000080  2060              MOVS     r0,#0x60
000082  9008              STR      r0,[sp,#0x20]
;;;75       sConfigOC.Pulse = 0;
000084  2000              MOVS     r0,#0
000086  9009              STR      r0,[sp,#0x24]
;;;76       sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
000088  900a              STR      r0,[sp,#0x28]
;;;77       sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
00008a  900b              STR      r0,[sp,#0x2c]
;;;78       sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
00008c  900c              STR      r0,[sp,#0x30]
;;;79       sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
00008e  900d              STR      r0,[sp,#0x34]
;;;80       sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
000090  900e              STR      r0,[sp,#0x38]
;;;81       if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
000092  2200              MOVS     r2,#0
000094  a908              ADD      r1,sp,#0x20
000096  480f              LDR      r0,|L7.212|
000098  f7fffffe          BL       HAL_TIM_PWM_ConfigChannel
00009c  b108              CBZ      r0,|L7.162|
;;;82       {
;;;83         Error_Handler();
00009e  f7fffffe          BL       Error_Handler
                  |L7.162|
;;;84       }
;;;85       sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
0000a2  2000              MOVS     r0,#0
0000a4  9000              STR      r0,[sp,#0]
;;;86       sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
0000a6  9001              STR      r0,[sp,#4]
;;;87       sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
0000a8  9002              STR      r0,[sp,#8]
;;;88       sBreakDeadTimeConfig.DeadTime = 0;
0000aa  9003              STR      r0,[sp,#0xc]
;;;89       sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
0000ac  9004              STR      r0,[sp,#0x10]
;;;90       sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
0000ae  f44f5000          MOV      r0,#0x2000
0000b2  9005              STR      r0,[sp,#0x14]
;;;91       sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
0000b4  2000              MOVS     r0,#0
0000b6  9007              STR      r0,[sp,#0x1c]
;;;92       if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
0000b8  4669              MOV      r1,sp
0000ba  4806              LDR      r0,|L7.212|
0000bc  f7fffffe          BL       HAL_TIMEx_ConfigBreakDeadTime
0000c0  b108              CBZ      r0,|L7.198|
;;;93       {
;;;94         Error_Handler();
0000c2  f7fffffe          BL       Error_Handler
                  |L7.198|
;;;95       }
;;;96       /* USER CODE BEGIN TIM1_Init 2 */
;;;97     
;;;98       /* USER CODE END TIM1_Init 2 */
;;;99       HAL_TIM_MspPostInit(&htim1);
0000c6  4803              LDR      r0,|L7.212|
0000c8  f7fffffe          BL       HAL_TIM_MspPostInit
;;;100    
;;;101    }
0000cc  b015              ADD      sp,sp,#0x54
0000ce  bd00              POP      {pc}
;;;102    /* TIM4 init function */
                          ENDP

                  |L7.208|
                          DCD      0x40010000
                  |L7.212|
                          DCD      htim1

                          AREA ||i.MX_TIM4_Init||, CODE, READONLY, ALIGN=2

                  MX_TIM4_Init PROC
;;;102    /* TIM4 init function */
;;;103    void MX_TIM4_Init(void)
000000  b500              PUSH     {lr}
;;;104    {
000002  b089              SUB      sp,sp,#0x24
;;;105    
;;;106      /* USER CODE BEGIN TIM4_Init 0 */
;;;107    
;;;108      /* USER CODE END TIM4_Init 0 */
;;;109    
;;;110      TIM_MasterConfigTypeDef sMasterConfig = {0};
000004  2000              MOVS     r0,#0
000006  9007              STR      r0,[sp,#0x1c]
000008  9008              STR      r0,[sp,#0x20]
;;;111      TIM_OC_InitTypeDef sConfigOC = {0};
00000a  211c              MOVS     r1,#0x1c
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       __aeabi_memclr4
;;;112    
;;;113      /* USER CODE BEGIN TIM4_Init 1 */
;;;114    
;;;115      /* USER CODE END TIM4_Init 1 */
;;;116      htim4.Instance = TIM4;
000012  4817              LDR      r0,|L8.112|
000014  4917              LDR      r1,|L8.116|
000016  6008              STR      r0,[r1,#0]  ; htim4
;;;117      htim4.Init.Prescaler = 0;
000018  2000              MOVS     r0,#0
00001a  6048              STR      r0,[r1,#4]  ; htim4
;;;118      htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
00001c  2100              MOVS     r1,#0
00001e  4815              LDR      r0,|L8.116|
000020  6081              STR      r1,[r0,#8]
;;;119      htim4.Init.Period = 104;
000022  2168              MOVS     r1,#0x68
000024  60c1              STR      r1,[r0,#0xc]
;;;120      htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
000026  2100              MOVS     r1,#0
000028  6101              STR      r1,[r0,#0x10]
;;;121      htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
00002a  6181              STR      r1,[r0,#0x18]
;;;122      if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
00002c  f7fffffe          BL       HAL_TIM_PWM_Init
000030  b108              CBZ      r0,|L8.54|
;;;123      {
;;;124        Error_Handler();
000032  f7fffffe          BL       Error_Handler
                  |L8.54|
;;;125      }
;;;126      sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
000036  2000              MOVS     r0,#0
000038  9007              STR      r0,[sp,#0x1c]
;;;127      sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
00003a  9008              STR      r0,[sp,#0x20]
;;;128      if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
00003c  a907              ADD      r1,sp,#0x1c
00003e  480d              LDR      r0,|L8.116|
000040  f7fffffe          BL       HAL_TIMEx_MasterConfigSynchronization
000044  b108              CBZ      r0,|L8.74|
;;;129      {
;;;130        Error_Handler();
000046  f7fffffe          BL       Error_Handler
                  |L8.74|
;;;131      }
;;;132      sConfigOC.OCMode = TIM_OCMODE_PWM1;
00004a  2060              MOVS     r0,#0x60
00004c  9000              STR      r0,[sp,#0]
;;;133      sConfigOC.Pulse = 0;
00004e  2000              MOVS     r0,#0
000050  9001              STR      r0,[sp,#4]
;;;134      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
000052  9002              STR      r0,[sp,#8]
;;;135      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
000054  9004              STR      r0,[sp,#0x10]
;;;136      if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
000056  2200              MOVS     r2,#0
000058  4669              MOV      r1,sp
00005a  4806              LDR      r0,|L8.116|
00005c  f7fffffe          BL       HAL_TIM_PWM_ConfigChannel
000060  b108              CBZ      r0,|L8.102|
;;;137      {
;;;138        Error_Handler();
000062  f7fffffe          BL       Error_Handler
                  |L8.102|
;;;139      }
;;;140      /* USER CODE BEGIN TIM4_Init 2 */
;;;141    
;;;142      /* USER CODE END TIM4_Init 2 */
;;;143      HAL_TIM_MspPostInit(&htim4);
000066  4803              LDR      r0,|L8.116|
000068  f7fffffe          BL       HAL_TIM_MspPostInit
;;;144    
;;;145    }
00006c  b009              ADD      sp,sp,#0x24
00006e  bd00              POP      {pc}
;;;146    /* TIM13 init function */
                          ENDP

                  |L8.112|
                          DCD      0x40000800
                  |L8.116|
                          DCD      htim4

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  htim1
                          %        72
                  htim4
                          %        72
                  htim13
                          %        72
                  hdma_tim4_ch1
                          %        96

;*** Start embedded assembler ***

#line 1 "../Core/Src/tim.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_tim_c_51ac5494____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___5_tim_c_51ac5494____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_tim_c_51ac5494____REVSH|
#line 478
|__asm___5_tim_c_51ac5494____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_tim_c_51ac5494____RRX|
#line 665
|__asm___5_tim_c_51ac5494____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
