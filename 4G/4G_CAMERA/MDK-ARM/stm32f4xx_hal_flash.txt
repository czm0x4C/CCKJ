; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_flash.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_flash.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_Byte||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Byte PROC
;;;693      */
;;;694    static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
000000  4a07              LDR      r2,|L1.32|
;;;695    {
;;;696      /* Check the parameters */
;;;697      assert_param(IS_FLASH_ADDRESS(Address));
;;;698      
;;;699      /* If the previous operation is completed, proceed to program the new data */
;;;700      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b05              LDR      r3,|L1.32|
00000a  601a              STR      r2,[r3,#0]
;;;701      FLASH->CR |= FLASH_PSIZE_BYTE;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  601a              STR      r2,[r3,#0]
;;;702      FLASH->CR |= FLASH_CR_PG;
000012  461a              MOV      r2,r3
000014  6812              LDR      r2,[r2,#0]
000016  f0420201          ORR      r2,r2,#1
00001a  601a              STR      r2,[r3,#0]
;;;703    
;;;704      *(__IO uint8_t*)Address = Data;
00001c  7001              STRB     r1,[r0,#0]
;;;705    }
00001e  4770              BX       lr
;;;706    
                          ENDP

                  |L1.32|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_DoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_DoubleWord PROC
;;;609      */
;;;610    static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
000000  b510              PUSH     {r4,lr}
;;;611    {
;;;612      /* Check the parameters */
;;;613      assert_param(IS_FLASH_ADDRESS(Address));
;;;614      
;;;615      /* If the previous operation is completed, proceed to program the new data */
;;;616      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  490d              LDR      r1,|L2.56|
000004  6809              LDR      r1,[r1,#0]
000006  f4217140          BIC      r1,r1,#0x300
00000a  4c0b              LDR      r4,|L2.56|
00000c  6021              STR      r1,[r4,#0]
;;;617      FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
00000e  4621              MOV      r1,r4
000010  6809              LDR      r1,[r1,#0]
000012  f4417140          ORR      r1,r1,#0x300
000016  6021              STR      r1,[r4,#0]
;;;618      FLASH->CR |= FLASH_CR_PG;
000018  4621              MOV      r1,r4
00001a  6809              LDR      r1,[r1,#0]
00001c  f0410101          ORR      r1,r1,#1
000020  6021              STR      r1,[r4,#0]
;;;619    
;;;620      /* Program first word */
;;;621      *(__IO uint32_t*)Address = (uint32_t)Data;
000022  6002              STR      r2,[r0,#0]
;;;622    
;;;623      /* Barrier to ensure programming is performed in 2 steps, in right order
;;;624        (independently of compiler optimization behavior) */
;;;625      __ISB();
000024  bf00              NOP      
000026  bf00              NOP      
000028  bf00              NOP      
00002a  f3bf8f6f          ISB      
00002e  bf00              NOP      
000030  bf00              NOP      
000032  bf00              NOP      
;;;626    
;;;627      /* Program second word */
;;;628      *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
000034  6043              STR      r3,[r0,#4]
;;;629    }
000036  bd10              POP      {r4,pc}
;;;630    
                          ENDP

                  |L2.56|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;668      */
;;;669    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4a08              LDR      r2,|L3.36|
;;;670    {
;;;671      /* Check the parameters */
;;;672      assert_param(IS_FLASH_ADDRESS(Address));
;;;673      
;;;674      /* If the previous operation is completed, proceed to program the new data */
;;;675      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b06              LDR      r3,|L3.36|
00000a  601a              STR      r2,[r3,#0]
;;;676      FLASH->CR |= FLASH_PSIZE_HALF_WORD;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f4427280          ORR      r2,r2,#0x100
000014  601a              STR      r2,[r3,#0]
;;;677      FLASH->CR |= FLASH_CR_PG;
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f0420201          ORR      r2,r2,#1
00001e  601a              STR      r2,[r3,#0]
;;;678    
;;;679      *(__IO uint16_t*)Address = Data;
000020  8001              STRH     r1,[r0,#0]
;;;680    }
000022  4770              BX       lr
;;;681    
                          ENDP

                  |L3.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_Word||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Word PROC
;;;643      */
;;;644    static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
000000  4a08              LDR      r2,|L4.36|
;;;645    {
;;;646      /* Check the parameters */
;;;647      assert_param(IS_FLASH_ADDRESS(Address));
;;;648      
;;;649      /* If the previous operation is completed, proceed to program the new data */
;;;650      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b06              LDR      r3,|L4.36|
00000a  601a              STR      r2,[r3,#0]
;;;651      FLASH->CR |= FLASH_PSIZE_WORD;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f4427200          ORR      r2,r2,#0x200
000014  601a              STR      r2,[r3,#0]
;;;652      FLASH->CR |= FLASH_CR_PG;
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f0420201          ORR      r2,r2,#1
00001e  601a              STR      r2,[r3,#0]
;;;653    
;;;654      *(__IO uint32_t*)Address = Data;
000020  6001              STR      r1,[r0,#0]
;;;655    }
000022  4770              BX       lr
;;;656    
                          ENDP

                  |L4.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;710      */
;;;711    static void FLASH_SetErrorCode(void)
000000  4823              LDR      r0,|L5.144|
;;;712    { 
;;;713      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000010          AND      r0,r0,#0x10
000008  b140              CBZ      r0,|L5.28|
;;;714      {
;;;715       pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
00000a  4822              LDR      r0,|L5.148|
00000c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00000e  f0400010          ORR      r0,r0,#0x10
000012  4920              LDR      r1,|L5.148|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;716       
;;;717       /* Clear FLASH write protection error pending bit */
;;;718       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
000016  2010              MOVS     r0,#0x10
000018  491d              LDR      r1,|L5.144|
00001a  6008              STR      r0,[r1,#0]
                  |L5.28|
;;;719      }
;;;720      
;;;721      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
00001c  481c              LDR      r0,|L5.144|
00001e  6800              LDR      r0,[r0,#0]
000020  f0000020          AND      r0,r0,#0x20
000024  b140              CBZ      r0,|L5.56|
;;;722      {
;;;723       pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
000026  481b              LDR      r0,|L5.148|
000028  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00002a  f0400008          ORR      r0,r0,#8
00002e  4919              LDR      r1,|L5.148|
000030  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;724       
;;;725       /* Clear FLASH Programming alignment error pending bit */
;;;726       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
000032  2020              MOVS     r0,#0x20
000034  4916              LDR      r1,|L5.144|
000036  6008              STR      r0,[r1,#0]
                  |L5.56|
;;;727      }
;;;728      
;;;729      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
000038  4815              LDR      r0,|L5.144|
00003a  6800              LDR      r0,[r0,#0]
00003c  f0000040          AND      r0,r0,#0x40
000040  b140              CBZ      r0,|L5.84|
;;;730      {
;;;731        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
000042  4814              LDR      r0,|L5.148|
000044  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000046  f0400004          ORR      r0,r0,#4
00004a  4912              LDR      r1,|L5.148|
00004c  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;732        
;;;733        /* Clear FLASH Programming parallelism error pending bit */
;;;734        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
00004e  2040              MOVS     r0,#0x40
000050  490f              LDR      r1,|L5.144|
000052  6008              STR      r0,[r1,#0]
                  |L5.84|
;;;735      }
;;;736      
;;;737      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
000054  480e              LDR      r0,|L5.144|
000056  6800              LDR      r0,[r0,#0]
000058  f0000080          AND      r0,r0,#0x80
00005c  b140              CBZ      r0,|L5.112|
;;;738      {
;;;739        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
00005e  480d              LDR      r0,|L5.148|
000060  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000062  f0400002          ORR      r0,r0,#2
000066  490b              LDR      r1,|L5.148|
000068  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;740        
;;;741        /* Clear FLASH Programming sequence error pending bit */
;;;742        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
00006a  2080              MOVS     r0,#0x80
00006c  4908              LDR      r1,|L5.144|
00006e  6008              STR      r0,[r1,#0]
                  |L5.112|
;;;743      }
;;;744    #if defined(FLASH_SR_RDERR) 
;;;745      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
;;;746      {
;;;747        pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
;;;748        
;;;749        /* Clear FLASH Proprietary readout protection error pending bit */
;;;750        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
;;;751      }
;;;752    #endif /* FLASH_SR_RDERR */  
;;;753      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
000070  4807              LDR      r0,|L5.144|
000072  6800              LDR      r0,[r0,#0]
000074  f0000002          AND      r0,r0,#2
000078  b140              CBZ      r0,|L5.140|
;;;754      {
;;;755        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
00007a  4806              LDR      r0,|L5.148|
00007c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00007e  f0400020          ORR      r0,r0,#0x20
000082  4904              LDR      r1,|L5.148|
000084  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;756        
;;;757        /* Clear FLASH Operation error pending bit */
;;;758        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
000086  2002              MOVS     r0,#2
000088  4901              LDR      r1,|L5.144|
00008a  6008              STR      r0,[r1,#0]
                  |L5.140|
;;;759      }
;;;760    }
00008c  4770              BX       lr
;;;761    
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      0x40023c0c
                  |L5.148|
                          DCD      pFlash

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;549      */
;;;550    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;551    { 
000002  4604              MOV      r4,r0
;;;552      uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;553      
;;;554      /* Clear Error Code */
;;;555      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000006  2000              MOVS     r0,#0
000008  4914              LDR      r1,|L6.92|
00000a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;556      
;;;557      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;558         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;559         flag will be set */
;;;560      /* Get tick */
;;;561      tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4605              MOV      r5,r0
;;;562    
;;;563      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
000012  e009              B        |L6.40|
                  |L6.20|
;;;564      { 
;;;565        if(Timeout != HAL_MAX_DELAY)
000014  1c60              ADDS     r0,r4,#1
000016  b138              CBZ      r0,|L6.40|
;;;566        {
;;;567          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
000018  b124              CBZ      r4,|L6.36|
00001a  f7fffffe          BL       HAL_GetTick
00001e  1b40              SUBS     r0,r0,r5
000020  42a0              CMP      r0,r4
000022  d901              BLS      |L6.40|
                  |L6.36|
;;;568          {
;;;569            return HAL_TIMEOUT;
000024  2003              MOVS     r0,#3
                  |L6.38|
;;;570          }
;;;571        } 
;;;572      }
;;;573    
;;;574      /* Check FLASH End of Operation flag  */
;;;575      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
;;;576      {
;;;577        /* Clear FLASH End of Operation pending bit */
;;;578        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;579      }
;;;580    #if defined(FLASH_SR_RDERR)  
;;;581      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;582                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;583    #else
;;;584      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;585                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
;;;586    #endif /* FLASH_SR_RDERR */
;;;587      {
;;;588        /*Save the error code*/
;;;589        FLASH_SetErrorCode();
;;;590        return HAL_ERROR;
;;;591      }
;;;592    
;;;593      /* If there is no error flag set */
;;;594      return HAL_OK;
;;;595      
;;;596    }  
000026  bd70              POP      {r4-r6,pc}
                  |L6.40|
000028  480d              LDR      r0,|L6.96|
00002a  6800              LDR      r0,[r0,#0]            ;563
00002c  f4003080          AND      r0,r0,#0x10000        ;563
000030  2800              CMP      r0,#0                 ;563
000032  d1ef              BNE      |L6.20|
000034  480a              LDR      r0,|L6.96|
000036  6800              LDR      r0,[r0,#0]            ;575
000038  f0000001          AND      r0,r0,#1              ;575
00003c  b110              CBZ      r0,|L6.68|
00003e  2001              MOVS     r0,#1                 ;578
000040  4907              LDR      r1,|L6.96|
000042  6008              STR      r0,[r1,#0]            ;578
                  |L6.68|
000044  4806              LDR      r0,|L6.96|
000046  6800              LDR      r0,[r0,#0]            ;584
000048  f00000f2          AND      r0,r0,#0xf2           ;584
00004c  b118              CBZ      r0,|L6.86|
00004e  f7fffffe          BL       FLASH_SetErrorCode
000052  2001              MOVS     r0,#1                 ;590
000054  e7e7              B        |L6.38|
                  |L6.86|
000056  2000              MOVS     r0,#0                 ;594
000058  e7e5              B        |L6.38|
;;;597    
                          ENDP

00005a  0000              DCW      0x0000
                  |L6.92|
                          DCD      pFlash
                  |L6.96|
                          DCD      0x40023c0c

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;381      */
;;;382    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;383    {
;;;384      /* Prevent unused argument(s) compilation warning */
;;;385      UNUSED(ReturnValue);
;;;386      /* NOTE : This function Should not be modified, when the callback is needed,
;;;387                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;388       */ 
;;;389    }
;;;390    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;535      */
;;;536    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L8.8|
;;;537    { 
;;;538       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;539    }  
000004  4770              BX       lr
;;;540      
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;258      */
;;;259    void HAL_FLASH_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;260    {
;;;261      uint32_t addresstmp = 0U;
000002  2400              MOVS     r4,#0
;;;262      
;;;263      /* Check FLASH operation error flags */
;;;264    #if defined(FLASH_SR_RDERR) 
;;;265      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;266        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;267    #else
;;;268      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
000004  4840              LDR      r0,|L9.264|
000006  6800              LDR      r0,[r0,#0]
000008  f00000f2          AND      r0,r0,#0xf2
00000c  b1d8              CBZ      r0,|L9.70|
;;;269        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
;;;270    #endif /* FLASH_SR_RDERR */
;;;271      {
;;;272        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
00000e  483f              LDR      r0,|L9.268|
000010  7800              LDRB     r0,[r0,#0]  ; pFlash
000012  2801              CMP      r0,#1
000014  d106              BNE      |L9.36|
;;;273        {
;;;274          /*return the faulty sector*/
;;;275          addresstmp = pFlash.Sector;
000016  483d              LDR      r0,|L9.268|
000018  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;276          pFlash.Sector = 0xFFFFFFFFU;
00001a  f04f30ff          MOV      r0,#0xffffffff
00001e  493b              LDR      r1,|L9.268|
000020  60c8              STR      r0,[r1,#0xc]  ; pFlash
000022  e008              B        |L9.54|
                  |L9.36|
;;;277        }
;;;278        else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
000024  4839              LDR      r0,|L9.268|
000026  7800              LDRB     r0,[r0,#0]  ; pFlash
000028  2802              CMP      r0,#2
00002a  d102              BNE      |L9.50|
;;;279        {
;;;280          /*return the faulty bank*/
;;;281          addresstmp = pFlash.Bank;
00002c  4837              LDR      r0,|L9.268|
00002e  6904              LDR      r4,[r0,#0x10]  ; pFlash
000030  e001              B        |L9.54|
                  |L9.50|
;;;282        }
;;;283        else
;;;284        {
;;;285          /*return the faulty address*/
;;;286          addresstmp = pFlash.Address;
000032  4836              LDR      r0,|L9.268|
000034  6944              LDR      r4,[r0,#0x14]  ; pFlash
                  |L9.54|
;;;287        }
;;;288        
;;;289        /*Save the Error code*/
;;;290        FLASH_SetErrorCode();
000036  f7fffffe          BL       FLASH_SetErrorCode
;;;291        
;;;292        /* FLASH error interrupt user callback */
;;;293        HAL_FLASH_OperationErrorCallback(addresstmp);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;294        
;;;295        /*Stop the procedure ongoing*/
;;;296        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000040  2000              MOVS     r0,#0
000042  4932              LDR      r1,|L9.268|
000044  7008              STRB     r0,[r1,#0]
                  |L9.70|
;;;297      }
;;;298      
;;;299      /* Check FLASH End of Operation flag  */
;;;300      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
000046  4830              LDR      r0,|L9.264|
000048  6800              LDR      r0,[r0,#0]
00004a  f0000001          AND      r0,r0,#1
00004e  2800              CMP      r0,#0
000050  d03e              BEQ      |L9.208|
;;;301      {
;;;302        /* Clear FLASH End of Operation pending bit */
;;;303        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000052  2001              MOVS     r0,#1
000054  492c              LDR      r1,|L9.264|
000056  6008              STR      r0,[r1,#0]
;;;304        
;;;305        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
000058  482c              LDR      r0,|L9.268|
00005a  7800              LDRB     r0,[r0,#0]  ; pFlash
00005c  2801              CMP      r0,#1
00005e  d125              BNE      |L9.172|
;;;306        {
;;;307          /*Nb of sector to erased can be decreased*/
;;;308          pFlash.NbSectorsToErase--;
000060  482a              LDR      r0,|L9.268|
000062  6840              LDR      r0,[r0,#4]  ; pFlash
000064  1e40              SUBS     r0,r0,#1
000066  4929              LDR      r1,|L9.268|
000068  6048              STR      r0,[r1,#4]  ; pFlash
;;;309          
;;;310          /* Check if there are still sectors to erase*/
;;;311          if(pFlash.NbSectorsToErase != 0U)
00006a  4608              MOV      r0,r1
00006c  6840              LDR      r0,[r0,#4]  ; pFlash
00006e  b180              CBZ      r0,|L9.146|
;;;312          {
;;;313            addresstmp = pFlash.Sector;
000070  4608              MOV      r0,r1
000072  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;314            /*Indicate user which sector has been erased*/
;;;315            HAL_FLASH_EndOfOperationCallback(addresstmp);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;316            
;;;317            /*Increment sector number*/
;;;318            pFlash.Sector++;
00007a  4824              LDR      r0,|L9.268|
00007c  68c0              LDR      r0,[r0,#0xc]  ; pFlash
00007e  1c40              ADDS     r0,r0,#1
000080  4922              LDR      r1,|L9.268|
000082  60c8              STR      r0,[r1,#0xc]  ; pFlash
;;;319            addresstmp = pFlash.Sector;
000084  4608              MOV      r0,r1
000086  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;320            FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
000088  7a01              LDRB     r1,[r0,#8]  ; pFlash
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       FLASH_Erase_Sector
000090  e01e              B        |L9.208|
                  |L9.146|
;;;321          }
;;;322          else
;;;323          {
;;;324            /*No more sectors to Erase, user callback can be called.*/
;;;325            /*Reset Sector and stop Erase sectors procedure*/
;;;326            pFlash.Sector = addresstmp = 0xFFFFFFFFU;
000092  f04f30ff          MOV      r0,#0xffffffff
000096  4604              MOV      r4,r0
000098  491c              LDR      r1,|L9.268|
00009a  60c8              STR      r0,[r1,#0xc]  ; pFlash
;;;327            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00009c  2000              MOVS     r0,#0
00009e  7008              STRB     r0,[r1,#0]
;;;328            
;;;329            /* Flush the caches to be sure of the data consistency */
;;;330            FLASH_FlushCaches() ;
0000a0  f7fffffe          BL       FLASH_FlushCaches
;;;331                    
;;;332            /* FLASH EOP interrupt user callback */
;;;333            HAL_FLASH_EndOfOperationCallback(addresstmp);
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000aa  e011              B        |L9.208|
                  |L9.172|
;;;334          }
;;;335        }
;;;336        else 
;;;337        {
;;;338          if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
0000ac  4817              LDR      r0,|L9.268|
0000ae  7800              LDRB     r0,[r0,#0]  ; pFlash
0000b0  2802              CMP      r0,#2
0000b2  d106              BNE      |L9.194|
;;;339          {
;;;340            /* MassErase ended. Return the selected bank */
;;;341            /* Flush the caches to be sure of the data consistency */
;;;342            FLASH_FlushCaches() ;
0000b4  f7fffffe          BL       FLASH_FlushCaches
;;;343    
;;;344            /* FLASH EOP interrupt user callback */
;;;345            HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
0000b8  4914              LDR      r1,|L9.268|
0000ba  6908              LDR      r0,[r1,#0x10]  ; pFlash
0000bc  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000c0  e003              B        |L9.202|
                  |L9.194|
;;;346          }
;;;347          else
;;;348          {
;;;349            /*Program ended. Return the selected address*/
;;;350            /* FLASH EOP interrupt user callback */
;;;351            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
0000c2  4912              LDR      r1,|L9.268|
0000c4  6948              LDR      r0,[r1,#0x14]  ; pFlash
0000c6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L9.202|
;;;352          }
;;;353          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000ca  2000              MOVS     r0,#0
0000cc  490f              LDR      r1,|L9.268|
0000ce  7008              STRB     r0,[r1,#0]
                  |L9.208|
;;;354        }
;;;355      }
;;;356      
;;;357      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
0000d0  480e              LDR      r0,|L9.268|
0000d2  7800              LDRB     r0,[r0,#0]  ; pFlash
0000d4  b9b0              CBNZ     r0,|L9.260|
;;;358      {
;;;359        /* Operation is completed, disable the PG, SER, SNB and MER Bits */
;;;360        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
0000d6  480c              LDR      r0,|L9.264|
0000d8  1d00              ADDS     r0,r0,#4
0000da  6800              LDR      r0,[r0,#0]
0000dc  f02000ff          BIC      r0,r0,#0xff
0000e0  4909              LDR      r1,|L9.264|
0000e2  1d09              ADDS     r1,r1,#4
0000e4  6008              STR      r0,[r1,#0]
;;;361    
;;;362        /* Disable End of FLASH Operation interrupt */
;;;363        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
0000e6  4608              MOV      r0,r1
0000e8  6800              LDR      r0,[r0,#0]
0000ea  f0207080          BIC      r0,r0,#0x1000000
0000ee  6008              STR      r0,[r1,#0]
;;;364        
;;;365        /* Disable Error source interrupt */
;;;366        __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
0000f0  4608              MOV      r0,r1
0000f2  6800              LDR      r0,[r0,#0]
0000f4  f0207000          BIC      r0,r0,#0x2000000
0000f8  6008              STR      r0,[r1,#0]
;;;367        
;;;368        /* Process Unlocked */
;;;369        __HAL_UNLOCK(&pFlash);
0000fa  bf00              NOP      
0000fc  2000              MOVS     r0,#0
0000fe  4903              LDR      r1,|L9.268|
000100  7608              STRB     r0,[r1,#0x18]
000102  bf00              NOP      
                  |L9.260|
;;;370      }
;;;371    }
000104  bd10              POP      {r4,pc}
;;;372    
                          ENDP

000106  0000              DCW      0x0000
                  |L9.264|
                          DCD      0x40023c0c
                  |L9.268|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;454      */
;;;455    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L10.16|
;;;456    {
;;;457      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;458      FLASH->CR |= FLASH_CR_LOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0404000          ORR      r0,r0,#0x80000000
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;459      
;;;460      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;461    }
00000e  4770              BX       lr
;;;462    
                          ENDP

                  |L10.16|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Launch PROC
;;;498      */
;;;499    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;500    {
;;;501      /* Set the OPTSTRT bit in OPTCR register */
;;;502      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000002  4805              LDR      r0,|L11.24|
000004  7800              LDRB     r0,[r0,#0]
000006  f0400002          ORR      r0,r0,#2
00000a  4903              LDR      r1,|L11.24|
00000c  7008              STRB     r0,[r1,#0]
;;;503    
;;;504      /* Wait for last operation to be completed */
;;;505      return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
00000e  f24c3050          MOV      r0,#0xc350
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;506    }
000016  bd10              POP      {r4,pc}
;;;507    
                          ENDP

                  |L11.24|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;486      */
;;;487    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L12.16|
;;;488    {
;;;489      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;490      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L12.16|
00000a  6008              STR      r0,[r1,#0]
;;;491      
;;;492      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;493    }
00000e  4770              BX       lr
;;;494    
                          ENDP

                  |L12.16|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;466      */
;;;467    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4807              LDR      r0,|L13.32|
;;;468    {
;;;469      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b130              CBZ      r0,|L13.24|
;;;470      {
;;;471        /* Authorizes the Option Byte register programming */
;;;472        FLASH->OPTKEYR = FLASH_OPT_KEY1;
00000a  4806              LDR      r0,|L13.36|
00000c  4904              LDR      r1,|L13.32|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;473        FLASH->OPTKEYR = FLASH_OPT_KEY2;
000012  4805              LDR      r0,|L13.40|
000014  6008              STR      r0,[r1,#0]
000016  e001              B        |L13.28|
                  |L13.24|
;;;474      }
;;;475      else
;;;476      {
;;;477        return HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L13.26|
;;;478      }  
;;;479      
;;;480      return HAL_OK;  
;;;481    }
00001a  4770              BX       lr
                  |L13.28|
00001c  2000              MOVS     r0,#0                 ;480
00001e  e7fc              B        |L13.26|
;;;482    
                          ENDP

                  |L13.32|
                          DCD      0x40023c14
                  |L13.36|
                          DCD      0x08192a3b
                  |L13.40|
                          DCD      0x4c5d6e7f

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;398      */
;;;399    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;400    {
;;;401      /* Prevent unused argument(s) compilation warning */
;;;402      UNUSED(ReturnValue);
;;;403      /* NOTE : This function Should not be modified, when the callback is needed,
;;;404                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;405       */ 
;;;406    }
;;;407    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;153      */
;;;154    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;155    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;156      HAL_StatusTypeDef status = HAL_ERROR;
00000c  f04f0801          MOV      r8,#1
;;;157      
;;;158      /* Process Locked */
;;;159      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  481f              LDR      r0,|L15.144|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L15.32|
00001a  2002              MOVS     r0,#2
                  |L15.28|
;;;160      
;;;161      /* Check the parameters */
;;;162      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;163      
;;;164      /* Wait for last operation to be completed */
;;;165      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;166      
;;;167      if(status == HAL_OK)
;;;168      {
;;;169        if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;170        {
;;;171          /*Program byte (8-bit) at a specified address.*/
;;;172          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;173        }
;;;174        else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;175        {
;;;176          /*Program halfword (16-bit) at a specified address.*/
;;;177          FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;178        }
;;;179        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;180        {
;;;181          /*Program word (32-bit) at a specified address.*/
;;;182          FLASH_Program_Word(Address, (uint32_t) Data);
;;;183        }
;;;184        else
;;;185        {
;;;186          /*Program double word (64-bit) at a specified address.*/
;;;187          FLASH_Program_DoubleWord(Address, Data);
;;;188        }
;;;189        
;;;190        /* Wait for last operation to be completed */
;;;191        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;192        
;;;193        /* If the program operation is completed, disable the PG Bit */
;;;194        FLASH->CR &= (~FLASH_CR_PG);  
;;;195      }
;;;196      
;;;197      /* Process Unlocked */
;;;198      __HAL_UNLOCK(&pFlash);
;;;199      
;;;200      return status;
;;;201    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L15.32|
000020  2001              MOVS     r0,#1                 ;159
000022  491b              LDR      r1,|L15.144|
000024  7608              STRB     r0,[r1,#0x18]         ;159
000026  bf00              NOP                            ;159
000028  f24c3050          MOV      r0,#0xc350            ;165
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  4680              MOV      r8,r0                 ;165
000032  f1b80f00          CMP      r8,#0                 ;167
000036  d123              BNE      |L15.128|
000038  b926              CBNZ     r6,|L15.68|
00003a  b2e1              UXTB     r1,r4                 ;172
00003c  4638              MOV      r0,r7                 ;172
00003e  f7fffffe          BL       FLASH_Program_Byte
000042  e012              B        |L15.106|
                  |L15.68|
000044  2e01              CMP      r6,#1                 ;174
000046  d104              BNE      |L15.82|
000048  b2a1              UXTH     r1,r4                 ;177
00004a  4638              MOV      r0,r7                 ;177
00004c  f7fffffe          BL       FLASH_Program_HalfWord
000050  e00b              B        |L15.106|
                  |L15.82|
000052  2e02              CMP      r6,#2                 ;179
000054  d104              BNE      |L15.96|
000056  4621              MOV      r1,r4                 ;182
000058  4638              MOV      r0,r7                 ;182
00005a  f7fffffe          BL       FLASH_Program_Word
00005e  e004              B        |L15.106|
                  |L15.96|
000060  4622              MOV      r2,r4                 ;187
000062  462b              MOV      r3,r5                 ;187
000064  4638              MOV      r0,r7                 ;187
000066  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L15.106|
00006a  f24c3050          MOV      r0,#0xc350            ;191
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
000072  4680              MOV      r8,r0                 ;191
000074  4807              LDR      r0,|L15.148|
000076  6800              LDR      r0,[r0,#0]            ;194
000078  f0200001          BIC      r0,r0,#1              ;194
00007c  4905              LDR      r1,|L15.148|
00007e  6008              STR      r0,[r1,#0]            ;194
                  |L15.128|
000080  bf00              NOP                            ;198
000082  2000              MOVS     r0,#0                 ;198
000084  4902              LDR      r1,|L15.144|
000086  7608              STRB     r0,[r1,#0x18]         ;198
000088  bf00              NOP                            ;198
00008a  4640              MOV      r0,r8                 ;200
00008c  e7c6              B        |L15.28|
;;;202    
                          ENDP

00008e  0000              DCW      0x0000
                  |L15.144|
                          DCD      pFlash
                  |L15.148|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;211      */
;;;212    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;213    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;214      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;215      
;;;216      /* Process Locked */
;;;217      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  481b              LDR      r0,|L16.128|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L16.32|
00001a  2002              MOVS     r0,#2
                  |L16.28|
;;;218    
;;;219      /* Check the parameters */
;;;220      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;221    
;;;222      /* Enable End of FLASH Operation interrupt */
;;;223      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
;;;224      
;;;225      /* Enable Error source interrupt */
;;;226      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
;;;227    
;;;228      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
;;;229      pFlash.Address = Address;
;;;230    
;;;231      if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;232      {
;;;233        /*Program byte (8-bit) at a specified address.*/
;;;234          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;235      }
;;;236      else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;237      {
;;;238        /*Program halfword (16-bit) at a specified address.*/
;;;239        FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;240      }
;;;241      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;242      {
;;;243        /*Program word (32-bit) at a specified address.*/
;;;244        FLASH_Program_Word(Address, (uint32_t) Data);
;;;245      }
;;;246      else
;;;247      {
;;;248        /*Program double word (64-bit) at a specified address.*/
;;;249        FLASH_Program_DoubleWord(Address, Data);
;;;250      }
;;;251    
;;;252      return status;
;;;253    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L16.32|
000020  2001              MOVS     r0,#1                 ;217
000022  4917              LDR      r1,|L16.128|
000024  7608              STRB     r0,[r1,#0x18]         ;217
000026  bf00              NOP                            ;217
000028  4816              LDR      r0,|L16.132|
00002a  6800              LDR      r0,[r0,#0]            ;223
00002c  f0407080          ORR      r0,r0,#0x1000000      ;223
000030  4914              LDR      r1,|L16.132|
000032  6008              STR      r0,[r1,#0]            ;223
000034  4608              MOV      r0,r1                 ;226
000036  6800              LDR      r0,[r0,#0]            ;226
000038  f0407000          ORR      r0,r0,#0x2000000      ;226
00003c  6008              STR      r0,[r1,#0]            ;226
00003e  2003              MOVS     r0,#3                 ;228
000040  490f              LDR      r1,|L16.128|
000042  7008              STRB     r0,[r1,#0]            ;228
000044  4608              MOV      r0,r1                 ;229
000046  6147              STR      r7,[r0,#0x14]         ;229  ; pFlash
000048  b926              CBNZ     r6,|L16.84|
00004a  b2e1              UXTB     r1,r4                 ;234
00004c  4638              MOV      r0,r7                 ;234
00004e  f7fffffe          BL       FLASH_Program_Byte
000052  e012              B        |L16.122|
                  |L16.84|
000054  2e01              CMP      r6,#1                 ;236
000056  d104              BNE      |L16.98|
000058  b2a1              UXTH     r1,r4                 ;239
00005a  4638              MOV      r0,r7                 ;239
00005c  f7fffffe          BL       FLASH_Program_HalfWord
000060  e00b              B        |L16.122|
                  |L16.98|
000062  2e02              CMP      r6,#2                 ;241
000064  d104              BNE      |L16.112|
000066  4621              MOV      r1,r4                 ;244
000068  4638              MOV      r0,r7                 ;244
00006a  f7fffffe          BL       FLASH_Program_Word
00006e  e004              B        |L16.122|
                  |L16.112|
000070  4622              MOV      r2,r4                 ;249
000072  462b              MOV      r3,r5                 ;249
000074  4638              MOV      r0,r7                 ;249
000076  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L16.122|
00007a  4640              MOV      r0,r8                 ;252
00007c  e7ce              B        |L16.28|
;;;254    
                          ENDP

00007e  0000              DCW      0x0000
                  |L16.128|
                          DCD      pFlash
                  |L16.132|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;430      */
;;;431    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  2000              MOVS     r0,#0
;;;432    {
;;;433      HAL_StatusTypeDef status = HAL_OK;
;;;434    
;;;435      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000002  4909              LDR      r1,|L17.40|
000004  6809              LDR      r1,[r1,#0]
000006  f0014100          AND      r1,r1,#0x80000000
00000a  b159              CBZ      r1,|L17.36|
;;;436      {
;;;437        /* Authorize the FLASH Registers access */
;;;438        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000c  4907              LDR      r1,|L17.44|
00000e  4a06              LDR      r2,|L17.40|
000010  3a0c              SUBS     r2,r2,#0xc
000012  6011              STR      r1,[r2,#0]
;;;439        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
000014  4906              LDR      r1,|L17.48|
000016  6011              STR      r1,[r2,#0]
;;;440    
;;;441        /* Verify Flash is unlocked */
;;;442        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000018  4903              LDR      r1,|L17.40|
00001a  6809              LDR      r1,[r1,#0]
00001c  f0014100          AND      r1,r1,#0x80000000
000020  b101              CBZ      r1,|L17.36|
;;;443        {
;;;444          status = HAL_ERROR;
000022  2001              MOVS     r0,#1
                  |L17.36|
;;;445        }
;;;446      }
;;;447    
;;;448      return status;
;;;449    }
000024  4770              BX       lr
;;;450    
                          ENDP

000026  0000              DCW      0x0000
                  |L17.40|
                          DCD      0x40023c10
                  |L17.44|
                          DCD      0x45670123
                  |L17.48|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH|
#line 478
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX|
#line 665
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
