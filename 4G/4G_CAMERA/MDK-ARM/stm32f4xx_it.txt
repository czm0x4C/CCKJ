; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_it.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_it.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_it.crf ../Core/Src/stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;120      */
;;;121    void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;122    {
;;;123      /* USER CODE BEGIN BusFault_IRQn 0 */
;;;124    
;;;125      /* USER CODE END BusFault_IRQn 0 */
;;;126      while (1)
000002  e7fe              B        |L1.2|
;;;127      {
;;;128        /* USER CODE BEGIN W1_BusFault_IRQn 0 */
;;;129        /* USER CODE END W1_BusFault_IRQn 0 */
;;;130      }
;;;131    }
;;;132    
                          ENDP


                          AREA ||i.DCMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  DCMI_IRQHandler PROC
;;;254      */
;;;255    void DCMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;256    {
;;;257      /* USER CODE BEGIN DCMI_IRQn 0 */
;;;258    
;;;259      /* USER CODE END DCMI_IRQn 0 */
;;;260      HAL_DCMI_IRQHandler(&hdcmi);
000002  4802              LDR      r0,|L2.12|
000004  f7fffffe          BL       HAL_DCMI_IRQHandler
;;;261      /* USER CODE BEGIN DCMI_IRQn 1 */
;;;262    
;;;263      /* USER CODE END DCMI_IRQn 1 */
;;;264    }
000008  bd10              POP      {r4,pc}
;;;265    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      hdcmi

                          AREA ||i.DCMI_Start||, CODE, READONLY, ALIGN=2

                  DCMI_Start PROC
;;;266    /* USER CODE BEGIN 1 */
;;;267    void DCMI_Start(void)
000000  4807              LDR      r0,|L3.32|
;;;268    {  
;;;269      //	LCD_SetCursor(0,0);  
;;;270    	//LCD_WriteRAM_Prepare();					//开始写入GRAM
;;;271    	__HAL_DMA_ENABLE(&hdma_dcmi); 	//使能DMA
000002  6800              LDR      r0,[r0,#0]  ; hdma_dcmi
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  4905              LDR      r1,|L3.32|
00000c  6809              LDR      r1,[r1,#0]  ; hdma_dcmi
00000e  6008              STR      r0,[r1,#0]
;;;272    	DCMI->CR|=DCMI_CR_CAPTURE;    			//DCMI捕获使能 
000010  4804              LDR      r0,|L3.36|
000012  6800              LDR      r0,[r0,#0]
000014  f0400001          ORR      r0,r0,#1
000018  4902              LDR      r1,|L3.36|
00001a  6008              STR      r0,[r1,#0]
;;;273    }
00001c  4770              BX       lr
;;;274    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      hdma_dcmi
                  |L3.36|
                          DCD      0x50050000

                          AREA ||i.DCMI_Stop||, CODE, READONLY, ALIGN=2

                  DCMI_Stop PROC
;;;275    //DCMI,关闭传输
;;;276    void DCMI_Stop(void)
000000  480a              LDR      r0,|L4.44|
;;;277    {
;;;278    	DCMI->CR&=~(DCMI_CR_CAPTURE);  			//关闭捕获  
000002  6800              LDR      r0,[r0,#0]
000004  f0200001          BIC      r0,r0,#1
000008  4908              LDR      r1,|L4.44|
00000a  6008              STR      r0,[r1,#0]
;;;279    	while(DCMI->CR&0X01);					//等待传输结束 
00000c  bf00              NOP      
                  |L4.14|
00000e  4807              LDR      r0,|L4.44|
000010  6800              LDR      r0,[r0,#0]
000012  f0000001          AND      r0,r0,#1
000016  2800              CMP      r0,#0
000018  d1f9              BNE      |L4.14|
;;;280    	__HAL_DMA_DISABLE(&hdma_dcmi);	//关闭DMA 	
00001a  4805              LDR      r0,|L4.48|
00001c  6800              LDR      r0,[r0,#0]  ; hdma_dcmi
00001e  6800              LDR      r0,[r0,#0]
000020  f0200001          BIC      r0,r0,#1
000024  4902              LDR      r1,|L4.48|
000026  6809              LDR      r1,[r1,#0]  ; hdma_dcmi
000028  6008              STR      r0,[r1,#0]
;;;281    } 
00002a  4770              BX       lr
;;;282    
                          ENDP

                  |L4.44|
                          DCD      0x50050000
                  |L4.48|
                          DCD      hdma_dcmi

                          AREA ||i.DMA1_Stream0_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Stream0_IRQHandler PROC
;;;170      */
;;;171    void DMA1_Stream0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;172    {
;;;173      /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
;;;174    
;;;175      /* USER CODE END DMA1_Stream0_IRQn 0 */
;;;176      HAL_DMA_IRQHandler(&hdma_tim4_ch1);
000002  4802              LDR      r0,|L5.12|
000004  f7fffffe          BL       HAL_DMA_IRQHandler
;;;177      /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
;;;178    
;;;179      /* USER CODE END DMA1_Stream0_IRQn 1 */
;;;180    }
000008  bd10              POP      {r4,pc}
;;;181    
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      hdma_tim4_ch1

                          AREA ||i.DMA2_Stream1_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream1_IRQHandler PROC
;;;226      */
;;;227    void DMA2_Stream1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;228    {
;;;229      /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
;;;230    
;;;231      /* USER CODE END DMA2_Stream1_IRQn 0 */
;;;232      HAL_DMA_IRQHandler(&hdma_dcmi);
000002  4802              LDR      r0,|L6.12|
000004  f7fffffe          BL       HAL_DMA_IRQHandler
;;;233      /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
;;;234    
;;;235      /* USER CODE END DMA2_Stream1_IRQn 1 */
;;;236    }
000008  bd10              POP      {r4,pc}
;;;237    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      hdma_dcmi

                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;150      */
;;;151    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;152    {
;;;153      /* USER CODE BEGIN DebugMonitor_IRQn 0 */
;;;154    
;;;155      /* USER CODE END DebugMonitor_IRQn 0 */
;;;156      /* USER CODE BEGIN DebugMonitor_IRQn 1 */
;;;157    
;;;158      /* USER CODE END DebugMonitor_IRQn 1 */
;;;159    }
;;;160    
                          ENDP


                          AREA ||i.HAL_DCMI_FrameEventCallback||, CODE, READONLY, ALIGN=1

                  HAL_DCMI_FrameEventCallback PROC
;;;299    
;;;300    void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
000000  b500              PUSH     {lr}
;;;301    {
000002  4602              MOV      r2,r0
;;;302    	__HAL_DCMI_CLEAR_FLAG(hdcmi,DCMI_FLAG_FRAMERI);//清除帧中断
000004  2001              MOVS     r0,#1
000006  6811              LDR      r1,[r2,#0]
000008  6148              STR      r0,[r1,#0x14]
;;;303    
;;;304    		jpeg_data_process();//jpeg数据处理
00000a  f7fffffe          BL       jpeg_data_process
;;;305        //重新使能帧中断,因为HAL_DCMI_IRQHandler()函数会关闭帧中断
;;;306        __HAL_DCMI_ENABLE_IT(hdcmi,DCMI_IT_FRAME);
00000e  6810              LDR      r0,[r2,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  f0400001          ORR      r0,r0,#1
000016  6811              LDR      r1,[r2,#0]
000018  60c8              STR      r0,[r1,#0xc]
;;;307    }
00001a  bd00              POP      {pc}
;;;308    /* USER CODE END 1 */
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
;;;90       */
;;;91     void HardFault_Handler(void)
000000  bf00              NOP      
                  |L9.2|
;;;92     {
;;;93       /* USER CODE BEGIN HardFault_IRQn 0 */
;;;94     
;;;95       /* USER CODE END HardFault_IRQn 0 */
;;;96       while (1)
000002  e7fe              B        |L9.2|
;;;97       {
;;;98         /* USER CODE BEGIN W1_HardFault_IRQn 0 */
;;;99         /* USER CODE END W1_HardFault_IRQn 0 */
;;;100      }
;;;101    }
;;;102    
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;105      */
;;;106    void MemManage_Handler(void)
000000  bf00              NOP      
                  |L10.2|
;;;107    {
;;;108      /* USER CODE BEGIN MemoryManagement_IRQn 0 */
;;;109    
;;;110      /* USER CODE END MemoryManagement_IRQn 0 */
;;;111      while (1)
000002  e7fe              B        |L10.2|
;;;112      {
;;;113        /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
;;;114        /* USER CODE END W1_MemoryManagement_IRQn 0 */
;;;115      }
;;;116    }
;;;117    
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;75       */
;;;76     void NMI_Handler(void)
000000  bf00              NOP      
                  |L11.2|
;;;77     {
;;;78       /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
;;;79     
;;;80       /* USER CODE END NonMaskableInt_IRQn 0 */
;;;81       /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
;;;82       while (1)
000002  e7fe              B        |L11.2|
;;;83       {
;;;84       }
;;;85       /* USER CODE END NonMaskableInt_IRQn 1 */
;;;86     }
;;;87     
                          ENDP


                          AREA ||i.OTG_HS_IRQHandler||, CODE, READONLY, ALIGN=2

                  OTG_HS_IRQHandler PROC
;;;240      */
;;;241    void OTG_HS_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;242    {
;;;243      /* USER CODE BEGIN OTG_HS_IRQn 0 */
;;;244    
;;;245      /* USER CODE END OTG_HS_IRQn 0 */
;;;246      HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       HAL_PCD_IRQHandler
;;;247      /* USER CODE BEGIN OTG_HS_IRQn 1 */
;;;248    
;;;249      /* USER CODE END OTG_HS_IRQn 1 */
;;;250    }
000008  bd10              POP      {r4,pc}
;;;251    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      hpcd_USB_OTG_HS

                          AREA ||i.TIM8_TRG_COM_TIM14_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM8_TRG_COM_TIM14_IRQHandler PROC
;;;212      */
;;;213    void TIM8_TRG_COM_TIM14_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;214    {
;;;215      /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */
;;;216    
;;;217      /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
;;;218      HAL_TIM_IRQHandler(&htim14);
000002  4802              LDR      r0,|L13.12|
000004  f7fffffe          BL       HAL_TIM_IRQHandler
;;;219      /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */
;;;220    
;;;221      /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
;;;222    }
000008  bd10              POP      {r4,pc}
;;;223    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      htim14

                          AREA ||i.TIM8_UP_TIM13_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM8_UP_TIM13_IRQHandler PROC
;;;198      */
;;;199    void TIM8_UP_TIM13_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;200    {
;;;201      /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
;;;202    
;;;203      /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
;;;204      HAL_TIM_IRQHandler(&htim13);
000002  4802              LDR      r0,|L14.12|
000004  f7fffffe          BL       HAL_TIM_IRQHandler
;;;205      /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
;;;206    
;;;207      /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
;;;208    }
000008  bd10              POP      {r4,pc}
;;;209    
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      htim13

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;184      */
;;;185    void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;186    {
;;;187      /* USER CODE BEGIN USART1_IRQn 0 */
;;;188    
;;;189      /* USER CODE END USART1_IRQn 0 */
;;;190      HAL_UART_IRQHandler(&huart1);
000002  4802              LDR      r0,|L15.12|
000004  f7fffffe          BL       HAL_UART_IRQHandler
;;;191      /* USER CODE BEGIN USART1_IRQn 1 */
;;;192    
;;;193      /* USER CODE END USART1_IRQn 1 */
;;;194    }
000008  bd10              POP      {r4,pc}
;;;195    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      huart1

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;135      */
;;;136    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L16.2|
;;;137    {
;;;138      /* USER CODE BEGIN UsageFault_IRQn 0 */
;;;139    
;;;140      /* USER CODE END UsageFault_IRQn 0 */
;;;141      while (1)
000002  e7fe              B        |L16.2|
;;;142      {
;;;143        /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
;;;144        /* USER CODE END W1_UsageFault_IRQn 0 */
;;;145      }
;;;146    }
;;;147    
                          ENDP


                          AREA ||i.jpeg_data_process||, CODE, READONLY, ALIGN=2

                  jpeg_data_process PROC
;;;282    
;;;283    void jpeg_data_process(void)
000000  4818              LDR      r0,|L17.100|
;;;284    {
;;;285    	if(jpeg_data_ok==0)	//jpeg数据还未采集完?
000002  7800              LDRB     r0,[r0,#0]  ; jpeg_data_ok
000004  b9c0              CBNZ     r0,|L17.56|
;;;286    	{
;;;287    		__HAL_DMA_DISABLE(&hdma_dcmi);//关闭DMA
000006  4818              LDR      r0,|L17.104|
000008  6800              LDR      r0,[r0,#0]  ; hdma_dcmi
00000a  6800              LDR      r0,[r0,#0]
00000c  f0200001          BIC      r0,r0,#1
000010  4915              LDR      r1,|L17.104|
000012  6809              LDR      r1,[r1,#0]  ; hdma_dcmi
000014  6008              STR      r0,[r1,#0]
;;;288    		while(DMA2_Stream1->CR&0X01);	//等待DMA2_Stream1可配置   
000016  bf00              NOP      
                  |L17.24|
000018  4814              LDR      r0,|L17.108|
00001a  6800              LDR      r0,[r0,#0]
00001c  f0000001          AND      r0,r0,#1
000020  2800              CMP      r0,#0
000022  d1f9              BNE      |L17.24|
;;;289    		jpeg_data_len=PictureSize-__HAL_DMA_GET_COUNTER(&hdma_dcmi);//得到剩余数据长度
000024  4810              LDR      r0,|L17.104|
000026  6800              LDR      r0,[r0,#0]  ; hdma_dcmi
000028  6840              LDR      r0,[r0,#4]
00002a  f5c040b0          RSB      r0,r0,#0x5800
00002e  4910              LDR      r1,|L17.112|
000030  6008              STR      r0,[r1,#0]  ; jpeg_data_len
;;;290    		jpeg_data_ok=1; 				//标记JPEG数据采集完按成,等待其他函数处理
000032  2001              MOVS     r0,#1
000034  490b              LDR      r1,|L17.100|
000036  7008              STRB     r0,[r1,#0]
                  |L17.56|
;;;291    	}
;;;292    	if(jpeg_data_ok==2)	//上一次的jpeg数据已经被处理了
000038  480a              LDR      r0,|L17.100|
00003a  7800              LDRB     r0,[r0,#0]  ; jpeg_data_ok
00003c  2802              CMP      r0,#2
00003e  d10f              BNE      |L17.96|
;;;293    	{
;;;294    		__HAL_DMA_SET_COUNTER(&hdma_dcmi,PictureSize);//传输长度为jpeg_buf_size*4字节	
000040  f44f40b0          MOV      r0,#0x5800
000044  4908              LDR      r1,|L17.104|
000046  6809              LDR      r1,[r1,#0]  ; hdma_dcmi
000048  6048              STR      r0,[r1,#4]
;;;295    		__HAL_DMA_ENABLE(&hdma_dcmi); //打开DMA
00004a  4807              LDR      r0,|L17.104|
00004c  6800              LDR      r0,[r0,#0]  ; hdma_dcmi
00004e  6800              LDR      r0,[r0,#0]
000050  f0400001          ORR      r0,r0,#1
000054  4904              LDR      r1,|L17.104|
000056  6809              LDR      r1,[r1,#0]  ; hdma_dcmi
000058  6008              STR      r0,[r1,#0]
;;;296    		jpeg_data_ok=0;						//标记数据未采集
00005a  2000              MOVS     r0,#0
00005c  4901              LDR      r1,|L17.100|
00005e  7008              STRB     r0,[r1,#0]
                  |L17.96|
;;;297    	}
;;;298    } 
000060  4770              BX       lr
;;;299    
                          ENDP

000062  0000              DCW      0x0000
                  |L17.100|
                          DCD      jpeg_data_ok
                  |L17.104|
                          DCD      hdma_dcmi
                  |L17.108|
                          DCD      0x40026428
                  |L17.112|
                          DCD      jpeg_data_len

;*** Start embedded assembler ***

#line 1 "../Core/Src/stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___14_stm32f4xx_it_c_bb8ca80c____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH|
#line 478
|__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____RRX|
#line 665
|__asm___14_stm32f4xx_it_c_bb8ca80c____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
