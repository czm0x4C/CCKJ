; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_pwr.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_pwr.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_pwr.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;265      */
;;;266    void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  492a              LDR      r1,|L1.172|
;;;267    {
;;;268      /* Check the parameters */
;;;269      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;270      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;271      
;;;272      /* Set PLS[7:5] bits according to PVDLevel value */
;;;273      MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
000002  6809              LDR      r1,[r1,#0]
000004  f02101e0          BIC      r1,r1,#0xe0
000008  6802              LDR      r2,[r0,#0]
00000a  4311              ORRS     r1,r1,r2
00000c  4a27              LDR      r2,|L1.172|
00000e  6011              STR      r1,[r2,#0]
;;;274      
;;;275      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;276      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4927              LDR      r1,|L1.176|
000012  6809              LDR      r1,[r1,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  4a25              LDR      r2,|L1.176|
00001a  6011              STR      r1,[r2,#0]
;;;277      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001c  1f11              SUBS     r1,r2,#4
00001e  6809              LDR      r1,[r1,#0]
000020  f4213180          BIC      r1,r1,#0x10000
000024  1f12              SUBS     r2,r2,#4
000026  6011              STR      r1,[r2,#0]
;;;278      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000028  4921              LDR      r1,|L1.176|
00002a  1d09              ADDS     r1,r1,#4
00002c  6809              LDR      r1,[r1,#0]
00002e  f4213180          BIC      r1,r1,#0x10000
000032  4a1f              LDR      r2,|L1.176|
000034  1d12              ADDS     r2,r2,#4
000036  6011              STR      r1,[r2,#0]
;;;279      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
000038  1d11              ADDS     r1,r2,#4
00003a  6809              LDR      r1,[r1,#0]
00003c  f4213180          BIC      r1,r1,#0x10000
000040  1d12              ADDS     r2,r2,#4
000042  6011              STR      r1,[r2,#0]
;;;280    
;;;281      /* Configure interrupt mode */
;;;282      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
000044  6841              LDR      r1,[r0,#4]
000046  f4013180          AND      r1,r1,#0x10000
00004a  f5b13f80          CMP      r1,#0x10000
00004e  d107              BNE      |L1.96|
;;;283      {
;;;284        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000050  4917              LDR      r1,|L1.176|
000052  1f09              SUBS     r1,r1,#4
000054  6809              LDR      r1,[r1,#0]
000056  f4413180          ORR      r1,r1,#0x10000
00005a  4a15              LDR      r2,|L1.176|
00005c  1f12              SUBS     r2,r2,#4
00005e  6011              STR      r1,[r2,#0]
                  |L1.96|
;;;285      }
;;;286      
;;;287      /* Configure event mode */
;;;288      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000060  6841              LDR      r1,[r0,#4]
000062  f4013100          AND      r1,r1,#0x20000
000066  f5b13f00          CMP      r1,#0x20000
00006a  d105              BNE      |L1.120|
;;;289      {
;;;290        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00006c  4910              LDR      r1,|L1.176|
00006e  6809              LDR      r1,[r1,#0]
000070  f4413180          ORR      r1,r1,#0x10000
000074  4a0e              LDR      r2,|L1.176|
000076  6011              STR      r1,[r2,#0]
                  |L1.120|
;;;291      }
;;;292      
;;;293      /* Configure the edge */
;;;294      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000078  7901              LDRB     r1,[r0,#4]
00007a  f0010101          AND      r1,r1,#1
00007e  b139              CBZ      r1,|L1.144|
;;;295      {
;;;296        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
000080  490b              LDR      r1,|L1.176|
000082  1d09              ADDS     r1,r1,#4
000084  6809              LDR      r1,[r1,#0]
000086  f4413180          ORR      r1,r1,#0x10000
00008a  4a09              LDR      r2,|L1.176|
00008c  1d12              ADDS     r2,r2,#4
00008e  6011              STR      r1,[r2,#0]
                  |L1.144|
;;;297      }
;;;298      
;;;299      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000090  7901              LDRB     r1,[r0,#4]
000092  f0010102          AND      r1,r1,#2
000096  2902              CMP      r1,#2
000098  d107              BNE      |L1.170|
;;;300      {
;;;301        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00009a  4905              LDR      r1,|L1.176|
00009c  3108              ADDS     r1,r1,#8
00009e  6809              LDR      r1,[r1,#0]
0000a0  f4413180          ORR      r1,r1,#0x10000
0000a4  4a02              LDR      r2,|L1.176|
0000a6  3208              ADDS     r2,r2,#8
0000a8  6011              STR      r1,[r2,#0]
                  |L1.170|
;;;302      }
;;;303    }
0000aa  4770              BX       lr
;;;304    
                          ENDP

                  |L1.172|
                          DCD      0x40007000
                  |L1.176|
                          DCD      0x40013c04

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;89       */
;;;90     void HAL_PWR_DeInit(void)
000000  4805              LDR      r0,|L2.24|
;;;91     {
;;;92       __HAL_RCC_PWR_FORCE_RESET();
000002  6800              LDR      r0,[r0,#0]
000004  f0405080          ORR      r0,r0,#0x10000000
000008  4903              LDR      r1,|L2.24|
00000a  6008              STR      r0,[r1,#0]
;;;93       __HAL_RCC_PWR_RELEASE_RESET();
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  f0205080          BIC      r0,r0,#0x10000000
000014  6008              STR      r0,[r1,#0]
;;;94     }
000016  4770              BX       lr
;;;95     
                          ENDP

                  |L2.24|
                          DCD      0x40023820

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;127      */
;;;128    void HAL_PWR_DisableBkUpAccess(void)
000000  b508              PUSH     {r3,lr}
;;;129    {
;;;130      __IO uint32_t dummyread;
;;;131      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  4903              LDR      r1,|L3.20|
000006  6208              STR      r0,[r1,#0x20]
;;;132      dummyread = PWR->CR;
000008  4803              LDR      r0,|L3.24|
00000a  6800              LDR      r0,[r0,#0]
00000c  9000              STR      r0,[sp,#0]
;;;133      UNUSED(dummyread);
00000e  bf00              NOP      
;;;134    }
000010  bd08              POP      {r3,pc}
;;;135    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x420e0000
                  |L3.24|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;317      */
;;;318    void HAL_PWR_DisablePVD(void)
000000  2000              MOVS     r0,#0
;;;319    {
;;;320      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L4.8|
000004  6108              STR      r0,[r1,#0x10]
;;;321    }
000006  4770              BX       lr
;;;322    
                          ENDP

                  |L4.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;549      */
;;;550    void HAL_PWR_DisableSEVOnPend(void)
000000  4803              LDR      r0,|L5.16|
;;;551    {
;;;552      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;553      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0200010          BIC      r0,r0,#0x10
000008  4901              LDR      r1,|L5.16|
00000a  6008              STR      r0,[r1,#0]
;;;554    }
00000c  4770              BX       lr
;;;555    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;525      */
;;;526    void HAL_PWR_DisableSleepOnExit(void)
000000  4803              LDR      r0,|L6.16|
;;;527    {
;;;528      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;529      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0200002          BIC      r0,r0,#2
000008  4901              LDR      r1,|L6.16|
00000a  6008              STR      r0,[r1,#0]
;;;530    }
00000c  4770              BX       lr
;;;531    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;349      */
;;;350    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L7.12|
;;;351    {
;;;352      /* Check the parameter */
;;;353      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
;;;354    
;;;355      /* Disable the wake up pin */
;;;356      CLEAR_BIT(PWR->CSR, WakeUpPinx);
000002  6849              LDR      r1,[r1,#4]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L7.12|
000008  6051              STR      r1,[r2,#4]
;;;357    }
00000a  4770              BX       lr
;;;358      
                          ENDP

                  |L7.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;107      */
;;;108    void HAL_PWR_EnableBkUpAccess(void)
000000  b508              PUSH     {r3,lr}
;;;109    {
;;;110      __IO uint32_t dummyread;
;;;111      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  4903              LDR      r1,|L8.20|
000006  6208              STR      r0,[r1,#0x20]
;;;112      dummyread = PWR->CR;
000008  4803              LDR      r0,|L8.24|
00000a  6800              LDR      r0,[r0,#0]
00000c  9000              STR      r0,[sp,#0]
;;;113      UNUSED(dummyread);
00000e  bf00              NOP      
;;;114    }
000010  bd08              POP      {r3,pc}
;;;115    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x420e0000
                  |L8.24|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;308      */
;;;309    void HAL_PWR_EnablePVD(void)
000000  2001              MOVS     r0,#1
;;;310    {
;;;311      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L9.8|
000004  6108              STR      r0,[r1,#0x10]
;;;312    }
000006  4770              BX       lr
;;;313    
                          ENDP

                  |L9.8|
                          DCD      0x420e0000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;537      */
;;;538    void HAL_PWR_EnableSEVOnPend(void)
000000  4803              LDR      r0,|L10.16|
;;;539    {
;;;540      /* Set SEVONPEND bit of Cortex System Control Register */
;;;541      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;542    }
00000c  4770              BX       lr
;;;543    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;513      */
;;;514    void HAL_PWR_EnableSleepOnExit(void)
000000  4803              LDR      r0,|L11.16|
;;;515    {
;;;516      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;517      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6800              LDR      r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L11.16|
00000a  6008              STR      r0,[r1,#0]
;;;518    }
00000c  4770              BX       lr
;;;519    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;331      */
;;;332    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
000000  4902              LDR      r1,|L12.12|
;;;333    {
;;;334      /* Check the parameter */
;;;335      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;336    
;;;337      /* Enable the wake up pin */
;;;338      SET_BIT(PWR->CSR, WakeUpPinx);
000002  6849              LDR      r1,[r1,#4]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L12.12|
000008  6051              STR      r1,[r2,#4]
;;;339    }
00000a  4770              BX       lr
;;;340    
                          ENDP

                  |L12.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;378      */
;;;379    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  4a06              LDR      r2,|L13.28|
;;;380    {
;;;381      /* Check the parameters */
;;;382      assert_param(IS_PWR_REGULATOR(Regulator));
;;;383      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;384    
;;;385      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;386      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000002  6812              LDR      r2,[r2,#0]
000004  f0220204          BIC      r2,r2,#4
000008  4b04              LDR      r3,|L13.28|
00000a  601a              STR      r2,[r3,#0]
;;;387    
;;;388      /* Select SLEEP mode entry -------------------------------------------------*/
;;;389      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
00000c  2901              CMP      r1,#1
00000e  d101              BNE      |L13.20|
;;;390      {   
;;;391        /* Request Wait For Interrupt */
;;;392        __WFI();
000010  bf30              WFI      
000012  e002              B        |L13.26|
                  |L13.20|
;;;393      }
;;;394      else
;;;395      {
;;;396        /* Request Wait For Event */
;;;397        __SEV();
000014  bf40              SEV      
;;;398        __WFE();
000016  bf20              WFE      
;;;399        __WFE();
000018  bf20              WFE      
                  |L13.26|
;;;400      }
;;;401    }
00001a  4770              BX       lr
;;;402    
                          ENDP

                  |L13.28|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;460      */
;;;461    void HAL_PWR_EnterSTANDBYMode(void)
000000  4807              LDR      r0,|L14.32|
;;;462    {
;;;463      /* Select Standby mode */
;;;464      SET_BIT(PWR->CR, PWR_CR_PDDS);
000002  6800              LDR      r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4905              LDR      r1,|L14.32|
00000a  6008              STR      r0,[r1,#0]
;;;465    
;;;466      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;467      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000c  4805              LDR      r0,|L14.36|
00000e  6800              LDR      r0,[r0,#0]
000010  f0400004          ORR      r0,r0,#4
000014  4903              LDR      r1,|L14.36|
000016  6008              STR      r0,[r1,#0]
;;;468      
;;;469      /* This option is used to ensure that store operations are completed */
;;;470    #if defined ( __CC_ARM)
;;;471      __force_stores();
000018  bf00              NOP      
00001a  bf00              NOP      
;;;472    #endif
;;;473      /* Request Wait For Interrupt */
;;;474      __WFI();
00001c  bf30              WFI      
;;;475    }
00001e  4770              BX       lr
;;;476    
                          ENDP

                  |L14.32|
                          DCD      0x40007000
                  |L14.36|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTOPMode PROC
;;;421      */
;;;422    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  4a0d              LDR      r2,|L15.56|
;;;423    {
;;;424      /* Check the parameters */
;;;425      assert_param(IS_PWR_REGULATOR(Regulator));
;;;426      assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
;;;427      
;;;428      /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
;;;429      MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
000002  6812              LDR      r2,[r2,#0]
000004  f0220203          BIC      r2,r2,#3
000008  4302              ORRS     r2,r2,r0
00000a  4b0b              LDR      r3,|L15.56|
00000c  601a              STR      r2,[r3,#0]
;;;430      
;;;431      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;432      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000e  4a0b              LDR      r2,|L15.60|
000010  6812              LDR      r2,[r2,#0]
000012  f0420204          ORR      r2,r2,#4
000016  4b09              LDR      r3,|L15.60|
000018  601a              STR      r2,[r3,#0]
;;;433      
;;;434      /* Select Stop mode entry --------------------------------------------------*/
;;;435      if(STOPEntry == PWR_STOPENTRY_WFI)
00001a  2901              CMP      r1,#1
00001c  d101              BNE      |L15.34|
;;;436      {   
;;;437        /* Request Wait For Interrupt */
;;;438        __WFI();
00001e  bf30              WFI      
000020  e002              B        |L15.40|
                  |L15.34|
;;;439      }
;;;440      else
;;;441      {
;;;442        /* Request Wait For Event */
;;;443        __SEV();
000022  bf40              SEV      
;;;444        __WFE();
000024  bf20              WFE      
;;;445        __WFE();
000026  bf20              WFE      
                  |L15.40|
;;;446      }
;;;447      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;448      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
000028  4a04              LDR      r2,|L15.60|
00002a  6812              LDR      r2,[r2,#0]
00002c  f0220204          BIC      r2,r2,#4
000030  4b02              LDR      r3,|L15.60|
000032  601a              STR      r2,[r3,#0]
;;;449    }
000034  4770              BX       lr
;;;450    
                          ENDP

000036  0000              DCW      0x0000
                  |L15.56|
                          DCD      0x40007000
                  |L15.60|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;498      */
;;;499    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;500    {
;;;501      /* NOTE : This function Should not be modified, when the callback is needed,
;;;502                the HAL_PWR_PVDCallback could be implemented in the user file
;;;503       */ 
;;;504    }
;;;505    
                          ENDP


                          AREA ||i.HAL_PWR_PVD_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_PWR_PVD_IRQHandler PROC
;;;481      */
;;;482    void HAL_PWR_PVD_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;483    {
;;;484      /* Check PWR Exti flag */
;;;485      if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
000002  4806              LDR      r0,|L17.28|
000004  6800              LDR      r0,[r0,#0]
000006  f4003080          AND      r0,r0,#0x10000
00000a  b128              CBZ      r0,|L17.24|
;;;486      {
;;;487        /* PWR PVD interrupt user callback */
;;;488        HAL_PWR_PVDCallback();
00000c  f7fffffe          BL       HAL_PWR_PVDCallback
;;;489        
;;;490        /* Clear PWR Exti pending bit */
;;;491        __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
000010  f44f3080          MOV      r0,#0x10000
000014  4901              LDR      r1,|L17.28|
000016  6008              STR      r0,[r1,#0]
                  |L17.24|
;;;492      }
;;;493    }
000018  bd10              POP      {r4,pc}
;;;494    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
                          DCD      0x40013c14

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REVSH|
#line 478
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____RRX|
#line 665
|__asm___19_stm32f4xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
