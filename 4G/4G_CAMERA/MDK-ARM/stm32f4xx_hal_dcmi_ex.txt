; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\stm32f4xx_hal_dcmi_ex.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\stm32f4xx_hal_dcmi_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\stm32f4xx_hal_dcmi_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dcmi_ex.c]
                          THUMB

                          AREA ||i.HAL_DCMI_Init||, CODE, READONLY, ALIGN=1

                  HAL_DCMI_Init PROC
;;;78       */
;;;79     HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
000000  b510              PUSH     {r4,lr}
;;;80     {
000002  4604              MOV      r4,r0
;;;81       /* Check the DCMI peripheral state */
;;;82       if(hdcmi == NULL)
000004  b90c              CBNZ     r4,|L1.10|
;;;83       {
;;;84          return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L1.8|
;;;85       }
;;;86     
;;;87       /* Check function parameters */
;;;88       assert_param(IS_DCMI_ALL_INSTANCE(hdcmi->Instance));
;;;89       assert_param(IS_DCMI_PCKPOLARITY(hdcmi->Init.PCKPolarity));
;;;90       assert_param(IS_DCMI_VSPOLARITY(hdcmi->Init.VSPolarity));
;;;91       assert_param(IS_DCMI_HSPOLARITY(hdcmi->Init.HSPolarity));
;;;92       assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
;;;93       assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
;;;94       assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
;;;95       assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));
;;;96     #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;97       assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
;;;98       assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
;;;99       assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
;;;100      assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
;;;101    #endif /* STM32F446xx || STM32F469xx || STM32F479xx */
;;;102      if(hdcmi->State == HAL_DCMI_STATE_RESET)
;;;103      {
;;;104        /* Allocate lock resource and initialize it */
;;;105        hdcmi->Lock = HAL_UNLOCKED;
;;;106        /* Init the low level hardware */
;;;107      /* Init the DCMI Callback settings */
;;;108    #if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
;;;109        hdcmi->FrameEventCallback = HAL_DCMI_FrameEventCallback; /* Legacy weak FrameEventCallback  */
;;;110        hdcmi->VsyncEventCallback = HAL_DCMI_VsyncEventCallback; /* Legacy weak VsyncEventCallback  */
;;;111        hdcmi->LineEventCallback  = HAL_DCMI_LineEventCallback;  /* Legacy weak LineEventCallback   */
;;;112        hdcmi->ErrorCallback      = HAL_DCMI_ErrorCallback;      /* Legacy weak ErrorCallback       */
;;;113    
;;;114        if(hdcmi->MspInitCallback == NULL)
;;;115        {
;;;116          /* Legacy weak MspInit Callback        */
;;;117          hdcmi->MspInitCallback = HAL_DCMI_MspInit;
;;;118        }
;;;119        /* Initialize the low level hardware (MSP) */
;;;120        hdcmi->MspInitCallback(hdcmi);
;;;121    #else
;;;122        /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
;;;123        HAL_DCMI_MspInit(hdcmi);
;;;124    #endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
;;;125        HAL_DCMI_MspInit(hdcmi);
;;;126      }
;;;127    
;;;128      /* Change the DCMI state */
;;;129      hdcmi->State = HAL_DCMI_STATE_BUSY;
;;;130                              /* Configures the HS, VS, DE and PC polarity */
;;;131      hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
;;;132                               DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
;;;133                               DCMI_CR_ESS
;;;134    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;135                               | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
;;;136                               DCMI_CR_LSM | DCMI_CR_OELS
;;;137    #endif /* STM32F446xx || STM32F469xx || STM32F479xx */
;;;138                               );
;;;139      hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
;;;140                                         hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
;;;141                                         hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
;;;142                                         hdcmi->Init.JPEGMode
;;;143    #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;144                                         | hdcmi->Init.ByteSelectMode |\
;;;145                                         hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
;;;146                                         hdcmi->Init.LineSelectStart
;;;147    #endif /* STM32F446xx || STM32F469xx || STM32F479xx */
;;;148                                         );
;;;149      if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
;;;150      {
;;;151        hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
;;;152                                 ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
;;;153                                 ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
;;;154                                 ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
;;;155    
;;;156      }
;;;157    
;;;158      /* Enable the Line, Vsync, Error and Overrun interrupts */
;;;159      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
;;;160    
;;;161      /* Update error code */
;;;162      hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
;;;163    
;;;164      /* Initialize the DCMI state*/
;;;165      hdcmi->State  = HAL_DCMI_STATE_READY;
;;;166    
;;;167      return HAL_OK;
;;;168    }
000008  bd10              POP      {r4,pc}
                  |L1.10|
00000a  f8940025          LDRB     r0,[r4,#0x25]         ;102
00000e  b940              CBNZ     r0,|L1.34|
000010  2000              MOVS     r0,#0                 ;105
000012  f8840024          STRB     r0,[r4,#0x24]         ;105
000016  4620              MOV      r0,r4                 ;123
000018  f7fffffe          BL       HAL_DCMI_MspInit
00001c  4620              MOV      r0,r4                 ;125
00001e  f7fffffe          BL       HAL_DCMI_MspInit
                  |L1.34|
000022  2002              MOVS     r0,#2                 ;129
000024  f8840025          STRB     r0,[r4,#0x25]         ;129
000028  6820              LDR      r0,[r4,#0]            ;131
00002a  6800              LDR      r0,[r0,#0]            ;131
00002c  f64071f8          MOV      r1,#0xff8             ;131
000030  4388              BICS     r0,r0,r1              ;131
000032  6821              LDR      r1,[r4,#0]            ;131
000034  6008              STR      r0,[r1,#0]            ;131
000036  6961              LDR      r1,[r4,#0x14]         ;139
000038  6860              LDR      r0,[r4,#4]            ;139
00003a  4308              ORRS     r0,r0,r1              ;139
00003c  68e1              LDR      r1,[r4,#0xc]          ;139
00003e  4308              ORRS     r0,r0,r1              ;139
000040  6921              LDR      r1,[r4,#0x10]         ;139
000042  4308              ORRS     r0,r0,r1              ;139
000044  68a1              LDR      r1,[r4,#8]            ;139
000046  4308              ORRS     r0,r0,r1              ;139
000048  69a1              LDR      r1,[r4,#0x18]         ;139
00004a  4308              ORRS     r0,r0,r1              ;139
00004c  6a21              LDR      r1,[r4,#0x20]         ;139
00004e  4308              ORRS     r0,r0,r1              ;139
000050  6821              LDR      r1,[r4,#0]            ;139
000052  6809              LDR      r1,[r1,#0]            ;139
000054  4308              ORRS     r0,r0,r1              ;139
000056  6821              LDR      r1,[r4,#0]            ;139
000058  6008              STR      r0,[r1,#0]            ;139
00005a  6860              LDR      r0,[r4,#4]            ;149
00005c  2810              CMP      r0,#0x10              ;149
00005e  d10b              BNE      |L1.120|
000060  7f21              LDRB     r1,[r4,#0x1c]         ;151
000062  7f60              LDRB     r0,[r4,#0x1d]         ;151
000064  ea412100          ORR      r1,r1,r0,LSL #8       ;151
000068  7fa0              LDRB     r0,[r4,#0x1e]         ;151
00006a  ea414100          ORR      r1,r1,r0,LSL #16      ;151
00006e  7fe0              LDRB     r0,[r4,#0x1f]         ;151
000070  ea416000          ORR      r0,r1,r0,LSL #24      ;151
000074  6821              LDR      r1,[r4,#0]            ;151
000076  6188              STR      r0,[r1,#0x18]         ;151
                  |L1.120|
000078  6820              LDR      r0,[r4,#0]            ;159
00007a  68c0              LDR      r0,[r0,#0xc]          ;159
00007c  f040001e          ORR      r0,r0,#0x1e           ;159
000080  6821              LDR      r1,[r4,#0]            ;159
000082  60c8              STR      r0,[r1,#0xc]          ;159
000084  2000              MOVS     r0,#0                 ;162
000086  63e0              STR      r0,[r4,#0x3c]         ;162
000088  2001              MOVS     r0,#1                 ;165
00008a  f8840025          STRB     r0,[r4,#0x25]         ;165
00008e  2000              MOVS     r0,#0                 ;167
000090  e7ba              B        |L1.8|
;;;169    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dcmi_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___23_stm32f4xx_hal_dcmi_ex_c_03d7bd62____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___23_stm32f4xx_hal_dcmi_ex_c_03d7bd62____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___23_stm32f4xx_hal_dcmi_ex_c_03d7bd62____REVSH|
#line 478
|__asm___23_stm32f4xx_hal_dcmi_ex_c_03d7bd62____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___23_stm32f4xx_hal_dcmi_ex_c_03d7bd62____RRX|
#line 665
|__asm___23_stm32f4xx_hal_dcmi_ex_c_03d7bd62____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
