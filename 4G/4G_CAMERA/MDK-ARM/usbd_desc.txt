; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\usbd_desc.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\usbd_desc.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\usbd_desc.crf ../USB_DEVICE/App/usbd_desc.c]
                          THUMB

                          AREA ||i.Get_SerialNum||, CODE, READONLY, ALIGN=2

                  Get_SerialNum PROC
;;;389      */
;;;390    static void Get_SerialNum(void)
000000  b570              PUSH     {r4-r6,lr}
;;;391    {
;;;392      uint32_t deviceserial0;
;;;393      uint32_t deviceserial1;
;;;394      uint32_t deviceserial2;
;;;395    
;;;396      deviceserial0 = *(uint32_t *) DEVICE_ID1;
000002  480a              LDR      r0,|L1.44|
000004  6804              LDR      r4,[r0,#0]
;;;397      deviceserial1 = *(uint32_t *) DEVICE_ID2;
000006  1d00              ADDS     r0,r0,#4
000008  6805              LDR      r5,[r0,#0]
;;;398      deviceserial2 = *(uint32_t *) DEVICE_ID3;
00000a  1d00              ADDS     r0,r0,#4
00000c  6806              LDR      r6,[r0,#0]
;;;399    
;;;400      deviceserial0 += deviceserial2;
00000e  4434              ADD      r4,r4,r6
;;;401    
;;;402      if (deviceserial0 != 0)
000010  b154              CBZ      r4,|L1.40|
;;;403      {
;;;404        IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
000012  2208              MOVS     r2,#8
000014  4906              LDR      r1,|L1.48|
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       IntToUnicode
;;;405        IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
00001c  2204              MOVS     r2,#4
00001e  4904              LDR      r1,|L1.48|
000020  3110              ADDS     r1,r1,#0x10
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       IntToUnicode
                  |L1.40|
;;;406      }
;;;407    }
000028  bd70              POP      {r4-r6,pc}
;;;408    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x1fff7a10
                  |L1.48|
                          DCD      USBD_StringSerial+0x2

                          AREA ||i.IntToUnicode||, CODE, READONLY, ALIGN=1

                  IntToUnicode PROC
;;;415      */
;;;416    static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
000000  b530              PUSH     {r4,r5,lr}
;;;417    {
000002  460b              MOV      r3,r1
;;;418      uint8_t idx = 0;
000004  2100              MOVS     r1,#0
;;;419    
;;;420      for (idx = 0; idx < len; idx++)
000006  bf00              NOP      
000008  e016              B        |L2.56|
                  |L2.10|
;;;421      {
;;;422        if (((value >> 28)) < 0xA)
00000a  240a              MOVS     r4,#0xa
00000c  ebb47f10          CMP      r4,r0,LSR #28
000010  d905              BLS      |L2.30|
;;;423        {
;;;424          pbuf[2 * idx] = (value >> 28) + '0';
000012  2430              MOVS     r4,#0x30
000014  eb047410          ADD      r4,r4,r0,LSR #28
000018  f8034011          STRB     r4,[r3,r1,LSL #1]
00001c  e005              B        |L2.42|
                  |L2.30|
;;;425        }
;;;426        else
;;;427        {
;;;428          pbuf[2 * idx] = (value >> 28) + 'A' - 10;
00001e  2441              MOVS     r4,#0x41
000020  eb047410          ADD      r4,r4,r0,LSR #28
000024  3c0a              SUBS     r4,r4,#0xa
000026  f8034011          STRB     r4,[r3,r1,LSL #1]
                  |L2.42|
;;;429        }
;;;430    
;;;431        value = value << 4;
00002a  0100              LSLS     r0,r0,#4
;;;432    
;;;433        pbuf[2 * idx + 1] = 0;
00002c  2500              MOVS     r5,#0
00002e  004c              LSLS     r4,r1,#1
000030  1c64              ADDS     r4,r4,#1
000032  551d              STRB     r5,[r3,r4]
000034  1c4c              ADDS     r4,r1,#1              ;420
000036  b2e1              UXTB     r1,r4                 ;420
                  |L2.56|
000038  4291              CMP      r1,r2                 ;420
00003a  dbe6              BLT      |L2.10|
;;;434      }
;;;435    }
00003c  bd30              POP      {r4,r5,pc}
;;;436    /**
                          ENDP


                          AREA ||i.USBD_HS_ConfigStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_HS_ConfigStrDescriptor PROC
;;;337      */
;;;338    uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
000000  b570              PUSH     {r4-r6,lr}
;;;339    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;340      if(speed == USBD_SPEED_HIGH)
000006  b92d              CBNZ     r5,|L3.20|
;;;341      {
;;;342        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
000008  4622              MOV      r2,r4
00000a  4906              LDR      r1,|L3.36|
00000c  a006              ADR      r0,|L3.40|
00000e  f7fffffe          BL       USBD_GetString
000012  e004              B        |L3.30|
                  |L3.20|
;;;343      }
;;;344      else
;;;345      {
;;;346        USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
000014  4622              MOV      r2,r4
000016  4903              LDR      r1,|L3.36|
000018  a003              ADR      r0,|L3.40|
00001a  f7fffffe          BL       USBD_GetString
                  |L3.30|
;;;347      }
;;;348      return USBD_StrDesc;
00001e  4801              LDR      r0,|L3.36|
;;;349    }
000020  bd70              POP      {r4-r6,pc}
;;;350    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      USBD_StrDesc
                  |L3.40|
000028  43444320          DCB      "CDC Config",0
00002c  436f6e66
000030  696700  
000033  00                DCB      0

                          AREA ||i.USBD_HS_DeviceDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_HS_DeviceDescriptor PROC
;;;258      */
;;;259    uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
000000  4602              MOV      r2,r0
;;;260    {
;;;261      UNUSED(speed);
;;;262      *length = sizeof(USBD_HS_DeviceDesc);
000002  2012              MOVS     r0,#0x12
000004  8008              STRH     r0,[r1,#0]
;;;263      return USBD_HS_DeviceDesc;
000006  4801              LDR      r0,|L4.12|
;;;264    }
000008  4770              BX       lr
;;;265    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      USBD_HS_DeviceDesc

                          AREA ||i.USBD_HS_InterfaceStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_HS_InterfaceStrDescriptor PROC
;;;356      */
;;;357    uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
000000  b570              PUSH     {r4-r6,lr}
;;;358    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;359      if(speed == 0)
000006  b92d              CBNZ     r5,|L5.20|
;;;360      {
;;;361        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
000008  4622              MOV      r2,r4
00000a  4906              LDR      r1,|L5.36|
00000c  a006              ADR      r0,|L5.40|
00000e  f7fffffe          BL       USBD_GetString
000012  e004              B        |L5.30|
                  |L5.20|
;;;362      }
;;;363      else
;;;364      {
;;;365        USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
000014  4622              MOV      r2,r4
000016  4903              LDR      r1,|L5.36|
000018  a003              ADR      r0,|L5.40|
00001a  f7fffffe          BL       USBD_GetString
                  |L5.30|
;;;366      }
;;;367      return USBD_StrDesc;
00001e  4801              LDR      r0,|L5.36|
;;;368    }
000020  bd70              POP      {r4-r6,pc}
;;;369    
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      USBD_StrDesc
                  |L5.40|
000028  43444320          DCB      "CDC Interface",0
00002c  496e7465
000030  72666163
000034  6500    
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.USBD_HS_LangIDStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_HS_LangIDStrDescriptor PROC
;;;271      */
;;;272    uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
000000  4602              MOV      r2,r0
;;;273    {
;;;274      UNUSED(speed);
;;;275      *length = sizeof(USBD_LangIDDesc);
000002  2004              MOVS     r0,#4
000004  8008              STRH     r0,[r1,#0]
;;;276      return USBD_LangIDDesc;
000006  4801              LDR      r0,|L6.12|
;;;277    }
000008  4770              BX       lr
;;;278    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      USBD_LangIDDesc

                          AREA ||i.USBD_HS_ManufacturerStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_HS_ManufacturerStrDescriptor PROC
;;;303      */
;;;304    uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
000000  b570              PUSH     {r4-r6,lr}
;;;305    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;306      UNUSED(speed);
;;;307      USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
000006  4622              MOV      r2,r4
000008  4902              LDR      r1,|L7.20|
00000a  a003              ADR      r0,|L7.24|
00000c  f7fffffe          BL       USBD_GetString
;;;308      return USBD_StrDesc;
000010  4800              LDR      r0,|L7.20|
;;;309    }
000012  bd70              POP      {r4-r6,pc}
;;;310    
                          ENDP

                  |L7.20|
                          DCD      USBD_StrDesc
                  |L7.24|
000018  53544d69          DCB      "STMicroelectronics",0
00001c  63726f65
000020  6c656374
000024  726f6e69
000028  637300  
00002b  00                DCB      0

                          AREA ||i.USBD_HS_ProductStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_HS_ProductStrDescriptor PROC
;;;284      */
;;;285    uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
000000  b570              PUSH     {r4-r6,lr}
;;;286    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;287      if(speed == 0)
000006  b92d              CBNZ     r5,|L8.20|
;;;288      {
;;;289        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
000008  4622              MOV      r2,r4
00000a  4906              LDR      r1,|L8.36|
00000c  a006              ADR      r0,|L8.40|
00000e  f7fffffe          BL       USBD_GetString
000012  e004              B        |L8.30|
                  |L8.20|
;;;290      }
;;;291      else
;;;292      {
;;;293        USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
000014  4622              MOV      r2,r4
000016  4903              LDR      r1,|L8.36|
000018  a003              ADR      r0,|L8.40|
00001a  f7fffffe          BL       USBD_GetString
                  |L8.30|
;;;294      }
;;;295      return USBD_StrDesc;
00001e  4801              LDR      r0,|L8.36|
;;;296    }
000020  bd70              POP      {r4-r6,pc}
;;;297    
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      USBD_StrDesc
                  |L8.40|
000028  53544d33          DCB      "STM32 Virtual ComPort",0
00002c  32205669
000030  72747561
000034  6c20436f
000038  6d506f72
00003c  7400    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.USBD_HS_SerialStrDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_HS_SerialStrDescriptor PROC
;;;316      */
;;;317    uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
000000  b570              PUSH     {r4-r6,lr}
;;;318    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;319      UNUSED(speed);
;;;320      *length = USB_SIZ_STRING_SERIAL;
000006  201a              MOVS     r0,#0x1a
000008  8020              STRH     r0,[r4,#0]
;;;321    
;;;322      /* Update the serial number string descriptor with the data from the unique
;;;323       * ID */
;;;324      Get_SerialNum();
00000a  f7fffffe          BL       Get_SerialNum
;;;325      /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */
;;;326    
;;;327      /* USER CODE END USBD_HS_SerialStrDescriptor */
;;;328    
;;;329      return (uint8_t *) USBD_StringSerial;
00000e  4801              LDR      r0,|L9.20|
;;;330    }
000010  bd70              POP      {r4-r6,pc}
;;;331    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      USBD_StringSerial

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  USBD_StrDesc
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  HS_Desc
                          DCD      USBD_HS_DeviceDescriptor
                          DCD      USBD_HS_LangIDStrDescriptor
                          DCD      USBD_HS_ManufacturerStrDescriptor
                          DCD      USBD_HS_ProductStrDescriptor
                          DCD      USBD_HS_SerialStrDescriptor
                          DCD      USBD_HS_ConfigStrDescriptor
                          DCD      USBD_HS_InterfaceStrDescriptor
                  USBD_HS_DeviceDesc
00001c  12010002          DCB      0x12,0x01,0x00,0x02
000020  02020040          DCB      0x02,0x02,0x00,0x40
000024  83044057          DCB      0x83,0x04,0x40,0x57
000028  00020102          DCB      0x00,0x02,0x01,0x02
00002c  03010000          DCB      0x03,0x01,0x00,0x00
                  USBD_LangIDDesc
000030  04030904          DCB      0x04,0x03,0x09,0x04
                  USBD_StringSerial
000034  1a030000          DCB      0x1a,0x03,0x00,0x00
                          %        20
00004c  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "../USB_DEVICE/App/usbd_desc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_desc_c_HS_Desc____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___11_usbd_desc_c_HS_Desc____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_desc_c_HS_Desc____REVSH|
#line 478
|__asm___11_usbd_desc_c_HS_Desc____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_usbd_desc_c_HS_Desc____RRX|
#line 665
|__asm___11_usbd_desc_c_HS_Desc____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
