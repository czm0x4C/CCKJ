; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o4gcamera\flash.o --asm_dir=.\ --list_dir=.\ --depend=4gcamera\flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../USB_DEVICE/App -I../USB_DEVICE/Target -I../Core/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I../Middlewares/ST/STM32_USB_Device_Library/Core/Inc -I../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Middlewares/Third_Party/FreeRTOS/Source/include -I../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2 -I../Middlewares/Third_Party/FreeRTOS/Source/portable/RVDS/ARM_CM4F -I../HARDWARE/OV2640 -I../HARDWARE/WS2812B -I../HARDWARE/RING_BUFFER -I../HARDWARE/FLASH -I.\RTE\_4GCAMERA -IC:\Users\czm\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\czm\AppData\Local\Arm\Packs\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=536 -D_RTE_ -DSTM32F407xx -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F407xx --omf_browse=4gcamera\flash.crf ..\HARDWARE\FLASH\flash.c]
                          THUMB

                          AREA ||i.STMFLASH_GetFlashSector||, CODE, READONLY, ALIGN=2

                  STMFLASH_GetFlashSector PROC
;;;14     //返回值:0~11,即addr所在的扇区
;;;15     uint8_t STMFLASH_GetFlashSector(uint32_t addr)
000000  4601              MOV      r1,r0
;;;16     {
;;;17         if(addr<ADDR_FLASH_SECTOR_1)return FLASH_SECTOR_0;
000002  481c              LDR      r0,|L1.116|
000004  4281              CMP      r1,r0
000006  d201              BCS      |L1.12|
000008  2000              MOVS     r0,#0
                  |L1.10|
;;;18         else if(addr<ADDR_FLASH_SECTOR_2)return FLASH_SECTOR_1;
;;;19         else if(addr<ADDR_FLASH_SECTOR_3)return FLASH_SECTOR_2;
;;;20         else if(addr<ADDR_FLASH_SECTOR_4)return FLASH_SECTOR_3;
;;;21         else if(addr<ADDR_FLASH_SECTOR_5)return FLASH_SECTOR_4;
;;;22         else if(addr<ADDR_FLASH_SECTOR_6)return FLASH_SECTOR_5;
;;;23         else if(addr<ADDR_FLASH_SECTOR_7)return FLASH_SECTOR_6;
;;;24         else if(addr<ADDR_FLASH_SECTOR_8)return FLASH_SECTOR_7;
;;;25         else if(addr<ADDR_FLASH_SECTOR_9)return FLASH_SECTOR_8;
;;;26         else if(addr<ADDR_FLASH_SECTOR_10)return FLASH_SECTOR_9;
;;;27         else if(addr<ADDR_FLASH_SECTOR_11)return FLASH_SECTOR_10;   
;;;28         return FLASH_SECTOR_11;	
;;;29     }
00000a  4770              BX       lr
                  |L1.12|
00000c  481a              LDR      r0,|L1.120|
00000e  4281              CMP      r1,r0                 ;18
000010  d201              BCS      |L1.22|
000012  2001              MOVS     r0,#1                 ;18
000014  e7f9              B        |L1.10|
                  |L1.22|
000016  4819              LDR      r0,|L1.124|
000018  4281              CMP      r1,r0                 ;19
00001a  d201              BCS      |L1.32|
00001c  2002              MOVS     r0,#2                 ;19
00001e  e7f4              B        |L1.10|
                  |L1.32|
000020  4817              LDR      r0,|L1.128|
000022  4281              CMP      r1,r0                 ;20
000024  d201              BCS      |L1.42|
000026  2003              MOVS     r0,#3                 ;20
000028  e7ef              B        |L1.10|
                  |L1.42|
00002a  4816              LDR      r0,|L1.132|
00002c  4281              CMP      r1,r0                 ;21
00002e  d201              BCS      |L1.52|
000030  2004              MOVS     r0,#4                 ;21
000032  e7ea              B        |L1.10|
                  |L1.52|
000034  4814              LDR      r0,|L1.136|
000036  4281              CMP      r1,r0                 ;22
000038  d201              BCS      |L1.62|
00003a  2005              MOVS     r0,#5                 ;22
00003c  e7e5              B        |L1.10|
                  |L1.62|
00003e  4813              LDR      r0,|L1.140|
000040  4281              CMP      r1,r0                 ;23
000042  d201              BCS      |L1.72|
000044  2006              MOVS     r0,#6                 ;23
000046  e7e0              B        |L1.10|
                  |L1.72|
000048  4811              LDR      r0,|L1.144|
00004a  4281              CMP      r1,r0                 ;24
00004c  d201              BCS      |L1.82|
00004e  2007              MOVS     r0,#7                 ;24
000050  e7db              B        |L1.10|
                  |L1.82|
000052  4810              LDR      r0,|L1.148|
000054  4281              CMP      r1,r0                 ;25
000056  d201              BCS      |L1.92|
000058  2008              MOVS     r0,#8                 ;25
00005a  e7d6              B        |L1.10|
                  |L1.92|
00005c  480e              LDR      r0,|L1.152|
00005e  4281              CMP      r1,r0                 ;26
000060  d201              BCS      |L1.102|
000062  2009              MOVS     r0,#9                 ;26
000064  e7d1              B        |L1.10|
                  |L1.102|
000066  480d              LDR      r0,|L1.156|
000068  4281              CMP      r1,r0                 ;27
00006a  d201              BCS      |L1.112|
00006c  200a              MOVS     r0,#0xa               ;27
00006e  e7cc              B        |L1.10|
                  |L1.112|
000070  200b              MOVS     r0,#0xb               ;28
000072  e7ca              B        |L1.10|
;;;30     
                          ENDP

                  |L1.116|
                          DCD      0x08004000
                  |L1.120|
                          DCD      0x08008000
                  |L1.124|
                          DCD      0x0800c000
                  |L1.128|
                          DCD      0x08010000
                  |L1.132|
                          DCD      0x08020000
                  |L1.136|
                          DCD      0x08040000
                  |L1.140|
                          DCD      0x08060000
                  |L1.144|
                          DCD      0x08080000
                  |L1.148|
                          DCD      0x080a0000
                  |L1.152|
                          DCD      0x080c0000
                  |L1.156|
                          DCD      0x080e0000

                          AREA ||i.STMFLASH_ReadWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadWord PROC
;;;6      //返回值:对应数据.
;;;7      static uint32_t STMFLASH_ReadWord(uint32_t faddr)
000000  4601              MOV      r1,r0
;;;8      {
;;;9          return *(uint32_t*)faddr; 
000002  6808              LDR      r0,[r1,#0]
;;;10     }
000004  4770              BX       lr
;;;11     
                          ENDP


                          AREA ||i.WriteFlashData||, CODE, READONLY, ALIGN=2

                  WriteFlashData PROC
;;;36      */
;;;37     void WriteFlashData(uint32_t WriteAddress, uint8_t *data, uint32_t length)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;38     {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460f              MOV      r7,r1
00000a  4615              MOV      r5,r2
;;;39         FLASH_EraseInitTypeDef FlashEraseInit;
;;;40         HAL_StatusTypeDef FlashStatus=HAL_OK;
00000c  f04f0900          MOV      r9,#0
;;;41         uint32_t SectorError=0;
000010  2000              MOVS     r0,#0
000012  9001              STR      r0,[sp,#4]
;;;42         uint32_t addrx=0;
000014  2600              MOVS     r6,#0
;;;43         uint32_t endaddr=0;
000016  4680              MOV      r8,r0
;;;44         
;;;45         if( (WriteAddress < FMC_FLASH_BASE) || ( WriteAddress + length >= FMC_FLASH_END) || (length <= 0) )
000018  f1b46f00          CMP      r4,#0x8000000
00001c  d304              BCC      |L3.40|
00001e  1960              ADDS     r0,r4,r5
000020  4922              LDR      r1,|L3.172|
000022  4288              CMP      r0,r1
000024  d200              BCS      |L3.40|
000026  b915              CBNZ     r5,|L3.46|
                  |L3.40|
;;;46         return;
;;;47     
;;;48         HAL_FLASH_Unlock();              //解锁
;;;49         addrx = WriteAddress;            //写入的起始地址
;;;50         endaddr = WriteAddress+length;   //写入的结束地址
;;;51     
;;;52     
;;;53             while(addrx<endaddr)  //扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
;;;54             {
;;;55                  if(STMFLASH_ReadWord(addrx)!=0XFFFFFFFF)//有非0XFFFFFFFF的地方,要擦除这个扇区
;;;56                 {   
;;;57                     FlashEraseInit.TypeErase=FLASH_TYPEERASE_SECTORS;       //擦除类型，扇区擦除 
;;;58                     FlashEraseInit.Sector=STMFLASH_GetFlashSector(addrx);   //要擦除的扇区
;;;59                     FlashEraseInit.NbSectors=1;                             //一次只擦除一个扇区
;;;60                     FlashEraseInit.VoltageRange=FLASH_VOLTAGE_RANGE_3;      //电压范围，VCC=2.7~3.6V之间!!
;;;61                     if(HAL_FLASHEx_Erase(&FlashEraseInit,&SectorError)!=HAL_OK) 
;;;62                     {
;;;63                         break;//发生错误了
;;;64                     }
;;;65                     }else addrx+=1;
;;;66                     FLASH_WaitForLastOperation(FLASH_WAITETIME);                //等待上次操作完成
;;;67             }
;;;68         
;;;69         FlashStatus=FLASH_WaitForLastOperation(FLASH_WAITETIME);            //等待上次操作完成
;;;70         if(FlashStatus==HAL_OK)
;;;71         {
;;;72              while(WriteAddress<endaddr)//写数据
;;;73              {
;;;74                 if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,WriteAddress,*data)!=HAL_OK)//写入数据
;;;75                 { 
;;;76                     break;	//写入异常
;;;77                 }
;;;78                 WriteAddress+=1;
;;;79                 data++;
;;;80             }  
;;;81         }
;;;82         HAL_FLASH_Lock();           //上锁
;;;83     }
000028  b007              ADD      sp,sp,#0x1c
00002a  e8bd83f0          POP      {r4-r9,pc}
                  |L3.46|
00002e  f7fffffe          BL       HAL_FLASH_Unlock
000032  4626              MOV      r6,r4                 ;49
000034  eb040805          ADD      r8,r4,r5              ;50
000038  e019              B        |L3.110|
                  |L3.58|
00003a  4630              MOV      r0,r6                 ;55
00003c  f7fffffe          BL       STMFLASH_ReadWord
000040  1c40              ADDS     r0,r0,#1              ;55
000042  b178              CBZ      r0,|L3.100|
000044  2000              MOVS     r0,#0                 ;57
000046  9002              STR      r0,[sp,#8]            ;57
000048  4630              MOV      r0,r6                 ;58
00004a  f7fffffe          BL       STMFLASH_GetFlashSector
00004e  9004              STR      r0,[sp,#0x10]         ;58
000050  2001              MOVS     r0,#1                 ;59
000052  9005              STR      r0,[sp,#0x14]         ;59
000054  2002              MOVS     r0,#2                 ;60
000056  9006              STR      r0,[sp,#0x18]         ;60
000058  a901              ADD      r1,sp,#4              ;61
00005a  a802              ADD      r0,sp,#8              ;61
00005c  f7fffffe          BL       HAL_FLASHEx_Erase
000060  b108              CBZ      r0,|L3.102|
000062  e006              B        |L3.114|
                  |L3.100|
000064  1c76              ADDS     r6,r6,#1              ;65
                  |L3.102|
000066  f24c3050          MOV      r0,#0xc350            ;66
00006a  f7fffffe          BL       FLASH_WaitForLastOperation
                  |L3.110|
00006e  4546              CMP      r6,r8                 ;53
000070  d3e3              BCC      |L3.58|
                  |L3.114|
000072  bf00              NOP                            ;63
000074  f24c3050          MOV      r0,#0xc350            ;69
000078  f7fffffe          BL       FLASH_WaitForLastOperation
00007c  4681              MOV      r9,r0                 ;69
00007e  f1b90f00          CMP      r9,#0                 ;70
000082  d10f              BNE      |L3.164|
000084  e00b              B        |L3.158|
                  |L3.134|
000086  f897c000          LDRB     r12,[r7,#0]           ;74
00008a  4662              MOV      r2,r12                ;74
00008c  2300              MOVS     r3,#0                 ;74
00008e  4621              MOV      r1,r4                 ;74
000090  4618              MOV      r0,r3                 ;74
000092  f7fffffe          BL       HAL_FLASH_Program
000096  b100              CBZ      r0,|L3.154|
000098  e003              B        |L3.162|
                  |L3.154|
00009a  1c64              ADDS     r4,r4,#1              ;78
00009c  1c7f              ADDS     r7,r7,#1              ;79
                  |L3.158|
00009e  4544              CMP      r4,r8                 ;72
0000a0  d3f1              BCC      |L3.134|
                  |L3.162|
0000a2  bf00              NOP                            ;76
                  |L3.164|
0000a4  f7fffffe          BL       HAL_FLASH_Lock
0000a8  bf00              NOP      
0000aa  e7bd              B        |L3.40|
;;;84     
                          ENDP

                  |L3.172|
                          DCD      0x08080000

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\FLASH\\flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_7d7090f5____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___7_flash_c_7d7090f5____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_7d7090f5____REVSH|
#line 478
|__asm___7_flash_c_7d7090f5____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_flash_c_7d7090f5____RRX|
#line 665
|__asm___7_flash_c_7d7090f5____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
